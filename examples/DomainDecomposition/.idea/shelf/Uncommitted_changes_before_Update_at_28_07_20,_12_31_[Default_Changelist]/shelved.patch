Index: ../Rates2D/L2_rates_nonreg_NEW.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- ../Rates2D/L2_rates_nonreg_NEW.py	(date 1586848703718)
+++ ../Rates2D/L2_rates_nonreg_NEW.py	(date 1586848703718)
@@ -0,0 +1,195 @@
+# -*- coding: utf-8 -*-
+"""
+Created on Mar 25 2020
+@author: vollmann
+"""
+
+import numpy as np
+import bib3 as bib
+import scipy.optimize as optimization
+import conf, conf2
+import MESH_nonreg
+import xlwt
+from pathos.multiprocessing import ProcessingPool as Pool
+
+
+def main():
+
+    ##=================================#
+    #  LOAD AND EXTEND FEM SOLUTIONS   #
+    ##=================================#
+    # Load the solutions + extend them by the (sharp local) boundary data
+    U = []
+    gridsizes = np.zeros((conf2.num_grids, 2))
+    for k in range(conf2.num_grids):
+        output_u = conf2.folder + 'u_' + str(k)
+        u = np.load(output_u + '.npy')
+        print("dofs = ", len(u))
+        output_mesh_data = conf2.folder + 'mesh_data_' + str(k) + '.npy'
+        mesh = MESH_nonreg.Mesh(np.load(output_mesh_data, allow_pickle=True))
+        nodes_inner = list(range(len(mesh.nodes) - len(mesh.boundary)))
+        nodes_rest = list(range(len(nodes_inner), len(mesh.verts)))
+        u_all = np.concatenate((u, list(map(conf2.g_d, mesh.verts[nodes_rest]))))
+        U += [[u_all, mesh]]
+        gridsizes[k,:] = np.array([np.min(mesh.diam), np.max(mesh.diam)])
+
+
+    ##=================#
+    #  COMPUTE RATES   #
+    ##=================#
+    P = np.array([[0.33333333, 0.33333333],
+                  [0.45929259, 0.45929259],
+                  [0.45929259, 0.08141482],
+                  [0.08141482, 0.45929259],
+                  [0.17056931, 0.17056931],
+                  [0.17056931, 0.65886138],
+                  [0.65886138, 0.17056931],
+                  [0.05054723, 0.05054723],
+                  [0.05054723, 0.89890554],
+                  [0.89890554, 0.05054723],
+                  [0.26311283, 0.72849239],
+                  [0.72849239, 0.00839478],
+                  [0.00839478, 0.26311283],
+                  [0.72849239, 0.26311283],
+                  [0.26311283, 0.00839478],
+                  [0.00839478, 0.72849239]]).transpose()
+    weights = 0.5 * np.array([0.14431560767779
+                           , 0.09509163426728
+                           , 0.09509163426728
+                           , 0.09509163426728
+                           , 0.10321737053472
+                           , 0.10321737053472
+                           , 0.10321737053472
+                           , 0.03245849762320
+                           , 0.03245849762320
+                           , 0.03245849762320
+                           , 0.02723031417443
+                           , 0.02723031417443
+                           , 0.02723031417443
+                           , 0.02723031417443
+                           , 0.02723031417443
+                           , 0.02723031417443])
+
+
+    n = len(weights)
+    def BASIS(v):
+        return np.array([ 1. - v[0] - v[1], v[0], v[1]])
+
+    PSI = BASIS(P)
+
+    def error(u, mesh):
+        liste = range(len(mesh.omega))
+        pieces = np.array_split(liste, conf2.num_cores)
+        def aux(m):
+            err = 0
+            for i in pieces[m].tolist():
+                T_i = mesh.omega[i,1:].tolist()
+                T_i_v = np.array([mesh.verts[T_i[0]], mesh.verts[T_i[1]], mesh.verts[T_i[2]]])
+                Mat_i = np.array([T_i_v[1] - T_i_v[0], T_i_v[2] - T_i_v[0]]).transpose()
+                det_T_i = abs(Mat_i[0, 0] * Mat_i[1, 1] - Mat_i[1, 0] * Mat_i[0, 1])
+                def Phi_i(y):
+                    return np.repeat(T_i_v[0][:,np.newaxis], n, axis=1) +  Mat_i.dot(y)
+
+                U_h = u[T_i] # points on the triangle vertices
+                U_h_P = U_h[0]*PSI[0] + U_h[1]*PSI[1] + U_h[2]*PSI[2] # the FEM Solution evaluated on the physical quad-points
+                U_ex = conf2.u_exact(Phi_i(P)) # the exact solution evaluated on the physical quad-points
+                err += det_T_i * ((U_h_P - U_ex)**2 * weights).sum() # the contribution to the error from element T_i
+            return err
+
+        p = Pool(conf2.num_cores)
+        err_piece = p.map(aux, range(conf2.num_cores))
+        p.close()
+        p.join()
+        p.clear()
+
+        err = 0
+        for i in range(conf2.num_cores):
+            err += err_piece[i]
+        return np.sqrt(err)
+
+    error_l2 = np.zeros(len(U))
+    for i in range(len(U)):
+        error_l2[i] = error(U[i][0], U[i][1])
+
+
+    print()
+    print()
+    print('L2 ERROR')
+    for a in error_l2:
+        print(np.around(a, decimals = 4))
+
+    print('\nRATES')
+    rates_l2 = [0]
+    for i in range(len(error_l2) - 1):
+        rates_l2 += [np.log(error_l2[i] / error_l2[i + 1]) / np.log(2)]
+        print(np.around(np.log(error_l2[i] / error_l2[i + 1]) / np.log(2), decimals = 2))
+    rates_l2 = np.array(rates_l2)
+
+    leftout = 0
+    xdata = np.log(np.array([2 ** i for i in range(len(
+        U) - leftout)]))  # np.array([0.6 * 2**-(i+1) for i in range(9)])# np.log(np.array([1./(0.2 * 2**-(i)) for i in range(9)]))
+    ydata = np.log(error_l2)  # L2#
+    x0 = np.zeros(2)
+    sigma = np.ones(len(U) - leftout)
+    def func(x, a, b):
+        return a + b * x
+    a, b = tuple(optimization.curve_fit(func, xdata, ydata, x0, sigma)[0])
+    print()
+    print('GRADIENT OF LINEAR FIT: ', str(b), "\n\n")
+
+    #===================#
+    # WRITE SPREADSHEET #
+    #===================#
+    book = xlwt.Workbook(encoding="utf-8")
+    sheet1 = book.add_sheet("Sheet 1")
+    header = ["min(diam)", "max(diam)","h1", "h2", "L2-Error", "Rate", "time [s]"]  # , "time-Rate"]
+    output_ass_time = conf2.folder + 'ass_time' + '.npy'
+    ass_time = np.array(np.load(output_ass_time))
+
+    data = np.concatenate((np.around(gridsizes, decimals=7), np.array(conf2.H1[0:conf2.num_grids])[:, np.newaxis], np.array(conf2.H2[0:conf2.num_grids])[:, np.newaxis],
+                           np.around(error_l2[:, np.newaxis], decimals=7), np.around(rates_l2[:, np.newaxis], decimals=2),
+                            np.around(ass_time[:, np.newaxis])), axis=1)
+
+    print("min(diam)", "max(diam)", " h1 ", " h2  "," L2-Error  ", "Rate  ", "   Assembly time [s]")
+    np.set_printoptions(formatter={'float': lambda x: "{0:0.5f}".format(x)})
+    print(data)
+    for i in range(len(header)):  # columns
+        sheet1.write(1, 1 + i, header[i])
+        for j in range(len(error_l2)):  # rows
+            sheet1.write(1 + j + 1, 1 + i, data[j, i])
+    book.save(conf2.folder+ conf2.folder[7:-1]  + "_rates.xls")
+
+    #===================#
+    # WRITE TEX TABLE   #
+    #===================#
+    textable = open(conf2.folder+"table.tex", "w")
+    textable.write(
+    """
+    \documentclass{scrartcl}
+    \\usepackage[ngerman]{babel}
+    \\begin{document}
+    
+    \\begin{tabular}{ c   | c c  } \n
+    \\multicolumn{1}{c }{}& \multicolumn{2}{c }{(4) \em method} \\\\	
+    \\noalign{\smallskip}\hline\\noalign{\smallskip}
+    $h$ 	 	& $\|u-u_h\|_{L^2}$   	&rate 		\\\\
+    \\noalign{\smallskip}\hline\\noalign{\smallskip}
+    """
+    )
+
+    for j in range(len(error_l2)):
+        textable.write("$h_"  +  str(j+1)  +  "$ & "  +  str(data[j, 2])  +  "& "  +  str(data[j, 3])  +  "\\\\ \n")
+
+    textable.write(
+    """
+    \\noalign{\smallskip}\hline
+    \\end{tabular}
+         
+    \end{document}
+    """
+    )
+
+    textable.close()
+
+if __name__ == "__main__":
+    main()
\ No newline at end of file
Index: ../Rates2D/L2_rates_nonreg_scipyinterp.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># -*- coding: utf-8 -*-\n\"\"\"\nCreated on Mar 25 2020\n@author: vollmann\n\"\"\"\n\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport sys\nimport bib3 as bib\nimport scipy.optimize as optimization\nimport conf, conf2\nimport MESH_nonreg\nimport xlwt\nimport scipy.interpolate as interp\nfrom assemble import evaluateMass\nimport nlocal\n\ndef main():\n    numgrids = len(conf2.H1)\n    num_fem_sols = conf2.num_grids\n    k_finest = conf2.num_grids_mat_l2rates - 1 #num_fem_sols #- 1 # wir haben num_fem_sols solutions, aber nummeriert sind sie 0, 1, 2, num_fem_sols-1\n\n    massmat = bib.load_sparse_csr(conf2.folder + 'M_omom_' + str(k_finest) + '.npz')\n\n    H1 = [conf2.h1 * 2 ** -k for k in range(0, max([num_fem_sols, k_finest]))]\n    H2 = [conf2.h2 * 2 ** -k for k in range(0, max([num_fem_sols, k_finest]))]\n    h1_finest =  conf2.h1 * 2**-(k_finest)\n    h2_finest =  conf2.h2 * 2**-(k_finest)\n\n    ##=================================#\n    #  LOAD AND EXTEND FEM SOLUTIONS   #\n    ##=================================#\n    # Load the solutions + extend them by the (sharp local) boundary data\n    U = []\n    gridsizes = np.zeros((num_fem_sols, 2))\n    for k in range(num_fem_sols):\n        output_u = conf2.folder + 'u_' + str(k)\n        u = np.load(output_u + '.npy')\n        output_mesh_data = conf2.folder + 'mesh_data_' + str(k) + '.npy'\n        mesh = MESH_nonreg.Mesh(np.load(output_mesh_data, allow_pickle=True))\n        nodes_inner = list(range(len(mesh.nodes) - len(mesh.boundary)))\n        nodes_rest = list(range(len(nodes_inner), len(mesh.verts)))\n        u_all = np.concatenate((u, list(map(conf2.g_d, mesh.verts[nodes_rest]))))\n        U += [interp.LinearNDInterpolator(mesh.verts[nodes_inner+nodes_rest], u_all)]\n        gridsizes[k,:] = np.array([np.min(mesh.diam), np.max(mesh.diam)])\n\n    ##==========================#\n    #  COMPUTE EXACT SOLUTION   #\n    ##==========================#\n    if conf2.gmsh:\n        output_mesh_data = conf2.folder + 'mesh_data_' + str(k_finest) + '.npy'\n        mesh = MESH_nonreg.Mesh(np.load(output_mesh_data, allow_pickle=True))\n        nodes_inner = list(range(len(mesh.nodes) - len(mesh.boundary)))\n        verts_finest = mesh.verts[nodes_inner]\n\n    else:\n        n1, n2 = int(1./h1_finest)+1, int(1./h2_finest)+1 # int(1./h)+1\n        n1, n2 = int(np.ceil(1. / h1_finest)) + 1, int(np.ceil(1. / h2_finest)) + 1  # int(1./h)+1\n        x = np.linspace(0., 1., n1, endpoint=True)\n        y = np.linspace(0., 1., n2, endpoint=True)\n        verts = np.around(np.array(np.meshgrid(x, y, indexing='ij')).T.reshape(-1, 2), decimals=12)\n        omega = np.where(np.linalg.norm(verts - np.ones(2) * 0.5, axis=1, ord=np.inf) < 0.5)\n        verts_finest = verts[omega]\n\n    solution = verts_finest[:,0]**2 * verts_finest[:,1] + verts_finest[:,1]**2\n\n    ##=================#\n    #  COMPUTE RATES   #\n    ##=================#\n    def dist_L2(u,v):\n        return np.sqrt( np.dot(u-v, massmat.dot(u-v) ) )\n        # aux = evaluateMass(nlocal.Mesh(mesh, conf.ansatz, conf.boundaryConditionType), u-v, conf.py_Px, conf.dx)\n        # return np.sqrt( np.dot(u-v, aux ) )\n\n    error_l2 = np.zeros(len(U))\n    for i in range(len(U)):\n        error_l2[i] = dist_L2(U[i].__call__(verts_finest), solution)\n\n    print()\n    print()\n    print('L2 ERROR')\n    for a in error_l2:\n        print(np.around(a, decimals = 4))\n\n    print('\\nRATES')\n    rates_l2 = [0]\n    for i in range(len(error_l2) - 1):\n        rates_l2 += [np.log(error_l2[i] / error_l2[i + 1]) / np.log(2)]\n        print(np.around(np.log(error_l2[i] / error_l2[i + 1]) / np.log(2), decimals = 2))\n    rates_l2 = np.array(rates_l2)\n\n    leftout = 0\n    xdata = np.log(np.array([2 ** i for i in range(len(\n        U) - leftout)]))  # np.array([0.6 * 2**-(i+1) for i in range(9)])# np.log(np.array([1./(0.2 * 2**-(i)) for i in range(9)]))\n    ydata = np.log(error_l2)  # L2#\n    x0 = np.zeros(2)\n    sigma = np.ones(len(U) - leftout)\n    def func(x, a, b):\n        return a + b * x\n    a, b = tuple(optimization.curve_fit(func, xdata, ydata, x0, sigma)[0])\n    print()\n    print('GRADIENT OF LINEAR FIT: ', str(b), \"\\n\\n\")\n\n    #===================#\n    # WRITE SPREADSHEET #\n    #===================#\n    book = xlwt.Workbook(encoding=\"utf-8\")\n    sheet1 = book.add_sheet(\"Sheet 1\")\n    header = [\"min(diam)\", \"max(diam)\",\"h1\", \"h2\", \"L2-Error\", \"Rate\", \"time [s]\"]  # , \"time-Rate\"]\n    output_ass_time = conf2.folder + 'ass_time' + '.npy'\n    ass_time = np.array(np.load(output_ass_time))\n\n    data = np.concatenate((np.around(gridsizes, decimals=7), np.array(conf2.H1[0:conf2.num_grids])[:, np.newaxis], np.array(conf2.H2[0:conf2.num_grids])[:, np.newaxis],\n                           np.around(error_l2[:, np.newaxis], decimals=7), np.around(rates_l2[:, np.newaxis], decimals=2),\n                            np.around(ass_time[:, np.newaxis])), axis=1)\n\n    print(\"min(diam)\", \"max(diam)\", \" h1 \", \" h2  \",\" L2-Error  \", \"Rate  \", \"   Assembly time [s]\")\n    np.set_printoptions(formatter={'float': lambda x: \"{0:0.5f}\".format(x)})\n    print(data)\n    for i in range(len(header)):  # columns\n        sheet1.write(1, 1 + i, header[i])\n        for j in range(len(error_l2)):  # rows\n            sheet1.write(1 + j + 1, 1 + i, data[j, i])\n    book.save(conf2.folder+ conf2.folder[7:-1]  + \"_rates.xls\")\n\n    #===================#\n    # WRITE TEX TABLE   #\n    #===================#\n    textable = open(conf2.folder+\"table.tex\", \"w\")\n    textable.write(\n    \"\"\"\n    \\documentclass{scrartcl}\n    \\\\usepackage[ngerman]{babel}\n    \\\\begin{document}\n    \n    \\\\begin{tabular}{ c   | c c  } \\n\n    \\\\multicolumn{1}{c }{}& \\multicolumn{2}{c }{(4) \\em method} \\\\\\\\\t\n    \\\\noalign{\\smallskip}\\hline\\\\noalign{\\smallskip}\n    $h$ \t \t& $\\|u-u_h\\|_{L^2}$   \t&rate \t\t\\\\\\\\\n    \\\\noalign{\\smallskip}\\hline\\\\noalign{\\smallskip}\n    \"\"\"\n    )\n\n    for j in range(len(error_l2)):\n        textable.write(\"$h_\"  +  str(j+1)  +  \"$ & \"  +  str(data[j, 2])  +  \"& \"  +  str(data[j, 3])  +  \"\\\\\\\\\")\n\n    textable.write(\n    \"\"\"\n    \\\\noalign{\\smallskip}\\hline\n    \\\\end{tabular}\n         \n    \\end{document}\n    \"\"\"\n    )\n\n    textable.close()\n\nif __name__ == \"__main__\":\n    main()
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- ../Rates2D/L2_rates_nonreg_scipyinterp.py	(revision b58f426ba4ba71178accbbade003703e84c118d6)
+++ ../Rates2D/L2_rates_nonreg_scipyinterp.py	(date 1586366445763)
@@ -37,6 +37,7 @@
     for k in range(num_fem_sols):
         output_u = conf2.folder + 'u_' + str(k)
         u = np.load(output_u + '.npy')
+        print("dofs = ", len(u))
         output_mesh_data = conf2.folder + 'mesh_data_' + str(k) + '.npy'
         mesh = MESH_nonreg.Mesh(np.load(output_mesh_data, allow_pickle=True))
         nodes_inner = list(range(len(mesh.nodes) - len(mesh.boundary)))
@@ -65,6 +66,9 @@
 
     solution = verts_finest[:,0]**2 * verts_finest[:,1] + verts_finest[:,1]**2
 
+
+
+
     ##=================#
     #  COMPUTE RATES   #
     ##=================#
@@ -143,7 +147,7 @@
     )
 
     for j in range(len(error_l2)):
-        textable.write("$h_"  +  str(j+1)  +  "$ & "  +  str(data[j, 2])  +  "& "  +  str(data[j, 3])  +  "\\\\")
+        textable.write("$h_"  +  str(j+1)  +  "$ & "  +  str(data[j, 2])  +  "& "  +  str(data[j, 3])  +  "\\\\ \n")
 
     textable.write(
     """
Index: ../Rates2D/bib3.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># -*- coding: utf-8 -*-\n\"\"\"\nCreated on Wed Aug 29 13:35:57 2018\n\n@author: vollmann\n\"\"\"\nimport numpy as np\nPx = np.array([[0.33333333, 0.33333333],\n              [0.45929259, 0.45929259],\n              [0.45929259, 0.08141482],\n              [0.08141482, 0.45929259],\n              [0.17056931, 0.17056931],\n              [0.17056931, 0.65886138],\n              [0.65886138, 0.17056931],\n              [0.05054723, 0.05054723],\n              [0.05054723, 0.89890554],\n              [0.89890554, 0.05054723],\n              [0.26311283, 0.72849239],\n              [0.72849239, 0.00839478],\n              [0.00839478, 0.26311283],\n              [0.72849239, 0.26311283],\n              [0.26311283, 0.00839478],\n              [0.00839478, 0.72849239]])\n\nweightsxy = 0.5 * np.array([0.14431560767779\n                       , 0.09509163426728\n                       , 0.09509163426728\n                       , 0.09509163426728\n                       , 0.10321737053472\n                       , 0.10321737053472\n                       , 0.10321737053472\n                       , 0.03245849762320\n                       , 0.03245849762320\n                       , 0.03245849762320\n                       , 0.02723031417443\n                       , 0.02723031417443\n                       , 0.02723031417443\n                       , 0.02723031417443\n                       , 0.02723031417443\n                       , 0.02723031417443])\n\n#from assemble import assemble\n\nimport scipy.sparse as ss\nimport matplotlib\nimport matplotlib.pyplot as plt\nfrom copy import copy\nimport math\nimport scipy.optimize as sc\nfrom pathos.multiprocessing import ProcessingPool as Pool\nimport scipy.interpolate as si\nimport random\nimport scipy.sparse.linalg as ssl\nfrom scipy.integrate import quad#quadrature as \nfrom scipy.optimize import minimize\n\n\"\"\"=========================================================================\"\"\"\n\"\"\" PARAMETERS \"\"\"\n#ball = 'exact'  # choose from ['exact', 'approx1', 'approx2', 'approx3']\n\nquad_order_outer = 'new'#'#8#'test'#'new'#8 # choose from [8, 5, 3, 2, 'new', 'GL-5-12']\nquad_order_inner = 1\n\n# for 1d\nn1_1d, n2_1d = 16,2\n\n# for tri_adapt\ntol1_Radon =  1e-10# difference between g_low and g_high\ntol2_Radon = 0.1 #for diameter\n\n\ntest_assembly = 0\nP_test = np.array([ [0.0, 0.0]]).transpose()#np.array([ [ 1./3., 1./3.]]).transpose()\n\"\"\"=========================================================================\"\"\"\n\n\"\"\" CONVENTIONS \"\"\"\n# LABELS: 1 = shape; 2 = omega\\shape; 3 = omega_i, 9 = boundary of omega\n\n\n\"\"\"-------------------------------------------------------------------------\"\"\"\n\"\"\"                 PREPARE MESH                                            \"\"\"\n\"\"\"-------------------------------------------------------------------------\"\"\"\nclass Mesh:\n\n    # object with all processed mesh data\n    def __init__(self, proc_mesh_data):\n\n        self.triangles = proc_mesh_data[0]\n        self.omega = proc_mesh_data[1]\n        self.verts = proc_mesh_data[2]\n        self.hash_table = proc_mesh_data[3]\n        self.boundary_verts = proc_mesh_data[4]\n        self.nodes = proc_mesh_data[5]\n        self.nhd = proc_mesh_data[6]\n        self.diam = proc_mesh_data[7]\n        self.support = proc_mesh_data[8]\n        self.hash_table_approx = proc_mesh_data[9]\n        self.bary = proc_mesh_data[10]\n        self.boundary = proc_mesh_data[11]\n        self.hash_table_bary = proc_mesh_data[12]\n        self.shape_interface = proc_mesh_data[13]\n        self.lines = proc_mesh_data[14]\n        self.nV = proc_mesh_data[15]\n        self.nE = proc_mesh_data[16]\n        self.nE_Omega = proc_mesh_data[17]\n        self.nV_Omega = proc_mesh_data[18]\n        self.vertices = proc_mesh_data[2]\n\nclass Mesh_slim:\n    # object with all processed mesh data\n    def __init__(self, proc_mesh_data):\n\n        self.triangles = proc_mesh_data[0]\n        self.omega = proc_mesh_data[1]\n        self.verts = proc_mesh_data[2]\n        self.boundary_verts = proc_mesh_data[3]\n        self.nodes = proc_mesh_data[4]\n        self.boundary = proc_mesh_data[5]\n        self.shape_interface = proc_mesh_data[6]\n\ndef prepare_mesh(verts, lines, triangles, eps, Norm):\n    verts = verts[:,0:2]\n    # note that eps is determined already in the mesh, however: for \n    # homogeneous dirichtlet constraints it simply has to be smaller than\n    # the pre-determined epsilon\n    labels_domains = np.sort(np.unique(triangles[:,0]))\n\n    \"\"\" sort triangles \"\"\"\n    # we sort by labels\n    # this is important such that omega[k,] = triangle[k,]\n    # As a consequence we can use omega for the list 'support'\n    triangles = triangles[triangles[:,0].argsort()]\n\n    norm = norm_dict[Norm]\n#    def norm(x):\n#        return np.max(np.abs(x), axis= 0)\n    #--------------------------------------------------------------------------\n    \"\"\" OMEGA \"\"\"   \n    omega = triangles[np.where(triangles[:,0] != labels_domains[-1])[0]]    \n\n\n    #--------------------------------------------------------------------------\n    \"\"\" SHAPE INTERFACE (subset 0:len(verts) )\"\"\"      \n    interface = np.unique(lines[np.where(lines[:,0]==12)][:,1:]).tolist()   \n    \n    #--------------------------------------------------------------------------\n    \"\"\" NODES (subset of verts)\"\"\"   \n\n    omega1 = triangles[np.where(triangles[:,0] == labels_domains[0])] \n    nodes1 = list(np.unique(omega1[:,1:4]))\n\n    if len(labels_domains) > 2:\n        omega2 = triangles[np.where(triangles[:,0] == labels_domains[1])] \n        nodes2 = list(np.unique(omega2[:,1:4]))\n    else:\n        omega2 = []\n        nodes2 = []\n\n    G_N = []\n    for i in interface:\n        G_N += np.where(norm((verts-np.repeat(verts[i][:,np.newaxis], len(verts), axis = 1).transpose()).transpose())<=eps)[0].tolist()\n\n    G_N1 = list( (set(nodes1)&set(G_N)) )\n    G_N2 = list(  (set(nodes2)&set(G_N)) )\n    \n    nodes1 = list(set(nodes1) - set(G_N1) )\n    nodes2 = list(set(nodes2) - set(G_N2) )\n    G_N1 = list( (set(G_N1)-set(interface)) )\n    G_N2 = list(  (set(G_N2)-set(interface)) )\n    nodes = list(nodes1)  + list(G_N1)+ interface + list(G_N2) + list(nodes2) \n    nodes = np.array(nodes)\n\n#    print len(nodes1), len(G_N1), len(interface), len(G_N2), len(nodes2)\n\n#    nodes =  np.unique(omega[:,1:4])\n\n    # test nodes\n#    plt.plot(verts[nodes1][:,0], verts[nodes1][:,1], 'bo')\n#    plt.plot(verts[nodes2][:,0], verts[nodes2][:,1], 'ro')\n#    plt.plot(verts[G_N1][:,0], verts[G_N1][:,1], 'gx')\n#    plt.plot(verts[G_N2][:,0], verts[G_N2][:,1], 'bx')\n#    plt.plot(verts[interface][:,0], verts[interface][:,1], 'yd')\n    \n    #--------------------------------------------------------------------------\n    \"\"\" BOUNDARY_verts (subset of verts); label = 9\"\"\"\n    boundary = np.unique(lines[lines[:,0] == 9][:,1:3])\n    # test nodes\n#    plt.plot(verts[boundary][:,0], verts[boundary][:,1], 'ro')\n    \n    \n    ##-----------------------------------------------------------------------------#\n    \"\"\" PERMUTE VERTS TO SORT OMEGA_I TO THE END and ADAPT TRIANGLES etc \"\"\" \n    if True:\n        nodes_inner = list(set(nodes) - set(boundary))\n        nodes_rest = list(set(range(len(verts))) - set(nodes_inner) - set(boundary))\n    \n        verts = np.vstack((verts[nodes_inner], verts[boundary], verts[nodes_rest]))\n        \n        new_order = nodes_inner + list(boundary) + nodes_rest\n        \n        def permutation(i):\n            return new_order.index(i)\n        \n        triangles_old = triangles\n        \n        triangles = np.zeros(np.shape(triangles_old), dtype = int)\n        triangles[:,0] = triangles_old[:,0]\n        \n        for i in range(np.shape(triangles_old)[0]):\n            for j in range(1,4):\n                triangles[i,j] = int(permutation(triangles_old[i,j] ))\n        \n        lines_old = lines\n        \n        lines = np.zeros(np.shape(lines_old), dtype = int)\n        lines[:,0] = lines_old[:,0]\n        \n        for i in range(np.shape(lines_old)[0]):\n            for j in range(1,3):\n                lines[i,j] = int(permutation(lines_old[i,j] ))\n\n        interface_old= interface\n        interface = np.zeros(len(interface_old), dtype = int)\n        for i in range(len(interface_old)):\n            interface[i] = permutation(interface_old[i])\n\n\n\n        omega = triangles[np.where(triangles[:,0] != labels_domains[-1])[0]]    \n        \n        # plot omega\n    #    for i in range(len(omega)):\n    #        plt.gca().add_patch(plt.Polygon(verts[omega[i,1:]], closed=True, fill = True, color = 'blue', alpha = 0.2)) \n        \n        boundary = np.array(range(len(nodes_inner), len(nodes_inner)+len(boundary)))\n        \n        nodes = np.array(range(len(nodes_inner)+len(boundary)))#+list(boundary)\n    \n#     PLOT verts\n#    plt.plot(verts[nodes][:,0], verts[nodes][:,1], 'bx')\n#    plt.plot(verts[interface][:,0], verts[interface][:,1], 'yd')\n#    plt.plot(verts[len(nodes):][:,0], verts[len(nodes):][:,1], 'ro')\n    \n    \n    \n    \n    #--------------------------------------------------------------------------\n    \"\"\" SUPPORT (subset omega)\"\"\"\n    support = []#[list(np.where(omega[:,1:4] == a)[0]) for a in nodes]\n    ##test support\n#    idx = 44#len(nodes)/2\n#    plt.plot(verts[nodes[idx]][0], verts[nodes[idx]][1], 'go')\n#    for i in support[idx]:\n#        plt.gca().add_patch(plt.Polygon([verts[triangles[i,1]], verts[triangles[i,2]],verts[triangles[i,3]]], closed=True, fill = True, color = 'blue')) \n\n    #--------------------------------------------------------------------------\n    \"\"\" Neighboring nodes x_j of x_k for which j<=k (subset of nodes)\"\"\"\n    NHD = []\n    # for k in range(len(nodes)):\n    #     nhd = list(set(np.unique(triangles[support[k]][:,1:]))&set(omega[:,1:].reshape(3*len(omega)))) # subset of verts, intersect with omega, since nodes only are in omega\n    #     #convert nhd from subset of verts into subset of nodes and take only those<=k\n    #     aux = np.array([np.where(np.all(verts[nodes] == verts[j],axis=1))[0][0] for j in nhd]  )\n    #     NHD += [aux[aux<=k].tolist()]\n    ##test nhd\n#    idx = 44\n#    print verts[nodes[NHD[idx]]]\n#    for j in range(len(NHD[idx])):\n#        plt.plot(verts[nodes[NHD[idx]]][j][0], verts[nodes[NHD[idx]]][j][1], 'yo')\n#    plt.plot(verts[nodes[idx]][0], verts[nodes[idx]][1], 'ro')\n    #--------------------------------------------------------------------------\n    \"\"\"Determine maximum diameter for hash_table \"\"\"\n    def diam(T):\n        length_of_edges = np.array([np.linalg.norm(T[0]-T[1]),np.linalg.norm(T[0]-T[2]), np.linalg.norm(T[1]-T[2])] )   \n        return np.max(length_of_edges)\n    diameter = [diam(np.array([verts[triangles[i,][1]] , verts[triangles[i,][2]] , verts[triangles[i,][3]] ])) for i in range(len(triangles))]\n    diam = np.max(diameter)\n    #--------------------------------------------------------------------------\n    \"\"\" HASH TABLE (subset triangles)\"\"\"\n    bary = (verts[triangles[:,1]] + verts[triangles[:,2]] + verts[triangles[:,3]]) / 3.       \n    hash_table = []#[np.where(norm((bary-np.repeat(verts[nodes[i]][:,np.newaxis], len(bary), axis = 1).transpose()).transpose())<=(eps+diam))[0].tolist() for i in range(len(nodes))]\n#    idx = 38#int(num_nodes/2 * 1.5)\n#    plt.plot(verts[nodes[idx]][0], verts[nodes[idx]][1], 'ro')\n#    for i in hash_table[idx]:\n#        T_i = triangles[i,]\n#        barycenter_i = (verts[T_i[1]] + verts[T_i[2]] + verts[T_i[3]]) / 3.\n#        plt.plot(barycenter_i[0],barycenter_i[1], 'yo') \n#        \n#        plt.gca().add_patch(plt.Polygon([verts[triangles[i,1]], verts[triangles[i,2]],verts[triangles[i,3]]], closed=True, fill = True)) \n#    \n#    neighboring_nodes = list(np.unique(triangles[support[idx]][:,1:]))\n#    ngh_verts = verts[neighboring_nodes]\n#    for i in range(len(ngh_verts)):\n#        square = plt.Rectangle(tuple(ngh_verts[i]-(eps)*np.ones(2)), 2*(eps), 2*(eps), color='grey', fill= True)\n#        ax.add_artist(square)    \n    #--------------------------------------------------------------------------\n    \"\"\" HASH TABLE_nodes (subset nodes)\"\"\"      \n#    hash_table_nodes = [list(set(np.where(norm((verts[nodes]-np.repeat(verts[nodes[i]][:,np.newaxis], len(nodes), axis = 1).transpose()).transpose())<=(eps+diam))[0].tolist())&set(range(i+1))) for i in range(len(nodes))]\n    \n    \"\"\" HASH TABLE_approx (= hash table bary without puffer)\"\"\"      \n    hash_table_approx = []# [np.where(norm((bary-np.repeat(bary[i][:,np.newaxis], len(bary), axis = 1).transpose()).transpose())<=(eps))[0].tolist() for i in range(len(bary))]\n    #--------------------------------------------------------------------------\n    \"\"\" HASH TABLE (subset 0:len(bary))\"\"\"\n    hash_table_bary = []#[np.where(norm((bary-np.repeat(bary[i][:,np.newaxis], len(bary), axis = 1).transpose()).transpose())<=(eps+ diam))[0].tolist() for i in range(len(bary))]\n    \n    #--------------------------------------------------------------------------\n    \"\"\" BOUNDARY_nodes (subset 0:len(nodes) )\"\"\"      \n    bdry_nodes = [nodes.tolist().index(i) for i in boundary] \n\n    #------------------------------------------------------------------------------  \n    \"\"\" BUILDING MESH CLASS \"\"\"\n    proc_mesh_data = [triangles, omega, verts, hash_table, boundary, nodes, NHD, max(diameter), support, hash_table_approx, bary, bdry_nodes, hash_table_bary, interface, lines, len(verts), len(triangles), len(omega), len(nodes)]\n    mesh = Mesh(proc_mesh_data)\n    #------------------------------------------------------------------------------       \n    return mesh, proc_mesh_data\n\n\ndef prepare_mesh_reg(h, eps, Norm, num_cores):\n    if not (1/h).is_integer() or not (eps/h).is_integer():\n        print('(1/h and delta/h have to be an integer !!!')\n        eps_i = h\n        \n    if eps < h:\n        eps_i = h\n    else:\n        eps_i = eps\n\n\n    norm = norm_dict[Norm]\n    a = [0.,0.]\n    b = [1.,1.]\n    gridsize = np.array([h,h])\n    \n    diam = np.sqrt(h**2 + h**2) # = longest edge of the triangle\n    \n    dim = 2 \n    def E(z, L):\n        p = [np.prod([L[k] for k in range(j+1,dim)]) for j in range(dim)] + [np.prod(L)]\n        summe = 0\n        for i in range(dim):\n            summe = summe + z[i] * p[i]  \n        return int(summe)\n    def iE(k, L):\n        p = [np.prod([L[l] for l in range(j+1,dim)]) for j in range(dim)] + [np.prod(L)]\n        x = np.zeros(dim)\n        for i in range(dim):\n            x[i] = k//(p[i]) - (k//(p[i-1])) * L[i]\n        return x\n\n    #==============================================================================\n    #                    COMPUTE ARRAYS\n    #==============================================================================\n    roundof = 6 # verts will not give precisely the value but rather 0.1000009 (in order to make \n                # np.where () work we have to round of, roughly in the dimension of the gridsize)\n    N = [int((b[i]-a[i])/gridsize[i]) for i in range(dim)]\n#    L = [N[i]-1   for i in range(dim)]\n    def ha(x):\n        return np.array([gridsize[0]*x[0], gridsize[1]*x[1]])\n    \n    a_i = [a[0]-eps_i, a[1]-eps_i]\n    b_i = np.around([b[0]+eps_i, b[1]+eps_i], decimals = roundof)\n    N_i = [int(np.around((b_i[i]-a_i[i])/gridsize[i])) + 1 for i in range(dim)]\n    \n    #-----------------------------------------------------------------------------#\n    \"\"\" VERTS \"\"\"\n    def fun(k):\n        return np.around(np.array(a_i) +  ha(iE(k,N_i)), decimals = roundof)\n    pool = Pool(processes=num_cores) \n    verts = np.array(list(pool.map(fun,range(np.prod(N_i)) )))# np.array([  for k in range(np.prod(N_i))])\n    pool.close()\n    pool.join()\n    pool.clear()\n#    print verts\n    #-----------------------------------------------------------------------------#\n    \"\"\" OMEGA \"\"\"#+  ha(iE(0,N)\n    k_0 =  np.where(np.all(verts[:,0:2] == np.around(np.array(a) , decimals = roundof).tolist(),axis=1))[0][0]\n    omega = [k_0 + k + j*N_i[1] for k in range(N[1]) for j in range(N[0])]# pool.map(om, range(num_omega))    \n    ####-----------------------------------------------------------------------------#\n    \"\"\" OMEGA_I \"\"\"\n    omega_i = list(set(range(len(verts))) - set(omega) -set(np.where(verts[:,0]== b_i[0])[0])  -set(np.where(verts[:,1]== b_i[1])[0]  ) )\n    ###-----------------------------------------------------------------------------#\n    #\"\"\" NODES \"\"\"\n    nodes = omega  \n    ##-----------------------------------------------------------------------------#\n    \"\"\" OMEGA \"\"\"\n    omega = np.zeros((2*len(nodes), 3), dtype = int)\n    \n    for j in range(len(nodes)):\n        k = nodes[j]\n        omega[2*j,    ] = np.array([k, k+ N_i[1]+1,k + 1])#  clockwise\n        omega[2*j + 1,    ] = np.array([k, k + N_i[1], k+ N_i[1]+1])#  clockwise\n    \n    \"\"\" OMEGA_i \"\"\"\n    Omega_i = np.zeros((2*len(omega_i), 3), dtype = int)\n    \n    for j in range(len(omega_i)):\n        k = omega_i[j]\n        Omega_i[2*j,    ] = np.array([k, k+ N_i[1]+1,k + 1 ]) # clockwise\n        Omega_i[2*j +1, ] = np.array([k,k + N_i[1], k+ N_i[1]+1])#clockwise\n    \n    omega_i = Omega_i\n    \n    ##-----------------------------------------------------------------------------#\n    \"\"\" BOUNDARY \"\"\"\n    boundary1 = [k_0 + kk  for kk in range(N[0])]\n    boundary2 = [k_0 + N[1]*N_i[0] + kkk  for kkk in range(N[0]+1)]\n    boundary3 = [k_0 + j*N_i[0] for j in range(N[1])]\n    boundary4 = [k_0 +N[0]+ j*N_i[0] for j in range(N[1])]\n    \n    boundary = np.unique( boundary1 + boundary2 + boundary3 + boundary4)\n\n    ##-----------------------------------------------------------------------------#\n    aux = np.zeros((len(omega),4), dtype=int)    \n    aux[:,1:] = omega  \n    aux[:,0] = 1*np.ones(len(omega), dtype = int)\n    omega = aux\n    \n    aux = np.zeros((len(omega_i),4), dtype=int)    \n    aux[:,1:] = omega_i  \n    aux[:,0] = 2*np.ones(len(omega_i), dtype = int)\n    omega_i = aux\n    \n    ##-----------------------------------------------------------------------------#\n    \"\"\" TRIANGLES \"\"\"\n    triangles = np.vstack((omega, omega_i))\n\n    \"\"\" NODES \"\"\"\n    num_omega = np.shape(omega)[0]\n    nodes = np.unique(omega[:,1:4].reshape(3*num_omega))\n\n    ##-----------------------------------------------------------------------------#\n    \"\"\" PERMUTE VERTS TO SORT OMEGA_I TO THE END and ADAPT TRIANGLES etc \"\"\" \n    nodes_inner = list(set(nodes) - set(boundary))\n    nodes_rest = list(set(range(len(verts))) - set(nodes_inner) - set(boundary))\n    verts = np.vstack((verts[nodes_inner], verts[boundary], verts[nodes_rest]))\n    \n    new_order = nodes_inner + list(boundary) + nodes_rest\n    def permutation(i):\n        return new_order.index(i)\n    \n    triangles_old = triangles\n    \n    triangles = np.zeros(np.shape(triangles_old), dtype = int)\n    triangles[:,0] = triangles_old[:,0]\n    \n    for i in range(np.shape(triangles_old)[0]):\n        for j in range(1,4):\n            triangles[i,j] = int(permutation(triangles_old[i,j] ))\n\n    omega = triangles[np.where(triangles[:,0] != 2)[0]]\n    # plot omega\n#    for i in range(len(omega)):\n#        plt.gca().add_patch(plt.Polygon(verts[omega[i,1:]], closed=True, fill = True, color = 'blue', alpha = 0.2)) \n    \n    boundary = list(range(len(nodes_inner), len(nodes_inner)+len(boundary)))\n    nodes = list(range(len(nodes_inner)))+list(boundary)\n    \n    # PLOT verts\n#    plt.plot(verts[nodes][:,0], verts[nodes][:,1], 'bo')\n#    plt.plot(verts[len(nodes):][:,0], verts[len(nodes):][:,1], 'rx')\n    \n    \"\"\" SUPPORT (subset omega)\"\"\"\n    support = []# [list(np.where(omega[:,1:4] == aa)[0]) for aa in nodes]\n\n    #--------------------------------------------------------------------------\n    \"\"\" Neighboring nodes x_j of x_k for which j<=k (subset of nodes)\"\"\"\n    NHD = []\n    # for k in range(len(nodes)):\n    #     nhd = list(set(np.unique(triangles[support[k]][:,1:])) & set(omega[:,1:].reshape(3*len(omega)))) # subset of verts, intersect with omega, since nodes only are in omega\n    #     #convert nhd from subset of verts into subset of nodes and take only those<=k\n    #     aux = np.array([np.where(np.all(verts[nodes] == verts[j],axis=1))[0][0] for j in nhd]  )\n    #     NHD += [aux[aux<=k].tolist()]\n    #--------------------------------------------------------------------------\n    \"\"\" HASH TABLE (subset triangles)\"\"\"\n    bary = (verts[triangles[:,1]] + verts[triangles[:,2]] + verts[triangles[:,3]]) / 3.       \n    hash_table = []#[np.where(norm((bary-np.repeat(verts[nodes[i]][:,np.newaxis], len(bary), axis = 1).transpose()).transpose())<=(eps+diam))[0].tolist() for i in range(len(nodes))]\n\n    #--------------------------------------------------------------------------\n    \"\"\" HASH TABLE_nodes (subset nodes)\"\"\"      \n#    hash_table_nodes = [list(set(np.where(norm((verts[nodes]-np.repeat(verts[nodes[i]][:,np.newaxis], len(nodes), axis = 1).transpose()).transpose())<=(eps+diam))[0].tolist())&set(range(i+1))) for i in range(len(nodes))]\n    \n    \"\"\" HASH TABLE_approx (= hash table bary without puffer)\"\"\"      \n    hash_table_approx = []#[np.where(norm((bary-np.repeat(bary[i][:,np.newaxis], len(bary), axis = 1).transpose()).transpose())<=(eps))[0].tolist() for i in range(len(bary))]\n    #--------------------------------------------------------------------------\n    \"\"\" HASH TABLE (subset 0:len(bary))\"\"\"\n    hash_table_bary = []#[np.where(norm((bary-np.repeat(bary[i][:,np.newaxis], len(bary), axis = 1).transpose()).transpose())<=(eps+ diam))[0].tolist() for i in range(len(bary))]\n    \n    #--------------------------------------------------------------------------\n    \"\"\" BOUNDARY_nodes (subset 0:len(nodes) )\"\"\"      \n    bdry_nodes = [nodes.index(i) for i in boundary] \n    \n    #--------------------------------------------------------------------------\n    \"\"\" SHAPE INTERFACE (subset 0:len(verts) )\"\"\"      \n    interface = []#np.unique(lines[np.where(lines[:,0]==12)][:,1:]).tolist()     \n\n    #------------------------------------------------------------------------------  \n    \"\"\" BUILDING MESH CLASS \"\"\"\n    proc_mesh_data = [triangles, omega, verts, hash_table, boundary, nodes, NHD, diam, support, hash_table_approx, bary, bdry_nodes, hash_table_bary, interface,[],len(verts), len(triangles), len(omega), len(nodes)]\n    mesh = Mesh(proc_mesh_data)\n    #------------------------------------------------------------------------------       \n    return mesh, proc_mesh_data\n\n\ndef prepare_mesh_nonreg(H, eps, Norm, num_cores):\n    # if not (1 / h).is_integer() or not (eps / h).is_integer():\n    #     print('(1/h and delta/h have to be an integer !!!')\n    #     eps_i = h\n    #\n    # if eps < h:\n    #     eps_i = h\n    # else:\n    #     eps_i = eps\n\n    eps_i = eps\n\n    norm = norm_dict[Norm]\n    a = [0., 0.]\n    b = [1., 1.]\n    gridsize = np.array([H[0], H[1]])\n\n    diam = np.sqrt(gridsize[0] ** 2 + gridsize[1] ** 2)  # = longest edge of the triangle\n\n    dim = 2\n\n    def E(z, L):\n        p = [np.prod([L[k] for k in range(j + 1, dim)]) for j in range(dim)] + [np.prod(L)]\n        summe = 0\n        for i in range(dim):\n            summe = summe + z[i] * p[i]\n        return int(summe)\n\n    def iE(k, L):\n        p = [np.prod([L[l] for l in range(j + 1, dim)]) for j in range(dim)] + [np.prod(L)]\n        x = np.zeros(dim)\n        for i in range(dim):\n            x[i] = k // (p[i]) - (k // (p[i - 1])) * L[i]\n        return x\n\n    # ==============================================================================\n    #                    COMPUTE ARRAYS\n    # ==============================================================================\n    roundof = 6  # verts will not give precisely the value but rather 0.1000009 (in order to make\n    # np.where () work we have to round of, roughly in the dimension of the gridsize)\n    N = [int((b[i] - a[i]) / gridsize[i]) for i in range(dim)]\n\n    #    L = [N[i]-1   for i in range(dim)]\n    def ha(x):\n        return np.array([gridsize[0] * x[0], gridsize[1] * x[1]])\n\n    a_i = [a[0] - eps_i, a[1] - eps_i]\n    b_i = np.around([b[0] + eps_i, b[1] + eps_i], decimals=roundof)\n    N_i = [int(np.around((b_i[i] - a_i[i]) / gridsize[i])) + 1 for i in range(dim)]\n\n    # -----------------------------------------------------------------------------#\n    \"\"\" VERTS \"\"\"\n\n    def fun(k):\n        return np.around(np.array(a_i) + ha(iE(k, N_i)), decimals=roundof)\n\n    pool = Pool(processes=num_cores)\n    verts = np.array(list(pool.map(fun, range(np.prod(N_i)))))  # np.array([  for k in range(np.prod(N_i))])\n    pool.close()\n    pool.join()\n    pool.clear()\n    #    print verts\n    # -----------------------------------------------------------------------------#\n    \"\"\" OMEGA \"\"\"  # +  ha(iE(0,N)\n    k_0 = np.where(np.all(verts[:, 0:2] == np.around(np.array(a), decimals=roundof).tolist(), axis=1))[0][0]\n    omega = [k_0 + k + j * N_i[1] for k in range(N[1]) for j in range(N[0])]  # pool.map(om, range(num_omega))\n    ####-----------------------------------------------------------------------------#\n    \"\"\" OMEGA_I \"\"\"\n    omega_i = list(set(range(len(verts))) - set(omega) - set(np.where(verts[:, 0] == b_i[0])[0]) - set(\n        np.where(verts[:, 1] == b_i[1])[0]))\n    ###-----------------------------------------------------------------------------#\n    # \"\"\" NODES \"\"\"\n    nodes = omega\n    ##-----------------------------------------------------------------------------#\n    \"\"\" OMEGA \"\"\"\n    omega = np.zeros((2 * len(nodes), 3), dtype=int)\n\n    for j in range(len(nodes)):\n        k = nodes[j]\n        omega[2 * j,] = np.array([k, k + N_i[1] + 1, k + 1])  # clockwise\n        omega[2 * j + 1,] = np.array([k, k + N_i[1], k + N_i[1] + 1])  # clockwise\n\n    \"\"\" OMEGA_i \"\"\"\n    Omega_i = np.zeros((2 * len(omega_i), 3), dtype=int)\n\n    for j in range(len(omega_i)):\n        k = omega_i[j]\n        Omega_i[2 * j,] = np.array([k, k + N_i[1] + 1, k + 1])  # clockwise\n        Omega_i[2 * j + 1,] = np.array([k, k + N_i[1], k + N_i[1] + 1])  # clockwise\n\n    omega_i = Omega_i\n\n    ##-----------------------------------------------------------------------------#\n    \"\"\" BOUNDARY \"\"\"\n    boundary1 = [k_0 + kk for kk in range(N[1])]\n    boundary2 = [k_0 + N[1] + N_i[1] * kkk for kkk in range(N[0])]\n    boundary3 = [k_0 + j * N_i[1] for j in range(N[0])]\n    boundary4 = [k_0 + N[0]*N_i[1] + j for j in range(N[1]+1)]\n\n    boundary = np.unique(boundary1 + boundary2 + boundary3 + boundary4)\n\n    ##-----------------------------------------------------------------------------#\n    aux = np.zeros((len(omega), 4), dtype=int)\n    aux[:, 1:] = omega\n    aux[:, 0] = 1 * np.ones(len(omega), dtype=int)\n    omega = aux\n\n    aux = np.zeros((len(omega_i), 4), dtype=int)\n    aux[:, 1:] = omega_i\n    aux[:, 0] = 2 * np.ones(len(omega_i), dtype=int)\n    omega_i = aux\n\n    ##-----------------------------------------------------------------------------#\n    \"\"\" TRIANGLES \"\"\"\n    triangles = np.vstack((omega, omega_i))\n\n    \"\"\" NODES \"\"\"\n    num_omega = np.shape(omega)[0]\n    nodes = np.unique(omega[:, 1:4].reshape(3 * num_omega))\n\n    ##-----------------------------------------------------------------------------#\n    \"\"\" PERMUTE VERTS TO SORT OMEGA_I TO THE END and ADAPT TRIANGLES etc \"\"\"\n    nodes_inner = list(set(nodes) - set(boundary))\n    nodes_rest = list(set(range(len(verts))) - set(nodes_inner) - set(boundary))\n    verts = np.vstack((verts[nodes_inner], verts[boundary], verts[nodes_rest]))\n\n    new_order = nodes_inner + list(boundary) + nodes_rest\n\n    def permutation(i):\n        return new_order.index(i)\n\n    triangles_old = triangles\n\n    triangles = np.zeros(np.shape(triangles_old), dtype=int)\n    triangles[:, 0] = triangles_old[:, 0]\n\n    for i in range(np.shape(triangles_old)[0]):\n        for j in range(1, 4):\n            triangles[i, j] = int(permutation(triangles_old[i, j]))\n\n    omega = triangles[np.where(triangles[:, 0] != 2)[0]]\n    # plot omega\n    #    for i in range(len(omega)):\n    #        plt.gca().add_patch(plt.Polygon(verts[omega[i,1:]], closed=True, fill = True, color = 'blue', alpha = 0.2))\n\n    boundary = list(range(len(nodes_inner), len(nodes_inner) + len(boundary)))\n    nodes = list(range(len(nodes_inner))) + list(boundary)\n\n    # PLOT verts\n    #    plt.plot(verts[nodes][:,0], verts[nodes][:,1], 'bo')\n    #    plt.plot(verts[len(nodes):][:,0], verts[len(nodes):][:,1], 'rx')\n\n    \"\"\" SUPPORT (subset omega)\"\"\"\n    support = []  # [list(np.where(omega[:,1:4] == aa)[0]) for aa in nodes]\n\n    # --------------------------------------------------------------------------\n    \"\"\" Neighboring nodes x_j of x_k for which j<=k (subset of nodes)\"\"\"\n    NHD = []\n    # for k in range(len(nodes)):\n    #     nhd = list(set(np.unique(triangles[support[k]][:,1:])) & set(omega[:,1:].reshape(3*len(omega)))) # subset of verts, intersect with omega, since nodes only are in omega\n    #     #convert nhd from subset of verts into subset of nodes and take only those<=k\n    #     aux = np.array([np.where(np.all(verts[nodes] == verts[j],axis=1))[0][0] for j in nhd]  )\n    #     NHD += [aux[aux<=k].tolist()]\n    # --------------------------------------------------------------------------\n    \"\"\" HASH TABLE (subset triangles)\"\"\"\n    bary = (verts[triangles[:, 1]] + verts[triangles[:, 2]] + verts[triangles[:, 3]]) / 3.\n    hash_table = []  # [np.where(norm((bary-np.repeat(verts[nodes[i]][:,np.newaxis], len(bary), axis = 1).transpose()).transpose())<=(eps+diam))[0].tolist() for i in range(len(nodes))]\n\n    # --------------------------------------------------------------------------\n    \"\"\" HASH TABLE_nodes (subset nodes)\"\"\"\n    #    hash_table_nodes = [list(set(np.where(norm((verts[nodes]-np.repeat(verts[nodes[i]][:,np.newaxis], len(nodes), axis = 1).transpose()).transpose())<=(eps+diam))[0].tolist())&set(range(i+1))) for i in range(len(nodes))]\n\n    \"\"\" HASH TABLE_approx (= hash table bary without puffer)\"\"\"\n    hash_table_approx = []  # [np.where(norm((bary-np.repeat(bary[i][:,np.newaxis], len(bary), axis = 1).transpose()).transpose())<=(eps))[0].tolist() for i in range(len(bary))]\n    # --------------------------------------------------------------------------\n    \"\"\" HASH TABLE (subset 0:len(bary))\"\"\"\n    hash_table_bary = []  # [np.where(norm((bary-np.repeat(bary[i][:,np.newaxis], len(bary), axis = 1).transpose()).transpose())<=(eps+ diam))[0].tolist() for i in range(len(bary))]\n\n    # --------------------------------------------------------------------------\n    \"\"\" BOUNDARY_nodes (subset 0:len(nodes) )\"\"\"\n    bdry_nodes = [nodes.index(i) for i in boundary]\n\n    # --------------------------------------------------------------------------\n    \"\"\" SHAPE INTERFACE (subset 0:len(verts) )\"\"\"\n    interface = []  # np.unique(lines[np.where(lines[:,0]==12)][:,1:]).tolist()\n\n    # ------------------------------------------------------------------------------\n    \"\"\" BUILDING MESH CLASS \"\"\"\n    proc_mesh_data = [triangles, omega, verts, hash_table, boundary, nodes, NHD, diam, support, hash_table_approx, bary,\n                      bdry_nodes, hash_table_bary, interface, [], len(verts), len(triangles), len(omega), len(nodes)]\n    mesh = Mesh(proc_mesh_data)\n    # ------------------------------------------------------------------------------\n    return mesh, proc_mesh_data\n\n\ndef prepare_mesh_reg_slim(h, eps, Norm, num_cores):\n    if not (1/h).is_integer() or not (eps/h).is_integer():\n        print('(1/h and delta/h have to be an integer !!!')\n        \n    if eps < h:\n        eps_i = h\n    else:\n        eps_i = eps\n\n    a = [0.,0.]\n    b = [1.,1.]\n    gridsize = np.array([h,h])\n\n    dim = 2 \n    def E(z, L):\n        p = [np.prod([L[k] for k in range(j+1,dim)]) for j in range(dim)] + [np.prod(L)]\n        summe = 0\n        for i in range(dim):\n            summe = summe + z[i] * p[i]  \n        return int(summe)\n    def iE(k, L):\n        p = [np.prod([L[l] for l in range(j+1,dim)]) for j in range(dim)] + [np.prod(L)]\n        x = np.zeros(dim)\n        for i in range(dim):\n            x[i] = k//(int(p[i])) - (k//(int(p[i-1]))) * L[i]\n        return x\n\n    #==============================================================================\n    #                    COMPUTE ARRAYS\n    #==============================================================================\n    roundof = 6 # verts will not give precisely the value but rather 0.1000009 (in order to make \n                # np.where () work we have to ceil roughly in the dimension of the gridsize)\n    N = [int((b[i]-a[i])/gridsize[i]) for i in range(dim)]\n#    L = [N[i]-1   for i in range(dim)]\n    def ha(x):\n        return np.array([gridsize[0]*x[0], gridsize[1]*x[1]])\n    \n    a_i = [a[0]-eps_i, a[1]-eps_i]\n    b_i = np.around([b[0]+eps_i, b[1]+eps_i], decimals = roundof)\n    N_i = [int(np.around((b_i[i]-a_i[i])/gridsize[i])) + 1 for i in range(dim)]\n    \n    #-----------------------------------------------------------------------------#\n    \"\"\" VERTS \"\"\"\n    def fun(k):\n        return np.around(np.array(a_i) +  ha(iE(k,N_i)), decimals = roundof)\n    pool = Pool(processes=num_cores) \n    verts = np.array(pool.map(fun,range(np.prod(N_i)) ))# np.array([  for k in range(np.prod(N_i))])\n    pool.close()\n    pool.join()\n    pool.clear()\n#    print verts\n    #-----------------------------------------------------------------------------#\n    \"\"\" OMEGA \"\"\"#+  ha(iE(0,N)\n    k_0 =  np.where(np.all(verts[:,0:2]==np.around(np.array(a) , decimals = roundof).tolist(),axis=1))[0][0] \n    omega = [k_0 + k + j*N_i[1] for k in range(N[1]) for j in range(N[0])]# pool.map(om, range(num_omega))    \n    ####-----------------------------------------------------------------------------#\n    \"\"\" OMEGA_I \"\"\"\n    omega_i = list(set(range(len(verts))) - set(omega) -set(np.where(verts[:,0]== b_i[0])[0])  -set(np.where(verts[:,1]== b_i[1])[0]  ) )\n    ###-----------------------------------------------------------------------------#\n    #\"\"\" NODES \"\"\"\n    nodes = omega  \n    ##-----------------------------------------------------------------------------#\n    \"\"\" OMEGA \"\"\"\n    omega = np.zeros((2*len(nodes), 3), dtype = int)\n    \n    for j in range(len(nodes)):\n        k = nodes[j]\n        omega[2*j,    ] = np.array([k, k+ N_i[1]+1,k + 1])#  clockwise\n        omega[2*j + 1,    ] = np.array([k, k + N_i[1], k+ N_i[1]+1])#  clockwise\n    \n    \"\"\" OMEGA_i \"\"\"\n    Omega_i = np.zeros((2*len(omega_i), 3), dtype = int)\n    \n    for j in range(len(omega_i)):\n        k = omega_i[j]\n        Omega_i[2*j,    ] = np.array([k, k+ N_i[1]+1,k + 1 ]) # clockwise\n        Omega_i[2*j +1, ] = np.array([k,k + N_i[1], k+ N_i[1]+1])#clockwise\n    \n    omega_i = Omega_i\n    \n    ##-----------------------------------------------------------------------------#\n    \"\"\" BOUNDARY \"\"\"\n    boundary1 = [k_0 + kk  for kk in range(N[0])]\n    boundary2 = [k_0 + N[1]*N_i[0] + kkk  for kkk in range(N[0]+1)]\n    boundary3 = [k_0 + j*N_i[0] for j in range(N[1])]\n    boundary4 = [k_0 +N[0]+ j*N_i[0] for j in range(N[1])]\n    \n    boundary = np.unique( boundary1 + boundary2 + boundary3 + boundary4)\n\n    ##-----------------------------------------------------------------------------#\n    \n    aux = np.zeros((len(omega),4), dtype=int)    \n    aux[:,1:] = omega  \n    aux[:,0] = 1*np.ones(len(omega), dtype = int)\n    omega = aux\n    \n    aux = np.zeros((len(omega_i),4), dtype=int)    \n    aux[:,1:] = omega_i  \n    aux[:,0] = 2*np.ones(len(omega_i), dtype = int)\n    omega_i = aux\n    \n    ##-----------------------------------------------------------------------------#\n    \"\"\" TRIANGLES \"\"\"\n    triangles = np.vstack((omega, omega_i))\n\n    \"\"\" NODES \"\"\"\n    num_omega = np.shape(omega)[0]\n    nodes = np.unique(omega[:,1:4].reshape(3*num_omega))\n\n    ##-----------------------------------------------------------------------------#\n    \"\"\" PERMUTE VERTS TO SORT OMEGA_I TO THE END and ADAPT TRIANGLES etc \"\"\" \n    nodes_inner = list(set(nodes) - set(boundary))\n    nodes_rest = list(set(range(len(verts))) - set(nodes_inner) - set(boundary))\n    verts = np.vstack((verts[nodes_inner], verts[boundary], verts[nodes_rest]))\n    \n    new_order = nodes_inner + list(boundary) + nodes_rest\n    def permutation(i):\n        return new_order.index(i)\n    \n    triangles_old = triangles\n    triangles = np.zeros(np.shape(triangles_old), dtype = int)\n    triangles[:,0] = triangles_old[:,0]\n    \n    for i in range(np.shape(triangles_old)[0]):\n        for j in range(1,4):\n            triangles[i,j] = int(permutation(triangles_old[i,j] ))\n\n    omega = triangles[np.where(triangles[:,0] != 2)[0]]\n    boundary = range(len(nodes_inner), len(nodes_inner)+len(boundary))\n    nodes = list(range(len(nodes_inner)))+list(boundary)\n\n    #--------------------------------------------------------------------------\n    \"\"\" BOUNDARY_nodes (subset 0:len(nodes) )\"\"\"      \n    bdry_nodes = [nodes.index(i) for i in boundary] \n    \n    #--------------------------------------------------------------------------\n    \"\"\" SHAPE INTERFACE (subset 0:len(verts) )\"\"\"      \n    interface = []#np.unique(lines[np.where(lines[:,0]==12)][:,1:]).tolist()     \n\n    #------------------------------------------------------------------------------  \n    \"\"\" BUILDING MESH CLASS \"\"\"\n    proc_mesh_data = [triangles, omega, verts, boundary, nodes, bdry_nodes, interface]    \n    mesh = Mesh_slim(proc_mesh_data)\n    #------------------------------------------------------------------------------       \n    return mesh, proc_mesh_data\n\n\n\n\n\n       \ndef prepare_mesh_slim(verts, lines, triangles, eps):\n    verts = verts[:,0:2]\n    # note that eps is determined already in the mesh, however: for \n    # homogeneous dirichtlet constraints it simply has to be smaller than\n    # the pre-determined epsilon\n\n    \"\"\" sort triangles \"\"\"\n    # we sort by labels\n    # this is important such that omega[k,] = triangle[k,]\n    # As a consequence we can use omega for the list 'support'\n    triangles = triangles[triangles[:,0].argsort()]\n\n    def norm(x):\n        return np.max(np.abs(x), axis= 0)\n    #--------------------------------------------------------------------------\n    \"\"\" DECRYPTING LABELS: 1 = shape; 2 = omega\\shape; 3 = omega_i \"\"\"   \n    omega = triangles[np.where(triangles[:,0] != 3)[0]]    \n\n    #--------------------------------------------------------------------------\n    \"\"\" SHAPE INTERFACE (subset 0:len(verts) )\"\"\"      \n    interface = np.unique(lines[np.where(lines[:,0]==12)][:,1:]).tolist()   \n    \n    #--------------------------------------------------------------------------\n    \"\"\" NODES (subset of verts)\"\"\"   \n\n    omega1 = triangles[np.where(triangles[:,0] == 1)] \n    omega2 = triangles[np.where(triangles[:,0] == 2)] \n    nodes1 = list(np.unique(omega1[:,1:4]))\n    nodes2 = list(np.unique(omega2[:,1:4]))\n\n    G_N = []\n    for i in interface:\n        G_N += np.where(norm((verts-np.repeat(verts[i][:,np.newaxis], len(verts), axis = 1).transpose()).transpose())<=eps)[0].tolist()\n\n    G_N1 = list( (set(nodes1)&set(G_N)) )\n    G_N2 = list(  (set(nodes2)&set(G_N)) )\n    \n    nodes1 = list(set(nodes1) - set(G_N1) )\n    nodes2 = list(set(nodes2) - set(G_N2) )\n    G_N1 = list( (set(G_N1)-set(interface)) )\n    G_N2 = list(  (set(G_N2)-set(interface)) )\n    nodes = list(nodes1)  + list(G_N1)+ interface + list(G_N2) + list(nodes2) \n    nodes = np.array(nodes)\n\n    #--------------------------------------------------------------------------\n    \"\"\" BOUNDARY_verts (subset of verts); label = 9\"\"\"\n    boundary = np.unique(lines[lines[:,0] == 9][:,1:3])\n    # test nodes\n#    plt.plot(verts[boundary][:,0], verts[boundary][:,1], 'ro')\n    ##-----------------------------------------------------------------------------#\n    \"\"\" PERMUTE VERTS TO SORT OMEGA_I TO THE END and ADAPT TRIANGLES etc \"\"\" \n    if True:\n        nodes_inner = list(set(nodes) - set(boundary))\n        nodes_rest = list(set(range(len(verts))) - set(nodes_inner) - set(boundary))\n    \n        verts = np.vstack((verts[nodes_inner], verts[boundary], verts[nodes_rest]))\n        \n        new_order = nodes_inner + list(boundary) + nodes_rest\n        def permutation(i):\n            return new_order.index(i)\n        triangles_old = triangles\n        triangles = np.zeros(np.shape(triangles_old), dtype = int)\n        triangles[:,0] = triangles_old[:,0]\n        \n        for i in range(np.shape(triangles_old)[0]):\n            for j in range(1,4):\n                triangles[i,j] = int(permutation(triangles_old[i,j] ))\n        \n    \n        interface_old= interface\n        interface = np.zeros(len(interface_old), dtype = int)\n        for i in range(len(interface_old)):\n            interface[i] = permutation(interface_old[i])\n        \n        omega = triangles[np.where(triangles[:,0] != 3)[0]]\n        # plot omega\n    #    for i in range(len(omega)):\n    #        plt.gca().add_patch(plt.Polygon(verts[omega[i,1:]], closed=True, fill = True, color = 'blue', alpha = 0.2)) \n        \n        boundary = np.array(range(len(nodes_inner), len(nodes_inner)+len(boundary)))\n        nodes = np.array(range(len(nodes_inner)+len(boundary)))#+list(boundary)\n#     PLOT verts\n#    plt.plot(verts[nodes][:,0], verts[nodes][:,1], 'bx')\n#    plt.plot(verts[interface][:,0], verts[interface][:,1], 'yd')\n#    plt.plot(verts[len(nodes):][:,0], verts[len(nodes):][:,1], 'ro')\n    #--------------------------------------------------------------------------\n    \"\"\" BOUNDARY_nodes (subset 0:len(nodes) )\"\"\"      \n    bdry_nodes = [nodes.tolist().index(i) for i in boundary] \n\n    \"\"\" BUILDING MESH CLASS \"\"\"\n    proc_mesh_data = [triangles, omega, verts, boundary, nodes,bdry_nodes,interface]    \n    mesh = Mesh_slim(proc_mesh_data)\n    #------------------------------------------------------------------------------       \n    return mesh, proc_mesh_data\n\n\nclass Mesh_1d:\n\n    # object with all processed mesh data\n    def __init__(self, proc_mesh_data):\n\n        self.triangles = proc_mesh_data[0]\n        self.omega = proc_mesh_data[1]\n        self.verts = proc_mesh_data[2]\n        self.boundary_verts = proc_mesh_data[3]\n        self.nodes = proc_mesh_data[4]\n        self.diam = proc_mesh_data[5]\n        self.hash_table_approx = proc_mesh_data[6]\n        self.bary = proc_mesh_data[7]\n        self.boundary = proc_mesh_data[8]\n        self.hash_table_bary = proc_mesh_data[9]\n        self.shape_interface = proc_mesh_data[10]\n        self.h = proc_mesh_data[11]\n\n\ndef prepare_mesh_reg_1d(h, delta, num_cores, **kwargs):\n\n    interface_point = kwargs.get('interface_point', 'x')\n    if interface_point == 'x':\n        interface_point =  2*h\n        labels = [1,1,3]\n    else:\n        labels = [1,2,3]\n    \n    if not (1/h).is_integer() or not (delta/h).is_integer():\n        print()\n        print('\\n    ---- WARNING ----     \\n')\n        print('(1/h and delta/h have to be an integer !!!')\n        print('\\n    ---- WARNING ----     \\n')\n        print()\n\n    if delta < h:\n        delta_i = h\n    else:\n        delta_i = delta\n        \n    def norm(x):\n        return np.abs(x)\n    a = [0.]\n    b = [1.]\n    gridsize = [h]\n    diam = h\n    dim = 1 \n    def E(z, L):\n        p = [np.prod([L[k] for k in range(j+1,dim)]) for j in range(dim)] + [np.prod(L)]\n        summe = 0\n        for i in range(dim):\n            summe = summe + z[i] * p[i]  \n        return int(summe)\n    def iE(k, L):\n        p = [np.prod([L[l] for l in range(j+1,dim)]) for j in range(dim)] + [np.prod(L)]\n        x = np.zeros(dim)\n        for i in range(dim):\n            x[i] = k//(int(p[i])) - (k//(int(p[i-1]))) * L[i]\n        return x[0]\n    \n    roundof = 7 # verts will not give precisely the value but rather 0.1000009 (in order to make \n                # np.where () work we have to round of, roughly in the dimension of the gridsize)\n    def ha(x):\n        return np.array([gridsize[0]*x])\n    \n    a_i = [a[0]- delta_i]\n    b_i = [b[0] + delta_i]\n    N_i = [int(np.around((b_i[i]-a_i[i])/gridsize[i])) + 1 for i in range(dim)]\n    \n    #-----------------------------------------------------------------------------#\n    \"\"\" VERTS \"\"\"\n    def fun(k):\n        return (a_i[0] +  ha(iE(k,N_i)))[0]#, decimals = roundof)\n    #    pool = Pool(processes=num_cores) \n    verts = np.around(np.array(map(fun, range(np.prod(N_i)) )), decimals = roundof)# np.array([  for k in range(np.prod(N_i))])\n    #    pool.close()\n    #    pool.join()\n    #    pool.clear()\n    #    print verts\n    \n    verts = np.sort(np.unique(np.append(verts, [interface_point]))) \n    # note: if we dont want interface, then interface = 2h, in this case no\n    # new point is added to the grid\n    \"\"\" OMEGA \"\"\"\n    k_0 =  np.where(verts==np.around(np.array(a) , decimals = roundof))[0][0] \n    k_i = np.where(verts==np.around(np.array(interface_point) , decimals = roundof))[0][0] \n    k_1 =  np.where(verts==np.around(np.array(b) , decimals = roundof))[0][0]\n    omega = np.zeros((k_1-k_0, 3), dtype = int)\n    for j in range(k_i - k_0):\n        omega[j, ] = np.array([labels[0], k_0 + j, k_0 + j + 1])#  clockwise\n    for j in range(k_1 - k_i):\n        omega[k_i-k_0 + j, ] = np.array([labels[1], k_i + j, k_i + j + 1])#  clockwise\n    \"\"\" OMEGA_i \"\"\"\n    omega_i = np.zeros((2*len(range(k_0)), 3), dtype = int)\n    for j in range(k_0):\n        omega_i[j,    ] = np.array([labels[2], j, j+1]) # clockwise\n        omega_i[k_0 + j,    ] = np.array([labels[2], k_1 + j, k_1 +j+1])\n    \"\"\" BOUNDARY \"\"\"\n    boundary = [k_0, k_1]\n    \"\"\" TRIANGLES \"\"\"\n    triangles = np.vstack((omega, omega_i))\n    \"\"\" NODES \"\"\"\n    num_omega = np.shape(omega)[0]\n    nodes = np.unique(omega[:,1:3].reshape(2*num_omega))\n    bary = (verts[triangles[:,1]] + verts[triangles[:,2]] ) /2.\n    \"\"\" HASH TABLE_approx (= hash table bary without puffer)\"\"\"      \n    hash_table_approx = []#[np.where(np.abs((bary-np.repeat(bary[i], len(bary))))<=(delta))[0].tolist() for i in range(len(bary))]\n    \"\"\" HASH TABLE (subset 0:len(bary))\"\"\"\n    hash_table_bary = []#[np.where(norm((bary-np.repeat(bary[i], len(bary)).transpose()).transpose())<=(delta+ diam))[0].tolist() for i in range(len(bary))]\n    \"\"\" BOUNDARY_nodes (subset 0:len(nodes) )\"\"\"      \n    bdry_nodes = [nodes.tolist().index(i) for i in boundary]\n    \"\"\" SHAPE INTERFACE (subset 0:len(verts) )\"\"\"      \n    interface = []#np.unique(lines[np.where(lines[:,0]==12)][:,1:]).tolist()\n    \"\"\" BUILDING MESH CLASS \"\"\"\n    proc_mesh_data = [triangles, omega, verts,  boundary, nodes,  diam,  hash_table_approx, bary, bdry_nodes, hash_table_bary, interface, h]    \n    mesh = Mesh_1d(proc_mesh_data)\n    #------------------------------------------------------------------------------       \n    return mesh, proc_mesh_data\n   \n\n\"\"\"-------------------------------------------------------------------------\"\"\"\n\"\"\"                     END PREPARE MESH                                    \"\"\"\n\"\"\"-------------------------------------------------------------------------\"\"\"\n#=============================================================================#\n#=============================================================================#\n#=============================================================================#\n#=============================================================================#\n\"\"\"-------------------------------------------------------------------------\"\"\"\n\"\"\"                   ASSEMBLY FUNCTIONS                                    \"\"\"\n\"\"\"-------------------------------------------------------------------------\"\"\"\n#==============================================================================\n#                          QUADRATURE\n#==============================================================================\nif quad_order_outer == 'test':\n    P = P_test#np.array([ [ 1./3., 1./3.]]).transpose()\n    weights=  np.array([ 0.5])\n    \nelif quad_order_outer == 8:\n    print('outer quad = 16 points')\n    P = np.array([ [ 0.33333333,  0.33333333],\n                   [ 0.45929259,  0.45929259],\n                   [ 0.45929259,  0.08141482],\n                   [ 0.08141482,  0.45929259],\n                   [ 0.17056931,  0.17056931],\n                   [ 0.17056931,  0.65886138],\n                   [ 0.65886138,  0.17056931],\n                   [ 0.05054723,  0.05054723],\n                   [ 0.05054723,  0.89890554],\n                   [ 0.89890554,  0.05054723],\n                   [ 0.26311283,  0.72849239],\n                   [ 0.72849239,  0.00839478],\n                   [ 0.00839478,  0.26311283],\n                   [ 0.72849239,  0.26311283],\n                   [ 0.26311283,  0.00839478],\n                   [ 0.00839478,  0.72849239]]).transpose()\n                   \n    weights=  np.array([ 0.14431560767779\n                       , 0.09509163426728\n                       , 0.09509163426728\n                       , 0.09509163426728\n                       , 0.10321737053472\n                       , 0.10321737053472\n                       , 0.10321737053472\n                       , 0.03245849762320\n                       , 0.03245849762320\n                       , 0.03245849762320\n                       , 0.02723031417443\n                       , 0.02723031417443\n                       , 0.02723031417443\n                       , 0.02723031417443\n                       , 0.02723031417443\n                       , 0.02723031417443])\n\nelif quad_order_outer == 5:\n    print('outer quad = 7 Gaussian points')\n    P = np.array([[0.33333333333333,    0.33333333333333],\n                  [0.47014206410511,    0.47014206410511],\n                  [0.47014206410511,    0.05971587178977],\n                  [0.05971587178977,    0.47014206410511],\n                  [0.10128650732346,    0.10128650732346],\n                  [0.10128650732346,    0.79742698535309],\n                  [0.79742698535309,    0.10128650732346] ]).transpose()\n    \n    weights = np.array([0.22500000000000,\n                        0.13239415278851,\n                        0.13239415278851,\n                        0.13239415278851,\n                        0.12593918054483,\n                        0.12593918054483,\n                        0.12593918054483])\n        \n\nelif quad_order_outer == 3:            \n    P = np.array([[ 1./3.,  1./3.],\n                  [ 0.2       ,  0.6       ],\n                  [ 0.2       ,  0.2       ],\n                  [ 0.6       ,  0.2       ]]).transpose()\n    \n    weights = np.array([-27./48., 25./48., 25./48., 25./48.])\n\nelif quad_order_outer == 2: \n    P = np.array([[1./6.,    1./6.],\n                  [1./6.,    2./3.],  \n                  [2./3.,    1./6.]  ]).transpose()\n    weights = 1./3 * np.ones(3)\n\nelif quad_order_outer == 'GL-5-12':\n    P = np.array([[1./21. * (7 - np.sqrt(7))    , 1./21. * (7 - np.sqrt(7))],\n                  [1./21. * (7 - np.sqrt(7))    , 1- 2./21. * (7 - np.sqrt(7))  ],\n                  [1- 2./21. * (7 - np.sqrt(7)) , 1./21. * (7 - np.sqrt(7))],\n                  [1./42.*(21.-np.sqrt(21*(4*np.sqrt(7)-7))), 0. ],\n                  [0. ,1.-1./42.*(21.-np.sqrt(21*(4*np.sqrt(7)-7)))],\n                  [1.-1./42.*(21.-np.sqrt(21*(4*np.sqrt(7)-7))), 1./42.*(21.-np.sqrt(21*(4*np.sqrt(7)-7)))],\n                  [1./42.*(21.+np.sqrt(21*(4*np.sqrt(7)-7))), 0. ],\n                  [0. ,1.-1./42.*(21.+np.sqrt(21*(4*np.sqrt(7)-7)))],\n                  [1.-1./42.*(21.+np.sqrt(21*(4*np.sqrt(7)-7))), 1./42.*(21.+np.sqrt(21*(4*np.sqrt(7)-7)))],\n                  [0., 0.],\n                  [1., 0.],\n                  [0., 1.] ]).transpose()\n\n\n\n    weights = 2*np.array([7./720. * (14. - np.sqrt(7.)), 7./720. * (14. - np.sqrt(7.)), 7./720. * (14. - np.sqrt(7.)),\n                        1./720. * (7. + 4.*np.sqrt(7.)), 1./720. * (7. + 4.*np.sqrt(7.)), 1./720. * (7. + 4.*np.sqrt(7.)),\n                        1./720. * (7. + 4.*np.sqrt(7.)), 1./720. * (7. + 4.*np.sqrt(7.)), 1./720. * (7. + 4.*np.sqrt(7.)),\n                        1./720. * (8.-np.sqrt(7.)),1./720. * (8.-np.sqrt(7.)),1./720. * (8.-np.sqrt(7.))])\n\n\nelse:\n    print('outer quad = 7 points incl. vertices')\n    # 7-points rule including vertices of triangle\n    P = np.array([[0.,0.],\n               [0.5, 0.],\n               [1., 0.],\n               [1./3., 1./3.],\n               [0.,0.5],\n               [0.5, 0.5],\n               [0.,1.] ]).transpose()\n\n    weights = np.array([1./20., 4./30., 1./20., 9./20., 4./30., 4./30., 1./20.])\n\n#===================        FOR INNER INTEGRAL     ============================\nif quad_order_inner == 8:\n    print('inner quad = 16 points ')\n    P2 = np.array([ [ 0.33333333,  0.33333333],\n                   [ 0.45929259,  0.45929259],\n                   [ 0.45929259,  0.08141482],\n                   [ 0.08141482,  0.45929259],\n                   [ 0.17056931,  0.17056931],\n                   [ 0.17056931,  0.65886138],\n                   [ 0.65886138,  0.17056931],\n                   [ 0.05054723,  0.05054723],\n                   [ 0.05054723,  0.89890554],\n                   [ 0.89890554,  0.05054723],\n                   [ 0.26311283,  0.72849239],\n                   [ 0.72849239,  0.00839478],\n                   [ 0.00839478,  0.26311283],\n                   [ 0.72849239,  0.26311283],\n                   [ 0.26311283,  0.00839478],\n                   [ 0.00839478,  0.72849239]]).transpose()\n                   \n    weights2=  np.array([ 0.14431560767779\n                       , 0.09509163426728\n                       , 0.09509163426728\n                       , 0.09509163426728\n                       , 0.10321737053472\n                       , 0.10321737053472\n                       , 0.10321737053472\n                       , 0.03245849762320\n                       , 0.03245849762320\n                       , 0.03245849762320\n                       , 0.02723031417443\n                       , 0.02723031417443\n                       , 0.02723031417443\n                       , 0.02723031417443\n                       , 0.02723031417443\n                       , 0.02723031417443])\n\nelif quad_order_inner == 5:\n    P2 = np.array([[0.33333333333333,    0.33333333333333],\n                  [0.47014206410511,    0.47014206410511],\n                  [0.47014206410511,    0.05971587178977],\n                  [0.05971587178977,    0.47014206410511],\n                  [0.10128650732346,    0.10128650732346],\n                  [0.10128650732346,    0.79742698535309],\n                  [0.79742698535309,    0.10128650732346] ]).transpose()\n    \n    weights2 = np.array([0.22500000000000,\n                        0.13239415278851,\n                        0.13239415278851,\n                        0.13239415278851,\n                        0.12593918054483,\n                        0.12593918054483,\n                        0.12593918054483])\n\nelif quad_order_inner == 3:    \n    print(\"inner quad = 4 points Gaussian\")        \n    P2 = np.array([[ 1./3.,  1./3.],\n                  [ 0.2       ,  0.6       ],\n                  [ 0.2       ,  0.2       ],\n                  [ 0.6       ,  0.2       ]]).transpose()\n    \n    weights2 = np.array([-27./48., 25./48., 25./48., 25./48.])\n\nelif quad_order_inner == 2: \n    print(\"inner quad = 3 points Gaussian\") \n    P2 = np.array([[1./6.,    1./6.],\n                  [1./6.,    2./3.],  \n                  [2./3.,    1./6.]  ]).transpose()\n    weights2 = 1./3 * np.ones(3)        \n\nelse:\n    print(\"inner quad = 1 point - barycenter + triangle vol\") \n    P2 = np.array([[1./3., 1./3.]]).transpose()\n    weights2 = np.array([1.0])\n\n\nn = np.shape(P)[1]\nn2 = np.shape(P2)[1]\n\nX = np.tile(P,n)\nY = np.repeat(P,n, axis=1)\nW = 0.25 * np.array([weights[i]*weights[r] for i in range(n) for r in range(n)])\n\ndef BASIS(v):\n    return np.array([ 1. - v[0] - v[1], v[0], v[1]])\n\nPSI = BASIS(P)\nPSI_2 = BASIS(P2)\n\nPSI_X = BASIS(X)\nPSI_Y = BASIS(Y)\n\nPSI_P = BASIS(P)\nweights = 0.5 * weights\nweights2 = 0.5 * weights2\n\ndef basis_0(v):\n    return 1. - v[0] - v[1]\ndef basis_1(v):\n    return v[0]\ndef basis_2(v):\n    return v[1]\ndef basis_3(v):\n    return v[1]-v[1]\n\nbasis = [basis_0, basis_1, basis_2, basis_3]\n\n\n\"\"\" TEST FOR MINIMUM PRECISION\"\"\"\nP_outer = P\nweights_outer = weights\nP_inner = P2\nweights_inner = weights2\nn_outer, n_inner = n, n2\nX_outer, Y_inner = np.tile(P_outer,n_inner), np.repeat(P_inner,n_outer, axis=1)\nW_minprec = np.array([weights_outer[r]*weights_inner[i] for i in range(n_inner) for r in range(n_outer)])\nPSI_outer = BASIS(X_outer)\nPSI_inner = BASIS(Y_inner)\n#-----------------------------------------------------------------------------\n\n\n\"\"\"#===========================================================================\n                              QUADRATURE 1d\n#===========================================================================\"\"\"\n## quadpoints and weights for reference interval [0,1]\npoints1_1d = np.polynomial.legendre.leggauss(n1_1d)[0]    \nweights1_1d = np.polynomial.legendre.leggauss(n1_1d)[1] \np1_1d = 0.5 + 0.5 * points1_1d\n\npoints2_1d = np.polynomial.legendre.leggauss(n2_1d)[0]    \nweights2_1d = np.polynomial.legendre.leggauss(n2_1d)[1] \np2_1d = 0.5 + 0.5 * points2_1d\n\nn1_1d = len(p1_1d)\nn2_1d = len(p2_1d)\n\nX_1d = np.tile(p1_1d,n1_1d)\nY_1d = np.repeat(p1_1d,n1_1d)\nW_1d = 0.25 * np.array([weights1_1d[i]*weights1_1d[r] for i in range(n1_1d) for r in range(n1_1d)])\n\ndef BASIS_1d(v):\n    return np.array([ 1-v, v])\n\nPSI_1d = BASIS_1d(p1_1d)\nPSI_2_1d = BASIS_1d(p2_1d)\n\nPSI_X_1d = BASIS_1d(X_1d)\nPSI_Y_1d = BASIS_1d(Y_1d)\n\nPSI_P_1d = BASIS_1d(p1_1d)\nweights1_1d = 0.5 * weights1_1d\nweights2_1d = 0.5 * weights2_1d\n\ndef psi0(v):\n    return 1.-v          \ndef psi1(v):\n    return v\ndef psi2(v):\n    return (v - v)\n\nbasis_1d = [psi0, psi1, psi2]\n\n#==============================================================================\n\"\"\"                 CHOOSE PARAMETER FOR ADAPTIVE RULE                      \"\"\"\n#==============================================================================\nT_ref = [[0., 0.], [1., 0.], [0., 1.]]\n\"\"\" plot quad_points \"\"\"\n#plt.gca().add_patch(plt.Polygon(T_ref , closed=True, fill = False))  \n#for p in P.transpose():\n#    plt.plot(p[0], p[1], 'rx')\n#plt.axis('equal')\n\"\"\"RONALD COOLS and ANN HAEGEMANS  5-7 embedded rule \"\"\"    \nP_radon = np.array([[ 1./3.,  1./3.],\n              [ (6+np.sqrt(15))/21.,            (6+np.sqrt(15))/21. ],\n              [ (6+np.sqrt(15))/21.,            (9. - 2. * np.sqrt(15))/21. ],\n              [ (9. - 2. * np.sqrt(15))/21. ,   (6+np.sqrt(15))/21.  ], \n              [ (6-np.sqrt(15))/21.,            (6-np.sqrt(15))/21. ],\n              [ (6-np.sqrt(15))/21.,            (9.+ 2. * np.sqrt(15))/21. ],\n              [ (9.+ 2. * np.sqrt(15))/21. ,    (6-np.sqrt(15))/21.],\n              [1./9.,                           1./9.],\n              [1./9.,                           7./9.],\n              [7./9.,                           1./9.],\n              [1./9.,                           (4 + np.sqrt(15))/9.],\n              [1./9.,                           (4 - np.sqrt(15))/9.],\n              [(4 + np.sqrt(15))/9.,            1./9.],\n              [(4 + np.sqrt(15))/9.,            (4 - np.sqrt(15))/9.],  \n              [(4 - np.sqrt(15))/9.,            1./9.],\n              [(4 - np.sqrt(15))/9.,            (4+ np.sqrt(15))/9.]])\n\n\nweights7 = np.array([1773./17920., \n                      1./3. * (13558.*np.sqrt(15) - 37801.)/89600., 1./3. * (13558.*np.sqrt(15) - 37801.)/89600.,1./3. * (13558.*np.sqrt(15) - 37801.)/89600.,\n                      1./3. * (-13558.*np.sqrt(15) - 37801.)/89600., 1./3. * (-13558.*np.sqrt(15) - 37801.)/89600., 1./3. * (-13558.*np.sqrt(15) - 37801.)/89600., \n                      1./3. * 19683./17920, 1./3. * 19683./17920,1./3. * 19683./17920,\n                      1./6. * 6561./44800.,1./6. * 6561./44800.,1./6. * 6561./44800.,1./6. * 6561./44800.,1./6. * 6561./44800.,1./6. * 6561./44800.])\nweights5 = 0.5 * np.array([9./40., 1./3. * (155. + np.sqrt(15))/400., 1./3. * (155. + np.sqrt(15))/400., 1./3. * (155. + np.sqrt(15))/400., 1./3. * (155. - np.sqrt(15))/400., 1./3. * (155. - np.sqrt(15))/400., 1./3. * (155. - np.sqrt(15))/400.,0,0,0,0,0,0,0,0,0])    \n\ndef tri_adapt(f, T, **kwargs):\n    tol1_Radon_get = kwargs.get('tol1_Radon_get', tol1_Radon)\n    tol2_Radon_get = kwargs.get('tol2_Radon_get', tol2_Radon)\n#    plot = kwargs.get('plot', 0)\n\n    T = np.array(T)\n\n    M = np.array([T[1] - T[0], T[2] - T[0]]).transpose()\n    def trans(y):   \n#        plt.plot((T[0] + M.dot(y) )[0], (T[0] + M.dot(y) )[1], 'rx')\n        return T[0] + M.dot(y) \n        \n    det = abs(np.linalg.det(np.array([T[1] - T[0], T[2] - T[0]]).transpose()))\n\n    I = np.array(map(lambda i: f(trans(P_radon[i])), range(np.shape(P_radon)[0]) )) \n\n    g_high = det * (I * weights7).sum()\n    g_low =  det * (I * weights5).sum()\n    diam = max(np.linalg.norm(T[0]-T[1]),np.linalg.norm(T[0]-T[2]), np.linalg.norm(T[2]-T[1]))\n    \n#    if plot:\n#        plt.gca().add_patch(plt.Polygon(T , closed=True, fill = False))  \n    \n    if abs(g_high - g_low)/abs(g_low+1e-9) > tol1_Radon_get and diam>tol2_Radon_get:#\n        new1 = list(0.5 * (np.array(T[0])+np.array(T[2])))\n        new2 = list(0.5 * (np.array(T[0])+np.array(T[1])))\n        new3 = list(0.5 * (np.array(T[1])+np.array(T[2])))\n\n        T1 = [T[0], new2, new1]\n        T2 = [new1, new2, new3]\n        T3 = [new1, new3, T[2]]\n        T4 = [new2, T[1], new3]\n        \n        return   tri_adapt(f, T1, tol2_Radon_get = tol2_Radon_get, tol1_Radon_get = tol1_Radon_get)  \\\n               + tri_adapt(f, T2, tol2_Radon_get = tol2_Radon_get, tol1_Radon_get = tol1_Radon_get)  \\\n               + tri_adapt(f, T3, tol2_Radon_get = tol2_Radon_get, tol1_Radon_get = tol1_Radon_get)  \\\n               + tri_adapt(f, T4, tol2_Radon_get = tol2_Radon_get, tol1_Radon_get = tol1_Radon_get) \n               \n    return g_high    \n  \n\"\"\"-------------------------------------------------------------------------\"\"\"\n\"\"\"                   ASSEMBLY FUNCTIONS                                    \"\"\"\n\"\"\"-------------------------------------------------------------------------\"\"\"\n#=============================================================================#\n#=============================================================================#\n#=============================================================================#\n#=============================================================================#\"\"\"-------------------------------------------------------------------------\"\"\"\n\"\"\"-------------------------------------------------------------------------\"\"\"\n\"\"\"                     ASSEMBLY LAPLACE STIFFNESS MATRIX                   \"\"\"\n\"\"\"-------------------------------------------------------------------------\"\"\"\ndef Laplace(mesh,num_cores, **kwargs):\n    deform = kwargs.get('deform', 0)\n    verts = mesh.verts + deform\n    triangles = mesh.triangles\n    nodes = mesh.nodes\n    support = mesh.support\n    nodes = list(nodes)\n    gradient = [np.array([-1, -1]), np.array([1, 0]), np.array([0, 1])]\n    \n    def entry(k,j):\n        res = 0.\n        Skj = list(set(support[k]) & set(support[j]))\n        for s in Skj:\n            if triangles[s,0] != 3:\n                S = triangles[s,1:].tolist()\n                a, b= S.index(nodes[k]),S.index(nodes[j])\n                T = [verts[S[i]] for i in range(3)]    \n                Mat_k = np.array( [T[1] - T[0],T[2] - T[0] ]).transpose()\n                det_k = float((T[1] - T[0])[0] * (T[2] - T[0])[1] - (T[1] - T[0])[1] * (T[2] - T[0])[0] )\n                iMat_k = 1./det_k * np.array([ [Mat_k[1,1], -Mat_k[0,1]], [-Mat_k[1,0], Mat_k[0,0]]  ])\n                res += 0.5 * abs(det_k) * gradient[a].dot(iMat_k.dot(iMat_k.transpose().dot(gradient[b])))\n        return res\n\n    L = np.zeros((len(nodes), len(nodes)))\n    def fun_wrapper(indices):\n        return entry(*indices)\n    def fun(k):\n        return np.array(map(fun_wrapper, [(k, j) for j in mesh.nhd[k]]))\n    AUX = list(map(fun, range(len(nodes))))\n    for k in xrange(len(nodes)):\n        L[k, mesh.nhd[k]] = AUX[k]\n    L = np.tril(L)\n    L = L.transpose() + L - np.diag(L.diagonal())    \n    \n    return ss.csr_matrix(L)\n\ndef Laplace_1d(mesh, diff_coeff):\n\n    verts = mesh.verts\n#    nodes = mesh.nodes\n    gradient = [np.array([-1]), np.array([1])]\n\n    L = ss.lil_matrix((len(mesh.verts),len(mesh.verts)), dtype = float)\n\n    for i in range(len(mesh.triangles)):\n        label_i = mesh.triangles[i,0]\n        T_i = mesh.triangles[i, 1:].tolist()\n        T_i_v = verts[T_i]#np.array([verts[T_i[0]],verts[T_i[1]], verts[T_i[2]]])\n        det_T_i = T_i_v[1] - T_i_v[0]\n        iMat_i = 1./det_T_i\n        for a in range(2):\n            for b in range(2):\n                kk, jj = T_i[a], T_i[b]\n                L[kk, jj] += abs(det_T_i) * diff_coeff[label_i-1] * gradient[a] * iMat_i * iMat_i * gradient[b]\n\n    return L.tocsr()\n\n    \ndef Laplace_para(mesh, diff_coeff, num_cores, **kwargs):\n    \"\"\"\n    actually not worth it, because:\n    1) if matrix small: serial pretty fast, too much overhead elsewise\n    2) if matrix is large: way of parallizing takes way to much RAM\n    \"\"\"\n    \n    deform = kwargs.get('deform', 0)\n    # print(deform)\n    # print('verts1', mesh.verts[50])\n    verts = mesh.verts + deform\n    # print('verts2', verts[50])\n    nodes = mesh.nodes\n    gradient = [np.array([-1, -1]), np.array([1, 0]), np.array([0, 1])]\n\n    # randomly shuffle indices: \n    # For areas where the mesh is fine, hash_i might be much larger \n    liste = range(len(mesh.omega))\n    random.shuffle(list(liste))\n    pieces = np.array_split(liste, 1)\n\n    # For every pieces compute the whole matrix\n    def aux(m):\n\n        L = ss.lil_matrix((len(mesh.nodes),len(mesh.nodes)), dtype = float)\n\n        for i in pieces[m].tolist():\n            label_i = mesh.omega[i,0]\n            T_i = mesh.omega[i, 1:].tolist()\n            T_i_v = verts[T_i]#np.array([verts[T_i[0]],verts[T_i[1]], verts[T_i[2]]])\n            # if i == 60:\n            #     print(T_i_v)\n            Mat_i = np.array( [T_i_v[1] - T_i_v[0],T_i_v[2] - T_i_v[0] ]).transpose()\n            det_T_i = Mat_i[0,0] * Mat_i[1,1] - Mat_i[1,0] * Mat_i[0,1]\n            iMat_i = 1./det_T_i * np.array([ [Mat_i[1,1], -Mat_i[0,1]], [-Mat_i[1,0], Mat_i[0,0]]  ])\n            for a in range(3):\n                for b in range(3):\n                    kk, jj = np.where(nodes == T_i[a])[0][0], np.where(nodes == T_i[b])[0][0]\n                    L[kk, jj] += diff_coeff[label_i-1] * 0.5 * abs(det_T_i) * gradient[a].dot(iMat_i.dot(iMat_i.transpose().dot(gradient[b])))\n\n        return L\n\n    Ls = list(map(aux, range(1)))#Pool(num_cores).\n\n    L = ss.lil_matrix((len(mesh.nodes),len(mesh.nodes)), dtype = float)\n    for i in range(1):\n        # print(Ls[i].A)\n        L += Ls[i]\n\n    return L.tocsr()\n\"\"\"-------------------------------------------------------------------------\"\"\"\n\"\"\"                 END ASSEMBLY LAPLACE STIFFNESS MATRIX                   \"\"\"\n\"\"\"-------------------------------------------------------------------------\"\"\"\n\n#=============================================================================#\n#=============================================================================#\n#=============================================================================#\n\"\"\"-------------------------------------------------------------------------\"\"\"\n\"\"\"                       ASSEMBLY OF RHS                                   \"\"\"\n\"\"\"-------------------------------------------------------------------------\"\"\"\ndef source_term_discon(mesh, source, **kwargs):\n    \"\"\"\n    source: function determining the source term\n    omega: triangles in omega\n    verts: associated nodes\n    \"\"\"\n    deform = kwargs.get('deform', 0)\n    verts = mesh.verts + deform\n\n#    f0 = source[0]\n#    f1 = source[1]\n\n    P = np.array([[ 0.33333333,  0.33333333],\n                  [ 0.2       ,  0.6       ],\n                  [ 0.2       ,  0.2       ],\n                  [ 0.6       ,  0.2       ]]).transpose()\n\n    n = np.shape(P)[1]\n    weights = 0.5 * np.array([-27./48, 25./48, 25./48, 25./48])\n\n    def BASIS(v):\n        return np.array([ 1. - v[0] - v[1], v[0], v[1]])\n\n    PSI = BASIS(P)\n\n    num_nodes = len(mesh.nodes)\n    res = np.zeros(num_nodes)\n\n    labels_inner_domain = np.sort(np.unique(mesh.triangles[:,0]))[0:-1].tolist()\n\n    for label in labels_inner_domain:\n        omega = mesh.triangles[np.where(mesh.triangles[:,0] == label)[0]]\n\n        num_omega = len(omega)\n\n        nodes = list(mesh.nodes)\n        for i in range(num_omega):\n            T_i = omega[i][1:].tolist()\n            T_i_v = np.array([verts[T_i[0]],verts[T_i[1]], verts[T_i[2]]])\n            for k in range(3):\n                Mat_k = np.array( [T_i_v[(k+1)%3] - T_i_v[k],T_i_v[(k-1)%3] - T_i_v[k] ]).transpose()\n                det_k = abs(Mat_k[0,0] * Mat_k[1,1] - Mat_k[1,0] * Mat_k[0,1] )\n                B = source[label-1] * np.ones(n)\n                res[nodes.index(T_i[k])] += det_k * (B * PSI[k] * weights).sum()\n\n    return res\n\n\"\"\"-------------------------------------------------------------------------\"\"\"\n\"\"\"                   END ASSEMBLY OF RHS                                   \"\"\"\n\"\"\"-------------------------------------------------------------------------\"\"\"\n#=============================================================================#\n#=============================================================================#\n#=============================================================================#\n\"\"\"-------------------------------------------------------------------------\"\"\"\n\"\"\"                       ASSEMBLY OF MASSMATRIX                            \"\"\"\n\"\"\"-------------------------------------------------------------------------\"\"\"\ndef mass_matrix2(mesh, **kwargs):\n\n    deform = kwargs.get('deform', 0)\n\n    verts = mesh.verts + deform\n\n    nodes = np.array(mesh.nodes)\n\n    P = np.array([[ 0.33333333,  0.33333333],\n                  [ 0.2       ,  0.6       ],\n                  [ 0.2       ,  0.2       ],\n                  [ 0.6       ,  0.2       ]]).transpose()\n\n    weights = 0.5 * np.array([-27./48, 25./48, 25./48, 25./48])\n\n    def BASIS(v):\n        return np.array([ 1. - v[0] - v[1], v[0], v[1]])\n\n    PSI = BASIS(P)\n\n    num_nodes = len(mesh.nodes)\n\n\n    L = ss.lil_matrix((num_nodes,num_nodes), dtype = float)\n\n    for i in range(len(mesh.omega)):\n        T_i = mesh.omega[i, 1:].tolist()\n        T_i_v = np.array([verts[T_i[0]],verts[T_i[1]], verts[T_i[2]]])\n        Mat_i = np.array( [T_i_v[1] - T_i_v[0],T_i_v[2] - T_i_v[0] ]).transpose()\n        det_T_i = abs(Mat_i[0,0] * Mat_i[1,1] - Mat_i[1,0] * Mat_i[0,1] )\n        for a in range(3):\n            for b in range(3):\n                L[np.where(nodes == T_i[a])[0][0],np.where(nodes == T_i[b])[0][0]] += det_T_i * (PSI[a] * PSI[b] * weights).sum()\n\n    return L.tocsr()\n\ndef mass_matrix2_DG(mesh, **kwargs):\n\n    deform = kwargs.get('deform', 0)\n\n    verts = mesh.verts + deform\n\n    nodes = np.array(mesh.nodes)\n\n    P = np.array([[ 0.33333333,  0.33333333],\n                  [ 0.2       ,  0.6       ],\n                  [ 0.2       ,  0.2       ],\n                  [ 0.6       ,  0.2       ]]).transpose()\n\n    weights = 0.5 * np.array([-27./48, 25./48, 25./48, 25./48])\n\n    def BASIS(v):\n        return np.array([ 1. - v[0] - v[1], v[0], v[1]])\n\n    PSI = BASIS(P)\n\n    num_nodes = len(mesh.nodes)\n\n    L = ss.lil_matrix((3*len(mesh.omega),3*len(mesh.omega)), dtype = float)\n\n    for i in range(len(mesh.omega)):\n        T_i = mesh.omega[i, 1:].tolist()\n        T_i_v = np.array([verts[T_i[0]],verts[T_i[1]], verts[T_i[2]]])\n        Mat_i = np.array( [T_i_v[1] - T_i_v[0],T_i_v[2] - T_i_v[0] ]).transpose()\n        det_T_i = abs(Mat_i[0,0] * Mat_i[1,1] - Mat_i[1,0] * Mat_i[0,1] )\n        for a in range(3):\n            for b in range(3):\n                L[3*i + a, 3*i +b] = det_T_i * (PSI[a] * PSI[b] * weights).sum()\n\n    return L.tocsr()\n\ndef mass_matrix_full(mesh, **kwargs):\n\n    deform = kwargs.get('deform', 0)\n\n    verts = mesh.verts + deform\n\n    P = np.array([[ 0.33333333,  0.33333333],\n                  [ 0.2       ,  0.6       ],\n                  [ 0.2       ,  0.2       ],\n                  [ 0.6       ,  0.2       ]]).transpose()\n\n    weights = 0.5 * np.array([-27./48, 25./48, 25./48, 25./48])\n\n    def BASIS(v):\n        return np.array([ 1. - v[0] - v[1], v[0], v[1]])\n\n    PSI = BASIS(P)\n\n    L = ss.lil_matrix((len(verts),len(verts)), dtype = float)\n\n    for i in range(len(mesh.triangles)):\n        T_i = mesh.triangles[i, 1:].tolist()\n        T_i_v = np.array([verts[T_i[0]],verts[T_i[1]], verts[T_i[2]]])\n        Mat_i = np.array( [T_i_v[1] - T_i_v[0],T_i_v[2] - T_i_v[0] ]).transpose()\n        det_T_i = abs(Mat_i[0,0] * Mat_i[1,1] - Mat_i[1,0] * Mat_i[0,1] )\n        for a in range(3):\n            for b in range(3):\n                L[T_i[a], T_i[b]] += det_T_i * (PSI[a] * PSI[b] * weights).sum()\n\n    return L.tocsr()\n\ndef mass_matrix_full_DG(mesh, **kwargs):\n\n    deform = kwargs.get('deform', 0)\n\n    verts = mesh.verts + deform\n\n    P = np.array([[ 0.33333333,  0.33333333],\n                  [ 0.2       ,  0.6       ],\n                  [ 0.2       ,  0.2       ],\n                  [ 0.6       ,  0.2       ]]).transpose()\n\n    weights = 0.5 * np.array([-27./48, 25./48, 25./48, 25./48])\n\n    def BASIS(v):\n        return np.array([ 1. - v[0] - v[1], v[0], v[1]])\n\n    PSI = BASIS(P)\n\n    L = ss.lil_matrix((3 * len(mesh.triangles), 3 * len(mesh.triangles)), dtype = float)\n\n    for i in range(len(mesh.triangles)):\n        T_i = mesh.triangles[i, 1:].tolist()\n        T_i_v = np.array([verts[T_i[0]],verts[T_i[1]], verts[T_i[2]]])\n        Mat_i = np.array( [T_i_v[1] - T_i_v[0],T_i_v[2] - T_i_v[0] ]).transpose()\n        det_T_i = abs(Mat_i[0,0] * Mat_i[1,1] - Mat_i[1,0] * Mat_i[0,1] )\n        for a in range(3):\n            for b in range(3):\n                L[3*i + a, 3*i + b] += det_T_i * (PSI[a] * PSI[b] * weights).sum()\n\n    return L.tocsr()\n\ndef mass_matrix_para(mesh, num_cores, **kwargs):\n\n    deform = kwargs.get('deform', 0)\n    verts = mesh.verts + deform\n    nodes = np.array(mesh.nodes)\n    P = np.array([[ 0.33333333,  0.33333333],\n                  [ 0.2       ,  0.6       ],\n                  [ 0.2       ,  0.2       ],\n                  [ 0.6       ,  0.2       ]]).transpose()\n\n    weights = 0.5 * np.array([-27./48, 25./48, 25./48, 25./48])\n\n    def BASIS(v):\n        return np.array([ 1. - v[0] - v[1], v[0], v[1]])\n\n    PSI = BASIS(P)\n    # randomly shuffle indices:\n    # For areas where the mesh is fine, hash_i might be much larger\n    liste = range(len(mesh.omega))\n    random.shuffle(list(liste))\n    pieces = np.array_split(liste, num_cores)\n\n    # For every pieces compute the whole matrix\n    def aux(m):\n\n        L = ss.lil_matrix((len(mesh.nodes),len(mesh.nodes)), dtype = float)\n\n        for i in pieces[m].tolist():\n\n            T_i = mesh.omega[i, 1:].tolist()\n            T_i_v = np.array([verts[T_i[0]],verts[T_i[1]], verts[T_i[2]]])\n            Mat_i = np.array( [T_i_v[1] - T_i_v[0],T_i_v[2] - T_i_v[0] ]).transpose()\n            det_T_i = abs(Mat_i[0,0] * Mat_i[1,1] - Mat_i[1,0] * Mat_i[0,1] )\n            for a in range(3):\n                for b in range(3):\n                    L[np.where(nodes == T_i[a])[0][0],np.where(nodes == T_i[b])[0][0]] += det_T_i * (PSI[a] * PSI[b] * weights).sum()\n\n        return L\n\n    Ls = Pool(num_cores).map(aux, range(num_cores))\n\n    L = ss.lil_matrix((len(mesh.nodes),len(mesh.nodes)), dtype = float)\n    for i in range(num_cores):\n        L += Ls[i]\n\n    return L\n\ndef mass_matrix_1d(mesh):\n\n    num_nodes = len(mesh.nodes)\n\n    L = ss.lil_matrix((num_nodes,num_nodes), dtype = float)\n\n    for i in range(len(mesh.omega)):\n        T_i = mesh.omega[i, 1:].tolist()\n        det_T_i = mesh.h\n        for a in range(2):\n            for b in range(2):\n                L[np.where(mesh.nodes == T_i[a])[0][0],np.where(mesh.nodes == T_i[b])[0][0]] += det_T_i * (PSI_P_1d[a] * PSI_P_1d[b] * weights1_1d).sum()\n\n    return L.tocsr()\n\ndef mass_matrix_1d_full(mesh):\n\n    num_nodes = len(mesh.verts)\n\n    L = ss.lil_matrix((num_nodes,num_nodes), dtype = float)\n\n    for i in range(len(mesh.triangles)):\n        T_i = mesh.triangles[i, 1:].tolist()\n        det_T_i = mesh.h\n        for a in range(2):\n            for b in range(2):\n                L[T_i[a], T_i[b]] += det_T_i * (PSI_P_1d[a] * PSI_P_1d[b] * weights1_1d).sum()\n\n    return L.tocsr()\n\n\ndef assembly_coupling_1d(mesh, gam, retriangulate, num_cores):\n\n    labels_domains = np.sort(np.unique(mesh.triangles[:,0]))\n    nodes = np.array(mesh.nodes)\n\n    liste = range(len(mesh.omega))\n    pieces = np.array_split(liste, num_cores)\n\n    # For every pieces compute the whole matrix\n    def aux(m):\n\n        L = ss.lil_matrix((len(mesh.nodes),len(mesh.nodes)), dtype = float)\n        for i in pieces[m].tolist():\n\n            label_i = mesh.omega[i, 0]\n            eps_i = gam['eps'+str(label_i)]\n\n            T_i = mesh.omega[i, 1:].tolist()\n            T_i_v = mesh.verts[T_i]\n\n            det_T_i = abs(mesh.h)\n\n            i_triangles = i#np.where(np.all(mesh.triangles == mesh.f[i],axis=1))[0][0]\n\n            hash_i = mesh.hash_table_bary[i_triangles]\n\n            for j in hash_i:\n\n                label_j = mesh.triangles[j, 0]\n                gam_j = gam[str(label_i)+str(label_j)]\n\n                T_j = mesh.triangles[j, 1:].tolist()\n                T_j_v = mesh.verts[T_j]\n\n                def iPhi_j(y):\n                    return 1./mesh.h * ( y - np.repeat(T_j_v[0], n2_1d))\n\n                def I1(x):\n                    x_trans = (T_i_v[0]+ mesh.h * x)\n                    integral, integral0, integral1 = 0., 0., 0.\n                    aux = np.repeat(x_trans, n2_1d)\n\n                    def inner(tri, gam_j):\n                        tri = np.array(tri)\n                        h_l = tri[1] - tri[0]\n                        det_l = abs(h_l)\n                        def Phi_l(y):\n                            return np.repeat(tri[0], n2_1d) +  h_l * y\n\n                        GAM = det_l * gam_j(aux, Phi_l(p2_1d)) * weights2_1d\n\n                        if label_j != labels_domains[-1]:\n\n                            return  GAM.sum(), (basis_1d[0](iPhi_j(Phi_l(p2_1d))) * GAM ).sum(), (basis_1d[1](iPhi_j(Phi_l(p2_1d))) * GAM ).sum()\n                        else:\n                            return  GAM.sum(), 0., 0.\n\n                    tri = retriangulate(x_trans, T_j_v, eps_i, mesh.h )\n\n                    if len(tri) != 0:\n\n                        v, v0, v1= inner(tri, gam_j)\n                        integral  = v\n                        integral0 = v0\n                        integral1 = v1\n\n                    return np.array([integral0, integral1, integral])\n\n                I = np.array(map(I1, p1_1d)).transpose()\n\n\n                for a in range(2):\n                    kk = np.where(nodes == T_i[a])[0][0]\n                    for b in range(2):\n                       if label_j != labels_domains[-1]:\n                           L[kk, np.where(nodes == T_j[b])[0][0]] += -det_T_i * (PSI_P_1d[a] * I[b] * weights1_1d).sum()\n                       L[kk, np.where(nodes == T_i[b])[0][0]] += det_T_i * (PSI_P_1d[a] * PSI_P_1d[b] * I[2] * weights1_1d).sum()\n        return 2 * L\n\n\n\n    if num_cores == 1:\n        Ls = map(aux, range(num_cores))#\n    else:\n        p = Pool(num_cores)\n        Ls = p.map(aux, range(num_cores))\n        p.close()\n        p.join()\n        p.clear()\n\n    L = ss.lil_matrix((len(mesh.nodes),len(mesh.nodes)), dtype = float)\n    for i in range(num_cores):\n        L += Ls[i]\n\n    del Ls\n\n    return L\n\ndef assembly_coupling_1d_full(mesh, gam, retriangulate, num_cores):\n#    labels_domains = np.sort(np.unique(mesh.triangles[:,0]))\n\n    liste = range(len(mesh.triangles))\n    pieces = np.array_split(liste, num_cores)\n\n    # For every pieces compute the whole matrix\n    def aux(m):\n\n        L = ss.lil_matrix((len(mesh.verts),len(mesh.verts)), dtype = float)\n        for i in pieces[m].tolist():\n\n            label_i = mesh.triangles[i, 0]\n            eps_i = gam['eps'+str(label_i)]\n\n            T_i = mesh.triangles[i, 1:].tolist()\n            T_i_v = mesh.verts[T_i]\n\n            det_T_i = abs(mesh.h)\n\n            i_triangles = i#np.where(np.all(mesh.triangles == mesh.omega[i],axis=1))[0][0]\n\n            hash_i = mesh.hash_table_bary[i_triangles]\n\n            for j in hash_i:\n\n                label_j = mesh.triangles[j, 0]\n                gam_j = gam[str(label_i)+str(label_j)]\n\n                T_j = mesh.triangles[j, 1:].tolist()\n                T_j_v = mesh.verts[T_j]\n\n                def iPhi_j(y):\n                    return 1./mesh.h * ( y - np.repeat(T_j_v[0], n2_1d))\n\n                def I1(x):\n                    x_trans = (T_i_v[0]+ mesh.h * x)\n                    integral, integral0, integral1 = 0., 0., 0.\n                    aux = np.repeat(x_trans, n2_1d)\n\n                    def inner(tri, gam_j):\n                        tri = np.array(tri)\n                        h_l = tri[1] - tri[0]\n                        det_l = abs(h_l)\n                        def Phi_l(y):\n                            return np.repeat(tri[0], n2_1d) +  h_l * y\n\n                        GAM = det_l * gam_j(aux, Phi_l(p2_1d)) * weights2_1d\n\n#                        if label_j != labels_domains[-1]:\n\n                        return  GAM.sum(), (basis_1d[0](iPhi_j(Phi_l(p2_1d))) * GAM ).sum(), (basis_1d[1](iPhi_j(Phi_l(p2_1d))) * GAM ).sum()\n#                        else:\n#                            return  GAM.sum(), 0., 0.\n\n                    tri = retriangulate(x_trans, T_j_v, eps_i, mesh.h )\n\n                    if len(tri) != 0:\n\n                        v, v0, v1= inner(tri, gam_j)\n                        integral  = v\n                        integral0 = v0\n                        integral1 = v1\n\n                    return np.array([integral0, integral1, integral])\n\n                I = np.array(map(I1, p1_1d)).transpose()\n\n\n                for a in range(2):\n                    kk = T_i[a]\n                    for b in range(2):\n                       L[kk, T_j[b]] += -det_T_i * (PSI_P_1d[a] * I[b] * weights1_1d).sum()\n                       L[kk, T_i[b]] += det_T_i * (PSI_P_1d[a] * PSI_P_1d[b] * I[2] * weights1_1d).sum()\n        return 2 * L\n\n\n\n    if num_cores == 1:\n        Ls = map(aux, range(num_cores))#\n    else:\n        p = Pool(num_cores)\n        Ls = p.map(aux, range(num_cores))\n        p.close()\n        p.join()\n        p.clear()\n\n    L = ss.lil_matrix((len(mesh.verts),len(mesh.verts)), dtype = float)\n    for i in range(num_cores):\n        L += Ls[i]\n\n    del Ls\n\n    return L\n\n\ndef assembly_coupling(mesh, gam, retriangulate, Norm, num_cores, **kwargs):\n\n    labels_domains = np.sort(np.unique(mesh.triangles[:,0]))\n    deform = kwargs.get('deform', 0)\n    verts = mesh.verts + deform\n    nodes = np.array(mesh.nodes)\n\n    # randomly shuffle indices:\n    # For areas where the mesh is fine, hash_i might be much larger\n    liste = range(len(mesh.omega))\n    random.shuffle(list(liste))\n    pieces = np.array_split(liste, num_cores)\n\n    # For every pieces compute the whole matrix\n    def aux(m):\n\n        L = ss.lil_matrix((len(mesh.nodes),len(mesh.nodes)), dtype = float)\n\n        for i in pieces[m].tolist():\n\n            label_i = mesh.omega[i, 0]\n            eps_i = gam['eps'+str(label_i)]\n\n            T_i = mesh.omega[i, 1:].tolist()\n            T_i_v = verts[T_i]\n            Mat_i = np.array( [T_i_v[1] - T_i_v[0],T_i_v[2] - T_i_v[0] ]).transpose()\n            det_T_i = abs(Mat_i[0,0] * Mat_i[1,1] - Mat_i[1,0] * Mat_i[0,1])\n\n            def Phi_i(y):\n                return np.repeat(T_i_v[0][:,np.newaxis], n**2, axis=1) +  Mat_i.dot(y)\n\n            i_triangles = np.where(np.all(mesh.triangles == mesh.omega[i],axis=1))[0][0]\n            hash_i = np.where(norm_dict[Norm]((mesh.bary-np.repeat(mesh.bary[i][:,np.newaxis], len(mesh.bary), axis = 1).transpose()).transpose())<=(eps_i + mesh.diam))[0].tolist()\n\n            for j in hash_i:\n\n                label_j = mesh.triangles[j, 0]\n                gam_j = gam[str(label_i)+str(label_j)]\n\n                T_j = mesh.triangles[j, 1:].tolist()\n                T_j_v = verts[T_j]\n                Mat_j = np.array( [T_j_v[1] - T_j_v[0],T_j_v[2] - T_j_v[0] ]).transpose()\n                det_T_j = Mat_j[0,0] * Mat_j[1,1] - Mat_j[1,0] * Mat_j[0,1]\n\n                def check_interaction(S,T, norm, eps):\n                    \"\"\"checks if T is subset of the interaction domain of S \"\"\" #  is this really an improvement here due to the overhead of \"check_interaction\"?\n                    length_of_edges = np.array([np.linalg.norm(T[0]-T[1]),np.linalg.norm(T[0]-T[2]), np.linalg.norm(T[1]-T[2])] )\n                    diam = np.max(length_of_edges)\n                    return np.all(np.array([ np.any(np.array([norm(S[k]-T[i]) for i in range(3)] )< (max(eps-0.5*diam, 0))) for k in range(len(T))]) )\n\n                if check_interaction(T_i_v,T_j_v, norm_dict[Norm], eps_i):#norm_dict[Norm](mesh.bary[i_triangles]-mesh.bary[j]) < eps_i -mesh.diam:\n                    # no re-triangulation needed\n                    def Phi_j(y):\n                        return np.repeat(T_j_v[0][:,np.newaxis], n**2, axis=1) +  Mat_j.dot(y)\n\n                    for a in range(3):\n                        kk = np.where(nodes == T_i[a])[0][0]\n                        for b in range(3):\n                           if label_j != labels_domains[-1]:\n                               L[kk, np.where(nodes == T_j[b])[0][0]] += -det_T_i * abs(det_T_j) * ( PSI_X[a] *  PSI_Y[b]  * W * gam_j(Phi_i(X),Phi_j(Y))).sum()\n                           L[kk, np.where(nodes == T_i[b])[0][0]] += det_T_i * abs(det_T_j) * ( PSI_X[a] *  PSI_X[b]  * W * gam_j(Phi_i(X),Phi_j(Y))).sum()#det_T_i * (PSI_P[a] * PSI_P[b] * I[3] * weights).sum()\n                else:\n\n                    iMat_j = 1./det_T_j * np.array([ [Mat_j[1,1], -Mat_j[0,1]], [-Mat_j[1,0], Mat_j[0,0]]  ])\n                    def iPhi_j(y):\n                        return iMat_j.dot( y - np.repeat(T_j_v[0][:,np.newaxis], n2, axis=1))\n\n                    def I1(x):\n                        x_trans = (T_i_v[0]+Mat_i.dot(x))\n                        integral, integral0, integral1, integral2 = 0., 0., 0., 0.\n                        aux = np.repeat(x_trans[:,np.newaxis], n2, axis=1)\n\n                        def inner(tri, gam_j):\n                            tri = np.array(tri)\n                            Mat_l = np.array( [tri[1] - tri[0],tri[2] - tri[0] ]).transpose()\n                            det_l = abs((tri[1] - tri[0])[0] * (tri[2] - tri[0])[1] - (tri[1] - tri[0])[1] * (tri[2] - tri[0])[0] )\n                            def Phi_l(y):\n                                return np.repeat(tri[0][:,np.newaxis], n2, axis=1) +  Mat_l.dot(y)\n\n                            GAM = det_l * gam_j(aux, Phi_l(P2)) * weights2\n\n                            if label_j != labels_domains[-1]:\n                                return  GAM.sum(), (basis[0](iPhi_j(Phi_l(P2))) * GAM ).sum(), (basis[1](iPhi_j(Phi_l(P2))) * GAM ).sum()  , (basis[2](iPhi_j(Phi_l(P2))) * GAM ).sum()\n                            else:\n                                return  GAM.sum(), 0., 0., 0.\n\n                        tris = retriangulate(x_trans, T_j_v, Norm, eps_i )\n                        if len(tris) != 0:\n                            for tri in tris:\n                                v, v0, v1, v2 = inner(tri, gam_j)\n                                integral  += v\n                                integral0 += v0\n                                integral1 += v1\n                                integral2 += v2\n\n                                \"\"\"plot for testing below\"\"\"\n                #                plt.gca().add_patch(plt.Polygon(tri , closed=True, fill = True))\n                #                plt.gca().add_patch(plt.Polygon(tri , closed=True, fill = False))\n\n                        return np.array([integral0, integral1, integral2, integral])\n\n                    I = np.array(list(map(I1, P.transpose()))).transpose()\n\n                    for a in range(3):\n                        kk = np.where(nodes == T_i[a])[0][0]\n                        for b in range(3):\n                           if label_j != labels_domains[-1]:\n                               L[kk, np.where(nodes == T_j[b])[0][0]] += -det_T_i * (PSI_P[a] * I[b] * weights).sum()\n                           L[kk, np.where(nodes == T_i[b])[0][0]] += det_T_i * (PSI_P[a] * PSI_P[b] * I[3] * weights).sum()\n\n        return 2 * L\n\n    p = Pool(num_cores)\n\n    Ls = p.map(aux, range(num_cores))#\n\n    L = ss.lil_matrix((len(mesh.nodes),len(mesh.nodes)), dtype = float)\n    for i in range(num_cores):\n        L += Ls[i]\n\n    del Ls\n    p.close()\n    p.join()\n    p.clear()\n\n    return L\n\n\n\ndef assembly_coupling_full_DG(mesh, gam, retriangulate, norm, num_cores, **kwargs):\n    \"\"\"\n        STANDARD VERSION BY NOW !\n\n        -----\n\n       uses simple criterion\n                ||E_a^bary - E_b^bary || < delta - h\n       to decide whether subdivision or special treatment of outer triangle is\n       needed\n    \"\"\"\n#    labels_domains = np.sort(np.unique(mesh.triangles[:,0]))\n    deform = kwargs.get('deform', 0)\n    hash_onthefly = kwargs.get('hash_onthefly', 0)\n    verts = mesh.verts + deform\n\n    # randomly shuffle indices:\n    # For areas where the mesh is fine, hash_i might be much larger\n    liste = range(len(mesh.triangles))\n    random.shuffle(list(liste))\n    pieces = np.array_split(liste, num_cores)\n\n    # For every pieces compute the whole matrix\n    def aux(m):\n\n        L = ss.lil_matrix( (3*len(mesh.triangles), 3*len(mesh.triangles)), dtype = float)\n\n        for i in pieces[m].tolist():\n\n            label_i = mesh.triangles[i, 0]\n            eps_i = gam['eps'+str(label_i)]\n\n            T_i = mesh.triangles[i, 1:].tolist()\n            T_i_v = verts[T_i]\n            Mat_i = np.array( [T_i_v[1] - T_i_v[0],T_i_v[2] - T_i_v[0] ]).transpose()\n            det_T_i = abs(Mat_i[0,0] * Mat_i[1,1] - Mat_i[1,0] * Mat_i[0,1])\n            def Phi_i(y):\n                return np.repeat(T_i_v[0][:,np.newaxis], n**2, axis=1) +  Mat_i.dot(y)\n\n            i_triangles = i\n            if hash_onthefly:\n                hash_i = np.where(norm((mesh.bary-np.repeat(mesh.bary[i][:,np.newaxis], len(mesh.bary), axis = 1).transpose()).transpose())<=(eps_i + mesh.diam))[0].tolist()\n            else:\n                hash_i = mesh.hash_table_bary[i_triangles]\n\n            for j in hash_i:\n\n                label_j = mesh.triangles[j, 0]\n                gam_j = gam[str(label_i)+str(label_j)]\n\n                T_j = mesh.triangles[j, 1:].tolist()\n                T_j_v = verts[T_j]\n                Mat_j = np.array( [T_j_v[1] - T_j_v[0],T_j_v[2] - T_j_v[0] ]).transpose()\n                det_T_j = Mat_j[0,0] * Mat_j[1,1] - Mat_j[1,0] * Mat_j[0,1]\n\n                if norm(mesh.bary[i_triangles]-mesh.bary[j]) < eps_i  -mesh.diam:\n                    # no subdivision or outer integral treatment needed\n                    def Phi_j(y):\n                        return np.repeat(T_j_v[0][:,np.newaxis], n**2, axis=1) +  Mat_j.dot(y)\n\n                    for a in range(3):\n                        for b in range(3):\n                            #if label_j != labels_domains[-1]:\n                            L[3*i+a, 3*j+b] += -det_T_i * abs(det_T_j) * ( PSI_X[a] *  PSI_Y[b]  * W * gam_j(Phi_i(X),Phi_j(Y))).sum()\n                            # if i==j:\n                            L[3*i+a, 3*i+b] += det_T_i * abs(det_T_j) * ( PSI_X[a] *  PSI_X[b]  * W * gam_j(Phi_i(X),Phi_j(Y))).sum()#det_T_i * (PSI_P[a] * PSI_P[b] * I[3] * weights).sum()\n                else:\n\n                    iMat_j = 1./det_T_j * np.array([ [Mat_j[1,1], -Mat_j[0,1]], [-Mat_j[1,0], Mat_j[0,0]]  ])\n                    def iPhi_j(y):\n                        return iMat_j.dot( y - np.repeat(T_j_v[0][:,np.newaxis], n2, axis=1))\n\n                    def I1(x):\n                        x_trans = (T_i_v[0]+Mat_i.dot(x))\n                        integral, integral0, integral1, integral2 = 0., 0., 0., 0.\n                        aux = np.repeat(x_trans[:,np.newaxis], n2, axis=1)\n\n                        def inner(tri, gam_j):\n                            tri = np.array(tri)\n                            Mat_l = np.array( [tri[1] - tri[0],tri[2] - tri[0] ]).transpose()\n                            det_l = abs((tri[1] - tri[0])[0] * (tri[2] - tri[0])[1] - (tri[1] - tri[0])[1] * (tri[2] - tri[0])[0] )\n                            def Phi_l(y):\n                                return np.repeat(tri[0][:,np.newaxis], n2, axis=1) +  Mat_l.dot(y)\n\n                            GAM = det_l * gam_j(aux, Phi_l(P2)) * weights2\n\n                            return  GAM.sum(), (basis[0](iPhi_j(Phi_l(P2))) * GAM ).sum(), (basis[1](iPhi_j(Phi_l(P2))) * GAM ).sum()  , (basis[2](iPhi_j(Phi_l(P2))) * GAM ).sum()\n\n                        tris = retriangulate(x_trans, T_j_v, norm, eps_i )\n\n                        if len(tris) != 0:\n                            for tri in tris:\n                                v, v0, v1, v2 = inner(tri, gam_j)\n                                integral  += v\n                                integral0 += v0\n                                integral1 += v1\n                                integral2 += v2\n\n                                \"\"\"plot for testing below\"\"\"\n                #                plt.gca().add_patch(plt.Polygon(tri , closed=True, fill = True))\n                #                plt.gca().add_patch(plt.Polygon(tri , closed=True, fill = False))\n\n                        return np.array([integral0, integral1, integral2, integral])\n\n                    I = np.array( list(map(I1, P.transpose())) ).transpose()\n                    for a in range(3):\n                        for b in range(3):\n\n                           L[3*i+a, 3*j+b] += -det_T_i * (PSI_P[a] * I[b] * weights).sum()\n                           L[3*i+a, 3*i+b] += det_T_i * (PSI_P[a] * PSI_P[b] * I[3] * weights).sum()\n\n        return 2 * L\n\n    p = Pool(num_cores)\n\n    Ls = p.map(aux, range(num_cores))#\n   # Ls = list(map(aux, range(num_cores)))  #\n#    L =  np.zeros((len(verts),len(verts)), dtype = float)#ss.lil_matrix((len(verts),len(verts)), dtype = float)\n    L =  ss.lil_matrix((3*len(mesh.triangles),3*len(mesh.triangles)), dtype = float)\n    for i in range(num_cores):\n        L += Ls[i]\n\n    del Ls\n    p.close()\n    p.join()\n    p.clear()\n\n    return L\n\ndef assembly_coupling_full_standard(mesh, gam, retriangulate, norm, num_cores, **kwargs):\n    \"\"\"\n        STANDARD VERSION BY NOW !\n\n        -----\n\n       uses simple criterion\n                ||E_a^bary - E_b^bary || < delta - h\n       to decide whether subdivision or special treatment of outer triangle is\n       needed\n    \"\"\"\n#    labels_domains = np.sort(np.unique(mesh.triangles[:,0]))\n    deform = kwargs.get('deform', 0)\n    hash_onthefly = kwargs.get('hash_onthefly', 0)\n    verts = mesh.verts + deform\n\n    # randomly shuffle indices:\n    # For areas where the mesh is fine, hash_i might be much larger\n    liste = range(len(mesh.triangles))\n    random.shuffle(list(liste))\n    pieces = np.array_split(liste, num_cores)\n\n    # For every pieces compute the whole matrix\n    def aux(m):\n\n        L = ss.lil_matrix((len(verts),len(verts)), dtype = float)\n\n        for i in pieces[m].tolist():\n\n            label_i = mesh.triangles[i, 0]\n            eps_i = gam['eps'+str(label_i)]\n\n            T_i = mesh.triangles[i, 1:].tolist()\n            T_i_v = verts[T_i]\n            Mat_i = np.array( [T_i_v[1] - T_i_v[0],T_i_v[2] - T_i_v[0] ]).transpose()\n            det_T_i = abs(Mat_i[0,0] * Mat_i[1,1] - Mat_i[1,0] * Mat_i[0,1])\n\n\n            \"\"\"test for minimum precision\"\"\"\n            # def Phi_i(y):\n            #     return np.repeat(T_i_v[0][:,np.newaxis], n**2, axis=1) +  Mat_i.dot(y)\n            def Phi_i(y):\n                return np.repeat(T_i_v[0][:,np.newaxis], n_inner*n_outer, axis=1) +  Mat_i.dot(y)\n\n            i_triangles = i\n            if hash_onthefly:\n                hash_i = np.where(norm((mesh.bary-np.repeat(mesh.bary[i][:,np.newaxis], len(mesh.bary), axis = 1).transpose()).transpose())<=(eps_i + mesh.diam))[0].tolist()\n            else:\n                hash_i = mesh.hash_table_bary[i_triangles]\n\n            for j in hash_i:\n\n                label_j = mesh.triangles[j, 0]\n                gam_j = gam[str(label_i)+str(label_j)]\n\n                T_j = mesh.triangles[j, 1:].tolist()\n                T_j_v = verts[T_j]\n                Mat_j = np.array( [T_j_v[1] - T_j_v[0],T_j_v[2] - T_j_v[0] ]).transpose()\n                det_T_j = Mat_j[0,0] * Mat_j[1,1] - Mat_j[1,0] * Mat_j[0,1]\n\n                if norm(mesh.bary[i_triangles]-mesh.bary[j]) < eps_i -mesh.diam:\n                    # no subdivision or outer integral treatment needed\n\n                    \"\"\"test for minimum precision\"\"\"\n                    # def Phi_j(y):\n                    #     return np.repeat(T_j_v[0][:,np.newaxis], n**2, axis=1) +  Mat_j.dot(y)\n                    def Phi_j(y):\n                        return np.repeat(T_j_v[0][:,np.newaxis], n_inner*n_outer, axis=1) +  Mat_j.dot(y)\n\n                    GAM = det_T_i * abs(det_T_j) * W_minprec * gam_j(Phi_i(X_outer), Phi_j(Y_inner))\n\n                    for a in range(3):\n                        kk = T_i[a]\n                        for b in range(3):\n                           # L[kk, T_j[b]] += -det_T_i * abs(det_T_j) * ( PSI_X[a] *  PSI_Y[b]  * W * gam_j(Phi_i(X),Phi_j(Y))).sum()\n                           # L[kk, T_i[b]] +=  det_T_i * abs(det_T_j) * ( PSI_X[a] *  PSI_X[b]  * W * gam_j(Phi_i(X),Phi_j(Y))).sum()\n                           \"\"\"minimum precision variant\"\"\"\n                           L[kk, T_j[b]] += -(PSI_outer[a] * PSI_inner[b] * GAM).sum()\n                           L[kk, T_i[b]] +=  (PSI_outer[a] * PSI_outer[b] * GAM).sum()\n\n                else:\n\n                    iMat_j = 1./det_T_j * np.array([ [Mat_j[1,1], -Mat_j[0,1]], [-Mat_j[1,0], Mat_j[0,0]]  ])\n                    def iPhi_j(y):\n                        return iMat_j.dot( y - np.repeat(T_j_v[0][:,np.newaxis], n2, axis=1))\n\n                    def I1(x):\n                        x_trans = (T_i_v[0]+Mat_i.dot(x))\n                        integral, integral0, integral1, integral2 = 0., 0., 0., 0.\n                        aux = np.repeat(x_trans[:,np.newaxis], n2, axis=1)\n\n                        def inner(tri, gam_j):\n                            tri = np.array(tri)\n                            Mat_l = np.array( [tri[1] - tri[0],tri[2] - tri[0] ]).transpose()\n                            det_l = abs((tri[1] - tri[0])[0] * (tri[2] - tri[0])[1] - (tri[1] - tri[0])[1] * (tri[2] - tri[0])[0] )\n                            def Phi_l(y):\n                                return np.repeat(tri[0][:,np.newaxis], n2, axis=1) +  Mat_l.dot(y)\n\n                            GAM = det_l * gam_j(aux, Phi_l(P2)) * weights2\n\n                            return  GAM.sum(), (basis[0](iPhi_j(Phi_l(P2))) * GAM ).sum(), (basis[1](iPhi_j(Phi_l(P2))) * GAM ).sum()  , (basis[2](iPhi_j(Phi_l(P2))) * GAM ).sum()\n\n                        tris = retriangulate(x_trans, T_j_v, norm, eps_i )\n\n                        if len(tris) != 0:\n                            for tri in tris:\n                                v, v0, v1, v2 = inner(tri, gam_j)\n                                integral  += v\n                                integral0 += v0\n                                integral1 += v1\n                                integral2 += v2\n\n                                \"\"\"plot for testing below\"\"\"\n                #                plt.gca().add_patch(plt.Polygon(tri , closed=True, fill = True))\n                #                plt.gca().add_patch(plt.Polygon(tri , closed=True, fill = False))\n\n                        return np.array([integral0, integral1, integral2, integral])\n\n                    I = np.array(list(map(I1, P.transpose()))).transpose()\n\n                    for a in range(3):\n                        kk = T_i[a]\n                        for b in range(3):\n                           L[kk, T_j[b]] += -det_T_i * (PSI_P[a] * I[b] * weights).sum()\n                           L[kk, T_i[b]] += det_T_i * (PSI_P[a] * PSI_P[b] * I[3] * weights).sum()\n\n        return 2 * L\n\n    p = Pool(num_cores)\n\n    Ls = p.map(aux, range(num_cores))#\n\n#    L =  np.zeros((len(verts),len(verts)), dtype = float)#ss.lil_matrix((len(verts),len(verts)), dtype = float)\n    L =  ss.lil_matrix((len(verts),len(verts)), dtype = float)\n    for i in range(num_cores):\n        L += Ls[i]\n\n    del Ls\n    p.close()\n    p.join()\n    p.clear()\n\n    return L\n\ndef assembly_coupling_full_exactcaps(mesh, gam, retriangulate, norm, num_cores, **kwargs):\n    \"\"\"\n        STANDARD VERSION BY NOW !\n\n        -----\n\n       uses simple criterion\n                ||E_a^bary - E_b^bary || < delta - h\n       to decide whether subdivision or special treatment of outer triangle is\n       needed\n    \"\"\"\n#    labels_domains = np.sort(np.unique(mesh.triangles[:,0]))\n    deform = kwargs.get('deform', 0)\n    hash_onthefly = kwargs.get('hash_onthefly', 0)\n    verts = mesh.verts + deform\n\n    # randomly shuffle indices:\n    # For areas where the mesh is fine, hash_i might be much larger\n    liste = range(len(mesh.triangles))\n    random.shuffle(list(liste))\n    pieces = np.array_split(liste, num_cores)\n\n    # For every pieces compute the whole matrix\n    def aux(m):\n\n        L = ss.lil_matrix((len(verts),len(verts)), dtype = float)\n\n        for i in pieces[m].tolist():\n\n            label_i = mesh.triangles[i, 0]\n            eps_i = gam['eps'+str(label_i)]\n\n            T_i = mesh.triangles[i, 1:].tolist()\n            T_i_v = verts[T_i]\n            Mat_i = np.array( [T_i_v[1] - T_i_v[0],T_i_v[2] - T_i_v[0] ]).transpose()\n            det_T_i = abs(Mat_i[0,0] * Mat_i[1,1] - Mat_i[1,0] * Mat_i[0,1])\n            def Phi_i(y):\n                return np.repeat(T_i_v[0][:,np.newaxis], n**2, axis=1) +  Mat_i.dot(y)\n\n            i_triangles = i\n            if hash_onthefly:\n                hash_i = np.where(norm((mesh.bary-np.repeat(mesh.bary[i][:,np.newaxis], len(mesh.bary), axis = 1).transpose()).transpose())<=(eps_i + mesh.diam))[0].tolist()\n            else:\n                hash_i = mesh.hash_table_bary[i_triangles]\n\n            for j in hash_i:\n\n                label_j = mesh.triangles[j, 0]\n                gam_j = gam[str(label_i)+str(label_j)]\n\n                T_j = mesh.triangles[j, 1:].tolist()\n                T_j_v = verts[T_j]\n                Mat_j = np.array( [T_j_v[1] - T_j_v[0],T_j_v[2] - T_j_v[0] ]).transpose()\n                det_T_j = Mat_j[0,0] * Mat_j[1,1] - Mat_j[1,0] * Mat_j[0,1]\n\n                if norm(mesh.bary[i_triangles]-mesh.bary[j]) < eps_i -mesh.diam:\n                    # no subdivision or outer integral treatment needed\n                    def Phi_j(y):\n                        return np.repeat(T_j_v[0][:,np.newaxis], n**2, axis=1) +  Mat_j.dot(y)\n\n                    for a in range(3):\n                        kk = T_i[a]\n                        for b in range(3):\n#                           if label_j != labels_domains[-1]:\n                           L[kk, T_j[b]] += -det_T_i * abs(det_T_j) * ( PSI_X[a] *  PSI_Y[b]  * W * gam_j(Phi_i(X),Phi_j(Y))).sum()\n                           L[kk, T_i[b]] += det_T_i * abs(det_T_j) * ( PSI_X[a] *  PSI_X[b]  * W * gam_j(Phi_i(X),Phi_j(Y))).sum()#det_T_i * (PSI_P[a] * PSI_P[b] * I[3] * weights).sum()\n                else:\n\n                    iMat_j = 1./det_T_j * np.array([ [Mat_j[1,1], -Mat_j[0,1]], [-Mat_j[1,0], Mat_j[0,0]]  ])\n                    def iPhi_j(y):\n                        return iMat_j.dot( y - np.repeat(T_j_v[0][:,np.newaxis], n2, axis=1))\n                    def iPhi_j_1point(y):\n                        return iMat_j.dot( y - T_j_v[0])\n                    def I1(x):\n                        x_trans = (T_i_v[0]+Mat_i.dot(x))\n                        integral, integral0, integral1, integral2 = 0., 0., 0., 0.\n                        aux = np.repeat(x_trans[:,np.newaxis], n2, axis=1)\n\n                        def inner(tri, gam_j):\n                            tri = np.array(tri)\n                            Mat_l = np.array( [tri[1] - tri[0],tri[2] - tri[0] ]).transpose()\n                            det_l = abs((tri[1] - tri[0])[0] * (tri[2] - tri[0])[1] - (tri[1] - tri[0])[1] * (tri[2] - tri[0])[0] )\n                            def Phi_l(y):\n                                return np.repeat(tri[0][:,np.newaxis], n2, axis=1) +  Mat_l.dot(y)\n\n                            GAM = det_l * gam_j(aux, Phi_l(P2)) * weights2\n\n                            return  GAM.sum(), (basis[0](iPhi_j(Phi_l(P2))) * GAM ).sum(), (basis[1](iPhi_j(Phi_l(P2))) * GAM ).sum()  , (basis[2](iPhi_j(Phi_l(P2))) * GAM ).sum()\n\n                        def inner_cap(cap, gam_j):\n                            GAM = gam_j(x_trans, cap[0]) * cap[1]\n                            return  GAM.sum(), (basis[0](iPhi_j_1point(cap[0])) * GAM ).sum(), (basis[1](iPhi_j_1point(cap[0])) * GAM ).sum()  , (basis[2](iPhi_j_1point(cap[0])) * GAM ).sum()\n\n                        tris, caps = retriangulate(x_trans, T_j_v, norm, eps_i )\n\n                        if len(tris) != 0:\n                            for tri in tris:\n                                v, v0, v1, v2 = inner(tri, gam_j)\n                                integral  += v\n                                integral0 += v0\n                                integral1 += v1\n                                integral2 += v2\n                        if len(caps) != 0:\n                            for cap in caps:\n                                v, v0, v1, v2 = inner_cap(cap, gam_j)\n                                integral += v\n                                integral0 += v0\n                                integral1 += v1\n                                integral2 += v2\n                                \"\"\"plot for testing below\"\"\"\n                #                plt.gca().add_patch(plt.Polygon(tri , closed=True, fill = True))\n                #                plt.gca().add_patch(plt.Polygon(tri , closed=True, fill = False))\n\n                        return np.array([integral0, integral1, integral2, integral])\n\n                    I = np.array(list(map(I1, P.transpose()))).transpose()\n\n                    for a in range(3):\n                        kk = T_i[a]\n                        for b in range(3):\n                           L[kk, T_j[b]] += -det_T_i * (PSI_P[a] * I[b] * weights).sum()\n                           L[kk, T_i[b]] += det_T_i * (PSI_P[a] * PSI_P[b] * I[3] * weights).sum()\n\n        return 2 * L\n\n    p = Pool(num_cores)\n\n    Ls = p.map(aux, range(num_cores))#\n\n#    L =  np.zeros((len(verts),len(verts)), dtype = float)#ss.lil_matrix((len(verts),len(verts)), dtype = float)\n    L =  ss.lil_matrix((len(verts),len(verts)), dtype = float)\n    for i in range(num_cores):\n        L += Ls[i]\n\n    del Ls\n    p.close()\n    p.join()\n    p.clear()\n\n    return L\n\n\ndef assembly_coupling_full_bary(mesh, gam, retriangulate, norm, num_cores, **kwargs):\n    \"\"\"\n        RETRIANGULATE OUTER INTEGRAL\n\n        -----\n\n       uses simple criterion\n                ||E_a^bary - E_b^bary || < delta - h\n       to decide whether subdivision or special treatment of outer triangle is\n       needed\n    \"\"\"\n#    labels_domains = np.sort(np.unique(mesh.triangles[:,0]))\n    deform = kwargs.get('deform', 0)\n    hash_onthefly = kwargs.get('hash_onthefly', 0)\n    verts = mesh.verts + deform\n\n    # randomly shuffle indices:\n    # For areas where the mesh is fine, hash_i might be much larger\n    liste = range(len(mesh.triangles))\n    random.shuffle(list(liste))\n    pieces = np.array_split(liste, num_cores)\n\n\n    # For every pieces compute the whole matrix\n    def aux(m):\n\n        L = ss.lil_matrix((len(verts),len(verts)), dtype = float)\n\n        for i in pieces[m].tolist():\n\n            label_i = mesh.triangles[i, 0]\n            eps_i = gam['eps'+str(label_i)]\n\n            T_i = mesh.triangles[i, 1:].tolist()\n            T_i_v = verts[T_i]\n            Mat_i = np.array( [T_i_v[1] - T_i_v[0],T_i_v[2] - T_i_v[0] ]).transpose()\n            det_T_i = Mat_i[0,0] * Mat_i[1,1] - Mat_i[1,0] * Mat_i[0,1]\n            def Phi_i(y):\n                return np.repeat(T_i_v[0][:,np.newaxis], n**2, axis=1) +  Mat_i.dot(y)\n            iMat_i = 1./det_T_i * np.array([ [Mat_i[1,1], -Mat_i[0,1]], [-Mat_i[1,0], Mat_i[0,0]]  ])\n            def iPhi_i(y):\n                return iMat_i.dot( y - np.repeat(T_i_v[0][:,np.newaxis], n**2, axis=1))\n            i_triangles = i\n\n            if hash_onthefly:\n                hash_i = np.where(norm((mesh.bary-np.repeat(mesh.bary[i][:,np.newaxis], len(mesh.bary), axis = 1).transpose()).transpose())<=(eps_i + mesh.diam))[0].tolist()\n            else:\n                hash_i = mesh.hash_table_bary[i_triangles]\n\n            for j in hash_i:\n\n                label_j = mesh.triangles[j, 0]\n                gam_j = gam[str(label_i)+str(label_j)]\n\n                T_j = mesh.triangles[j, 1:].tolist()\n                T_j_v = verts[T_j]\n                Mat_j = np.array( [T_j_v[1] - T_j_v[0],T_j_v[2] - T_j_v[0] ]).transpose()\n                det_T_j = Mat_j[0,0] * Mat_j[1,1] - Mat_j[1,0] * Mat_j[0,1]\n                def Phi_j(y):\n                    return np.repeat(T_j_v[0][:,np.newaxis], n**2, axis=1) +  Mat_j.dot(y)\n\n                if norm(mesh.bary[i_triangles]-mesh.bary[j]) < eps_i -mesh.diam:\n                    # no subdivision or outer integral treatment needed\n\n                    for a in range(3):\n                        kk = T_i[a]\n                        for b in range(3):\n#                           if label_j != labels_domains[-1]:\n                           L[kk, T_j[b]] += -abs(det_T_i) * abs(det_T_j) * ( PSI_X[a] *  PSI_Y[b]  * W * gam_j(Phi_i(X),Phi_j(Y))).sum()\n                           L[kk, T_i[b]] += abs(det_T_i) * abs(det_T_j) * ( PSI_X[a] *  PSI_X[b]  * W * gam_j(Phi_i(X),Phi_j(Y))).sum()#det_T_i * (PSI_P[a] * PSI_P[b] * I[3] * weights).sum()\n                else:\n\n\n                    tris = retriangulate(mesh.bary[j], T_i_v, norm, eps_i )\n\n                    for tri in tris:\n\n                        tri = np.array(tri)\n                        Mat_l = np.array( [tri[1] - tri[0],tri[2] - tri[0] ]).transpose()\n                        det_l = abs((tri[1] - tri[0])[0] * (tri[2] - tri[0])[1] - (tri[1] - tri[0])[1] * (tri[2] - tri[0])[0] )\n                        def Phi_l(y):\n                            return np.repeat(tri[0][:,np.newaxis], n**2, axis=1) +  Mat_l.dot(y)\n\n                        for a in range(3):\n                            kk = T_i[a]\n                            for b in range(3):\n    #                           if label_j != labels_domains[-1]:\n                               L[kk, T_j[b]] += -abs(det_l) * abs(det_T_j) * ( basis[a](iPhi_i(Phi_l(X))) *  PSI_Y[b]  * W * gam_j(Phi_l(X),Phi_j(Y))).sum()\n                               L[kk, T_i[b]] += abs(det_l) * abs(det_T_j) * ( basis[a](iPhi_i(Phi_l(X))) *  basis[b](iPhi_i(Phi_l(X)))  * W * gam_j(Phi_l(X),Phi_j(Y))).sum()#det_T_i * (PSI_P[a] * PSI_P[b] * I[3] * weights).sum()\n\n        return 2 * L\n\n    p = Pool(num_cores)\n\n    Ls = p.map(aux, range(num_cores))#\n\n#    L =  np.zeros((len(verts),len(verts)), dtype = float)#ss.lil_matrix((len(verts),len(verts)), dtype = float)\n    L =  ss.lil_matrix((len(verts),len(verts)), dtype = float)\n    for i in range(num_cores):\n        L += Ls[i]\n\n    del Ls\n    p.close()\n    p.join()\n    p.clear()\n\n    return L\n\n\ndef assembly_coupling_full_shifted(mesh, gam, retriangulate, norm, num_cores, **kwargs):\n    \"\"\"\n        uses shifted balls\n    \"\"\"\n#    labels_domains = np.sort(np.unique(mesh.triangles[:,0]))\n    deform = kwargs.get('deform', 0)\n    hash_onthefly = kwargs.get('hash_onthefly', 0)\n    verts = mesh.verts + deform\n\n    # randomly shuffle indices:\n    # For areas where the mesh is fine, hash_i might be much larger\n    liste = range(len(mesh.triangles))\n    random.shuffle(list(liste))\n    pieces = np.array_split(liste, num_cores)\n\n    # For every pieces compute the whole matrix\n    def aux(m):\n\n        L = ss.lil_matrix((len(verts),len(verts)), dtype = float)\n\n        for i in pieces[m].tolist():\n\n            label_i = mesh.triangles[i, 0]\n            eps_i = gam['eps'+str(label_i)]\n\n            T_i = mesh.triangles[i, 1:].tolist()\n            T_i_v = verts[T_i]\n            Mat_i = np.array( [T_i_v[1] - T_i_v[0],T_i_v[2] - T_i_v[0] ]).transpose()\n            det_T_i = Mat_i[0,0] * Mat_i[1,1] - Mat_i[1,0] * Mat_i[0,1]\n            def Phi_i(y):\n                return np.repeat(T_i_v[0][:,np.newaxis], n**2, axis=1) +  Mat_i.dot(y)\n            i_triangles = i\n\n            if hash_onthefly:\n                hash_i = np.where(norm((mesh.bary-np.repeat(mesh.bary[i][:,np.newaxis], len(mesh.bary), axis = 1).transpose()).transpose())<=(eps_i + mesh.diam))[0].tolist()\n            else:\n                hash_i = mesh.hash_table_bary[i_triangles]\n\n            for j in hash_i:\n\n                label_j = mesh.triangles[j, 0]\n                gam_j = gam[str(label_i)+str(label_j)]\n\n                T_j = mesh.triangles[j, 1:].tolist()\n                T_j_v = verts[T_j]\n                Mat_j = np.array( [T_j_v[1] - T_j_v[0],T_j_v[2] - T_j_v[0] ]).transpose()\n                det_T_j = Mat_j[0,0] * Mat_j[1,1] - Mat_j[1,0] * Mat_j[0,1]\n                def Phi_j(y):\n                    return np.repeat(T_j_v[0][:,np.newaxis], n2**2, axis=1) +  Mat_j.dot(y)\n                iMat_j = 1./det_T_j * np.array([ [Mat_j[1,1], -Mat_j[0,1]], [-Mat_j[1,0], Mat_j[0,0]]  ])\n                def iPhi_j(y):\n                    return iMat_j.dot( y - np.repeat(T_j_v[0][:,np.newaxis], n**2, axis=1))\n                # check if close enough, so that integration over whole elements\n                if norm(mesh.bary[i_triangles]-mesh.bary[j]) < eps_i -mesh.diam:\n                    # no subdivision or outer integral treatment needed\n\n                    for a in range(3):\n                        kk = T_i[a]\n                        for b in range(3):\n#                           if label_j != labels_domains[-1]:\n                           L[kk, T_j[b]] += -abs(det_T_i) * abs(det_T_j) * ( PSI_X[a] *  PSI_Y[b]  * W * gam_j(Phi_i(X),Phi_j(Y))).sum()\n                           L[kk, T_i[b]] += abs(det_T_i) * abs(det_T_j) * ( PSI_X[a] *  PSI_X[b]  * W * gam_j(Phi_i(X),Phi_j(Y))).sum()#det_T_i * (PSI_P[a] * PSI_P[b] * I[3] * weights).sum()\n\n                # otherwise re-triangulate\n                else:\n\n\n                    tris = retriangulate(mesh.bary[i], T_j_v, norm, eps_i )\n\n                    for tri in tris:\n\n                        tri = np.array(tri)\n                        Mat_l = np.array( [tri[1] - tri[0],tri[2] - tri[0] ]).transpose()\n                        det_l = abs((tri[1] - tri[0])[0] * (tri[2] - tri[0])[1] - (tri[1] - tri[0])[1] * (tri[2] - tri[0])[0] )\n                        def Phi_l(y):\n                            return np.repeat(tri[0][:,np.newaxis], n**2, axis=1) +  Mat_l.dot(y)\n\n                        for a in range(3):\n                            kk = T_i[a]\n                            for b in range(3):\n    #                           if label_j != labels_domains[-1]:\n                               L[kk, T_j[b]] += -abs(det_l) * abs(det_T_i) * ( PSI_X[a] *  basis[b](iPhi_j(Phi_l(Y)))  * W * gam_j(Phi_i(X),Phi_l(Y))).sum()\n                               L[kk, T_i[b]] +=  abs(det_l) * abs(det_T_i) * ( PSI_X[a] *  PSI_X[b]   * W * gam_j(Phi_i(X),Phi_l(Y))).sum()#det_T_i * (PSI_P[a] * PSI_P[b] * I[3] * weights).sum()\n\n        return 2 * L\n\n    p = Pool(num_cores)\n\n    Ls = p.map(aux, range(num_cores))#\n\n#    L =  np.zeros((len(verts),len(verts)), dtype = float)#ss.lil_matrix((len(verts),len(verts)), dtype = float)\n    L =  ss.lil_matrix((len(verts),len(verts)), dtype = float)\n    for i in range(num_cores):\n        L += Ls[i]\n\n    del Ls\n    p.close()\n    p.join()\n    p.clear()\n\n    return L\n\ndef assembly_coupling_full_approx(mesh, gam, retriangulate, norm, num_cores, **kwargs):\n    \"\"\"\n        Combination of: Shifted ball and barycenter method\n\n           = integrate over whole triangles with barycenters are closer than delta\n    \"\"\"\n#    labels_domains = np.sort(np.unique(mesh.triangles[:,0]))\n    deform = kwargs.get('deform', 0)\n    hash_onthefly = kwargs.get('hash_onthefly', 0)\n    verts = mesh.verts + deform\n\n    # randomly shuffle indices:\n    # For areas where the mesh is fine, hash_i might be much larger\n    liste = range(len(mesh.triangles))\n    random.shuffle(list(liste))\n    pieces = np.array_split(liste, num_cores)\n\n    # For every pieces compute the whole matrix\n    def aux(m):\n\n        L = ss.lil_matrix((len(verts),len(verts)), dtype = float)\n\n        for i in pieces[m].tolist():\n\n            label_i = mesh.triangles[i, 0]\n            eps_i = gam['eps'+str(label_i)]\n\n            T_i = mesh.triangles[i, 1:].tolist()\n            T_i_v = verts[T_i]\n            Mat_i = np.array( [T_i_v[1] - T_i_v[0],T_i_v[2] - T_i_v[0] ]).transpose()\n            det_T_i = Mat_i[0,0] * Mat_i[1,1] - Mat_i[1,0] * Mat_i[0,1]\n            def Phi_i(y):\n                return np.repeat(T_i_v[0][:,np.newaxis], n**2, axis=1) +  Mat_i.dot(y)\n\n            hash_i = np.where(norm((mesh.bary-np.repeat(mesh.bary[i][:,np.newaxis], len(mesh.bary), axis = 1).transpose()).transpose()) < eps_i)[0].tolist()\n            for j in hash_i:\n\n                label_j = mesh.triangles[j, 0]\n                gam_j = gam[str(label_i)+str(label_j)]\n\n                T_j = mesh.triangles[j, 1:].tolist()\n                T_j_v = verts[T_j]\n                Mat_j = np.array( [T_j_v[1] - T_j_v[0],T_j_v[2] - T_j_v[0] ]).transpose()\n                det_T_j = Mat_j[0,0] * Mat_j[1,1] - Mat_j[1,0] * Mat_j[0,1]\n                def Phi_j(y):\n                    return np.repeat(T_j_v[0][:,np.newaxis], n**2, axis=1) +  Mat_j.dot(y)\n\n                for a in range(3):\n                    kk = T_i[a]\n                    for b in range(3):\n#                           if label_j != labels_domains[-1]:\n                       L[kk, T_j[b]] += -abs(det_T_i) * abs(det_T_j) * ( PSI_X[a] *  PSI_Y[b]  * W * gam_j(Phi_i(X),Phi_j(Y))).sum()\n                       L[kk, T_i[b]] +=  abs(det_T_i) * abs(det_T_j) * ( PSI_X[a] *  PSI_X[b]  * W * gam_j(Phi_i(X),Phi_j(Y))).sum()#det_T_i * (PSI_P[a] * PSI_P[b] * I[3] * weights).sum()\n\n        return 2 * L\n\n    p = Pool(num_cores)\n\n    Ls = p.map(aux, range(num_cores))#\n\n#    L =  np.zeros((len(verts),len(verts)), dtype = float)#ss.lil_matrix((len(verts),len(verts)), dtype = float)\n    L =  ss.lil_matrix((len(verts),len(verts)), dtype = float)\n    for i in range(num_cores):\n        L += Ls[i]\n\n    del Ls\n    p.close()\n    p.join()\n    p.clear()\n\n    return L\n\n\ndef assembly_coupling_full_adaptive(mesh, gam, retriangulate, norm, num_cores, **kwargs):\n    \"\"\"\n       uses simple criterion\n                ||E_a^bary - E_b^bary || < delta - h\n       to decide whether subdivision or special treatment of outer triangle is\n       needed\n\n       +++\n\n       adaptive quadrature rule for outer triangle\n\n    \"\"\"\n    hash_onthefly = kwargs.get('hash_onthefly', 0)\n    deform = kwargs.get('deform', 0)\n    verts = mesh.verts + deform\n\n    # randomly shuffle indices:\n    # For areas where the mesh is fine, hash_i might be much larger\n    liste = range(len(mesh.triangles))\n    random.shuffle(list(liste))\n    pieces = np.array_split(liste, num_cores)\n\n    # For every pieces compute the whole matrix\n    def aux(m):\n\n#        L =  np.zeros((len(verts),len(verts)), dtype = float)#\n        L = ss.lil_matrix((len(verts),len(verts)), dtype = float)\n\n        for i in pieces[m].tolist():\n\n            label_i = mesh.triangles[i, 0]\n            eps_i = gam['eps'+str(label_i)]\n\n            T_i = mesh.triangles[i, 1:].tolist()\n            T_i_v = verts[T_i]\n            Mat_i = np.array( [T_i_v[1] - T_i_v[0],T_i_v[2] - T_i_v[0] ]).transpose()\n            det_T_i = abs(Mat_i[0,0] * Mat_i[1,1] - Mat_i[1,0] * Mat_i[0,1])\n            def Phi_i(y):\n                return np.repeat(T_i_v[0][:,np.newaxis], n**2, axis=1) +  Mat_i.dot(y)\n\n            if hash_onthefly:\n                hash_i = np.where(norm((mesh.bary-np.repeat(mesh.bary[i][:,np.newaxis], len(mesh.bary), axis = 1).transpose()).transpose())<=(eps_i + mesh.diam))[0].tolist()\n            else:\n                hash_i = mesh.hash_table_bary[i_triangles]\n\n            for j in hash_i:\n\n                label_j = mesh.triangles[j, 0]\n                gam_j = gam[str(label_i)+str(label_j)]\n\n                T_j = mesh.triangles[j, 1:].tolist()\n                T_j_v = verts[T_j]\n                Mat_j = np.array( [T_j_v[1] - T_j_v[0],T_j_v[2] - T_j_v[0] ]).transpose()\n                det_T_j = Mat_j[0,0] * Mat_j[1,1] - Mat_j[1,0] * Mat_j[0,1]\n\n                if norm(mesh.bary[i]-mesh.bary[j]) < eps_i - mesh.diam:\n                    # no subdivision or outer integral treatment needed\n                    def Phi_j(y):\n                        return np.repeat(T_j_v[0][:,np.newaxis], n**2, axis=1) +  Mat_j.dot(y)\n\n                    for a in range(3):\n                        kk = T_i[a]\n                        for b in range(3):\n                           L[kk, T_j[b]] += -det_T_i * abs(det_T_j) * ( PSI_X[a] *  PSI_Y[b]  * W * gam_j(Phi_i(X),Phi_j(Y))).sum()\n                           L[kk, T_i[b]] +=  det_T_i * abs(det_T_j) * ( PSI_X[a] *  PSI_X[b]  * W * gam_j(Phi_i(X),Phi_j(Y))).sum()#det_T_i * (PSI_P[a] * PSI_P[b] * I[3] * weights).sum()\n\n                else:\n\n                    iMat_j = 1./det_T_j * np.array([ [Mat_j[1,1], -Mat_j[0,1]], [-Mat_j[1,0], Mat_j[0,0]]  ])\n                    def iPhi_j(y):\n                        return iMat_j.dot( y - np.repeat(T_j_v[0][:,np.newaxis], n2, axis=1))\n\n                    for a in range(3):\n                        for b in range(3):\n\n                            def I1(x):\n                                x_trans = (T_i_v[0]+Mat_i.dot(x))\n                                integral  = 0.\n                                aux = np.repeat(x_trans[:,np.newaxis], n2, axis=1)\n                                aux2 = np.repeat(x[:,np.newaxis], n2, axis=1)\n\n                                def inner(tri, gam_j):\n                                    tri = np.array(tri)\n                                    Mat_l = np.array( [tri[1] - tri[0],tri[2] - tri[0] ]).transpose()\n                                    det_l = abs((tri[1] - tri[0])[0] * (tri[2] - tri[0])[1] - (tri[1] - tri[0])[1] * (tri[2] - tri[0])[0] )\n                                    def Phi_l(y):\n                                        return np.repeat(tri[0][:,np.newaxis], n2, axis=1) +  Mat_l.dot(y)\n\n                                    GAM = det_l * gam_j(aux, Phi_l(P2)) * weights2\n\n                                    return (basis[a](aux2) * basis[b](aux2) * GAM ).sum()\n\n                                tris = retriangulate(x_trans, T_j_v, norm, eps_i )\n\n                                if len(tris) != 0:\n                                    for tri in tris:\n                                        integral += inner(tri, gam_j)\n\n                                return integral\n\n                            def I2(x):\n                                x_trans = (T_i_v[0]+Mat_i.dot(x))\n                                integral  = 0.\n                                aux = np.repeat(x_trans[:,np.newaxis], n2, axis=1)\n                                aux2 = np.repeat(x[:,np.newaxis], n2, axis=1)\n\n                                def inner(tri, gam_j):\n                                    tri = np.array(tri)\n                                    Mat_l = np.array( [tri[1] - tri[0],tri[2] - tri[0] ]).transpose()\n                                    det_l = abs((tri[1] - tri[0])[0] * (tri[2] - tri[0])[1] - (tri[1] - tri[0])[1] * (tri[2] - tri[0])[0] )\n                                    def Phi_l(y):\n                                        return np.repeat(tri[0][:,np.newaxis], n2, axis=1) +  Mat_l.dot(y)\n\n                                    GAM = det_l * gam_j(aux, Phi_l(P2)) * weights2\n\n                                    return -  ( basis[a](aux2) * basis[b](iPhi_j(Phi_l(P2)))   * GAM ).sum()\n\n                                tris = retriangulate(x_trans, T_j_v, norm, eps_i )\n\n                                if len(tris) != 0:\n                                    for tri in tris:\n                                        integral += inner(tri, gam_j)\n\n                                return integral\n\n                            val1 = det_T_i * tri_adapt(I1, T_ref)\n                            val2 = det_T_i * tri_adapt(I2, T_ref)\n                            L[T_i[a], T_i[b]] += val1\n                            L[T_i[a], T_j[b]] += val2\n\n        return 2 * L\n\n    p = Pool(num_cores)\n\n    Ls = p.map(aux, range(num_cores))#\n\n    L =  ss.lil_matrix((len(verts),len(verts)), dtype = float)\n    for i in range(num_cores):\n        L += Ls[i]\n\n    del Ls\n    p.close()\n    p.join()\n    p.clear()\n\n    return L\n\n\n\n\ndef assembly_coupling_approx(mesh, gam, retriangulate, Norm, num_cores, **kwargs):\n\n    labels_domains = np.sort(np.unique(mesh.triangles[:,0]))\n    deform = kwargs.get('deform', 0)\n    verts = mesh.verts + deform\n    nodes = np.array(mesh.nodes)\n\n    # randomly shuffle indices:\n    # For areas where the mesh is fine, hash_i might be much larger\n    liste = range(len(mesh.omega))\n    random.shuffle(list(liste))\n    pieces = np.array_split(liste, num_cores)\n\n    # For every pieces compute the whole matrix\n    def aux(m):\n\n        L = ss.lil_matrix((len(mesh.nodes),len(mesh.nodes)), dtype = float)\n\n        for i in pieces[m].tolist():\n\n            label_i = mesh.omega[i, 0]\n\n            T_i = mesh.omega[i, 1:].tolist()\n            T_i_v = verts[T_i]\n            Mat_i = np.array( [T_i_v[1] - T_i_v[0],T_i_v[2] - T_i_v[0] ]).transpose()\n            det_T_i = abs(Mat_i[0,0] * Mat_i[1,1] - Mat_i[1,0] * Mat_i[0,1])\n            def Phi_i(y):\n                return np.repeat(T_i_v[0][:,np.newaxis], n**2, axis=1) +  Mat_i.dot(y)\n\n            hash_i = np.where(norm_dict[Norm]((mesh.bary-np.repeat(mesh.bary[i][:,np.newaxis], len(mesh.bary), axis = 1).transpose()).transpose())<=(eps_i))[0].tolist()\n            for j in hash_i:\n\n                label_j = mesh.triangles[j, 0]\n                gam_j = gam[str(label_i)+str(label_j)]\n\n                T_j = mesh.triangles[j, 1:].tolist()\n                T_j_v = verts[T_j]\n                Mat_j = np.array( [T_j_v[1] - T_j_v[0],T_j_v[2] - T_j_v[0] ]).transpose()\n                det_T_j = abs(Mat_j[0,0] * Mat_j[1,1] - Mat_j[1,0] * Mat_j[0,1])\n                def Phi_j(y):\n                    return np.repeat(T_j_v[0][:,np.newaxis], n**2, axis=1) +  Mat_j.dot(y)\n\n                for a in range(3):\n                    kk = np.where(nodes == T_i[a])[0][0]\n                    for b in range(3):\n                       L[kk, np.where(nodes == T_i[b])[0][0]] += det_T_i * det_T_j * ( PSI_X[a] *  PSI_X[b]  * W * gam_j(Phi_i(X),Phi_j(Y))).sum()#det_T_i * (PSI_P[a] * PSI_P[b] * I[3] * weights).sum()\n                       if label_j != labels_domains[-1]:\n                           # CONVOLUTION PART\n                           L[kk, np.where(nodes == T_j[b])[0][0]] += -det_T_i * det_T_j * ( PSI_X[a] *  PSI_Y[b]  * W * gam_j(Phi_i(X),Phi_j(Y))).sum()\n\n        return 2 * L\n\n    p = Pool(num_cores)\n    Ls = list(p.map(aux, range(num_cores))) #\n\n    L = ss.lil_matrix((len(mesh.nodes),len(mesh.nodes)), dtype = float)\n    for i in range(num_cores):\n        L += Ls[i]\n\n    del Ls\n    p.close()\n    p.join()\n    p.clear()\n\n    return L\n\n\n\n\"\"\"-------------------------------------------------------------------------\"\"\"\n\"\"\"                   END ASSEMBLY                                          \"\"\"\n\"\"\"-------------------------------------------------------------------------\"\"\"\n\n#=============================================================================#\n#=============================================================================#\n\"\"\"-------------------------------------------------------------------------\"\"\"\n\"\"\"                             SOLVE SYSTEM                                \"\"\"\n\"\"\"-------------------------------------------------------------------------\"\"\"\ndef solve(mesh, A, b):\n    #==========================================================================\n    #               INCORPORATE DIRICHLET VOLUME CONSTRAINTS\n    #==========================================================================\n    A = A.tolil()\n    num_nodes = len(mesh.nodes)\n    for k in mesh.boundary:\n        # adjust righthand side at particular value (2x because substract again)\n        b[k] = 0\n        A[k,:] = ss.eye(1, num_nodes, k).tocsr()\n        A[:, k] = ss.eye(1, num_nodes, k ).tocsr().transpose()\n\n    A = A.tocsr()\n#    def func(x):\n#        return A.dot(x)\n#\n#    u = cg(func,b,0,True)\n    u = ssl.spsolve(A, b)\n\n    return u\n\"\"\"-------------------------------------------------------------------------\"\"\"\n\"\"\"                          END SOLVE SYSTEM                               \"\"\"\n\"\"\"-------------------------------------------------------------------------\"\"\"\n#=============================================================================#\n#=============================================================================#\n#=============================================================================#\n\n\n\n\"\"\"-------------------------------------------------------------------------\"\"\"\n\"\"\"                          PLOT                                           \"\"\"\n\"\"\"-------------------------------------------------------------------------\"\"\"\n#def myfunc(a,b, *args, **kwargs):\n#      c = kwargs.get('c', None)\n#      d = kwargs.get('d', None)\ndef plot(mesh, u, **kwargs):\n    \"\"\"\n    verts: vertices of the triangulation\n    nodes: number of the nodes in Omega\n    z: array containing for each triangle 3 values, indicating value at the nodes\n    \"\"\"\n    title = kwargs.get('title', '')\n    vmin_max = kwargs.get('vmin_max', [min(u), max(u)])\n    plt.figure(title)\n    plt.tricontourf(mesh.verts[mesh.nodes][:,0],mesh.verts[mesh.nodes][:,1],u,100,interpolation='gaussian',cmap =plt.cm.get_cmap('rainbow'), vmin = vmin_max[0], vmax = vmin_max[1] ) # choose 20 contour levels, just to show how good its interpolation is\n    plt.colorbar()\n    plt.axis('equal')\n    plt.show()\n\ndef plot_inner(mesh, u, **kwargs):\n    \"\"\"\n    verts: vertices of the triangulation\n    nodes: number of the nodes in Omega\n    z: array containing for each triangle 3 values, indicating value at the nodes\n    \"\"\"\n    nodes_inner = range(len(mesh.nodes)-len(mesh.boundary))\n    title = kwargs.get('title', '')\n    vmin_max = kwargs.get('vmin_max', [min(u), max(u)])\n    plt.figure(title)\n    plt.tricontourf(mesh.verts[nodes_inner][:,0],mesh.verts[nodes_inner][:,1],u,100,interpolation='gaussian',cmap =plt.cm.get_cmap('rainbow'), vmin = vmin_max[0], vmax = vmin_max[1] ) # choose 20 contour levels, just to show how good its interpolation is\n    plt.colorbar()\n    plt.axis('equal')\n\ndef plot_all(mesh, u, **kwargs):\n    \"\"\"\n    verts: vertices of the triangulation\n    nodes: number of the nodes in Omega\n    z: array containing for each triangle 3 values, indicating value at the nodes\n    \"\"\"\n    title = kwargs.get('title', '')\n    vmin_max = kwargs.get('vmin_max', [min(u), max(u)])\n    plt.figure(title)\n    plt.tricontourf(mesh.verts[:,0],mesh.verts[:,1],u,100,interpolation='gaussian',cmap =plt.cm.get_cmap('rainbow'), vmin = vmin_max[0], vmax = vmin_max[1] ) # choose 20 contour levels, just to show how good its interpolation is\n    plt.colorbar()\n    plt.axis('equal')\n\n\n\ndef plot_mesh(mesh, **kwargs):\n    \"\"\"\n    mesh: mesh class from above\n    \"\"\"\n    new_figure = kwargs.get('new_figure', True)\n    title = kwargs.get('title', '')\n    linewidth = kwargs.get('linewidth', 1)\n    verts = kwargs.get('verts', mesh.verts)\n    if new_figure:\n        plt.figure(title)\n\n    labels = np.sort(np.unique(mesh.triangles[:,0]).tolist())\n    num_labels = len(labels)\n    color = ['r', 'b', 'black', 'g', 'y', 'grey']\n    for i in range(num_labels):\n        plt.triplot(verts[:,0], verts[:,1], mesh.triangles[np.where(mesh.triangles[:,0]==labels[i])][:,1:]  , color = color[i], linewidth = linewidth)\n#        tris_label = mesh.triangles[np.where(mesh.triangles[:,0]==labels[i])]\n#        for k in range(len(tris_label)):\n#            plt.gca().add_patch(plt.Polygon(verts[tris_label[k,1:]], closed=True, fill = False, color = color[i], linewidth = linewidth))\n\n    plt.axis('equal')\n    plt.show()\n\ndef plot_vertices(mesh, indices, color, new_figure):\n    \"\"\"\n    mesh: mesh class from above\n    indices: indices of mesh.vertices which shall be plotted\n    color: string with one letter indicating color (e.g., 'b', 'g', 'y', 'r',..)\n    new_figure: False or True\n    \"\"\"\n    if new_figure:\n        plt.figure('Mesh')\n    plt.plot(mesh.verts[indices][:,0], mesh.verts[indices][:,1], color+'x')\n\"\"\"-------------------------------------------------------------------------\"\"\"\n\"\"\"                      END PLOT                                           \"\"\"\n\"\"\"-------------------------------------------------------------------------\"\"\"\n\n\n\n\n\"\"\"\n*******************************************************************************\n*******************************************************************************\n\n                    R E  -  T R I A N G U L A T I O N\n     \n*******************************************************************************\n*******************************************************************************\n\"\"\"\n#==========================================================================\n#                               AUXILIARY FUNCTIONS\n#==========================================================================\ndef intersect(line1, line2):\n    \"\"\"\n    line1 = [a, b]\n    line2 = [c, d]\n    returns intersection point of line(a,b) \\cap line(c,d)\n    if intersection not unique (linear dependent), then return 0\n\n    caution: method does check for intersection of the (infinite) lines not the\n             convex combinations\n    \"\"\"\n\n\ndef are_intersecting_lines(line1, line2):\n    \"\"\"\n    line1 = [a, b]\n    line2 = [c, d]\n\n    tests if two (finite !) line segments intersect or not\n\n    caution: method does check for intersection of the convex combinations\n    \"\"\"\n    a = line1[0]\n    b = line1[1]\n    c = line2[0]\n    d = line2[1]\n    # construct matrix (b-a, d-c)\n    M = np.array([b-a,c-d]).transpose()\n    det = M[0,0]*M[1,1] - M[0,1]*M[1,0]\n\n    tol = 0.0000001\n\n    if det != 0:\n        iM = 1./det * np.array([ [M[1,1], -M[0,1]], [-M[1,0], M[0,0]]  ])\n        lbd = iM.dot(c-a)#np.linalg.solve(M,c-a)\n\n        if tol < lbd[0] < 1-tol and tol < lbd[1] < 1-tol :\n            return 1\n    else:\n        return 0\n    # test\n#line1 = [np.ones(2), np.zeros(2)]\n#line2 = [np.array([0,0]), np.array([2,0])]\n#print are_intersecting_lines(line1, line2)\n\ndef which_vertices(vertices, T):\n    \"\"\" test which vertices of the ball lie in interior of triangle T \"\"\"\n    \"\"\" ATTENTION: Vertices have to be sorted accordingly !!! \"\"\"\n\n     #sort\n    origin = np.array(T[0])\n    refvec = T[1]-T[0]#np.array([1, 0])\n    def clockwiseangle_and_distance(point):\n        vector = [point[0]-origin[0], point[1]-origin[1]]\n        lenvector = math.hypot(vector[0], vector[1])\n        if lenvector == 0:\n            return -math.pi, 0\n        normalized = [vector[0]/lenvector, vector[1]/lenvector]\n        dotprod  = normalized[0]*refvec[0] + normalized[1]*refvec[1]     # x1*x2 + y1*y2\n        diffprod = refvec[1]*normalized[0] - refvec[0]*normalized[1]     # x1*y2 - y1*x2\n        angle = math.atan2(diffprod, dotprod)\n        return angle, lenvector\n    a = sorted(range(len(T)),key=lambda x:clockwiseangle_and_distance(T[x]))\n    T = T[a][::-1]\n\n    ipts =[]\n    a = T[0]\n    b = T[1]\n    c = T[2]\n\n    M = np.array([b-a, c-a]).transpose()\n    det = M[0,0]*M[1,1] - M[0,1]*M[1,0]\n    iM = 1./det * np.array([ [M[1,1], -M[0,1]], [-M[1,0], M[0,0]]  ])\n\n    for vert in vertices:\n        lbd = iM.dot(vert-a)#np.linalg.solve(M,line[0]-a)\n        if 0<lbd[0]<1 and 0<lbd[1]<1 and (lbd[0]+lbd[1])<1:\n            ipts += [vert]\n\n    return ipts\n\n\ndef intersection_l1linf(x_trans, T_j, Norm, eps):\n    \"\"\"\n    outputs vertices of the polygon that results from intersecting\n\n        * the ball which is defined by its center 'x_trans', radius 'eps' and the Norm (='L1', 'Linf')\n    and\n        * the triangle T_j = [v0,v1,v2]\n\n    \"\"\"\n    if Norm == 'L1':\n        vertices = [x_trans + np.array([-eps,0]), x_trans +  np.array([0, eps]), x_trans + np.array([ eps, 0]),x_trans + np.array([ 0,-eps])]\n\n        def norm(x):\n            return np.sum(np.abs(x), axis = 0)#np.array([abs(x[i]) for i in range(len(x))]).sum()#\n\n    elif Norm == 'Linf':\n        vertices = [x_trans + np.array([-eps,-eps]), x_trans +  np.array([-eps,eps]), x_trans + np.array([ eps, eps]),x_trans + np.array([ eps,-eps])]\n\n        def norm(x):\n            return np.max(np.abs(x))\n\n    \"\"\"plot for testing below\"\"\"\n#    for i in range(4):\n#       plt.gca().add_patch(plt.Polygon([vertices[i], vertices[(i+1)%4]] , closed=False, fill = False, color = 'red'))\n\n    # find out how many vertices of the triangle lie in the ball\n    ipts = []\n    for k in range(3):\n        if norm(x_trans-T_j[k]) < eps:\n            ipts = ipts + [k]\n\n    # case 1 (3 interior) = element fully contained in the ball\n    if len(ipts) == 3:\n        points = T_j\n\n    # case 2 = element only partly covered by the ball\n    else:\n        intersection_points = []\n        sides = [[T_j[0], T_j[1]], [T_j[1], T_j[2]], [T_j[2], T_j[0]]]  # sides of triangle\n        for a in range(4):\n            for b in range(3):\n                #--------------------------------------------------------\n                # intersect two lines\n                line1 = [vertices[a], vertices[(a + 1) % 4]]\n                line2 = sides[b]\n                a = line1[0]\n                b = line1[1]\n                c = line2[0]\n                d = line2[1]\n                # construct matrix (b-a, d-c)\n                M = np.array([b - a, c - d]).transpose()\n                det = M[0, 0] * M[1, 1] - M[0, 1] * M[1, 0]\n                if det == 0:\n                    #        print 'there is no unique intersection'\n                    p, lbd = np.zeros(2), 10. * np.ones(2)\n                else:\n                    iM = 1. / det * np.array([[M[1, 1], -M[0, 1]], [-M[1, 0], M[0, 0]]])\n                    lbd = iM.dot(c - a)  # np.linalg.solve(M,c-a)\n                    p, lbd = a + lbd[0] * (b - a), lbd\n                if 0 <= lbd[0] <= 1 and 0 <= lbd[1] <= 1:\n                    intersection_points += [p]\n                # --------------------------------------------------------\n        points = [T_j[ipts[i]] for i in range(len(ipts))]\n        points += intersection_points\n        points += which_vertices(vertices, T_j)\n\n    return points\n\n\ndef order_indices(b):\n    origin = np.array(b[0])\n    refvec = b[1] - b[0]  # np.array([1, 0])\n\n    def clockwiseangle_and_distance(point):\n        vector = [point[0] - origin[0], point[1] - origin[1]]\n        lenvector = math.hypot(vector[0], vector[1])\n        if lenvector == 0:\n            return -math.pi, 0\n        normalized = [vector[0] / lenvector, vector[1] / lenvector]\n        dotprod = normalized[0] * refvec[0] + normalized[1] * refvec[1]  # x1*x2 + y1*y2\n        diffprod = refvec[1] * normalized[0] - refvec[0] * normalized[1]  # x1*y2 - y1*x2\n        angle = math.atan2(diffprod, dotprod)\n        return angle, lenvector\n\n    a = sorted(range(len(b)), key=lambda x: clockwiseangle_and_distance(b[x]))\n\n    return a\n\n\n# auxiliary functions\ndef intersection_points_l2(x, eps, T,norm):\n    \"\"\"\n    compute intersection points of triangle and l2-ball\n    \"\"\"\n    intersection_points = []\n    sides = [[T[0], T[1]], [T[1], T[2]], [T[2], T[0]]]  # sides of triangle\n    for i in range(3):\n        side = sides[i]\n        a = side[0]\n        b = side[1]\n\n        def f(lbd):\n            return norm(a + lbd * (b - a) - x) - eps\n\n        \"\"\"USING pq formula\"\"\"\n        c = a - x\n        d = b - a\n        p = np.dot(c, d) / np.dot(d, d)\n        v = p ** 2 - (np.dot(c, c) - eps ** 2) / np.dot(d, d)\n        if v >= 0:\n            lbd1 = -p - np.sqrt(v)\n            lbd2 = (np.dot(c, c) - eps ** 2) / np.dot(d, d) / lbd1  # -p +np.sqrt(v)\n            if 0 <= lbd1 <= 1 and np.allclose(f(lbd1), 0.):\n                intersection_points += [np.array(a + lbd1 * (b - a))]\n            if 0 <= lbd2 <= 1 and np.allclose(a + lbd1 * (b - a), a + lbd2 * (b - a)) == False and np.allclose(f(lbd2),0.):  #\n                intersection_points += [np.array(a + lbd2 * (b - a))]\n\n    return intersection_points#\n\n\n\n\ndef intersection_exactl2_1(x_trans, T, eps):\n    \"\"\"\n    POLYGON THAT RESULTS FROM LEAVING OUT CAPS\n        +\n    PUTTING 1 Triangles on the CAPS\n\n    outputs vertices of the polygon that results from intersecting\n\n        * the L2 ball which is defined by its center x_trans and eps\n    and\n        * the triangle T = [v0,v1,v2]\n\n    \"\"\"\n    def norm(x):\n        return np.sqrt(np.dot(x,x))\n\n    \"\"\" POLYGON (without caps) \"\"\"\n    # (1) Find out interior points (= vertices of triangle that lie in the interior of the ball)\n    ipts = []\n    for k in range(3):\n        if norm(x_trans-T[k]) < eps:\n            ipts = ipts + [k]\n\n    # CASE 1 (3 interior = triangle fully contained in the ball) -> finished\n    if len(ipts) == 3:\n        return [T]\n\n    # CASE 2 (not all points are interior points, i.e., boundaries intersect or intersection empty)\n    # we have to figure out intersection points and potentially add caps\n    else:\n\n        # (2) Compute intersection points (there do not have to be one, if there is no intersection)\n        # we also label these points according to which side of the triangle they intersect\n        # due to the labeling we cannot use the function \"intersection_points_l2\"\n        intersection_points = []\n        labels = []\n        sides = [[T[0], T[1]], [T[1], T[2]], [T[2], T[0]]] # sides of triangle\n        for i in range(3):\n            c = sides[i][0] - x_trans\n            d = sides[i][1] - sides[i][0]\n            p = np.dot(c,d)/np.dot(d,d)\n            v = p**2 - (np.dot(c,c)-eps**2) / np.dot(d,d)\n            if v >= 0:\n                # lbd1 and lbd2 are the two roots of ||s1 + lbd (s2-s1) - x_trans|| - eps = 0\n                #                                    ||c + lbd * d|| - eps = 0\n                # the following is the numerically more stable p/q formula implementation\n                lbd1 = -p - np.sqrt(v)\n                lbd2 = (np.dot(c, c) - eps ** 2) / np.dot(d, d) / lbd1\n\n                if 0<=lbd1<=1:\n                    intersection_points += [np.array(sides[i][0]+lbd1*d)]\n                    labels += [i]\n                if 0<=lbd2<=1:\n                    intersection_points += [np.array(sides[i][0]+lbd2*d)]\n                    labels += [i]\n\n        # interior points + intersection points\n        points = [T[ipts[i]] for i in range(len(ipts))] + intersection_points\n\n        # empty intersection\n        if len(points) < 3:\n            tris = []\n\n        # divide polygon resulting from points\n        else:\n            tris = divide_polygon(points)\n\n\n        \"\"\" NOW ADD THE CAPS (put a single triangle into the cap) \"\"\"\n        num_int_points = len(intersection_points)\n\n        # case not covered: ball very small and fully contained in a triangle, therefore this if statement\n        if num_int_points>1:\n            # we order intersection_point clockwise and adapt angles accordingly\n            a = order_indices(intersection_points)\n            intersection_points, labels = [intersection_points[a[i]] for i in range(len(a))], [labels[a[i]] for i in range(len(a))]\n\n            # have to avoid that in this case two times the same triangle is put on cap\n            if num_int_points==2:\n                i = 0\n                s1 = intersection_points[i]\n                s2 = intersection_points[(i + 1) % num_int_points]\n                s_bar = 0.5 * (s1 + s2)\n                c_plus = x_trans + eps * ((s_bar - x_trans) / np.linalg.norm(s_bar - x_trans))\n                c_minus = x_trans - eps * ((s_bar - x_trans) / np.linalg.norm(s_bar - x_trans))\n                #\n                # if cplus is in the triangle, then this is the cap\n                aux = which_vertices([c_plus], T)\n                if len(aux) > 0:\n                    tris += [order([s1, s2, c_plus])]\n                # if cminus is in the triangle, then this is the cap (note that both may not be in the triangle!)\n                aux = which_vertices([c_minus], T)\n                if len(aux) > 0:\n                    tris += [order([s1, s2, c_minus])]\n            else:\n                for i in range(len(labels)):\n                    if labels[i] != labels[(i+1) % num_int_points]:\n                        s1 = intersection_points[i]\n                        s2 = intersection_points[(i+1) % num_int_points]\n                        s_bar = 0.5 * (s1+s2)\n                        c_plus =  x_trans + eps * ((s_bar - x_trans) / np.linalg.norm(s_bar - x_trans))\n                        c_minus = x_trans - eps * ((s_bar - x_trans)  / np.linalg.norm(s_bar - x_trans))\n                        #\n                        # if cplus is in the triangle, then this is the cap\n                        aux = which_vertices([c_plus], T)\n                        if len(aux)>0:\n                            tris += [order([s1, s2, c_plus])]\n                        # if cminus is in the triangle, then this is the cap (note that both may not be in the triangle!)\n                        aux = which_vertices([c_minus], T)\n                        if len(aux)>0:\n                            tris += [order([s1, s2, c_minus])]\n\n    return tris\n\ndef intersection_exactl2_capsonly(x_trans, T, eps):\n\n    def norm(x):\n        return np.sqrt(np.dot(x,x))\n\n    caps = []\n    # (2) Compute intersection points (there do not have to be one, if there is no intersection)\n    # we also label these points according to which side of the triangle they intersect\n    # due to the labeling we cannot use the function \"intersection_points_l2\"\n    intersection_points = []\n    labels = []\n    sides = [[T[0], T[1]], [T[1], T[2]], [T[2], T[0]]] # sides of triangle\n    for i in range(3):\n        c = sides[i][0] - x_trans\n        d = sides[i][1] - sides[i][0]\n        p = np.dot(c,d)/np.dot(d,d)\n        v = p**2 - (np.dot(c,c)-eps**2) / np.dot(d,d)\n        if v >= 0:\n            lbd1 = -p - np.sqrt(v)\n            lbd2 = (np.dot(c, c) - eps ** 2) / np.dot(d, d) / lbd1#-p +np.sqrt(v)\n            if 0<=lbd1<=1:\n                intersection_points += [np.array(sides[i][0]+lbd1*d)]\n                labels += [i]\n            if 0<=lbd2<=1:\n                intersection_points += [np.array(sides[i][0]+lbd2*d)]\n                labels += [i]\n    \"\"\"  CAPS \"\"\"\n    num_int_points = len(intersection_points)\n\n    # we do not cover the case that the ball is fully contained in a triangle, therefore this if statement\n    if num_int_points>1:\n        # we order intersection_point clockwise and adapt angles accordingly\n        a = order_indices(intersection_points)\n        intersection_points, labels = [intersection_points[a[i]] for i in range(len(a))], [labels[a[i]] for i in range(len(a))]\n\n        # sides of the \"nocaps\"-polygon clockwise\n        sides = []\n        for i in range(num_int_points):\n            sides += [[np.array(intersection_points[i]), np.array(intersection_points[(i+1) % num_int_points])]]\n\n\n        if num_int_points == 2:\n            s1 = intersection_points[0]\n            s2 = intersection_points[1]\n            p1, p2 = s1 - x_trans, s2 - x_trans\n            s_bar = 0.5 * (s1 + s2)\n\n            alpha = 0.5 * np.arccos(np.dot(p1, p2) / eps ** 2)\n            centroid = x_trans + 4 * eps * np.sin(alpha) ** 3 / (3 * (2 * alpha - np.sin(2 * alpha))) * (\n                        (s_bar - x_trans) / np.linalg.norm(s_bar - x_trans))\n            area = 0.25 * eps ** 2 * (2 * alpha - np.sin(2 * alpha))\n\n            # plt.plot(s1[0], s1[1], 'rx')\n            # plt.plot(s2[0], s2[1], 'yx')\n            # plt.plot(x_trans[0], x_trans[1], 'bx')\n            # plt.plot(centroid[0], centroid[1], 'ro')\n            # plt.quiver(x_trans[0], x_trans[1],p1[0], p1[1],   angles='xy', scale_units='xy', scale=1)\n            # plt.quiver(x_trans[0], x_trans[1],p2[0], p2[1],  color='b',angles='xy', scale_units='xy', scale=1)\n\n            caps += [[alpha, centroid, area]]\n\n        else:\n            for i in range(len(labels)):\n                #caps points always belong to different sides of the triangles\n                if labels[i] != labels[(i+1) % num_int_points]:\n\n                    s1 = intersection_points[i]\n                    s2 = intersection_points[(i+1) % num_int_points]\n                    p1, p2 = s1-x_trans, s2-x_trans\n                    s_bar = 0.5 * (s1+s2)\n\n                    alpha = 0.5 * np.arccos(np.dot(p1, p2) / eps ** 2)\n                    centroid = x_trans + 4 * eps * np.sin(alpha) ** 3 / (3 * (2 * alpha - np.sin(2 * alpha))) * ( (s_bar - x_trans) / np.linalg.norm(s_bar - x_trans))\n                    area = 0.25 * eps ** 2 * (2 * alpha - np.sin(2 * alpha))\n\n                    # plt.plot(s1[0], s1[1], 'rx')\n                    # plt.plot(s2[0], s2[1], 'yx')\n                    # plt.plot(x_trans[0], x_trans[1], 'bx')\n                    # plt.plot(centroid[0], centroid[1], 'ro')\n                    # plt.quiver(x_trans[0], x_trans[1],p1[0], p1[1],   angles='xy', scale_units='xy', scale=1)\n                    # plt.quiver(x_trans[0], x_trans[1],p2[0], p2[1],  color='b',angles='xy', scale_units='xy', scale=1)\n\n                    caps += [[alpha, centroid, area]]\n\n    return caps\n\n\ndef intersection_approxl2(x_trans, T_j, eps):\n    \"\"\"\n    POLYGON THAT RESULTS FROM LEAVING OUT CAPS\n\n    outputs vertices of the polygon that results from intersecting\n\n        * the L2 ball which is defined by its center x_trans and eps\n    and\n        * the triangle T_j = [v0,v1,v2]\n\n    \"\"\"\n    def norm(x):\n        return np.sqrt(np.dot(x,x))\n\n    ipts = []\n    for k in range(3):\n        if norm(x_trans-T_j[k]) < eps:\n            ipts = ipts + [k]\n\n    # case 1 (3 interior)\n    if len(ipts) == 3:\n        tris = [T_j]\n\n    else:\n        points = [T_j[ipts[i]] for i in range(len(ipts))]\n        points += intersection_points_l2(x_trans, eps, T_j, norm)\n\n        if len(points) < 3:\n            tris = []\n        else:\n            tris = divide_polygon(points)\n\n    return tris\n\n\ndef intersection_l2_exactcaps(x_trans, T, eps):\n\n    def norm(x):\n        return np.sqrt(np.dot(x,x))\n\n    caps = []\n    # (2) Compute intersection points (there do not have to be one, if there is no intersection)\n    # we also label these points according to which side of the triangle they intersect\n    # due to the labeling we cannot use the function \"intersection_points_l2\"\n    intersection_points = []\n    labels = []\n    sides = [[T[0], T[1]], [T[1], T[2]], [T[2], T[0]]] # sides of triangle\n    for i in range(3):\n        c = sides[i][0] - x_trans\n        d = sides[i][1] - sides[i][0]\n        p = np.dot(c,d)/np.dot(d,d)\n        v = p**2 - (np.dot(c,c)-eps**2) / np.dot(d,d)\n        if v >= 0:\n            lbd1 = -p - np.sqrt(v)\n            lbd2 = (np.dot(c, c) - eps ** 2) / np.dot(d, d) / lbd1#-p +np.sqrt(v)\n\n            if 0<=lbd1<=1:\n                intersection_points += [np.array(sides[i][0]+lbd1*d)]\n                labels += [i]\n            if 0<=lbd2<=1 and lbd1 != lbd2:\n                intersection_points += [np.array(sides[i][0]+lbd2*d)]\n                labels += [i]\n\n    ipts = []\n    for k in range(3):\n        if norm(x_trans-T[k]) < eps:\n            ipts = ipts + [k]\n\n    # case 1 (3 interior)\n    if len(ipts) == 3:\n        tris = [T]\n\n    else:\n        points = [T[ipts[i]] for i in range(len(ipts))]\n        points += intersection_points_l2(x_trans, eps, T, norm)\n\n        if len(points) < 3:\n            tris = []\n        else:\n            tris = divide_polygon(points)\n\n    \"\"\"  CAPS \"\"\"\n    num_int_points = len(intersection_points)\n\n    # we do not cover the case that the ball is fully contained in a triangle, therefore this if statement\n    if num_int_points>1:\n        # we order intersection_point clockwise and adapt angles accordingly\n        a = order_indices(intersection_points)\n        intersection_points, labels = [intersection_points[a[i]] for i in range(len(a))], [labels[a[i]] for i in range(len(a))]\n\n        # sides of the \"nocaps\"-polygon clockwise\n        sides = []\n        for i in range(num_int_points):\n            sides += [[np.array(intersection_points[i]), np.array(intersection_points[(i+1) % num_int_points])]]\n\n        if num_int_points == 2:\n            s1 = intersection_points[0]\n            s2 = intersection_points[1]\n            p1, p2 = s1 - x_trans, s2 - x_trans\n            s_bar = 0.5 * (s1 + s2)\n\n            aux = np.dot(p1, p2) / eps ** 2\n            if np.allclose(aux, 1.0, atol=1e-07) != True:\n                alpha = 0.5 * np.arccos(aux)\n                centroid = x_trans + 4 * eps * np.sin(alpha) ** 3 / (3 * (2 * alpha - np.sin(2 * alpha))) * (\n                            (s_bar - x_trans) / np.linalg.norm(s_bar - x_trans))\n                area = 0.25 * eps ** 2 * (2 * alpha - np.sin(2 * alpha))\n\n                # print(eps, np.dot(p1, p2) , np.dot(p1, p2) / eps ** 2)\n                # plt.plot(s1[0], s1[1], 'rx')\n                # plt.plot(s2[0], s2[1], 'yx')\n                # plt.plot(x_trans[0], x_trans[1], 'bx')\n                # plt.plot(centroid[0], centroid[1], 'ro')\n                # plt.quiver(x_trans[0], x_trans[1],p1[0], p1[1],   angles='xy', scale_units='xy', scale=1)\n                # plt.quiver(x_trans[0], x_trans[1],p2[0], p2[1],  color='b',angles='xy', scale_units='xy', scale=1)\n\n                caps += [[centroid, area]]\n\n        else:\n\n            for i in range(len(labels)):\n                #caps points always belong to different sides of the triangles\n                if labels[i] != labels[(i+1) % num_int_points]:\n\n                    s1 = intersection_points[i]\n                    s2 = intersection_points[(i+1) % num_int_points]\n                    p1, p2 = s1-x_trans, s2-x_trans\n                    s_bar = 0.5 * (s1+s2)\n                    aux = np.dot(p1, p2) / eps ** 2\n                    if np.allclose(aux, 1.0, atol=1e-07) != True:\n                        alpha = 0.5 * np.arccos(aux)\n                        centroid = x_trans + 4 * eps * np.sin(alpha) ** 3 / (3 * (2 * alpha - np.sin(2 * alpha))) * ( (s_bar - x_trans) / np.linalg.norm(s_bar - x_trans))\n                        area = 0.25 * eps ** 2 * (2 * alpha - np.sin(2 * alpha))\n                        # if np.dot(p1, p2) == 0:\n                        #     plt.plot(s1[0], s1[1], 'rx')\n                        #     plt.plot(s2[0], s2[1], 'yx')\n                        #     plt.plot(x_trans[0], x_trans[1], 'bx')\n                        #     plt.plot(centroid[0], centroid[1], 'ro')\n                        #     plt.quiver(x_trans[0], x_trans[1],p1[0], p1[1],   angles='xy', scale_units='xy', scale=1)\n                        #     plt.quiver(x_trans[0], x_trans[1],p2[0], p2[1],  color='b',angles='xy', scale_units='xy', scale=1)\n\n                        caps += [[centroid, area]]\n\n    return tris, caps\n\n#==============================================================================\ndef divide_polygon(b):\n    \"\"\"\n    task:  divide domain defined by polygon into triangles\n    input: a = [a0, a1, a2, a3, ...] nodes of the polygon\n    output:  [], [] given the indices of the triangle\n\n    idea: sort nodes counter clockwise\n    \"\"\"\n    origin = np.array(b[0])\n    refvec = b[1]-b[0]#np.array([1, 0])\n    def clockwiseangle_and_distance(point):\n        vector = [point[0]-origin[0], point[1]-origin[1]]\n        lenvector = math.hypot(vector[0], vector[1])\n        if lenvector == 0:\n            return -math.pi, 0\n        normalized = [vector[0]/lenvector, vector[1]/lenvector]\n        dotprod  = normalized[0]*refvec[0] + normalized[1]*refvec[1]     # x1*x2 + y1*y2\n        diffprod = refvec[1]*normalized[0] - refvec[0]*normalized[1]     # x1*y2 - y1*x2\n        angle = math.atan2(diffprod, dotprod)\n        return angle, lenvector\n\n    a = sorted(range(len(b)),key=lambda x:clockwiseangle_and_distance(b[x]))\n    t = []\n\n    for i in range(len(a)-2):\n\n        t  += [ [b[a[0]].tolist(), b[a[i+1]].tolist(), b[a[i+2]].tolist()] ]\n\n    return t\n\n### ADD BARYCENTER\ndef divide_polygon_with_barycenter(b):\n    \"\"\"\n    task:  divide domain defined by polygon into triangles\n    input: a = [a0, a1, a2, a3]  nodes of the polygon\n    output:  [[], [],...], given the indices of the triangle\n\n    idea: sort nodes counter clockwse\n    \"\"\"\n\n    origin = np.array(b[0])\n    refvec = b[1]-b[0]#np.array([1, 0])\n    def clockwiseangle_and_distance(point):\n        vector = [point[0]-origin[0], point[1]-origin[1]]\n        lenvector = math.hypot(vector[0], vector[1])\n        if lenvector == 0:\n            return -math.pi, 0\n        normalized = [vector[0]/lenvector, vector[1]/lenvector]\n        dotprod  = normalized[0]*refvec[0] + normalized[1]*refvec[1]     # x1*x2 + y1*y2\n        diffprod = refvec[1]*normalized[0] - refvec[0]*normalized[1]     # x1*y2 - y1*x2\n        angle = math.atan2(diffprod, dotprod)\n        return angle, lenvector\n\n    a = sorted(range(len(b)),key=lambda x:clockwiseangle_and_distance(b[x]))\n    t = []\n\n    bary = np.zeros(2)\n    for i in range(len(b)):\n        bary += b[i]\n\n    bary = (1./ float(len(b))) * bary\n\n    for i in range(len(a)):\n        t += [[b[a[i]].tolist(), bary, b[a[(i+1)%len(a)]].tolist()]]\n        #t  += [ [b[a[0]].tolist(), b[a[i+1]].tolist(), b[a[i+2]].tolist()] ]\n\n    return t\n\ndef order(b):\n    origin = np.array(b[0])\n    refvec = b[1]-b[0]#np.array([1, 0])\n    def clockwiseangle_and_distance(point):\n        vector = [point[0]-origin[0], point[1]-origin[1]]\n        lenvector = math.hypot(vector[0], vector[1])\n        if lenvector == 0:\n            return -math.pi, 0\n        normalized = [vector[0]/lenvector, vector[1]/lenvector]\n        dotprod  = normalized[0]*refvec[0] + normalized[1]*refvec[1]     # x1*x2 + y1*y2\n        diffprod = refvec[1]*normalized[0] - refvec[0]*normalized[1]     # x1*y2 - y1*x2\n        angle = math.atan2(diffprod, dotprod)\n        return angle, lenvector\n\n    a = sorted(range(len(b)),key=lambda x:clockwiseangle_and_distance(b[x]))\n    res = [b[a[i]] for i in range(len(b))]\n    return res\n\n\n#==============================================================================\n\"\"\"  EXACT: L1 and Linf  \"\"\"\n#==============================================================================\n\ndef retriangulate_exactL1Linf(x, T, Norm, eps):\n\n    points = intersection_l1linf(x, T, Norm, eps)\n    if len(points) == 3:\n        tris = [points]\n    elif len(points) > 3:\n        tris = divide_polygon(points)\n    else:\n        tris = []\n\n    return tris\n\n#==============================================================================\n\"\"\"  L2 \"\"\"\n#==============================================================================\ndef retriangulate_exactL2(x, T, norm, eps):\n    return intersection_exactl2_1(x, T, eps)#intersection_l2(x, T, eps)\n\ndef retriangulate_exactcaps(x, T, norm, eps):\n    return intersection_l2_exactcaps(x, T, eps)\n\ndef retriangulate_approxL2(x, T, norm, eps):\n    return intersection_approxl2(x, T, eps)\n\n#==============================================================================\n\"\"\"  APPROX_1: intersection is nonempty (all norms) \"\"\"\n#==============================================================================\ndef retriangulate_apx1(x, T, norm, eps):\n    \"\"\"I think the criterion is wrong !!! \"\"\"\n    aux = np.array([norm(x-t) for t in T])\n    if np.any(aux<eps) or len(which_vertices([x], T)) == 1: # intersection is nonempty <=> one vertices lies in the interior of the ball\n        return [T]\n    else:\n        return []\n\n#==============================================================================\n\"\"\"  APPROX_2: barycenter is in ball (all norms) \"\"\"\n#==============================================================================\ndef retriangulate_apx2(x, T, norm, eps):\n    if norm((1./3.*(T[0]+T[1]+T[2])) - x) < eps:\n        return [T]\n    else:\n        return []\n\n#==============================================================================\nretriangulate_dict = {'exact':      retriangulate_exactL1Linf,\n                      'exact_L2':   retriangulate_exactL2,\n                      'approx_L2':  retriangulate_approxL2, # leave out the caps\n                      'approx1':    retriangulate_apx1, # intersection nonempty\n                      'approx2':    retriangulate_apx2, # barycenter lies in ball\n                      'exactcaps':  retriangulate_exactcaps # centroid rule for caps\n                      }\n\n\"\"\" TEST  RE - TRIANGULATE \"\"\"\nre_triang_test =0\nif re_triang_test:\n    linewidth = 2.5\n    Norm = 2#'L1'#\n    T0 = np.array([[-0.8,0.], [1.0, 0.], [0.,2]])\n    color_ball = 'red'\n    alpha_triangles = 0.1\n    color_triangles = 'cyan'\n    X = [np.array([0.3, 0.8]), np.array([0.25, 0.8]), np.array([0.1, 0.8]), np.array([-0.7, 0.1]), np.array([0.6, 1.4]), np.array([0.25, 0.4]), np.array([0.1, 0.5]), np.array([0.12, 0.5])]\n    Eps = [0.4, 0.9, 0.3, 0.4, 0.8, 1., 0.8, 0.75]\n\n    #X = [X[4], X[6]]\n    #Eps = [Eps[4], Eps[6]]\n    for i in range(len(X)):\n        fig, ax = plt.subplots()\n        plt.gca().add_patch(plt.Polygon(T0 , closed=True, fill = False, linewidth = linewidth))\n        x = X[i]\n        eps = Eps[i]\n    #    plt.plot(x[0], x[1], 'yo')\n        circle = plt.Circle(tuple(x), eps, color=color_ball, fill= False, linewidth = linewidth)\n\n        # tris = retriangulate_approxL2(x, T0, Norm, eps)\n        tris = intersection_exactl2_1(x, T0, eps)\n\n        # caps = intersection_exactl2_capsonly(x, T0, eps)\n        # print(caps)\n        # for i in range(len(caps)):\n        #     print(i, caps[i])\n        #     centroid = caps[i][1]\n        #     plt.plot(centroid[0], centroid[1], 'bo')\n\n\n        print( len(tris))\n        if len(tris) != 0:\n            for T in tris:\n                plt.gca().add_patch(plt.Polygon(T , closed=True, fill = True, alpha = alpha_triangles, color = color_triangles, linewidth = 0.1))\n                plt.gca().add_patch(plt.Polygon(T , closed=True, fill = False, linewidth = 0.7*linewidth))\n\n        if Norm == 2:\n            ax.add_artist(circle)\n        elif Norm == 'Linf':\n            plt.gca().add_patch(plt.Polygon([x + np.array([-eps,-eps]), x +  np.array([-eps,eps]), x + np.array([ eps, eps]),x + np.array([ eps,-eps])] , closed=True, fill = False, color = color_ball, linewidth = linewidth))\n        else:\n            plt.gca().add_patch(plt.Polygon([x + np.array([-eps,0]), x +  np.array([0, eps]), x + np.array([ eps, 0]),x + np.array([ 0,-eps])] , closed=True, fill = False, color = color_ball, linewidth = linewidth))\n\n        plt.axis('equal')\n\n        plt.xlim(-1.5,1.5)\n        plt.ylim(-0.5,2.5)\n        plt.gca().set_adjustable(\"box\")\n    #    plt.autoscale()\n        plt.xticks([])\n        plt.yticks([])\n        plt.axis('equal')\n\n        plt.show()\n\n\"\"\"#####################################################\"\"\"\n\"\"\"                             1D                      \"\"\"\n\"\"\"#####################################################\"\"\"\ndef retriangulate_1d_approx(x, I, delta , h):\n    a = I[0]\n    b = I[1]\n\n    if (a >= x+delta and b >= x+delta) or (a <= x-delta and b <= x-delta):\n        intersection = []\n    else:\n        intersection = I\n\n    return intersection\n\ndef retriangulate_1d_exact(x, I, delta , h):\n    a = I[0]\n    b = I[1]\n    if np.abs(a-x) < delta and np.abs(b-x) < delta:\n        intersection = [a,b]\n    elif np.abs(a-x) < delta:\n        intersection = [a, x+delta]\n    elif np.abs(b-x) < delta:\n        intersection = [x-delta, b]\n    else:\n        intersection = []\n    return intersection\n\ndef retriangulate_1d_cap1(x, I, delta, h):\n    a = I[0]\n    b = I[1]\n    delta_aux = delta +  0.1 * h\n    if np.abs(a-x) < delta_aux and np.abs(b-x) < delta_aux:\n        intersection = [a,b]\n    elif np.abs(a-x) < delta_aux:\n        intersection = [a, x+delta_aux]\n    elif np.abs(b-x) < delta_aux:\n        intersection = [x-delta_aux, b]\n    else:\n        intersection = []\n    return intersection\n\ndef retriangulate_1d_cap2(x, I, delta, h):\n    a = I[0]\n    b = I[1]\n    delta_aux = delta +  h**2\n    if np.abs(a-x) < delta_aux and np.abs(b-x) < delta_aux:\n        intersection = [a,b]\n    elif np.abs(a-x) < delta_aux:\n        intersection = [a, x+delta_aux]\n    elif np.abs(b-x) < delta_aux:\n        intersection = [x-delta_aux, b]\n    else:\n        intersection = []\n    return intersection\n\ndef retriangulate_1d_cap3(x, I, delta, h):\n    a = I[0]\n    b = I[1]\n    delta_aux = delta +  h**3\n    if np.abs(a-x) < delta_aux and np.abs(b-x) < delta_aux:\n        intersection = [a,b]\n    elif np.abs(a-x) < delta_aux:\n        intersection = [a, x+delta_aux]\n    elif np.abs(b-x) < delta_aux:\n        intersection = [x-delta_aux, b]\n    else:\n        intersection = []\n    return intersection\n\nretriangulate_dict_1d = {'exact':retriangulate_1d_exact,\n                         'approx':retriangulate_1d_approx,\n                         'cap1':retriangulate_1d_cap1,\n                         'cap2':retriangulate_1d_cap2,\n                         'cap3':retriangulate_1d_cap3}\n\n\"\"\"-------------------------------------------------------------------------\"\"\"\n\"\"\"                      RE - TRIANGULATE                                   \"\"\"\n\"\"\"-------------------------------------------------------------------------\"\"\"\n#=============================================================================#\n#=============================================================================#\n#=============================================================================#\n\n\n\n\"\"\"-------------------------------------------------------------------------\"\"\"\n\"\"\"                    READ MESH                                            \"\"\"\n\"\"\"-------------------------------------------------------------------------\"\"\"\n\"\"\"\nRead mesh generated by gmsh\n\noutput: array of \n\n        1) Vertices (points in 3d !!!)\n        2) Triangles\n        3) Lines\n        \nFor the file format see the documentation:\n\nhttp://gmsh.info/doc/texinfo/gmsh.html#File-formats\n\n\"\"\"\n\n\"\"\"-------------------------------------------------------------------------\"\"\"\n\"\"\"                     READ MESH                                   \"\"\"\n\"\"\"-------------------------------------------------------------------------\"\"\"\n#=============================================================================#\n#=============================================================================#\n#=============================================================================#\ndef read_mesh(mshfile):\n    \"\"\"meshfile = .msh - file genrated by gmsh \"\"\"\n\n    fid = open(mshfile, \"r\")\n\n    for line in fid:\n\n        if line.find('$Nodes') == 0:\n            # falls in der Zeile 'Nodes' steht, dann steht in der...\n            line = fid.readline()  #...naechsten Zeile...\n            npts = int(line.split()[0]) #..die anzahl an nodes\n\n            Verts = np.zeros((npts, 3), dtype=float) #lege array for nodes an anzahl x dim\n\n            for i in range(0, npts):\n                # run through all nodes\n                line = fid.readline() # put current line to be the one next\n                data = line.split() # split line into its atomic characters\n                Verts[i, :] = list(map(float, data[1:])) # read out the coordinates of the node by applying the function float() to the characters in data\n\n        if line.find('$Elements') == 0:\n            line = fid.readline()\n            nelmts = int(line.split()[0]) # number of elements\n\n            Lines = []\n            Triangles = []\n            #Squares = np.array([])\n\n            for i in range(0, nelmts):\n                line = fid.readline()\n                data = line.split()\n                if int(data[1]) == 1:\n                    \"\"\" \n                    we store [physical group, node1, node2, node3], \n                    -1 comes from python starting to count from 0\n                    \"\"\"\n                    # see ordering:\n\n#                   0----------1 --> x\n\n                    Lines += [int(data[3]), int(data[-2])-1, int(data[-1])-1]\n\n                if int(data[1]) == 2:\n                    \"\"\"\n                    we store [physical group, node1, node2, node3]\n                    \"\"\"\n                    # see ordering:\n\n#                    y\n#                    ^\n#                    |\n#                    2\n#                    |`\\\n#                    |  `\\\n#                    |    `\\\n#                    |      `\\\n#                    |        `\\\n#                    0----------1 --> x\n\n                    Triangles += [int(data[3]), int(int(data[-3])-1), int(int(data[-2])-1), int(int(data[-1])-1)]\n\n    return Verts, np.array(Lines).reshape(int(len(Lines)/3), 3), np.array(Triangles).reshape(int(len(Triangles)/4), 4)\n\n\n\"\"\"-------------------------------------------------------------------------\"\"\"\n\"\"\"                    CG                                  \"\"\"\n\"\"\"-------------------------------------------------------------------------\"\"\"\ndef cg(A, b, M, mute):\n    \"\"\"preconditioned cg method for\n\n                A * u = b\n\n        with M ~ A^-1 as preconditioner\n\n\n        INPUT:\n        A: function that does matrix*vector A(x) = A*x for\n           A \\in \\R^{nxn} symmetric and positive definite\n\n        b: right hand side, vector in \\R^n\n\n        M ~ A^-1: function that solves Ax = c approximately, that is, M(c) ~ x\n\n        mute: if False then print option\n\n        -----------------------------------------------------------------------\n        REFERENCE:\n         'Finite Element Methods and Fast Iterative Solvers'(A. Wathen), p.80\n    \"\"\"\n    if M == 0:\n        def M(x):\n            return x\n\n    tol = 10e-12\n    maxiter = 2500\n    n = len(b)\n    u = np.zeros(n)\n    r_alt = b - A(u)\n\n    z_alt = M(r_alt)\n\n\n    p = z_alt\n    k = 0\n    while k < maxiter:\n        if mute == False:\n            print('iteration STEP', k)\n        alpha = np.dot(z_alt, r_alt) / np.dot(A(p), p)\n        u = u + alpha * p\n        r_neu = r_alt - alpha * A(p)\n\n        if np.linalg.norm(r_neu)/np.linalg.norm(b) < tol:\n            break\n\n        z_neu = M(r_neu)\n\n        beta = np.dot(z_neu, r_neu) / np.dot(z_alt, r_alt)\n        p = z_neu + beta * p\n\n        z_alt = z_neu\n        r_alt = r_neu\n        k = k+1\n\n#    print\n#    print 'number of cg iterations = ', k+1\n#    print\n\n    return u\n\n\ndef L_BFGS(k, m, s, y, ro, g, A):\n    \"\"\"\n    m: number of vectors stored\n    s_k = x_(k+1) - x_(k)\n    y_k = gradient_f(x)_(k+1) - gradient_f(x)_(k)\n    ro_k= 1./<y_k, s_k>\n    g = gradient_f(x)_(k)\n    M = matrix for scalarproduct, if 0 then identity\n\n    s and y are stored as follows:\n        s = np.array([ [ ...   s_1      ...],\n                       [ ...   s_2      ...],\n\n                               ...\n\n                       [ ...   s_(k-1)  ...]  ])\n\n\n    returns the decent direction\n\n        z = H^(-1)*grad(f)\n\n    such that the minimization iteration goes as follows:\n\n        x_(k+1) = x_k - h * z\n\n    \"\"\"\n\n    def M(x):\n        return A.dot(x)\n\n    q = g\n\n    if k == 0:\n        # first step = gradient\n        return q\n\n    else:\n\n        I = min(k, m)\n\n        alpha = np.zeros(k)\n\n        # backward loop\n        for i in range(I)[::-1]:\n            alpha[i] = ro[i] * np.dot(s[i,], M(q))\n            q = q - alpha[i] * y[i, :]\n\n        # re-scale\n        H_0 = np.dot(s[I - 1,], M(y[I - 1,])) / np.dot(y[I - 1,], M(y[I - 1,]))\n        z = H_0 * q\n\n        # forward loop\n        for i in range(I):\n            beta = ro[i] * np.dot(y[i,], M(z))\n            z = z + s[i,] * (alpha[i] - beta)\n\n        return z\n\n\n\n# ==============================================================================\ndef save_sparse_csr(filename, array):\n    np.savez(filename, data=array.data, indices=array.indices,\n             indptr=array.indptr, shape=array.shape)\n\n\ndef load_sparse_csr(filename):\n    loader = np.load(filename)\n    return ss.csr_matrix((loader['data'], loader['indices'], loader['indptr']),\n                         shape=loader['shape'])\n# ==============================================================================\n\"\"\"-------------------------------------------------------------------------\"\"\"\n\"\"\"                     NORM DICTIONARY                                     \"\"\"\n\"\"\"-------------------------------------------------------------------------\"\"\"\n#=============================================================================#\n#=============================================================================#\n#=============================================================================#\ndef norm_2(x):\n    return np.sqrt(x[0]**2 + x[1]**2)\ndef norm_1(x):\n    return np.sum(np.abs(x), axis = 0)\ndef norm_inf(x):\n    return np.max(np.abs(x), axis= 0)\n\nnorm_dict = {'L2': norm_2, 'L1': norm_1, 'Linf': norm_inf}\n\n\n\"\"\"\n*******************************************************************************\n*******************************************************************************\n\n     X       X  X   X          XXXXXX  X       XXXXXX\n     X       X  XX  X          X       X       X    X\n     X       X  X X X          XXX     X       XXXXXX\n     X       X  X  XX          X       X       X    X\n     XXXXXX  X  X   X          XXXXXX  XXXXXX  X    X\n     \n*******************************************************************************\n*******************************************************************************\n\"\"\"\n\n\"\"\"=========================================================================\"\"\"\n\"\"\"                            MASS MATRIX    LinElas                              \"\"\"\n\"\"\"=========================================================================\"\"\"\ndef LinElas_massmat(mesh):\n    num_nodes = len(mesh.nodes)\n    num_omega = len(mesh.omega)\n\n    M_1d = ss.lil_matrix((num_nodes, num_nodes), dtype = float)\n    P = np.array([[ 0.33333333,  0.33333333],\n                  [ 0.2       ,  0.6       ],\n                  [ 0.2       ,  0.2       ],\n                  [ 0.6       ,  0.2       ]]).transpose()\n\n    weights = 0.5 * np.array([-27./48, 25./48, 25./48, 25./48])\n\n    def BASIS(v):\n        return np.array([ 1. - v[0] - v[1], v[0], v[1]])\n\n    PSI = BASIS(P)\n\n    for l in range(num_omega):\n        T_num = mesh.omega[l,1:].tolist()\n        T = mesh.verts[T_num]\n        det = abs(float((T[1] - T[0])[0] * (T[2] - T[0])[1] - (T[1] - T[0])[1] * (T[2] - T[0])[0] ))\n\n        for a in range(3):\n            for b in range(3):\n                a_nodes = np.where(mesh.nodes == T_num[a])[0][0] # find number of node to which element basis function at vertex a contributes\n                b_nodes = np.where(mesh.nodes == T_num[b])[0][0]\n                if a_nodes <= b_nodes:\n                    M_1d[a_nodes, b_nodes] += det * (PSI[a] * PSI[b] * weights).sum()\n\n    M = ss.lil_matrix((2*num_nodes, 2*num_nodes), dtype = float)\n    D = ss.diags(M_1d.diagonal())\n    M_1d = M_1d.transpose() + M_1d - D\n\n    M[0:num_nodes, 0:num_nodes] = M_1d\n    M[num_nodes:,  num_nodes:] = M_1d\n\n    return M\n\n\"\"\"=========================================================================\"\"\"\n\"\"\"                       STIFFNESS MATRIX     LinElas                             \"\"\"\n\"\"\"=========================================================================\"\"\"\ndef LinElas_assembly(mu, lbd, mesh):\n\n    num_omega = len(mesh.omega)\n    num_nodes = len(mesh.nodes)\n\n    A = ss.lil_matrix((2*num_nodes, 2*num_nodes), dtype = float)\n\n    grad = [np.array([-1, -1]), np.array([1, 0]), np.array([0, 1])]\n\n    def fun(l):\n#    for l in range(num_omega):\n        T_num = mesh.omega[l,1:].tolist()\n        T = mesh.verts[T_num]\n\n        Mat = np.array( [T[1] - T[0],T[2] - T[0] ]).transpose()\n        det = float((T[1] - T[0])[0] * (T[2] - T[0])[1] - (T[1] - T[0])[1] * (T[2] - T[0])[0] )\n        iMat = 1./det * np.array([ [Mat[1,1], -Mat[0,1]], [-Mat[1,0], Mat[0,0]]  ])\n        det = abs(det)\n\n        if isinstance(mu, float): # constant mu\n            mu_loc = det * 0.5 * mu # = \\int_T mu dx\n        else: # locally varying mu\n            idx = [np.where(mesh.nodes == j)[0][0] for j in T_num]\n\n            # mu values on three vertices of the current triangle\n            mu_vals = mu[idx]\n            mu_loc = 1./6. * det * mu_vals.sum() # = \\int_T mu dx, note that integral over reference element basis function is 1/6 for all\n\n\n        for a in range(3):\n            for b in range(3):\n                a_nodes = np.where(mesh.nodes == T_num[a])[0][0]\n                b_nodes = np.where(mesh.nodes == T_num[b])[0][0]\n\n                grad_trans_a = iMat.transpose().dot(grad[a])\n                grad_trans_b = iMat.transpose().dot(grad[b])\n\n                # since A is symmetric we only assemble lower triangle\n                # note: lbd == 0\n                A[a_nodes, num_nodes + b_nodes] += 2 * (mu_loc * ( 0.5 * (grad_trans_a[1])*(grad_trans_b[0])) ) #bilin_2d(U_1, V_1[::-1], det, mu_loc)\n\n                if a_nodes <= b_nodes:\n                    A[a_nodes,             b_nodes]             += 2 * (mu_loc * (grad_trans_a[0]*grad_trans_b[0] + 0.5 * (grad_trans_a[1])*(grad_trans_b[1])) )# bilin_2d(U_1, V_1, det, mu_loc)\n                    A[num_nodes + a_nodes, num_nodes + b_nodes] += 2 * (mu_loc * (grad_trans_a[1]*grad_trans_b[1] + 0.5 * (grad_trans_a[0])*(grad_trans_b[0])) )#bilin_2d(U_1[::-1], V_1[::-1], det, mu_loc)\n\n\n    list(map(fun, range(num_omega)))\n    # reflect lower triangular part of A on diagonal to construct full matrix\n    A = A.tocsr()\n    D = ss.diags(A.diagonal())\n    A = A.transpose() + A - D\n    A = A.tolil()\n\n    # incorporate Dirichlet-data (replace column/row by unit vector)\n    for k in mesh.boundary:\n\n        A[k,:] = ss.eye(1, 2*num_nodes, k).tocsr()\n        A[:, k] = ss.eye(1, 2*num_nodes, k ).tocsr().transpose()\n\n        A[num_nodes + k,:] = ss.eye(1, 2*num_nodes, num_nodes + k).tocsr()\n        A[:, num_nodes + k] = ss.eye(1, 2*num_nodes, num_nodes + k ).tocsr().transpose()\n\n    return A\n\n#def LinElas_assembly_orig(mu, lbd, mesh):\n#\n#    def bilin_2d(U,V,det, mu_loc):\n#        \"\"\"U, V = iMat^-T * grad (already from transformed formula) \"\"\"\n#        return det * 0.5 * (lbd*(U[0,0]+U[1,1])*(V[0,0]+V[1,1])) \\\n#                    + 2 * (mu_loc * (U[0,0]*V[0,0] + U[1,1]*V[1,1]  \\\n#                               + 0.5 * (U[0,1]+U[1,0])*(V[0,1]+V[1,0])) )\n#\n#    num_omega = len(mesh.omega)\n#    num_nodes = len(mesh.nodes)\n#\n#    A = ss.lil_matrix((2*num_nodes, 2*num_nodes), dtype = float)\n#\n#    grad = [np.array([-1, -1]), np.array([1, 0]), np.array([0, 1])]\n#\n#    for l in range(num_omega):\n#        T_num = mesh.omega[l,1:].tolist()\n#        T = mesh.verts[T_num]\n#\n#        Mat = np.array( [T[1] - T[0],T[2] - T[0] ]).transpose()\n#        det = float((T[1] - T[0])[0] * (T[2] - T[0])[1] - (T[1] - T[0])[1] * (T[2] - T[0])[0] )\n#        iMat = 1./det * np.array([ [Mat[1,1], -Mat[0,1]], [-Mat[1,0], Mat[0,0]]  ])\n#        det = abs(det)\n#\n#        if isinstance(mu, float): # constant mu\n#            mu_loc = det * 0.5 * mu # = \\int_T mu dx\n#        else: # locally varying mu\n#            idx = [np.where(mesh.nodes == j)[0][0] for j in T_num]\n#\n#            # mu values on three vertices of the current triangle\n#            mu_vals = mu[idx]\n#            mu_loc = 1./6. * det * mu_vals.sum() # = \\int_T mu dx, note that integral over reference element basis function is 1/6 for all\n#        print mu_loc\n#        for a in range(3):\n#            for b in range(3):\n#                a_nodes = np.where(mesh.nodes == T_num[a])[0][0]\n#                b_nodes = np.where(mesh.nodes == T_num[b])[0][0]\n#\n#                U_1 = np.vstack((iMat.transpose().dot(grad[a]), np.zeros(2)))\n#                U_2 = np.vstack((np.zeros(2), iMat.transpose().dot(grad[a])))\n#                V_1 = np.vstack((iMat.transpose().dot(grad[b]), np.zeros(2)))\n#                V_2 = np.vstack((np.zeros(2), iMat.transpose().dot(grad[b])))\n#\n#                # since A is symmetric we only assemble lower triangle\n#                A[a_nodes, num_nodes + b_nodes] += bilin_2d(U_1, V_2, det, mu_loc)\n#\n#                if a_nodes <= b_nodes:\n#                    A[a_nodes,             b_nodes]             += bilin_2d(U_1, V_1, det, mu_loc)\n#                    A[num_nodes + a_nodes, num_nodes + b_nodes] += bilin_2d(U_2, V_2, det, mu_loc)\n#\n#    # reflect lower triangular part of A on diagonal to construct full matrix\n#    A = A.tocsr()\n#    D = ss.diags(A.diagonal())\n#    A = A.transpose() + A - D\n#    A = A.tolil()\n#\n#    # incorporate Dirichlet-data (replace column/row by unit vector)\n#    for k in mesh.boundary:\n#\n#        A[k,:] = ss.eye(1, 2*num_nodes, k).tocsr()\n#        A[:, k] = ss.eye(1, 2*num_nodes, k ).tocsr().transpose()\n#\n#        A[num_nodes + k,:] = ss.eye(1, 2*num_nodes, num_nodes + k).tocsr()\n#        A[:, num_nodes + k] = ss.eye(1, 2*num_nodes, num_nodes + k ).tocsr().transpose()\n#\n#    return A\n\n\"\"\"=========================================================================\"\"\"\n\"\"\"                          SOURCE TERM                                    \"\"\"\n\"\"\"=========================================================================\"\"\"\ndef source_assembly(fx,fy,M, mesh):\n\n    num_nodes = len(mesh.nodes)\n\n    def source(v):\n        return np.array([fx(v), fy(v)])\n\n    B_phys = np.hstack(( fx(mesh.verts[mesh.nodes].transpose()), fy(mesh.verts[mesh.nodes].transpose())))\n    B = M.dot(B_phys)\n\n    # incorporate Dirichlet-data\n    for k in mesh.boundary:\n        B[k] = 0\n        B[num_nodes + k] = 0\n\n    return B\n\n\"\"\"=========================================================================\"\"\"\n\"\"\"                       PLOT ROUTINES                                     \"\"\"\n\"\"\"=========================================================================\"\"\"\ndef plot_vecfield(U, mesh, title, **kwargs):\n    reshape = kwargs.get('reshape', True)\n    verts = kwargs.get('verts', [0])\n    scale = kwargs.get('scale',1)\n    interaction_domain = kwargs.get('interaction_domain', False)\n\n    if reshape:\n        U = U.reshape(len(mesh.nodes), 2 , order = 'F')\n\n\n    if verts[0] == 0:\n        verts_here = mesh.verts\n    else:\n        verts_here = verts\n\n    if interaction_domain:\n        X, Y =  verts_here[:,0],  verts_here[:,1]\n    else:\n        X, Y =  verts_here[mesh.nodes][:,0],  verts_here[mesh.nodes][:,1]\n\n\n    U_nor = np.linalg.norm(U, axis=1)\n    norm = matplotlib.colors.Normalize()\n    cm = matplotlib.cm.rainbow\n    sm = matplotlib.cm.ScalarMappable(cmap=cm, norm=norm)\n\n    plt.figure(title)\n    plt.triplot(verts_here[:,0], verts_here[:,1], mesh.triangles[:,1:], color =  'black', linewidth =0.3, alpha = 0.8)\n#    for i in range(len(mesh.omega)):\n#        plt.gca().add_patch(plt.Polygon(verts_here[mesh.omega[i,1:]].tolist(), closed=True, fill = False, color = 'black', linewidth = 0.08))\n#    colormap = matplotlib.cm.rainbow\n\n    norm.autoscale(U_nor)\n\n    sm.set_array([])\n    if scale:\n        plt.quiver(X, Y, U[:,0], U[:,1],  color=cm(norm(U_nor)), angles='xy', scale_units='xy', scale=1)  #scale=5*np.max(U), scale_units='inches')\n    else:\n        plt.quiver(X, Y, U[:,0], U[:,1],  color=cm(norm(U_nor)))  #scale=5*np.max(U), scale_units='inches')\n    plt.colorbar(sm)\n    plt.axis('equal')\n\ndef plot_newmesh(mesh, U):\n    U = U.reshape(len(mesh.nodes), 2 , order = 'F')\n    U_new = np.zeros((len(mesh.verts), 2))\n    U_new[mesh.nodes, :] = U\n    verts_new = copy(mesh.verts)\n    verts_new += U_new\n    U_nor = np.linalg.norm(U_new, axis=1)\n\n    plt.figure('Deformed Mesh')\n    for i in range(len(mesh.omega)):\n        plt.gca().add_patch(plt.Polygon(verts_new[mesh.omega[i,1:]].tolist(), closed=True, fill = False, color = 'black', linewidth = 0.15))\n    plt.tricontourf(verts_new[:,0],verts_new[:,1], mesh.triangles[:,1:],U_nor,150,interpolation='gaussian',cmap =plt.cm.get_cmap('rainbow') )\n    plt.colorbar()\n\n\n\n\n\"\"\"\n*******************************************************************************\n*******************************************************************************\n\n      S H A P E   S P E C I F I C\n     \n*******************************************************************************\n*******************************************************************************\n\"\"\"\n\n\ndef interpolate(u1, mesh1, mesh2, **kwargs):\n    \"\"\"\n    linearly interpolate u1 (based on mesh1) onto mesh2\n    \"\"\"\n    deform = kwargs.get('deform', 0)\n\n    u1[mesh1.boundary] = np.zeros(len(mesh1.boundary))\n    verts2 = mesh2.verts + deform\n\n    u2 = si.griddata(mesh1.verts[mesh1.nodes], u1, verts2[mesh2.nodes] )\n    u2[mesh2.boundary] = np.zeros(len(mesh2.boundary))\n\n    return u2\n\n\ndef plot_shape(mesh, **kwargs):\n    color = kwargs.get('color', 'grey')\n    fill = kwargs.get('fill', True)\n    alpha = kwargs.get('alpha', 0.4)\n    omega_1 = mesh.triangles[np.where(mesh.triangles[:,0] == 1)[0]]\n\n    for k in range(len(omega_1)):\n        plt.gca().add_patch(plt.Polygon(mesh.verts[omega_1[k,1:]], closed=True, fill = fill, color = color, alpha = alpha))\n        plt.gca().add_patch(plt.Polygon(mesh.verts[omega_1[k,1:]], closed=True, fill = False, color = 'black', linewidth = 0.3))\n\n\n\n\ndef target_function(mesh, source, u_bar, mesh_bar, eps, Norm, gam, num_cores, retriangulate,local,approx, diff_coeff, **kwargs):\n\n    lap_reg = kwargs.get('lap_reg', 0)\n    deform = kwargs.get('deform', 0)\n\n    nu = kwargs.get('nu', 0)\n\n    M = mass_matrix2(mesh, deform = deform)\n\n    # compute u\n    if local:\n        A = Laplace_para(mesh,diff_coeff, num_cores, deform = deform)\n    else:\n        if approx:\n            A = assembly_coupling_approx(mesh, gam,  retriangulate, Norm, num_cores, deform = deform)\n        else:\n            A = assembly_coupling(mesh, gam,  retriangulate, Norm, num_cores, deform = deform)\n\n        if lap_reg > 0:\n            A += lap_reg * Laplace_para(mesh, [1,1], num_cores, deform = deform)\n\n#    if local:\n#        A = Laplace_para(mesh,diff_coeff, num_cores, deform = deform)\n#    else:\n#        if approx:\n#            A = assembly_coupling_approx(mesh, gam,  retriangulate, Norm, num_cores, deform = deform) + lap_reg * Laplace_para(mesh,[1,1], 1, deform = deform)\n#        else:\n#            A = assembly_coupling(mesh, gam, retriangulate, Norm, num_cores, deform = deform) + lap_reg * Laplace_para(mesh, [1,1], 1, deform = deform)\n\n    b = source_term_discon(mesh, source, deform = deform)\n    u = solve(mesh,A,b)\n\n    # interpolate u_bar\n    u_bar = interpolate(u_bar, mesh_bar, mesh, deform = deform)\n\n    return 0.5 * np.dot(u-u_bar, M.dot(u-u_bar)) + nu * j_reg(mesh, deform = deform)\n\n\ndef target_function_adj(mesh, source, u_bar, mesh_bar, eps, Norm, gam, num_cores, retriangulate,local,approx, diff_coeff, **kwargs):\n\n    lap_reg = kwargs.get('lap_reg', 0)\n    deform = kwargs.get('deform', 0)\n\n    nu = kwargs.get('nu', 0)\n\n    M = mass_matrix2(mesh, deform = deform)\n\n    # compute u\n    if local:\n        A = Laplace_para(mesh,diff_coeff, num_cores, deform = deform)\n    else:\n        if approx:\n            A = assembly_coupling_approx(mesh, gam,  retriangulate, Norm, num_cores, deform = deform).transpose()\n        else:\n            A = assembly_coupling(mesh, gam,  retriangulate, Norm, num_cores, deform = deform).transpose()\n\n        if lap_reg > 0:\n            A += lap_reg * Laplace_para(mesh, [1,1], num_cores, deform = deform)\n\n    b = source_term_discon(mesh, source, deform = deform)\n    u = solve(mesh,A,b)\n\n    # interpolate u_bar\n    u_bar = interpolate(u_bar, mesh_bar, mesh, deform = deform)\n\n    return 0.5 * np.dot(u-u_bar, M.dot(u-u_bar)) + nu * j_reg(mesh, deform = deform)\n\n\ndef target_function_klarified(mesh, source, u_bar, mesh_bar, eps, Norm, gam, num_cores, retriangulate,local,approx, diff_coeff, **kwargs):\n\n    lap_reg = kwargs.get('lap_reg', 0)\n    deform = kwargs.get('deform', 0)\n\n    nu = kwargs.get('nu', 0)\n\n    M = mass_matrix2(mesh, deform = deform)\n\n    # compute u\n    if local:\n        A = Laplace_para(mesh,diff_coeff, num_cores, deform = deform)\n    else:\n\n        A = assemble(mesh, Px, weightsxy, weightsxy, eps , deltaVertices = deform)[0][:,0:mesh.nV_Omega]\n        A = ss.csr_matrix(A)\n        if lap_reg > 0:\n            A += lap_reg * Laplace_para(mesh, [1,1], num_cores, deform = deform)\n\n    b = source_term_discon(mesh, source, deform = deform)\n    u = solve(mesh,A,b)\n\n    # interpolate u_bar\n    u_bar = interpolate(u_bar, mesh_bar, mesh, deform = deform)\n\n    return 0.5 * np.dot(u-u_bar, M.dot(u-u_bar)) + nu * j_reg(mesh, deform = deform)\n\n\ndef is_self_intersecting(mesh, **kwargs):\n    \"\"\"\n    tests if polygon which determines interface is simple closed or not\n    brute-force approach\n\n    0: simple closed\n    1: self-intersecting\n    \"\"\"\n\n    deform = kwargs.get('deform', 0)\n    verts = mesh.verts + deform\n    decide = 0\n\n    interface_omega = []\n    for l in range(len(mesh.omega)):\n        T_num = mesh.omega[l,1:].tolist()\n        if bool(set(mesh.shape_interface) & set(T_num)) and len(list(set(mesh.shape_interface) & set(T_num))) ==2 and mesh.omega[l,0]==1:\n            interface_omega += [l]\n\n    for l in interface_omega:\n\n        T_num = mesh.omega[l,1:].tolist()\n        T_interface = list(set(T_num)&set(mesh.shape_interface))\n        xk, xj = verts[T_interface[0]], verts[T_interface[1]]\n        line_1 = [xk, xj]\n\n        for k in interface_omega:\n            if k != l:\n                T_num = mesh.omega[k,1:].tolist()\n                T_interface = list(set(T_num)&set(mesh.shape_interface))\n                xk, xj = verts[T_interface[0]], verts[T_interface[1]]\n                line_2 = [xk, xj]\n\n                if are_intersecting_lines(line_1, line_2):\n                    \"\"\" plot \"\"\"\n    #                plt.figure()\n    #                plt.gca().add_patch(plt.Polygon(line_1, color = 'red'))\n    #                plt.gca().add_patch(plt.Polygon(line_2))\n                    decide = 1\n                    break\n        if decide:\n            break\n\n    return decide\n\ndef is_out_of_omega(mesh, **kwargs):\n    \"\"\"\n\n    \"\"\"\n\n    deform = kwargs.get('deform', 0)\n    verts = mesh.verts + deform\n    decide = 0\n\n    tol = 0.01\n\n    for l in range(len(mesh.shape_interface)):\n        point = verts[mesh.shape_interface[l]]\n        if np.max(np.abs(point - 0.5 * np.ones(2))) > 0.5-tol:\n            decide = 1\n            break\n\n    return decide\n\n\ndef j_reg(mesh, **kwargs):\n\n    deform = kwargs.get('deform', 0)\n    Length = 0\n    verts = mesh.verts + deform\n\n    interface_omega = []\n    for l in range(len(mesh.omega)):\n        T_num = mesh.omega[l,1:].tolist()\n        if bool(set(mesh.shape_interface) & set(T_num)) and len(list(set(mesh.shape_interface) & set(T_num))) ==2 and mesh.omega[l,0]==1:\n            interface_omega += [l]\n\n    for l in interface_omega:\n\n        T_num = mesh.omega[l,1:].tolist()\n\n        T_interface = list(set(T_num)&set(mesh.shape_interface))\n\n        xk, xj = verts[T_interface[0]], verts[T_interface[1]]\n\n        \"\"\" plot \"\"\"\n#        plt.gca().add_patch(plt.Polygon([xk,xj]))\n\n        Length += np.linalg.norm(xk - xj)\n\n    return Length\n\n\ndef shape_derivative_peri_reg(mesh):\n\n    num_nodes = len(mesh.nodes)\n\n    gradient = np.array([[-1, -1], [1, 0], [0, 1]])\n\n    # find all elements in omega_1 which connect to the interface\n    interface_omega_1 = []\n    for l in range(len(mesh.omega)):\n        T_num = mesh.omega[l,1:].tolist()\n        if bool(set(mesh.shape_interface) & set(T_num)) and len(list(set(mesh.shape_interface) & set(T_num))) ==2 and mesh.omega[l,0]==1:\n            interface_omega_1 += [l]\n\n    # find all elements in omega_1 which connect to the interface\n    interface_omega_2 = []\n    for l in range(len(mesh.omega)):\n        T_num = mesh.omega[l,1:].tolist()\n        if bool(set(mesh.shape_interface) & set(T_num)) and len(list(set(mesh.shape_interface) & set(T_num))) ==2 and mesh.omega[l,0]==2:\n            interface_omega_2 += [l]\n\n\n    dV = np.zeros(2*len(mesh.nodes))\n\n    for counter in range(len(interface_omega_1)):\n\n        l = interface_omega_1[counter]\n\n        T_num = mesh.omega[l,1:].tolist()\n\n        T_interface = list(set(T_num)&set(mesh.shape_interface))\n\n        xk, xj = mesh.verts[T_interface[0]], mesh.verts[T_interface[1]]\n        length = np.linalg.norm(xk - xj)\n\n        T = mesh.verts[T_num]\n\n        Mat = np.array([ T[1] - T[0],T[2] - T[0] ]).transpose()\n        det = float((T[1] - T[0])[0] * (T[2] - T[0])[1] - (T[1] - T[0])[1] * (T[2] - T[0])[0] )\n        iMat = 1./det * np.array([ [Mat[1,1], -Mat[0,1]], [-Mat[1,0], Mat[0,0]]  ])\n\n        grad_trans = iMat.transpose().dot(gradient.transpose()).transpose()\n\n        midpoint = 0.5 * (xk+xj)\n        n1 = np.array([-(xk-xj)[1], (xk-xj)[0]])\n        n2 = -n1\n        bary = 1./3. * (T[0]+T[1]+T[2])\n        if np.linalg.norm(midpoint+n1-bary) > np.linalg.norm(midpoint+n2-bary):\n            normal_vec = n1\n        else:\n            normal_vec = n2\n\n        \"\"\" for plot \"\"\"\n#        plt.plot(bary[0], bary[1], 'bo')\n#        plt.gca().add_patch(plt.Polygon(T, closed=True,  color = 'grey', alpha = 0.2, fill = True, linewidth = 2))\n#        plt.gca().add_patch(plt.Polygon([midpoint, midpoint+normal_vec], closed=True, fill = False, color = 'red', alpha = 1, linewidth = 2))\n\n        for a in [T_num.index(T_interface[aa]) for aa in range(2)]:\n\n            a_nodes = np.where(mesh.nodes == T_num[a])[0][0]\n\n            div_V_x = gradient[a,:].dot(iMat[:,0])#Div_V[a, 0] # = div(psi_a, 0)\n            div_V_y = gradient[a,:].dot(iMat[:,1])#Div_V[a, 1] # = div(0, psi_a)\n\n            # Jacobian of already transformed vector fields\n            jac_V_x = np.vstack((grad_trans[a], np.zeros(2)))  # = Jac(psi_a, 0)\n            jac_V_y = np.vstack((np.zeros(2)  , grad_trans[a]))# = Jac(0, psi_a)\n\n            dV[a_nodes] += length * (div_V_x - normal_vec.dot(jac_V_x.dot(normal_vec)))\n            dV[num_nodes + a_nodes] += length * (div_V_y - normal_vec.dot(jac_V_y.dot(normal_vec)))\n\n    return dV\n\n\ndef a_loc(mesh, u, v):\n\n    gradient = np.array([[-1, -1], [1, 0], [0, 1]])\n\n    a_loc = 0\n\n    for l in range(len(mesh.omega)):\n        T_num = mesh.omega[l,1:].tolist()\n        T = mesh.verts[T_num]\n\n        Mat = np.array([ T[1] - T[0],T[2] - T[0] ]).transpose()\n        det = float((T[1] - T[0])[0] * (T[2] - T[0])[1] - (T[1] - T[0])[1] * (T[2] - T[0])[0] )\n        iMat = 1./det * np.array([ [Mat[1,1], -Mat[0,1]], [-Mat[1,0], Mat[0,0]]  ])\n\n        det = abs(det)\n\n        idx = [np.where(mesh.nodes == j)[0][0] for j in T_num]\n\n        u_vals = u[idx]\n        v_vals = v[idx]\n\n        grad_trans     = iMat.transpose().dot(gradient.transpose()).transpose()\n        gradient_u     = grad_trans.transpose().dot(u_vals)\n        gradient_v     = grad_trans.transpose().dot(v_vals)\n\n        a_loc += 0.5 * det * gradient_u.dot(gradient_v)\n\n    return a_loc\n\ndef shape_derivative_laplace(mesh, u, v, u_bar, source, diff_coeff):\n\n    num_nodes = len(mesh.nodes)\n\n    weights = weights2\n    PSI = PSI_2\n\n    gradient = np.array([[-1, -1], [1, 0], [0, 1]])\n\n    dV = np.zeros(2*len(mesh.nodes))\n\n    for l in range(len(mesh.omega)):\n        label_l = mesh.omega[l, 0]\n        T_num = mesh.omega[l,1:].tolist()\n        T = mesh.verts[T_num]\n\n#        interface = [mesh.nodes.index(mesh.shape_interface)]\n\n        # theoretically only vector fields with support intersecting the interface\n        # have contribution to the shape derivative\n        # in order to reduce numerical noise we only assemble for precisely those\n\n        if 1:#bool(set(mesh.shape_interface) & set(T_num)):#\n\n#            plt.gca().add_patch(plt.Polygon(T, fill = False, closed = True ) )\n\n            Mat = np.array([ T[1] - T[0],T[2] - T[0] ]).transpose()\n            det = float((T[1] - T[0])[0] * (T[2] - T[0])[1] - (T[1] - T[0])[1] * (T[2] - T[0])[0] )\n            iMat = 1./det * np.array([ [Mat[1,1], -Mat[0,1]], [-Mat[1,0], Mat[0,0]]  ])\n#            print mesh.omega[l,0], det\n            det = abs(det)\n\n#            def Phi_T(y):\n#                return np.repeat(T[0][:,np.newaxis], len_P**2, axis=1) +  Mat.dot(y)\n\n            idx = [np.where(mesh.nodes == j)[0][0] for j in T_num]\n\n            # u and u_bar values on three vertices of the current triangle\n            u_vals = u[idx]\n            v_vals = v[idx]\n            u_bar_vals = u_bar[idx]\n\n            # u and u_bar evaluated at the quadrature points P, X_P and Y_P\n            u_vals_P = PSI.transpose().dot(u_vals)     # for single integral\n            v_vals_P   = PSI.transpose().dot(v_vals)   # for single integral\n            u_bar_vals_P = PSI.transpose().dot(u_bar_vals)\n\n            \"\"\"plot for test if interpolation works\"\"\"\n            \"\"\"interpolated function values > should look like the other plots\"\"\"\n    #        P_trans = np.repeat(T[0][:,np.newaxis], len_P, axis=1) +  Mat.dot(P)\n    #        plt.tricontourf(P_trans[0,], P_trans[1,],u_bar_vals_P,100,interpolation='gaussian',cmap =plt.cm.get_cmap('rainbow'), vmin = min(u_bar), vmax = max(u_bar) )\n\n            # note these need to be already transformed gradients M^-T * grad\n            grad_trans     = iMat.transpose().dot(gradient.transpose()).transpose()\n            gradient_u_bar = grad_trans.transpose().dot(u_bar_vals)\n            gradient_u     = grad_trans.transpose().dot(u_vals)\n            gradient_v     = grad_trans.transpose().dot(v_vals)\n\n            # 3x2 array containing transformed divergence values of all basis funcs\n            # for example Div_V[1,2] = div((0, psi_1)), Div_V[2,0] = div((psi_2, 0))\n#            Div_V = div(iMat)\n\n            # constant value of part 1b (constant in V)\n            # note that source f is constant\n            # it is f1 = source[0] on shape which is labeled 1\n            # it is f2 = source[1] on shape which is labeled 2\n            part_1b_const = ((0.5 * (u_vals_P - u_bar_vals_P)**2 - source[mesh.omega[l,0]-1] * v_vals_P) * weights ).sum()\n\n            # per element we have 6 basis functions (3 in each dimension)\n            for a in range(3):\n\n                # given the element and the basis function, a_nodes gives the\n                # component of dV to which element basis function psi contributes to\n                # a_nodes = index for basis function in x-coordinate, i.e., (psi_a, 0)\n                # num_nodes + a_nodes = index for basis function in  y-coordinate, i.e., (0, psi_a)\n                a_nodes = np.where(mesh.nodes == T_num[a])[0][0]\n\n                # contribution of each term coming from basisfunction in each dimension\n                # (x-axis and y-axis)\n                # will be added together and form dV[a_nodes] (=X) and dV[num_nodes + a_nodes] (=Y)\n                X, Y = 0,0\n\n                # divergence from already transformed vector fields\n                div_V_x = gradient[a,:].dot(iMat[:,0])#Div_V[a, 0] # = div(psi_a, 0)\n                div_V_y = gradient[a,:].dot(iMat[:,1])#Div_V[a, 1] # = div(0, psi_a)\n\n                # Jacobian of already transformed vector fields\n                jac_V_x = np.vstack((grad_trans[a], np.zeros(2)))  # = Jac(psi_a, 0)\n                jac_V_y = np.vstack((np.zeros(2)  , grad_trans[a]))# = Jac(0, psi_a)\n\n                # vaules of: (transformed gradient \\nabla u_bar)^T (V)\n                # it is a linear combination\n                grad_u_bar_x = gradient_u_bar[0] * PSI[a] # if V = (psi_a, 0)\n                grad_u_bar_y = gradient_u_bar[1] * PSI[a] # if V = (0, psi_a)\n\n                # 1a\n                X += - det * ( ( (u_vals_P - u_bar_vals_P) * grad_u_bar_x ) * weights ).sum()\n                Y += - det * ( ( (u_vals_P - u_bar_vals_P) * grad_u_bar_y ) * weights ).sum()\n\n                # 1b\n                X +=   det * div_V_x * part_1b_const\n                Y +=   det * div_V_y * part_1b_const\n\n                # 2a\n                X += - diff_coeff[label_l-1] * 0.5 * det * gradient_u.dot((jac_V_x + jac_V_x.transpose()).dot(gradient_v))\n                Y += - diff_coeff[label_l-1] * 0.5 * det * gradient_u.dot((jac_V_y + jac_V_y.transpose()).dot(gradient_v))\n\n                # 2b\n                X += diff_coeff[label_l-1] * div_V_x * 0.5 * det * gradient_u.dot(gradient_v)\n                Y += diff_coeff[label_l-1] * div_V_y * 0.5 * det * gradient_u.dot(gradient_v)\n\n#                if T_num[a] in mesh.shape_interface:\n#                    print a_nodes, T_num[a],X,Y\n#                    plt.plot(mesh.verts[a_nodes][0], mesh.verts[a_nodes][1], 'ro')\n                dV[a_nodes] += X\n                dV[num_nodes + a_nodes] += Y\n\n    # incorporate Dirichlet-data\n    # (actually not necessary since we only consider those intersecting with interface)\n    for k in mesh.boundary:\n        dV[k] = 0\n        dV[num_nodes + k] = 0\n\n\n    return dV\n\n\n\ndef div_V(mesh):\n\n    num_nodes = len(mesh.nodes)\n    gradient = np.array([[-1, -1], [1, 0], [0, 1]])\n    dV = np.zeros(2*len(mesh.nodes))\n\n    for l in range(len(mesh.omega)):\n\n        T_num = mesh.omega[l,1:].tolist()\n        T = mesh.verts[T_num]\n        Mat = np.array([ T[1] - T[0],T[2] - T[0] ]).transpose()\n        det = float((T[1] - T[0])[0] * (T[2] - T[0])[1] - (T[1] - T[0])[1] * (T[2] - T[0])[0] )\n        iMat = 1./det * np.array([ [Mat[1,1], -Mat[0,1]], [-Mat[1,0], Mat[0,0]]  ])\n\n        for a in range(3):\n            a_nodes = np.where(mesh.nodes == T_num[a])[0][0]\n            dV[a_nodes] += gradient[a,:].dot(iMat[:,0])\n            dV[num_nodes + a_nodes] +=  gradient[a,:].dot(iMat[:,1])\n\n    return dV\n\ndef shape_derivative_laplace_partly_a(mesh, u, v, u_bar, source, diff_coeff):\n    num_nodes = len(mesh.nodes)\n\n    gradient = np.array([[-1, -1], [1, 0], [0, 1]])\n\n    dV = np.zeros(2*len(mesh.nodes))\n\n    for l in range(len(mesh.omega)):\n        label_l = mesh.omega[l, 0]\n\n        T_num = mesh.omega[l,1:].tolist()\n        T = mesh.verts[T_num]\n\n        Mat = np.array([ T[1] - T[0],T[2] - T[0] ]).transpose()\n        det = float((T[1] - T[0])[0] * (T[2] - T[0])[1] - (T[1] - T[0])[1] * (T[2] - T[0])[0] )\n        iMat = 1./det * np.array([ [Mat[1,1], -Mat[0,1]], [-Mat[1,0], Mat[0,0]]  ])\n        det = abs(det)\n\n        idx = [np.where(mesh.nodes == j)[0][0] for j in T_num]\n\n        u_vals = u[idx]\n        v_vals = v[idx]\n\n        grad_trans     = iMat.transpose().dot(gradient.transpose()).transpose()\n        gradient_u     = grad_trans.transpose().dot(u_vals)\n        gradient_v     = grad_trans.transpose().dot(v_vals)\n\n\n        for a in range(3):\n\n            a_nodes = np.where(mesh.nodes == T_num[a])[0][0]\n\n            X, Y = 0,0\n\n            div_V_x = gradient[a,:].dot(iMat[:,0])#Div_V[a, 0] # = div(psi_a, 0)\n            div_V_y = gradient[a,:].dot(iMat[:,1])#Div_V[a, 1] # = div(0, psi_a)\n\n            X += diff_coeff[label_l-1] * div_V_x * 0.5 * det * gradient_u.dot(gradient_v)\n            Y += diff_coeff[label_l-1] * div_V_y * 0.5 * det * gradient_u.dot(gradient_v)\n\n            dV[a_nodes] += X\n            dV[num_nodes + a_nodes] += Y\n\n\n    for k in mesh.boundary:\n        dV[k] = 0\n        dV[num_nodes + k] = 0\n\n\n    return dV\n\ndef shape_derivative_laplace_partly_b(mesh, u, v, u_bar, source, diff_coeff):\n\n    num_nodes = len(mesh.nodes)\n\n    gradient = np.array([[-1, -1], [1, 0], [0, 1]])\n\n    dV = np.zeros(2*len(mesh.nodes))\n\n    for l in range(len(mesh.omega)):\n        label_l = mesh.omega[l, 0]\n        T_num = mesh.omega[l,1:].tolist()\n        T = mesh.verts[T_num]\n\n        Mat = np.array([ T[1] - T[0],T[2] - T[0] ]).transpose()\n        det = float((T[1] - T[0])[0] * (T[2] - T[0])[1] - (T[1] - T[0])[1] * (T[2] - T[0])[0] )\n        iMat = 1./det * np.array([ [Mat[1,1], -Mat[0,1]], [-Mat[1,0], Mat[0,0]]  ])\n        det = abs(det)\n\n        idx = [np.where(mesh.nodes == j)[0][0] for j in T_num]\n\n        u_vals = u[idx]\n        v_vals = v[idx]\n\n        grad_trans     = iMat.transpose().dot(gradient.transpose()).transpose()\n        gradient_u     = grad_trans.transpose().dot(u_vals)\n        gradient_v     = grad_trans.transpose().dot(v_vals)\n\n        for a in range(3):\n\n            a_nodes = np.where(mesh.nodes == T_num[a])[0][0]\n\n            X, Y = 0,0\n\n            jac_V_x = np.vstack((grad_trans[a], np.zeros(2)))  # = Jac(psi_a, 0)\n            jac_V_y = np.vstack((np.zeros(2)  , grad_trans[a]))# = Jac(0, psi_a)\n\n            X += - diff_coeff[label_l-1] * 0.5 * det * gradient_u.dot((jac_V_x + jac_V_x.transpose()).dot(gradient_v))\n            Y += - diff_coeff[label_l-1] * 0.5 * det * gradient_u.dot((jac_V_y + jac_V_y.transpose()).dot(gradient_v))\n\n            dV[a_nodes] += X\n            dV[num_nodes + a_nodes] += Y\n\n    for k in mesh.boundary:\n        dV[k] = 0\n        dV[num_nodes + k] = 0\n\n    return dV\n\n\n\ndef shape_derivative_intersection(mesh, u, v, u_bar, source):\n\n    num_nodes = len(mesh.nodes)\n\n    # for quadrature\n    weights = weights2\n    PSI = PSI_2\n\n    gradient = np.array([[-1, -1], [1, 0], [0, 1]])\n\n    dV = np.zeros(2*len(mesh.nodes))\n\n    for l in range(len(mesh.omega)):\n        T_num = mesh.omega[l,1:].tolist()\n        T = mesh.verts[T_num]\n\n        if True:#bool(set(interface) & set(T_num)):\n\n            Mat = np.array([ T[1] - T[0],T[2] - T[0] ]).transpose()\n            det = float((T[1] - T[0])[0] * (T[2] - T[0])[1] - (T[1] - T[0])[1] * (T[2] - T[0])[0] )\n            iMat = 1./det * np.array([ [Mat[1,1], -Mat[0,1]], [-Mat[1,0], Mat[0,0]]  ])\n            det = abs(det)\n\n            idx = [np.where(mesh.nodes == j)[0][0] for j in T_num]\n\n            u_vals = u[idx]\n            v_vals = v[idx]\n            u_bar_vals = u_bar[idx]\n\n            u_vals_P = PSI.transpose().dot(u_vals)     # for single integral\n            v_vals_P = PSI.transpose().dot(v_vals)\n            u_bar_vals_P = PSI.transpose().dot(u_bar_vals)\n\n            grad_trans     = iMat.transpose().dot(gradient.transpose()).transpose()\n            gradient_u_bar = grad_trans.transpose().dot(u_bar_vals)\n\n            objective = ((0.5 * (u_vals_P - u_bar_vals_P)**2 ) * weights ).sum()\n\n            for a in range(3):\n\n                a_nodes = np.where(mesh.nodes == T_num[a])[0][0]\n\n                X, Y = 0,0\n\n                div_V_x = gradient[a,:].dot(iMat[:,0])\n                div_V_y = gradient[a,:].dot(iMat[:,1])\n\n                grad_u_bar_x = gradient_u_bar[0] * PSI[a] # if V = (psi_a, 0)\n                grad_u_bar_y = gradient_u_bar[1] * PSI[a] # if V = (0, psi_a)\n\n                # 1\n                X += - det * ( ( (u_vals_P - u_bar_vals_P) * grad_u_bar_x ) * weights ).sum()\n                Y += - det * ( ( (u_vals_P - u_bar_vals_P) * grad_u_bar_y ) * weights ).sum()\n\n#                # 2\n#                X += det * div_V_x * objective\n#                Y += det * div_V_y * objective\n\n                # 3\n                \"\"\"annihilated???\"\"\"\n                X += - det * div_V_x * ((source[mesh.omega[l,0]-1] * v_vals_P) * weights ).sum()\n                Y += - det * div_V_y * ((source[mesh.omega[l,0]-1] * v_vals_P) * weights ).sum()\n\n                dV[a_nodes]             += X\n                dV[num_nodes + a_nodes] += Y\n\n    for k in mesh.boundary:\n        dV[k] = 0\n        dV[num_nodes + k] = 0\n\n    return dV\n\ndef shape_derivative_nonlocal_divV_bilin(mesh, retriangulate, Norm, gam, u, v, num_cores):\n\n    num_nodes = len(mesh.nodes)\n    gradient = np.array([[-1, -1], [1, 0], [0, 1]])\n\n    liste = range(len(mesh.omega)) #interface_omega\n    random.shuffle(list(liste))\n    pieces = np.array_split(liste, num_cores)\n\n    # For every pieces compute the whole thing\n    def aux(m):\n        dV = np.zeros(2*len(mesh.nodes))\n        for i in pieces[m]:\n\n            T_i = mesh.omega[i, 1:].tolist()\n            T_i_v = mesh.verts[T_i]\n\n            label_i = mesh.omega[i, 0]\n            eps_i = gam['eps'+str(label_i)]\n\n            T_i = mesh.omega[i, 1:].tolist()\n            T_i_v = mesh.verts[T_i]\n            Mat_i = np.array( [T_i_v[1] - T_i_v[0],T_i_v[2] - T_i_v[0] ]).transpose()\n            det_T_i = Mat_i[0,0] * Mat_i[1,1] - Mat_i[1,0] * Mat_i[0,1]\n            iMat_i = 1./det_T_i * np.array([ [Mat_i[1,1], -Mat_i[0,1]], [-Mat_i[1,0], Mat_i[0,0]]  ])\n            det_T_i = abs(det_T_i)\n\n            i_triangles = np.where(np.all(mesh.triangles == mesh.omega[i],axis=1))[0][0]\n            hash_i = np.where(norm_dict[Norm]((mesh.bary-np.repeat(mesh.bary[i][:,np.newaxis], len(mesh.bary), axis = 1).transpose()).transpose())<=(eps_i + mesh.diam))[0].tolist()\n\n            idx = [np.where(mesh.nodes == j)[0][0] for j in T_i]\n\n            u_vals = u[idx]\n            v_vals = v[idx]\n\n            u_vals_P = PSI.transpose().dot(u_vals)     # for single integral\n            v_vals_P = PSI.transpose().dot(v_vals)     # for single integral\n\n            for a in range(3):\n                a_nodes = np.where(mesh.nodes == T_i[a])[0][0]\n\n                X_val, Y_val = 0,0\n\n                div_V_x = gradient[a,:].dot(iMat_i[:,0])\n                div_V_y = gradient[a,:].dot(iMat_i[:,1])\n\n                for j in hash_i:\n                    label_j = mesh.triangles[j, 0]\n                    gam_ij = gam[str(label_i)+str(label_j)]\n\n                    T_j = mesh.triangles[j, 1:].tolist()\n                    T_j_v = mesh.verts[T_j]\n                    Mat_j = np.array( [T_j_v[1] - T_j_v[0],T_j_v[2] - T_j_v[0] ]).transpose()\n                    det_T_j = Mat_j[0,0] * Mat_j[1,1] - Mat_j[1,0] * Mat_j[0,1]\n\n                    iMat_j = 1./det_T_j * np.array([ [Mat_j[1,1], -Mat_j[0,1]], [-Mat_j[1,0], Mat_j[0,0]]  ])\n                    def iPhi_j(y):\n                        return iMat_j.dot( y - np.repeat(T_j_v[0][:,np.newaxis], n2, axis=1))\n\n\n                    if label_j != 3:\n                        idx_j = [np.where(mesh.nodes == j)[0][0] for j in T_j]\n                        # u values on three vertices of T_j\n                        u_vals_j = u[idx_j]\n\n                    def u_j(x):\n                        return BASIS(x).transpose().dot(u_vals_j)#u_vals_j[0] * basis[0](x) + u_vals_j[1] * basis[1](x) + u_vals_j[1] * basis[1](x)\n\n\n                    def I1(x):\n                        x_trans = (T_i_v[0]+Mat_i.dot(x))\n                        integral_L2, integral_convu = 0., 0.\n\n                        aux = np.repeat(x_trans[:,np.newaxis], n2, axis=1)\n\n                        def inner(tri, gam_ij):\n                            tri = np.array(tri)\n                            Mat_l = np.array( [tri[1] - tri[0],tri[2] - tri[0] ]).transpose()\n                            det_l = abs((tri[1] - tri[0])[0] * (tri[2] - tri[0])[1] - (tri[1] - tri[0])[1] * (tri[2] - tri[0])[0] )\n                            def Phi_l(y):\n                                return np.repeat(tri[0][:,np.newaxis], n2, axis=1) +  Mat_l.dot(y)\n\n                            GAM = det_l * gam_ij(aux, Phi_l(P2)) * weights2\n\n                            if label_j != 3:\n                                return  GAM.sum(), (u_j(iPhi_j(Phi_l(P2))) * GAM ).sum()\n                            else:\n                                return  GAM.sum(), 0.\n\n                        tris = retriangulate(x_trans, T_j_v, Norm, eps_i )\n                        if len(tris) != 0:\n                            for tri in tris:\n                                val_L2, val_convu = inner(tri, gam_ij)\n                                integral_L2    += val_L2\n                                integral_convu += val_convu\n\n                        return np.array([integral_L2, integral_convu])\n\n                    I = np.array(list(map(I1, P.transpose()))).transpose()\n\n                    ### weighted L2 product part ###\n                    L2 = det_T_i * (u_vals_P * v_vals_P * I[0] * weights).sum()\n                    X_val += div_V_x * L2\n                    Y_val += div_V_y * L2\n\n                    ### convolution part ###\n                    if label_j != 3:\n                        convu = det_T_i * (v_vals_P * I[1] * weights).sum()\n                        X_val += - div_V_x * convu\n                        Y_val += - div_V_y * convu\n\n                dV[a_nodes] += 2 *  X_val\n                dV[num_nodes + a_nodes] += 2 * Y_val\n\n        return dV\n\n    p = Pool(num_cores)\n    dVs = p.map(aux, range(num_cores))\n\n    dV = np.zeros(2*len(mesh.nodes))\n    for i in range(num_cores):\n        dV += dVs[i]\n\n    del dVs\n    p.close()\n    p.join()\n    p.clear()\n\n    for k in mesh.boundary:\n        dV[k] = 0\n        dV[num_nodes + k] = 0\n\n    return dV\n\ndef shape_derivative_nonlocal_divV_bilin_approx(mesh, gam, u, v, num_cores):\n    gradient = np.array([[-1, -1], [1, 0], [0, 1]])\n    num_nodes = len(mesh.nodes)\n\n    liste = range(len(mesh.omega))#mesh.omega#interface_omega\n    random.shuffle(list(liste))\n    pieces = np.array_split(liste, num_cores)\n\n    # For every pieces compute the whole matrix\n    def aux(m):\n        dV = np.zeros(2*len(mesh.nodes))\n\n        for i in pieces[m]:\n            T_i = mesh.omega[i, 1:].tolist()\n            T_i_v = mesh.verts[T_i]\n            label_i = mesh.omega[i, 0]\n\n            T_i = mesh.omega[i, 1:].tolist()\n            T_i_v = mesh.verts[T_i]\n            Mat_i = np.array( [T_i_v[1] - T_i_v[0],T_i_v[2] - T_i_v[0] ]).transpose()\n            det_T_i = Mat_i[0,0] * Mat_i[1,1] - Mat_i[1,0] * Mat_i[0,1]\n            iMat_i = 1./det_T_i * np.array([ [Mat_i[1,1], -Mat_i[0,1]], [-Mat_i[1,0], Mat_i[0,0]]  ])\n            det_T_i = abs(det_T_i)\n\n            def Phi_i(y):\n                return  Mat_i.dot(y)  + np.repeat(T_i_v[0][:,np.newaxis], n**2, axis=1)\n\n            i_triangles = np.where(np.all(mesh.triangles == mesh.omega[i],axis=1))[0][0]\n            hash_i = np.where(norm_dict[Norm]((mesh.bary-np.repeat(mesh.bary[i][:,np.newaxis], len(mesh.bary), axis = 1).transpose()).transpose())<=(eps_i + mesh.diam))[0].tolist()\n\n            idx = [np.where(mesh.nodes == j)[0][0] for j in T_i]\n\n            # u and u_bar values on three vertices of the current triangle\n            u_vals = u[idx]\n            v_vals = v[idx]\n\n            for a in range(3):\n                a_nodes = np.where(mesh.nodes == T_i[a])[0][0]\n\n                X_val, Y_val = 0,0\n\n                div_V_x = gradient[a,:].dot(iMat_i[:,0])\n                div_V_y = gradient[a,:].dot(iMat_i[:,1])\n\n                for j in hash_i:\n                    label_j = mesh.triangles[j, 0]\n                    gam_ij = gam[str(label_i)+str(label_j)]\n\n                    T_j = mesh.triangles[j, 1:].tolist()\n                    T_j_v = mesh.verts[T_j]\n                    Mat_j = np.array( [T_j_v[1] - T_j_v[0],T_j_v[2] - T_j_v[0] ]).transpose()\n                    det_T_j = abs(Mat_j[0,0] * Mat_j[1,1] - Mat_j[1,0] * Mat_j[0,1])\n                    def Phi_j(y):\n                        return Mat_j.dot(y) + np.repeat(T_j_v[0][:,np.newaxis], n**2, axis=1)\n\n                    if label_j != 3:\n                        idx_j = [np.where(mesh.nodes == j)[0][0] for j in T_j]\n\n                        # u values at the vertices of T_j\n                        u_vals_j = u[idx_j]\n\n                    u_vals_X_P   = PSI_X.transpose().dot(u_vals) # for double integral\n                    v_vals_X_P   = PSI_X.transpose().dot(v_vals) # for double integral\n                    u_vals_Y_P_j = PSI_Y.transpose().dot(u_vals_j) # for double integral\n\n                    ### weighted L2 product part ###\n                    L2 = det_T_i * det_T_j * ( u_vals_X_P *  v_vals_X_P  * W * gam_ij(Phi_i(X),Phi_j(Y))).sum()\n                    X_val += div_V_x * L2\n                    Y_val += div_V_y * L2\n\n                    ### convolution part ###\n                    if label_j != 3:\n                        convu = det_T_i * det_T_j * ( v_vals_X_P *  u_vals_Y_P_j  * W * gam_ij(Phi_i(X),Phi_j(Y))).sum()\n                        X_val += - div_V_x * convu\n                        Y_val += - div_V_y * convu\n\n                dV[a_nodes] += X_val\n                dV[num_nodes + a_nodes] += Y_val\n\n        return 2 * dV\n\n    p = Pool(num_cores)\n    dVs = p.map(aux, range(num_cores))\n\n    dV = np.zeros(2*len(mesh.nodes))\n    for i in range(num_cores):\n        dV += dVs[i]\n\n    del dVs\n    p.close()\n    p.join()\n    p.clear()\n\n    for k in mesh.boundary:\n        dV[k] = 0\n        dV[num_nodes + k] = 0\n\n    return dV\n\n\ndef shape_derivative_nonlocal_divV_bilin_approx_2(mesh, gam, u, v, num_cores):\n    \"\"\"\n    bilinear form + (div V(x) + div V(y))\n    \"\"\"\n    gradient = np.array([[-1, -1], [1, 0], [0, 1]])\n    num_nodes = len(mesh.nodes)\n\n    liste = range(len(mesh.omega))#mesh.omega#interface_omega\n    random.shuffle(list(liste))\n    pieces = np.array_split(liste, num_cores)\n\n    # For every pieces compute the whole matrix\n    def aux(m):\n        dV = np.zeros(2*len(mesh.nodes))\n        \n        for i in pieces[m]:\n            T_i = mesh.omega[i, 1:].tolist()\n            T_i_v = mesh.verts[T_i]\n            label_i = mesh.omega[i, 0]\n    \n            T_i = mesh.omega[i, 1:].tolist()\n            T_i_v = mesh.verts[T_i]\n            Mat_i = np.array( [T_i_v[1] - T_i_v[0],T_i_v[2] - T_i_v[0] ]).transpose()\n            det_T_i = Mat_i[0,0] * Mat_i[1,1] - Mat_i[1,0] * Mat_i[0,1] \n            iMat_i = 1./det_T_i * np.array([ [Mat_i[1,1], -Mat_i[0,1]], [-Mat_i[1,0], Mat_i[0,0]]  ])\n            det_T_i = abs(det_T_i)            \n    \n            def Phi_i(y):\n                return  Mat_i.dot(y)  + np.repeat(T_i_v[0][:,np.newaxis], n**2, axis=1)\n    \n            i_triangles = np.where(np.all(mesh.triangles == mesh.omega[i],axis=1))[0][0]\n            hash_i = np.where(norm_dict[Norm]((mesh.bary-np.repeat(mesh.bary[i][:,np.newaxis], len(mesh.bary), axis = 1).transpose()).transpose())<=(eps_i + mesh.diam))[0].tolist()\n    \n            idx = [np.where(mesh.nodes == j)[0][0] for j in T_i]\n            \n            # u and u_bar values on three vertices of the current triangle\n            u_vals = u[idx]\n            v_vals = v[idx]\n\n            for a in range(3):\n                a_nodes = np.where(mesh.nodes == T_i[a])[0][0] \n\n                X_val, Y_val = 0,0\n\n                div_V_x = gradient[a,:].dot(iMat_i[:,0])\n                div_V_y = gradient[a,:].dot(iMat_i[:,1])\n\n                for j in hash_i:\n                    label_j = mesh.triangles[j, 0]\n                    gam_ij = gam[str(label_i)+str(label_j)]\n                    \n                    T_j = mesh.triangles[j, 1:].tolist()\n                    T_j_v = mesh.verts[T_j]\n                    Mat_j = np.array( [T_j_v[1] - T_j_v[0],T_j_v[2] - T_j_v[0] ]).transpose()    \n                    det_T_j = Mat_j[0,0] * Mat_j[1,1] - Mat_j[1,0] * Mat_j[0,1]\n                    iMat_j = 1./det_T_j * np.array([ [Mat_j[1,1], -Mat_j[0,1]], [-Mat_j[1,0], Mat_j[0,0]]  ])\n                    det_T_j = abs(det_T_j)\n                    def Phi_j(y):\n                        return Mat_j.dot(y) + np.repeat(T_j_v[0][:,np.newaxis], n**2, axis=1) \n    \n                    if label_j != 3:\n                        idx_j = [np.where(mesh.nodes == j)[0][0] for j in T_j]\n                        \n                        # u values at the vertices of T_j\n                        u_vals_j = u[idx_j]\n                    \n                    u_vals_X_P   = PSI_X.transpose().dot(u_vals) # for double integral                    \n                    v_vals_X_P   = PSI_X.transpose().dot(v_vals) # for double integral\n                    u_vals_Y_P_j = PSI_Y.transpose().dot(u_vals_j) # for double integral\n                    \n                    # add div V(y) if \\neq 0\n                    if T_i[a] in T_j:\n                        b = T_j.index(T_i[a])\n                        div_V_x += gradient[b,:].dot(iMat_j[:,0])\n                        div_V_y += gradient[b,:].dot(iMat_j[:,1])\n\n                    ### weighted L2 product part ###\n                    L2 = det_T_i * det_T_j * ( u_vals_X_P *  v_vals_X_P  * W * gam_ij(Phi_i(X),Phi_j(Y))).sum()\n                    X_val += div_V_x * L2\n                    Y_val += div_V_y * L2\n        \n                    ### convolution part ###\n                    if label_j != 3:\n                        convu = det_T_i * det_T_j * ( v_vals_X_P *  u_vals_Y_P_j  * W * gam_ij(Phi_i(X),Phi_j(Y))).sum()\n                        X_val += - div_V_x * convu\n                        Y_val += - div_V_y * convu\n\n                dV[a_nodes] += X_val\n                dV[num_nodes + a_nodes] += Y_val\n         \n        return 2 * dV\n     \n    p = Pool(num_cores)           \n    dVs = p.map(aux, range(num_cores))\n    \n    dV = np.zeros(2*len(mesh.nodes))\n    for i in range(num_cores):\n        dV += dVs[i]\n        \n    del dVs\n    p.close()\n    p.join()\n    p.clear()\n\n    for k in mesh.boundary:\n        dV[k] = 0\n        dV[num_nodes + k] = 0\n\n    return dV   \n\n\n\n\n\n\n\n\n\n\n\n\n            \n#=============================================================================#\n#=============================================================================#\n\"\"\"-------------------------------------------------------------------------\"\"\"\n\"\"\"                   TEST ASSEMBLY                           \"\"\"\n\"\"\"-------------------------------------------------------------------------\"\"\"\ntest_ball_volume =0\nif test_ball_volume:\n\n    h, delta, Norm, num_cores = 0.025, 0.2, 'L2', 8\n    mesh, mesh_data = prepare_mesh_reg(h, delta, Norm, num_cores)\n\n    ##### GMSH FILE adaption with correct interaction horizon for outer boundary\n    # import os\n    # fil_target = 'circle'\n    # textfile = open('' + fil_target + '.geo', 'r')\n    # data = textfile.readlines()\n    #\n    # tmpfile = open('test.txt', 'w+')\n    # tmpfile.write('delta = ' + str(delta) + ';\\n')\n    #\n    # for line in data[1:]:\n    #     tmpfile.write(line)\n    #\n    # tmpfile.close()\n    #\n    # os.system('rm ' + fil_target + '.geo')\n    # current_path = os.path.dirname(os.path.abspath(__file__))\n    # os.system('mv ' + current_path + '/test.txt ' + current_path + '/' + fil_target + '.geo')\n    # ##### GMSH FILE adation END #####\n    #\n    # os.system('gmsh ' + fil_target + '.geo -2 -clscale ' + str(h) + ' -o ' + fil_target + '.msh')\n    # verts, lines, triangles =  read_mesh('' + fil_target + '.msh')\n    # mesh, mesh_data_target = prepare_mesh(verts, lines, triangles, delta, Norm)\n    ##### GMSH FILE\n\n    i = int(len(mesh.verts) * 1.5) // 2\n    # a, b = 0, 2\n    # print(mesh.triangles)\n    T_i = mesh.triangles[i, 1:].tolist()\n    T_i = mesh.verts[T_i]\n    x_i = T_i[0]#0.5*(T_i[0]+T_i[1])\n    plt.plot(x_i[0], x_i[1], 'ro')\n\n    hash_i = np.where(norm_dict['L2']((mesh.bary-np.repeat(mesh.bary[i][:,np.newaxis], len(mesh.bary), axis = 1).transpose()).transpose()) < delta+mesh.diam)[0].tolist()\n    ball_vol = 0\n    for j in hash_i:\n        T_j = mesh.triangles[j, 1:].tolist()\n        T_j = mesh.verts[T_j]\n        plt.gca().add_patch(plt.Polygon(T_j, closed=True, fill=False, color='black'))\n\n        # tris = retriangulate_dict[ball](x_i, T_j,'', delta)\n        # caps = intersection_exactl2_capsonly(x_i, T_j, delta)\n        tris, caps = intersection_l2_exactcaps(x_i, T_j, delta)\n        for T_i_v in tris:\n            T_i_v = np.array(T_i_v)\n            Mat_i = np.array([T_i_v[1] - T_i_v[0], T_i_v[2] - T_i_v[0]]).transpose()\n            det_T_i = Mat_i[0, 0] * Mat_i[1, 1] - Mat_i[1, 0] * Mat_i[0, 1]\n            plt.gca().add_patch(plt.Polygon(T_i_v , closed=True, fill=True, color='red', alpha =0.5))\n            plt.gca().add_patch(plt.Polygon(T_i_v, closed=True, fill=False, color='black'))\n            ball_vol += 0.5 * abs(det_T_i)\n        if len(caps)!=0:\n            for cap in caps:\n                centroid = cap[0]\n                plt.plot(centroid[0], centroid[1], 'bo')\n                ball_vol += cap[1]\n    plt.gca().add_patch(plt.Polygon(T_i, closed=True, fill=True, color='yellow', alpha = 0.3))\n    print(ball_vol, np.pi*delta**2)\n    plt.axis('equal')\n    plt.show()\n\ntest_assembly=0\nif test_assembly:\n    plot = 1\n    \n    h, delta, Norm, num_cores = 0.0125, 0.1, 'L2', 1\n    mesh, mesh_data = prepare_mesh_reg(h, delta, Norm, num_cores)\n    ball = 'exact_L2'\n\n    i, j = int(len(mesh.verts)*1.5 )/2, 71\n    a, b = 0,2\n      \n    label_i = mesh.triangles[i, 0]\n    eps_i = delta\n    \n    T_i = mesh.triangles[i, 1:].tolist()\n    T_i_v = mesh.verts[T_i]\n    if plot:\n        fig, ax = plt.subplots()\n        plt.gca().add_patch(plt.Polygon(T_i_v , closed=True, fill = True, color = 'yellow'))\n    \n    #for cc in range(3):\n    #    circle1 = plt.Circle(tuple(T_i_v[cc]), delta, color='r', fill = False, linewidth = 3)\n    #    ax.add_artist(circle1)\n    #circle1 = plt.Circle(tuple(mesh.bary[i]), delta, color='b', fill = False, linewidth = 3)\n    #ax.add_artist(circle1)\n    #plt.plot(mesh.bary[i][0], mesh.bary[i][1], 'bo')\n    \n    Mat_i = np.array( [T_i_v[1] - T_i_v[0],T_i_v[2] - T_i_v[0] ]).transpose()\n    det_T_i = Mat_i[0,0] * Mat_i[1,1] - Mat_i[1,0] * Mat_i[0,1] \n    def Phi_i(y):\n        return np.repeat(T_i_v[0][:,np.newaxis], n**2, axis=1) +  Mat_i.dot(y)\n    iMat_i = 1./det_T_i * np.array([ [Mat_i[1,1], -Mat_i[0,1]], [-Mat_i[1,0], Mat_i[0,0]]  ])\n    def iPhi_i(y):\n        return iMat_i.dot( y - np.repeat(T_i_v[0][:,np.newaxis], n**2, axis=1))\n    def iPhi_i2(y):\n        return iMat_i.dot( y - np.repeat(T_i_v[0][:,np.newaxis], n, axis=1))\n    def iPhi_i0(y):\n        return iMat_i.dot( y - T_i_v[0] )\n    i_triangles = i\n    hash_i = mesh.hash_table_bary[i_triangles]\n\n    overall =0\n    hash_i = np.where(norm_dict['L2']((mesh.bary-np.repeat(mesh.bary[i][:,np.newaxis], len(mesh.bary), axis = 1).transpose()).transpose()) < eps_i)[0].tolist()     \n\n    for j in hash_i:\n        \n        \n        \n        label_j = mesh.triangles[j, 0]\n        T_j = mesh.triangles[j, 1:].tolist()\n        T_j_v = mesh.verts[T_j]\n        \n\n        \n        if plot:\n            plt.gca().add_patch(plt.Polygon(T_j_v , closed=True, fill = True, color = 'orange', alpha = 0.25))\n#            ax.annotate(str(j),mesh.bary[j], size = 7)\n        \n        \"\"\"plot barycenter of inner triangle\"\"\"\n#        plt.plot(mesh.bary[j][0], mesh.bary[j][1], 'go')\n#        circle1 = plt.Circle(tuple(mesh.bary[j]), delta, color='g', fill = False, linewidth = 3)\n#        ax.add_artist(circle1)\n\n        Mat_j = np.array( [T_j_v[1] - T_j_v[0],T_j_v[2] - T_j_v[0] ]).transpose()        \n        det_T_j = Mat_j[0,0] * Mat_j[1,1] - Mat_j[1,0] * Mat_j[0,1] \n                            \n#        if np.linalg.norm(mesh.bary[i_triangles]-mesh.bary[j]) < eps_i - mesh.diam:\n#            # no subdivision or outer integral treatment needed\n#            def Phi_j(y):\n#                return np.repeat(T_j_v[0][:,np.newaxis], n**2, axis=1) +  Mat_j.dot(y)\n#                \n#            if plot:\n#                plt.gca().add_patch(plt.Polygon(T_j_v , closed=True, fill = True, alpha = 0.7))\n#                plt.gca().add_patch(plt.Polygon(T_j_v , closed=True, fill = False)) \n#            \n#            overall += det_T_j  \n#\n#\n#        else:\n#            tris = retriangulate_dict[ball](mesh.bary[j], T_i_v, norm_dict[Norm], eps_i )\n#            \n#            for tri in tris:\n#                tri = np.array(tri)\n#                \n#                plt.gca().add_patch(plt.Polygon(tri , closed=True, fill = True, alpha = 0.3))\n#                plt.gca().add_patch(plt.Polygon(tri , closed=True, fill = False))                 \n#                \n#                Mat_l = np.array( [tri[1] - tri[0],tri[2] - tri[0] ]).transpose()\n#                det_l = abs((tri[1] - tri[0])[0] * (tri[2] - tri[0])[1] - (tri[1] - tri[0])[1] * (tri[2] - tri[0])[0])\n#                def Phi_l(y):\n#                    return np.repeat(tri[0][:,np.newaxis], n, axis=1) +  Mat_l.dot(y)\n#                def Phi_l0(y):\n#                    return tri[0] +  Mat_l.dot(y)\n\n#                print iPhi_i2(Phi_l(P))\n#                print \n#                print P\n#                plt.gca().add_patch(plt.Polygon(T_ref , closed=True, fill = True, alpha = 0.3))\n#                plt.gca().add_patch(plt.Polygon(T_ref , closed=True, fill = False))   \n#                plt.gca().add_patch(plt.Polygon([iPhi_i0(tri[i]) for i in range(3)] , closed=True, fill = True, alpha = 0.3))\n#                plt.gca().add_patch(plt.Polygon([iPhi_i0(tri[i]) for i in range(3)] , closed=True, fill = False))                   \n#                for i in range(n):\n#                    x = iPhi_i2(Phi_l(P))[:,i]\n#                    plt.plot(x[0], x[1], 'ro')\n#                           if label_j != labels_domains[-1]:\n#                       L[kk, T_j[b]] += -abs(det_l) * abs(det_T_j) * ( basis[a](iPhi_i(Phi_l(X))) *  PSI_Y[b]  * W * gam_j(Phi_l(X),Phi_j(Y))).sum()\n#                       L[kk, T_i[b]] += abs(det_l) * abs(det_T_j) * ( basis[a](iPhi_i(Phi_l(X))) *  basis[b](iPhi_i(Phi_l(X)))  * W * gam_j(Phi_l(X),Phi_j(Y))).sum()#det_T_i * (PSI_P[a] * PSI_P[b] * I[3] * weights).sum()\n\n\n#            iMat_j = 1./det_T_j * np.array([ [Mat_j[1,1], -Mat_j[0,1]], [-Mat_j[1,0], Mat_j[0,0]]  ])\n#            def iPhi_j(y):\n#                return iMat_j.dot( y - np.repeat(T_j_v[0][:,np.newaxis], n2, axis=1))\n#            #--------------------------------------------------------------------------\n#        \n#            def I1(x):\n#                x_trans = (T_i_v[0]+Mat_i.dot(x))\n#                integral = 0\n#                aux = np.repeat(x_trans[:,np.newaxis], n2, axis=1)\n#                aux2 = np.repeat(x[:,np.newaxis], n2, axis=1)\n#                \n#                if plot:\n#                    plt.plot(x_trans[0], x_trans[1], 'ro')\n#                    circle1 = plt.Circle(tuple(x_trans), delta, color='b', fill = False, linewidth = 1)\n#                    ax.add_artist(circle1)\n#    \n#                def inner(tri, gam_j):\n#                    tri = np.array(tri)\n#                    Mat_l = np.array( [tri[1] - tri[0],tri[2] - tri[0] ]).transpose()\n#                    det_l = abs((tri[1] - tri[0])[0] * (tri[2] - tri[0])[1] - (tri[1] - tri[0])[1] * (tri[2] - tri[0])[0] )\n#                    def Phi_l(y):\n#                        return np.repeat(tri[0][:,np.newaxis], n2, axis=1) +  Mat_l.dot(y)\n#                        \n#                    \n#                    \n#                    return det_l #* (  weights2).sum() #det_l * ((basis[b](aux2) -  basis[b](iPhi_j(Phi_l(P2))) )* weights2).sum() \n#    \n#                tris = retriangulate_dict[ball](x_trans, T_j_v, norm_dict[Norm], eps_i )\n#                if len(tris) != 0:\n#                    for tri in tris:     \n#                        \n#                        integral += inner(tri,1)\n#                        \"\"\"plot for testing below\"\"\"\n#                        if plot:\n#                            plt.gca().add_patch(plt.Polygon(tri , closed=True, fill = True, alpha = 0.3))\n#                            plt.gca().add_patch(plt.Polygon(tri , closed=True, fill = False)) \n#            \n#                return integral\n#        \n#        \n#            I = np.array(map(I1, P.transpose())).transpose()\n#\n#            overall +=  I[0]\n#    \n#    print np.abs(0.5*overall-np.pi*delta**2)\n\n\n#            print 'standard', det_T_i * (PSI_P[a] * I * weights).sum()\n            \n    #--------------------------------------------------------------------------\n    #        def I1(x):\n    #            x_trans = (T_i_v[0]+Mat_i.dot(x))\n    #            integral  = 0.\n    #            aux = np.repeat(x_trans[:,np.newaxis], n2, axis=1)\n    #            aux2 = np.repeat(x[:,np.newaxis], n2, axis=1)\n    ##            plt.plot(x_trans[0], x_trans[1], 'rx')\n    #                    \n    #            def inner(tri, gam_j):\n    #                tri = np.array(tri)\n    #                Mat_l = np.array( [tri[1] - tri[0],tri[2] - tri[0] ]).transpose()\n    #                det_l = abs((tri[1] - tri[0])[0] * (tri[2] - tri[0])[1] - (tri[1] - tri[0])[1] * (tri[2] - tri[0])[0] )\n    #                def Phi_l(y):\n    #                    return np.repeat(tri[0][:,np.newaxis], n2, axis=1) +  Mat_l.dot(y)\n    #    \n    #                return det_l * (basis[a](aux2) * (basis[b](aux2) -  basis[b](iPhi_j(Phi_l(P2))) )* weights2).sum() \n    #    \n    #    \n    #            tris = retriangulate_dict[ball](x_trans, T_j_v, norm_dict[Norm], eps_i )\n    #    \n    #            \n    #            if len(tris) != 0:\n    #                for tri in tris:     \n    #                    integral += inner(tri, 1)\n    #                    \n    #    \n    #                    \"\"\"plot for testing below\"\"\"\n    ##                    plt.gca().add_patch(plt.Polygon(tri , closed=True, fill = True))\n    ##                    plt.gca().add_patch(plt.Polygon(tri , closed=True, fill = False)) \n    #    \n    #    \n    #    \n    #            return integral\n    #    \n    #        I = map(I1, P.transpose())\n    #        \n    #        val = det_T_i * tri_adapt(I1, T_ref, tol2_Radon_get =0.01, plot = 1)\n    #        \n    #        print np.abs(val- det_T_i *(I*weights).sum())/np.abs(val)\n    #        print 'adapt', val\n    #        print 'nonadapt', det_T_i *(I*weights).sum()\n            \n    #        def I1(x):\n    #            x_trans = (T_i_v[0]+Mat_i.dot(x))\n    #            integral, integral0, integral1, integral2 = 0., 0., 0., 0.\n    #            aux = np.repeat(x_trans[:,np.newaxis], n2, axis=1)\n    #                    \n    #            def inner(tri, gam_j):\n    #                tri = np.array(tri)\n    #                Mat_l = np.array( [tri[1] - tri[0],tri[2] - tri[0] ]).transpose()\n    #                det_l = abs((tri[1] - tri[0])[0] * (tri[2] - tri[0])[1] - (tri[1] - tri[0])[1] * (tri[2] - tri[0])[0] )\n    #                def Phi_l(y):\n    #                    return np.repeat(tri[0][:,np.newaxis], n2, axis=1) +  Mat_l.dot(y)\n    #                    \n    #                GAM = det_l   * weights2   \n    #\n    #                return  GAM.sum(), (basis[0](iPhi_j(Phi_l(P2))) * GAM ).sum(), (basis[1](iPhi_j(Phi_l(P2))) * GAM ).sum()  , (basis[2](iPhi_j(Phi_l(P2))) * GAM ).sum()  \n    #\n    #\n    #            tris = retriangulate_dict[ball](x_trans, T_j_v, norm_dict[Norm], eps_i )\n    #\n    #            if len(tris) != 0:\n    #                for tri in tris:     \n    #                    v, v0, v1, v2 = inner(tri, 1)\n    #                    integral  += v\n    #                    integral0 += v0\n    #                    integral1 += v1\n    #                    integral2 += v2\n    #                    \n    #                    \"\"\"plot for testing below\"\"\"\n    ##                    plt.gca().add_patch(plt.Polygon(tri , closed=True, fill = True))\n    ##                    plt.gca().add_patch(plt.Polygon(tri , closed=True, fill = False)) \n    #        \n    #            return np.array([integral0, integral1, integral2, integral])\n    #\n    #        I = np.array(map(I1, P.transpose())).transpose()\n    #\n    #        print 'standard old', det_T_i * (PSI_P[a] * ( PSI_P[b]* I[3] - I[b] )* weights).sum()\n    #\n    #-------------------------------\n    if plot:\n                \n        for ii in mesh.triangles[:,1:]:\n            plt.gca().add_patch(plt.Polygon(mesh.verts[ii], closed=True, fill = False , alpha  = 0.25)) \n    #        for ii in mesh.omega[:,1:]:\n    #            plt.gca().add_patch(plt.Polygon(mesh.verts[ii], closed=True, fill = True , color = 'gray',alpha  = 0.05)) \n        ax.axis('equal')     \n           \n        #\n        #plt.figure('I')\n        #plt.gca().add_patch(plt.Polygon(T_ref , closed=True, fill = False))  \n        #for p in P.transpose():\n        #    plt.plot(p[0], p[1], 'rx')\n        #plt.tricontourf(P[0,:],P[1,:],I,100,interpolation='nearest',cmap =plt.cm.get_cmap('rainbow')) # choose 20 contour levels, just to show how good its interpolation is\n        #plt.colorbar()\n        #plt.axis('equal')\n           \n#    plt.gca().add_patch(plt.Polygon(T_i_v , closed=True, fill = True, color = 'yellow'))\n    \n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- ../Rates2D/bib3.py	(revision b58f426ba4ba71178accbbade003703e84c118d6)
+++ ../Rates2D/bib3.py	(date 1586669416485)
@@ -1688,6 +1688,40 @@
 
     weights = 0.5 * np.array([-27./48, 25./48, 25./48, 25./48])
 
+    # P = np.array([[0.33333333, 0.33333333],
+    #               [0.45929259, 0.45929259],
+    #               [0.45929259, 0.08141482],
+    #               [0.08141482, 0.45929259],
+    #               [0.17056931, 0.17056931],
+    #               [0.17056931, 0.65886138],
+    #               [0.65886138, 0.17056931],
+    #               [0.05054723, 0.05054723],
+    #               [0.05054723, 0.89890554],
+    #               [0.89890554, 0.05054723],
+    #               [0.26311283, 0.72849239],
+    #               [0.72849239, 0.00839478],
+    #               [0.00839478, 0.26311283],
+    #               [0.72849239, 0.26311283],
+    #               [0.26311283, 0.00839478],
+    #               [0.00839478, 0.72849239]]).transpose()
+    #
+    # weights = np.array([0.14431560767779
+    #                        , 0.09509163426728
+    #                        , 0.09509163426728
+    #                        , 0.09509163426728
+    #                        , 0.10321737053472
+    #                        , 0.10321737053472
+    #                        , 0.10321737053472
+    #                        , 0.03245849762320
+    #                        , 0.03245849762320
+    #                        , 0.03245849762320
+    #                        , 0.02723031417443
+    #                        , 0.02723031417443
+    #                        , 0.02723031417443
+    #                        , 0.02723031417443
+    #                        , 0.02723031417443
+    #                        , 0.02723031417443])
+
     def BASIS(v):
         return np.array([ 1. - v[0] - v[1], v[0], v[1]])
 
Index: ../Rates2D/conf2.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import numpy as np\nimport conf\n\n\nintegration_method = \"baryCenterRT\" #\"retriangulate\" # \"baryCenter\" #\nis_PlacePointOnCap = 0  # 0 = nocaps, 1 = withcaps\n\n\nfolder = 'bary_nocaps_gmsh_3/'\n\ngmsh = 1\ngeofile = \"unit_square_3\"\n\n\ntransform_switch = 1\n\nif gmsh:\n    transform_switch = 0\n\nh1, h2 = 0.1, 0.1\nnum_grids = 5\nnum_grids_mat = 5\n\nnum_grids_mat_l2rates = 6\nH1 = [h1 * 2 ** -k for k in range(0, max(num_grids, num_grids_mat))]\nH2 = [h2 * 2 ** -k for k in range(0, max(num_grids, num_grids_mat))]\n\nplot_solve = 0\nplot_mesh =0\n\n\ndef transform(x):\n    a = 3\n    b = 3\n    y1 = (1. - np.exp(-a * x[0])) / (1. - np.exp(-a))\n    y2 = np.sin(np.pi * x[1] / 2) ** b\n    # return np.array([y1, y2])\n    return np.array([x[0], x[1]**2])\n\n\ndef source(x):\n    return -2. * (x[1] + 1)\ndef g_d(x):\n    return x[0] ** 2 * x[1] + x[1] ** 2\ndef u_exact(x):\n    return x[0] ** 2 * x[1] + x[1] ** 2\n\n\ndepricated_mesh = 0\nnum_cores = 7\n# new_mesh = 1\n# reg_mesh = 1  # create regular grid on [0,1]^2\n\n\nNorm = 'L2'  # choose from ['L1', 'L2', 'Linf']\nball = 'exact_L2'\nBall = [ball]\napprox = 0\nfolder = 'results/' + folder\n# Kernel\ndef phi(r):\n    return 1  # (1 - ((r/delta )**2) )\n\n\n# g11 = 0.001 * 3. / (4 * delta ** 4)\n# g22 = 100 * 3. / (4 * delta ** 4)\nloclim = 4. / (np.pi * conf.delta ** 4)\n\n\ndef gam11(x, y):\n    # s = norm(x - y)\n    return loclim  # np.where(s >= delta, 0, loclim)# np.where(s > delta, 0, )#g11 #* (1 - ((s / delta) ** 2)) # np.where(s > eps2, 0, g11)\n\n\ndef gam22(x, y):\n    # s = norm(x - y)\n    # print(s)\n    return loclim  # np.where(s >= delta, 0, loclim)#loclim  # np.where(s > delta, 0,   ) #* (1 - ((s/delta )**2) )\n\n\ndef gam13(x, y):\n    return loclim  #gam22(x, y)\n\n\n#        def gam1(x,y):\n#            s = norm(x-y)\n#            return 4. / (np.pi * delta **4) * phi(s) #np.where(s > delta, 0 , phi(s)) #\n\ngam = {'11': gam11, '22': gam22, '12': gam11, '21': gam22, '13': gam13, '32': gam22, '23': gam22, '33': gam22,\n       'eps1': conf.delta, 'eps2': conf.delta, 'eps3': conf.delta}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- ../Rates2D/conf2.py	(revision b58f426ba4ba71178accbbade003703e84c118d6)
+++ ../Rates2D/conf2.py	(date 1595854013810)
@@ -2,31 +2,39 @@
 import conf
 
 
-integration_method = "baryCenterRT" #"retriangulate" # "baryCenter" #
-is_PlacePointOnCap = 0  # 0 = nocaps, 1 = withcaps
+integration_method = "baryCenterRT" #"retriangulate" #  "baryCenter" #
+is_PlacePointOnCap = 1 # 0 = nocaps, 1 = withcaps
 
+if integration_method == "retriangulate" and is_PlacePointOnCap==1:
+    method = 'withcaps_'
+elif integration_method == "retriangulate" and is_PlacePointOnCap==0:
+    method = 'nocaps_'
+elif integration_method == "baryCenterRT" and is_PlacePointOnCap==1:
+    method = 'bary_withcaps_'
+elif integration_method == "baryCenterRT" and is_PlacePointOnCap == 0:
+    method = 'bary_nocaps_'
+else:
+    method = 'bary_plain_'
 
-folder = 'bary_nocaps_gmsh_3/'
+folder = method + 'test_2/'
 
 gmsh = 1
-geofile = "unit_square_3"
+geofile = "unit_square_2"
 
 
-transform_switch = 1
-
-if gmsh:
-    transform_switch = 0
+transform_switch = 0
 
+
 h1, h2 = 0.1, 0.1
-num_grids = 5
-num_grids_mat = 5
+num_grids = 3
+num_grids_mat = 3
 
-num_grids_mat_l2rates = 6
+num_grids_mat_l2rates = 4
 H1 = [h1 * 2 ** -k for k in range(0, max(num_grids, num_grids_mat))]
 H2 = [h2 * 2 ** -k for k in range(0, max(num_grids, num_grids_mat))]
 
 plot_solve = 0
-plot_mesh =0
+plot_mesh = 0
 
 
 def transform(x):
@@ -47,7 +55,7 @@
 
 
 depricated_mesh = 0
-num_cores = 7
+num_cores = 2
 # new_mesh = 1
 # reg_mesh = 1  # create regular grid on [0,1]^2
 
Index: SubdivideMesh.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- SubdivideMesh.py	(date 1595931391101)
+++ SubdivideMesh.py	(date 1595931391101)
@@ -0,0 +1,303 @@
+import numpy as np
+import os
+import matplotlib.pyplot as plt
+#-----------------------------------------------------------------------------------------------------------------------
+
+
+###### INPUT
+geofile = "DD_simple" # .geo file
+element_size = 0.05 # to control grid size via gmsh (element size factor)
+delta = 0.1 # interaction horizon (attention: here only l2-norm)
+#-----------------------------------------------------------------------------------------------------------------------
+
+
+""" HELPER FUNCTIONS """
+##### READ .msh file
+def read_mesh(mshfile):
+    """meshfile = .msh - file genrated by gmsh """
+    fid = open(mshfile, "r")
+    for line in fid:
+        if line.find('$Nodes') == 0:
+            # falls in der Zeile 'Nodes' steht, dann steht in der...
+            line = fid.readline()  #...naechsten Zeile...
+            npts = int(line.split()[0]) #..die anzahl an nodes
+            Verts = np.zeros((npts, 3), dtype=float) #lege array for nodes an anzahl x dim
+            for i in range(0, npts):
+                # run through all nodes
+                line = fid.readline() # put current line to be the one next
+                data = line.split() # split line into its atomic characters
+                Verts[i, :] = list(map(float, data[1:])) # read out the coordinates of the node by applying the function float() to the characters in data
+        if line.find('$Elements') == 0:
+            line = fid.readline()
+            nelmts = int(line.split()[0]) # number of elements
+            Lines = []
+            Triangles = []
+            for i in range(0, nelmts):
+                line = fid.readline()
+                data = line.split()
+                if int(data[1]) == 1:
+                    Lines += [int(data[3]), int(data[-2])-1, int(data[-1])-1]
+                if int(data[1]) == 2:
+                    Triangles += [int(data[3]), int(int(data[-3])-1), int(int(data[-2])-1), int(int(data[-1])-1)]
+    return Verts, np.array(Lines).reshape(int(len(Lines)/3), 3), np.array(Triangles).reshape(int(len(Triangles)/4), 4)
+#-----------------------------------------------------------------------------------------------------------------------
+##### GMSH FILE adaption with correct interaction horizon for outer boundary
+# CONVENTION: first line of geo file is "delta = x.xx;"
+def geofile_correction(geofile, delta):
+    textfile = open('mesh/'+geofile+'.geo', 'r') # load current .geo file
+    data = textfile.readlines() # read all lines
+
+    tmpfile = open('mesh/test.txt', 'w+') # build a temporary file
+    tmpfile.write('delta = ' + str(delta) + ';\n') # write delta in first line
+
+    for line in data[1:]: # copy lines 2. - n. from original geo file in temp file
+        tmpfile.write(line)
+    tmpfile.close() # done
+
+    os.system('rm mesh/'+geofile+'.geo') # remove old geo file
+    current_path = os.path.dirname(os.path.abspath(__file__)) # get current path
+    os.system('mv '+current_path+'/mesh/test.txt ' + current_path +'/mesh/'+geofile+'.geo') # substitute old geo with temp file
+#-----------------------------------------------------------------------------------------------------------------------
+#### PLOT ROUTINE TO TEST a MESH
+def PlotMesh(elements, vertices, subdomainLabels, title = "Mesh"):
+    import matplotlib.pyplot as plt
+    colors = ['b', 'k','r','g',  'c', 'm', 'y',  'w']
+    plt.figure(title)
+    labels = list(np.unique(subdomainLabels))
+    for i in range(len(labels)):
+        elements_i = elements[np.where(subdomainLabels==labels[i])]
+        for k in range(len(elements_i)):
+            plt.gca().add_patch(plt.Polygon(vertices[elements_i[k]], closed=True, fill=False, color=colors[i],alpha=1))
+    plt.show()
+    plt.axis('equal')
+#-----------------------------------------------------------------------------------------------------------------------
+#-----------------------------------------------------------------------------------------------------------------------
+#-----------------------------------------------------------------------------------------------------------------------
+
+### GENERATE MOTHER MESH
+
+def mesh_data(geofile, element_size, delta):
+
+    ### Correct the geo file with correct delta
+    geofile_correction(geofile, delta)
+
+    ##### RUN GMSH and READ .msh file
+    # to control grid size we use <element_size>
+    # we sort from smallest to largest label
+    # CONVENTION: largest label (if numbers) = interaction domain Omega_I
+    # TO DO: labels should better be dictionary?!
+    os.system('gmsh -v 0 mesh/'+geofile+'.geo -2 -clscale '+str(element_size)+' -o mesh/'+geofile+'.msh') # run gmsh
+    vertices, lines, elements = read_mesh('mesh/' + geofile + '.msh') # read .msh file
+    elements = elements[elements[:, 0].argsort()] # smallest to largest label (Convention?!)
+    labels = np.sort(np.unique(elements[:, 0])) # smallest to largest label (Convention?!)
+    vertices = vertices[:, 0:2] # we only need two dimensions
+    #-----------------------------------------------------------------------------------------------------------------------
+
+    ##### SORT VERTICES and ADAPT ELEMENTS (so that vertices in Omega_I are at the end)
+    # CONVENTION: largest label (if numbers) = interaction domain Omega_I
+    IntDomLabel = labels[-1]
+    aux = elements[np.where(elements[:, 0] == labels[-1])]
+    aux = np.unique(aux[:,1:].reshape(3 * len(aux))) # = indices of vertices which lie in interaction domain
+    # Plot to test
+    # plt.plot(vertices[aux][:,0], vertices[aux][:,1], 'ro' )
+    # plt.plot(vertices[list(set(np.arange(len(vertices))).difference(set(aux)))][:,0], vertices[list(set(np.arange(len(vertices))).difference(set(aux)))][:,1], 'bo')
+    # sort indices = disjoint splitting of range(len(vertices)) with indices of interac. domain at the end
+    # =  {  range(len(vertices))) \setminus (indices of interaction domain) } \cup  { (indices of interaction domain) }
+    K_Omega = len(vertices) - len(aux)
+    sort_indices = np.array(list(set(np.arange(len(vertices))).difference(set(aux))) + list(aux))
+    vertices = vertices[sort_indices] # sort vertices from interaction domain to the end
+    sort_indices_inv = np.arange(len(sort_indices))[np.argsort(sort_indices)] # that is the inverse function
+    def f(n): # since ordering in vertices changed, we need to adapt <elements> and <lines> accordingly
+        return sort_indices_inv[n]
+    elements[:, 1:] = f(elements[:, 1:]) # adapt elements
+    lines[:,1:] = f(lines[:,1:]) # adapt lines
+    #-------------------------------------------------------------------------------------------------------------------
+
+    #### SINGEL DOMAIN mesh (= mother mesh)
+    # neighbours = set by John
+    elementLabels = elements[:,0] # first column in <elements>
+    subdomainLabels = elements[:,0].copy()
+    elementLabels[np.where(elementLabels != labels[-1])] = 1 # <set all labels to 1 except for interaction domain>
+    elements = elements[:,1:] # delete first column in <elements>
+    # vertices = set above
+    # lines = set above
+    K = len(vertices)
+    # K_Omega = set above
+    nE = len(elements)
+    nE_Omega = len(np.where(elementLabels != labels[-1])[0]) # number of elements with label 1
+    nV = len(vertices)
+    nV_Omega = K_Omega # since CG
+    dim = 2
+    is_DiscontinuosGalerkin = False
+    is_NeumannBoundary = False
+
+    return elements, vertices, lines, elementLabels, subdomainLabels, K_Omega
+#-----------------------------------------------------------------------------------------------------------------------
+
+
+
+# GENERATE CHILD MESHES
+
+def submesh_data(elements, vertices, lines, elementLabels, subdomainLabels):
+
+    # COMPUTE BARYCENTERS
+    bary = (vertices[elements[:, 0]] + vertices[elements[:, 1]] + vertices[elements[:, 2]]) / 3.
+    # ------------------------------------------------------------------------------------------------------------------
+    # COMPUTE DIAMETER
+    def diam(T):
+        length_of_edges = np.array(
+            [np.linalg.norm(T[0] - T[1]), np.linalg.norm(T[0] - T[2]), np.linalg.norm(T[1] - T[2])])
+        return np.max(length_of_edges)
+
+    diameter = [diam(np.array([vertices[elements[i,0]], vertices[elements[i,1]], vertices[elements[i,2]]])) for i in range(len(elements))]
+    diam = np.max(diameter)
+    # ------------------------------------------------------------------------------------------------------------------
+
+    labels = list(np.unique(subdomainLabels)) # unique list of all labels used except for the interaction domain
+    submeshes_data = [] # we collect all submesh_data as a list in the list submeshes_data
+    for k in range(len(labels)-1): # run through all labels
+        ## compute the interaction domain of the subdomain
+        boundary_i = np.unique(lines[np.where(lines[:, 0] == 11 * (k + 1))][:, 1:]).tolist() # all vertices on the boundary of subdomain label[k]
+        IntDomain_i = [] # to be filled with all triangles in the approximated interaction domain of the subdomain
+        for l in boundary_i: # run trough all vertices on the boundary
+            IntDomain_i += np.where(np.linalg.norm(bary - np.tile(vertices[l], (len(bary), 1)), axis =1) <= delta + diam)[0].tolist()
+        IntDomain_i = list(np.unique(np.array(IntDomain_i))) # clearly this list is not unique, since neighboring vertices hit the same elements multiple times
+
+        # mark all mother elements True which are in the subdomain \cup its interaction domain
+        elements_i_bool = np.zeros(len(elements), dtype = bool) # array of bools as long as mother elements
+        elements_i_bool[np.where(subdomainLabels == labels[k])] = True # mark all elements True which are in subdomain
+        elements_i_bool[IntDomain_i] = True # mark all elements True which are in the interaction domain of the subdomain
+        elements_i = elements[elements_i_bool] # child elements (note: still contains mother indices)
+
+        subdomainLabels_i = subdomainLabels[elements_i_bool]
+
+        # embedding elements
+        aux_elements = - np.ones(len(elements), dtype=int) # array of -1 as long as mother elements (note: objects in this list must not be used for indexing, i.e., -1!)
+        aux_elements[np.where(elements_i_bool)[0]] = np.arange(len(elements_i)) # number the Trues in <elements_i_bool> from 0 to ...
+        embedding_elements_i = np.array([list(aux_elements).index(i) for i in range(len(elements_i))]) # array as long as child elements
+        # note: embedding_elements_i[k] gives you the mother element index for child element index k
+
+        # compute child element_labels (i.e., set all child elements to 1 which are not in child interaction domain
+        elements_labels_i = np.zeros(len(elements_i), dtype = bool) # array of bools as long as child elements
+        elements_labels_i[np.where(subdomainLabels_i != labels[-1])] = True # mark all elements True which are in subdomain
+
+        # compute child vertices
+        vertices_i_bool = np.zeros(len(vertices), dtype = bool) # array of bools as long as mother vertices
+        aux = np.unique(elements_i.reshape(3*len(elements_i))) # all mother indices of child vertices
+        vertices_i_bool[aux] = True # mark all mother vertices True which are in child vertices
+        vertices_i = vertices[vertices_i_bool] # child bertices
+
+        # embedding elements vertices
+        aux_vertices = - np.ones(len(vertices), dtype=int) # array of -1 as long as mother elements (note: objects in this list must not be used for indexing, i.e., -1!)
+        aux_vertices[np.where(vertices_i_bool)[0]] = np.arange(len(vertices_i)) # number the Trues in <vertices_i_bool> from 0 to ...
+        embedding_vertices_i = np.array([list(aux_vertices).index(i) for i in range(len(vertices_i))]) # array as long as child vertices
+        # note: embedding_vertices_i[k] gives you the mother vertices index for child vertices index k
+
+        # adapt indices in elements_i (still mother indices), so that they fit to child vertices vertices_i
+        def large_to_small_1(i):
+            return aux_vertices[i]
+        elements_i = large_to_small_1(elements_i)
+
+        # SUBMESH ------------------------------------------------------------------------------------------------------
+        # neighbours_i = ...
+        #elements_labels_i = set above
+        #subdomainLabels_i = set above
+        #elements_labels_i = set above
+        # vertices = set above
+        K_i = len(vertices_i)
+        aux = elements_i[np.where(subdomainLabels_i == labels[-1])]
+        aux = np.unique(aux.reshape(3 * len(aux)))  # = indices of vertices which lie in child interaction domain
+        K_Omega_i = len(vertices_i) - len(aux)
+        nE_i = len(elements[elements_i]) # number of child elements
+        nE_Omega_i = len(np.where(elements_labels_i != labels[-1])[0])  # number of elements with label 1
+        nV_i = len(vertices_i)
+        nV_Omega_i = K_Omega_i  # since CG
+        dim = 2
+        is_DiscontinuosGalerkin = False
+        is_NeumannBoundary = False
+        # -----------------------------------------------------------------------------------------------------------
+
+        ##### SORT VERTICES and ADAPT ELEMENTS (so that vertices in child Omega_I are at the end)
+        # this is necessary, since former boundary points may become inner points for floating parts
+        # CONVENTION: largest label (if numbers) = interaction domain Omega_I
+        sort_indices = np.array(list(set(np.arange(len(vertices_i))).difference(set(aux))) + list(aux))
+        vertices_i = vertices_i[sort_indices]  # sort vertices from interaction domain to the end
+        sort_indices_inv = np.arange(len(sort_indices))[np.argsort(sort_indices)]  # that is the inverse function
+        def f(n):  # since ordering in vertices changed, we need to adapt <elements> and <lines> accordingly
+            return sort_indices_inv[n]
+        elements_i = f(elements_i)  # adapt elements
+        embedding_vertices_i = embedding_vertices_i[sort_indices]
+
+        # -------------------------------------------------------------------------------------------------------------------
+        submesh_k = [elements_i, vertices_i, elements_labels_i, subdomainLabels_i, embedding_vertices_i, embedding_elements_i, K_Omega_i]
+        submeshes_data += [submesh_k]
+
+    return submeshes_data
+#-----------------------------------------------------------------------------------------------------------------------
+
+
+### PLOT the meshes
+
+
+# mother mesh
+elements, vertices, lines, elementLabels, subdomainLabels, K_Omega = mesh_data(geofile, element_size, delta)
+PlotMesh(elements, vertices, subdomainLabels, title = "Mother Mesh")
+
+# plot vertices
+plt.plot(vertices[0:K_Omega, 0], vertices[0:K_Omega, 1], 'ro')
+plt.plot(vertices[K_Omega:, 0], vertices[K_Omega:, 1], 'bo')
+
+# test elements embedding
+# for i in range(len(elements)):
+#     bary_i = vertices[elements[i]].sum(axis=0) / 3.
+#     plt.annotate(str(i), (bary_i[0], bary_i[1]), size=10)
+
+# test vertices embedding
+# for i in range(len(vertices)):
+#     plt.annotate(str(i), (vertices[i,0], vertices[i,1]), size=10)
+
+
+
+
+# submeshes
+labels = list(np.unique(subdomainLabels))
+submeshes_data = submesh_data(elements, vertices, lines, elementLabels, subdomainLabels)
+for k in range(len(labels)-1):
+    submesh = submeshes_data[k]
+    elements_i = submesh[0]
+    vertices_i = submesh[1]
+    subdomainLabels_i = submesh[3]
+    embedding_vertices_i = submesh[4]
+    embedding_elements_i = submesh[5]
+    K_Omega_i = submesh[6]
+
+    PlotMesh(elements_i, vertices_i, subdomainLabels_i, title="Child Mesh"+str(labels[k]))
+
+    # plot vertices
+    plt.plot(vertices_i[0:K_Omega_i, 0], vertices_i[0:K_Omega_i, 1], 'ro')
+    # plt.plot(vertices_i[K_Omega_i:, 0], vertices_i[K_Omega_i:, 1], 'bo')
+
+    # test elements embedding
+    # for i in range(len(elements_i)):
+    #     bary_i = vertices_i[elements_i[i]].sum(axis=0) / 3.
+    #     plt.annotate(str(embedding_elements_i[i]), (bary_i[0], bary_i[1]), size = 10)
+
+    # test vertices embedding
+    # for i in range(len(vertices_i)):
+    #     plt.annotate(str(embedding_vertices_i[i]), (vertices_i[i,0], vertices_i[i,1]), size = 10)
+
+#-----------------------------------------------------------------------------------------------------------------------
+
+
+
+
+
+
+
+
+
+
+
+
+
+
Index: ../Rates2D/preparemesh_test.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\"\"\"\nCreated on Mon Feb 25 13:31:10 2019\n\n@author: vollmann\n\"\"\"\n\nimport sys\nimport matplotlib.pyplot as plt\nsys.path.append(\"/home/vollmann/Dropbox/JOB/PYTHON/BIB\")\nsys.path.append(\"/media/vollmann/1470789c-8ccb-4f32-9a95-12d258c8d70c/Dropbox/JOB/PYTHON/BIB\")\nimport warnings\nimport assemble\nimport conf, conf2\nimport nlocal\nwarnings.filterwarnings('ignore', 'The iteration is not making good progress')\nimport numpy as np\nimport examples.Rates2D.bib3 as bib\nfrom time import time\nfrom time import strftime\nimport scipy.sparse as sparse\nimport os\nimport MESH_nonreg\n\n\n\nos.system('mkdir ' + conf2.folder)\n\n\n# ------------------------------------------------------------------------------\nprint('\\nconf2.Norm  = ', conf2.Norm, '\\n\\n')\nass_time = []\nfor k in range(conf2.num_grids)[1:2]:\n\n\n    mesh1, mesh_data1 = MESH_nonreg.prepare_mesh_nonreg(conf2.H1[k], conf2.H2[k], conf.delta, conf2.transform_switch, conf2.transform)\n\n    for j in range(len(mesh1.verts)):\n        plt.plot(mesh1.verts[j][0], mesh1.verts[j][1], 'ro')\n        plt.annotate(str(j), ((mesh1.verts[j][0]), (mesh1.verts[j][1])) )\n\n    # proc_mesh_data = [triangles, omega, verts, [], boundary, nodes, [], diam, [], [], bary, boundary, [], [], [], len(verts), len(triangles), len(omega), len(nodes)]\n\n    nodes_inner = range(len(mesh1.nodes) - len(mesh1.boundary))\n    nodes_rest = range(len(nodes_inner), len(mesh1.verts))\n    def plot_tri(liste, closed, fill, color):\n        for i in liste:\n            plt.gca().add_patch(plt.Polygon(mesh1.verts[i], closed=closed, fill=fill, color=color, alpha=1))\n    # color = ['black', 'red']\n    # labels_domain = np.sort(np.unique(mesh.triangles[:, 0])).tolist()\n    # for label in labels_domain:\n    #     omega = mesh.triangles[np.where(mesh.triangles[:, 0] == label)[0]]\n    #     plot_tri(omega[:, 1:], closed=True, fill=False, color=color[label - 1])\n    # plt.plot(mesh1.verts[nodes_inner][:, 0], mesh1.verts[nodes_inner][:, 1], 'bo')\n    plt.plot(mesh1.verts[nodes_rest][:, 0], mesh1.verts[nodes_rest][:, 1], 'bo')\n    # plt.plot(mesh1.verts[mesh1.boundary][:, 0], mesh1.verts[mesh1.boundary][:, 1], 'go')\n    # plt.plot(mesh1.bary[:, 0], mesh1.bary[:, 1], 'rx')\n    # plt.axis('equal')\n    # plt.show()\n\n    nodes_inner = range(len(mesh1.nodes) - len(mesh1.boundary))\n\n\n    mesh2, mesh_data2 = MESH_nonreg.prepare_mesh_nonreg_depricated([conf2.H1[k], conf2.H2[k]], conf.delta, bib.norm_dict[conf2.Norm], conf2.num_cores, conf2.transform_switch, conf2.transform)\n\n    plt.figure(\"depricated\")\n    for j in range(len(mesh2.verts)):\n        plt.plot(mesh2.verts[j][0], mesh2.verts[j][1], 'ro')\n        plt.annotate(str(j), ((mesh2.verts[j][0]), (mesh2.verts[j][1])) )\n\n\n\n    nodes_inner = range(len(mesh2.nodes) - len(mesh2.boundary))\n    nodes_rest = range(len(nodes_inner), len(mesh2.verts))\n\n    def plot_tri(liste, closed, fill, color):\n        for i in liste:\n            plt.gca().add_patch(plt.Polygon(mesh2.verts[i], closed=closed, fill=fill, color=color, alpha=1))\n    color = ['black', 'red']\n    labels_domain = np.sort(np.unique(mesh2.triangles[:, 0])).tolist()\n    # for label in labels_domain:\n    #     omega = mesh2.triangles[np.where(mesh2.triangles[:, 0] == label)[0]]\n    #     plot_tri(omega[:, 1:], closed=True, fill=False, color=color[label - 1])\n    # plt.plot(mesh2.verts[nodes_inner][:, 0], mesh2.verts[nodes_inner][:, 1], 'rx')\n    # plt.plot(mesh2.verts[nodes_rest][:, 0], mesh2.verts[nodes_rest][:, 1], 'rx')\n    # plt.plot(mesh2.verts[mesh2.boundary][:, 0], mesh2.verts[mesh2.boundary][:, 1], 'yx')\n    # plt.plot(mesh2.bary[:, 0], mesh2.bary[:, 1], 'bx')\n    # plt.axis('equal')\n    plt.show()\n\n\n\n    # for i in range(len(mesh_data1)):\n    #     print(i, np.allclose(mesh_data2[i], mesh_data1[i] ))\n    #     print(i, mesh_data2[i].shape, mesh_data1[i].shape )\n\n    # print(mesh_data1[10])\n    # print(mesh_data2[10])
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- ../Rates2D/preparemesh_test.py	(revision b58f426ba4ba71178accbbade003703e84c118d6)
+++ ../Rates2D/preparemesh_test.py	(date 1595854194133)
@@ -9,15 +9,15 @@
 sys.path.append("/home/vollmann/Dropbox/JOB/PYTHON/BIB")
 sys.path.append("/media/vollmann/1470789c-8ccb-4f32-9a95-12d258c8d70c/Dropbox/JOB/PYTHON/BIB")
 import warnings
-import assemble
+# import assemble
 import conf, conf2
-import nlocal
+# import nlocal
 warnings.filterwarnings('ignore', 'The iteration is not making good progress')
 import numpy as np
-import examples.Rates2D.bib3 as bib
-from time import time
-from time import strftime
-import scipy.sparse as sparse
+import bib3 as bib
+# from time import time
+# from time import strftime
+# import scipy.sparse as sparse
 import os
 import MESH_nonreg
 
Index: mesh/target_shape.geo
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- mesh/target_shape.geo	(date 1569921424000)
+++ mesh/target_shape.geo	(date 1569921424000)
@@ -0,0 +1,80 @@
+delta = 0.1;
+lc = 1;
+lc_fine = lc/2;
+lc_point= lc/(15);
+
+Point(999) = {0.5, 0.5, 0.0, lc_point};
+
+
+//----------------------------------------
+// Omega
+Point(1) = {0, 0, 0, 1};
+Point(2) = {0, 1, 0, 1};
+Point(3) = {1, 1, 0, 1};
+Point(4) = {1, 0, 0, 1};
+
+// for circle
+Point(5) = {0.25, 0.5, 0, 1};
+Point(6) = {0.5, 0.5, 0, 1};
+
+// Omega_I
+Point(8) = {1.1, -0.1, -0, lc};
+Point(9) = {-0.1, -0.1, -0, lc};
+Point(10) = {1.1, 1.1, -0, lc};
+Point(11) = {-0.1, 1.1, -0, lc};
+
+Line(1) = {2, 1};
+Line(2) = {1, 4};
+Line(3) = {4, 3};
+Line(4) = {3, 2};
+
+Circle(5) = {5, 6, 5};
+
+Line(6) = {11, 9};
+Line(7) = {9, 8};
+Line(8) = {8, 10};
+Line(9) = {10, 11};
+
+Line Loop(15) = {6, 7, 8, 9, -4, -3, -2, -1};
+Plane Surface(15) = {15};
+
+Line Loop(17) = {1, 2, 3, 4, -5};
+Plane Surface(17) = {17};
+
+Line Loop(18) = {5};
+Plane Surface(18) = {18};
+
+Physical Line(9) = {1, 2, 3, 4};
+Physical Line(12) = {5};
+Physical Line(13) = {6, 7, 8, 9};
+
+Physical Surface(3) = {15};
+Physical Surface(2) = {17};
+Physical Surface(1) = {18};
+
+
+// For coarsening mesh around midpoint
+Point {999} In Surface {18};
+
+
+// INTERFACE
+Field[1] = Attractor;
+Field[1].EdgesList = {5};
+Field[1].NNodesByEdge = 5000;
+
+Field[2] = Threshold;
+Field[2].IField = 1;
+Field[2].LcMin = lc_fine;// element size inside DistMin
+Field[2].LcMax = lc;  // element size outside DistMax
+Field[2].DistMin = 0.08;
+Field[2].DistMax = 0.1;
+
+
+// Define minimum of threshold and function field
+Field[5] = Min;
+Field[5].FieldsList = {2};
+
+
+// Use the min as the background field
+Background Field = 5;
+
Index: ../Rates2D/test_gmsh.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import numpy as np\nimport os\nimport bib3 as bib\nimport conf2\nimport matplotlib.pyplot as plt\n\ngeofile = \"unit_square\"\n\nk = 1\n\n# ##### GMSH FILE adaption with correct interaction horizon for outer boundary\n# textfile = open('mesh/'+geofile, 'r')\n# data = textfile.readlines()\n#\n# tmpfile = open('mesh/test.txt', 'w+')\n# tmpfile.write('delta = ' + str(conf.delta) + ';\\n')\n#\n# for line in data[1:]:\n#     tmpfile.write(line)\n#\n# tmpfile.close()\n#\n# os.system('rm mesh/'+geofile+'.geo')\n# current_path = os.path.dirname(os.path.abspath(__file__))\n# os.system('mv '+current_path+'/mesh/test.txt ' + current_path +'/mesh/'+fil_init+'.geo')\n# ##### GMSH FILE adation END #####\n\n\nos.system('gmsh -v 0 mesh/'+geofile+'.geo -2 -clscale '+str(conf2.H1[k])+' -o mesh/'+geofile+'.msh' )\nverts, lines, triangles = bib.read_mesh('mesh/'+geofile+'.msh')\nverts = verts[:,0:2]\naux = np.linalg.norm(verts - np.ones(2) * 0.5, axis=1, ord=np.inf)\nsort_indices = np.argsort(aux)\nverts = verts[sort_indices]\nsort_indices_inv = np.arange(len(sort_indices))[np.argsort(sort_indices)]\ndef f(n):\n    return sort_indices_inv[n]\ntriangles[:,1:] = f(triangles[:,1:])\n\n### plot\n# for list in triangles[:, 1:]:\n#     plt.gca().add_patch(plt.Polygon(verts[list], closed=1, fill=0, alpha=1))\nboundary = np.where(np.linalg.norm(verts - np.ones(2) * 0.5, axis=1, ord=np.inf) == 0.5)\nnodes = np.where(np.linalg.norm(verts - np.ones(2) * 0.5, axis=1, ord=np.inf) <= 0.5)\nbary = (verts[triangles[:, 1]] + verts[triangles[:, 2]] + verts[triangles[:, 3]]) / 3.\nnew_omega = list(np.where(np.linalg.norm(bary - np.ones(1) * 0.5, axis=1, ord=np.inf) < 0.5)[0])\nnew_omega_i = list(set(range(len(triangles))) - set(new_omega))\ntriangles[new_omega, 0] = 1\ntriangles[new_omega_i, 0] = 2\nomega = triangles[new_omega]\ndef diam(T):\n    length_of_edges = np.array(\n        [np.linalg.norm(T[0] - T[1]), np.linalg.norm(T[0] - T[2]), np.linalg.norm(T[1] - T[2])])\n    return np.max(length_of_edges)\n\ndiameter = [diam(np.array([verts[triangles[i,][1]], verts[triangles[i,][2]], verts[triangles[i,][3]]])) for i in\n            range(len(triangles))]\ndiam = np.max(diameter)\n\nproc_mesh_data = [triangles, omega, verts, [], boundary, nodes, [], diam, [], [], bary,\n                  boundary, [], [], [], len(verts), len(triangles), len(omega), len(nodes)]\n# mesh = Mesh(proc_mesh_data)\n\n\n\n###\n# PLOT FOR TESTING\n###\n# def plot_tri(liste, closed, fill, color):\n#     for i in liste:\n#         plt.gca().add_patch(plt.Polygon(verts[i], closed=closed, fill = fill, color = color, alpha  = 1))\n# plt.figure()\n# color = ['black', 'red']\n# labels_domain = np.sort(np.unique(triangles[:, 0])).tolist()\n# for label in labels_domain:\n#     omega = triangles[np.where(triangles[:, 0] == label)[0]]\n#     plot_tri(omega[:, 1:], closed=True, fill=False, color=color[label - 1])\n#\n# nodes = np.where(np.linalg.norm(verts - np.ones(2) * 0.5, axis=1, ord=np.inf) < 0.5)\n# omega_i = np.where(np.linalg.norm(verts - np.ones(2) * 0.5, axis=1, ord=np.inf) > 0.5)\n# plt.plot(verts[nodes][:, 0], verts[nodes][:, 1], 'yo')\n# plt.plot(verts[boundary][:, 0], verts[boundary][:, 1], 'ro')\n# plt.plot(verts[omega_i][:, 0], verts[omega_i][:, 1], 'go')\n# plt.plot(bary[:, 0], bary[:, 1], 'bx')\n# plt.show()\n# plt.axis('equal')
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- ../Rates2D/test_gmsh.py	(revision b58f426ba4ba71178accbbade003703e84c118d6)
+++ ../Rates2D/test_gmsh.py	(date 1595855089345)
@@ -3,10 +3,11 @@
 import bib3 as bib
 import conf2
 import matplotlib.pyplot as plt
+import MESH_nonreg
 
-geofile = "unit_square"
+geofile = "DD_simple"
 
-k = 1
+k = 0
 
 # ##### GMSH FILE adaption with correct interaction horizon for outer boundary
 # textfile = open('mesh/'+geofile, 'r')
@@ -28,6 +29,7 @@
 
 os.system('gmsh -v 0 mesh/'+geofile+'.geo -2 -clscale '+str(conf2.H1[k])+' -o mesh/'+geofile+'.msh' )
 verts, lines, triangles = bib.read_mesh('mesh/'+geofile+'.msh')
+
 verts = verts[:,0:2]
 aux = np.linalg.norm(verts - np.ones(2) * 0.5, axis=1, ord=np.inf)
 sort_indices = np.argsort(aux)
@@ -59,7 +61,7 @@
 
 proc_mesh_data = [triangles, omega, verts, [], boundary, nodes, [], diam, [], [], bary,
                   boundary, [], [], [], len(verts), len(triangles), len(omega), len(nodes)]
-# mesh = Mesh(proc_mesh_data)
+mesh = MESH_nonreg.Mesh(proc_mesh_data)
 
 
 
@@ -78,9 +80,9 @@
 #
 # nodes = np.where(np.linalg.norm(verts - np.ones(2) * 0.5, axis=1, ord=np.inf) < 0.5)
 # omega_i = np.where(np.linalg.norm(verts - np.ones(2) * 0.5, axis=1, ord=np.inf) > 0.5)
-# plt.plot(verts[nodes][:, 0], verts[nodes][:, 1], 'yo')
-# plt.plot(verts[boundary][:, 0], verts[boundary][:, 1], 'ro')
-# plt.plot(verts[omega_i][:, 0], verts[omega_i][:, 1], 'go')
-# plt.plot(bary[:, 0], bary[:, 1], 'bx')
+# # plt.plot(verts[nodes][:, 0], verts[nodes][:, 1], 'yo')
+# # plt.plot(verts[boundary][:, 0], verts[boundary][:, 1], 'ro')
+# # plt.plot(verts[omega_i][:, 0], verts[omega_i][:, 1], 'go')
+# # plt.plot(bary[:, 0], bary[:, 1], 'bx')
 # plt.show()
 # plt.axis('equal')
\ No newline at end of file
Index: mesh/init_shape.geo
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- mesh/init_shape.geo	(date 1585214018120)
+++ mesh/init_shape.geo	(date 1585214018120)
@@ -0,0 +1,98 @@
+delta = 0.1;
+cl__1 = 1;
+lc = 1;
+lc2 = 1;
+lc3 = 1;
+lc_fine = lc/2;
+lc_point= lc/(15);
+
+
+// SHAPE
+Point(12) = {0.27, 0.5, 0, lc};
+Point(13) = {0.73, 0.5, 0, lc};
+Point(15) = {0.5, 0.27, 0, lc};
+Point(16) = {0.5, 0.73, 0, lc};
+
+// Point for coarsening (in the center of the shape)
+Point(999) = {0.5, 0.5, 0.0, lc_point};
+
+
+//------------------------------------------------------------------------------
+// OMEGA
+Point(1) = {0, 0, 0,  lc};
+Point(2) = {0, 1, 0,  lc};
+Point(3) = {1, 1, 0,  lc};
+Point(4) = {1, 0, 0,  lc};
+
+// Omega_I
+Point(8) = {1. + delta, -delta, -0, lc};
+Point(9) = {-delta, -delta, -0, lc};
+Point(10) = {1 + delta, 1 + delta, -0, lc};
+Point(11) = {-delta, 1 + delta, -0, lc};
+
+
+
+Line(1) = {2, 1};
+Line(2) = {1, 4};
+Line(3) = {4, 3};
+Line(4) = {3, 2};
+Line(6) = {11, 9};
+Line(7) = {9, 8};
+Line(8) = {8, 10};
+Line(9) = {10, 11};
+
+Spline(10) = {12, 15, 13, 16, 12};
+
+Line Loop(14) = {10};
+Plane Surface(15) = {14};
+Line Loop(16) = {4, 1, 2, 3};
+Plane Surface(17) = {14, 16};
+Line Loop(18) = {9, 6, 7, 8};
+Plane Surface(19) = {16, 18};
+
+//=============== LABELING ===============//
+// Interface
+Physical Line(12) = {10};
+Physical Line(9) = {1, 2, 3, 4};
+Physical Line(13) = {6, 7, 8, 9};
+
+// Omega_(...)
+Physical Surface(1) = {15};
+Physical Surface(2) = {17};
+Physical Surface(3) = {19};
+ 
+
+
+// SHAPE ATTRACTORS
+
+// For coarsening mesh around midpoint
+Point{999} In Surface {15};
+
+// INTERFACE
+Field[1] = Attractor;
+Field[1].EdgesList = {10};
+Field[1].NNodesByEdge = 5000;
+
+Field[2] = Threshold;
+Field[2].IField = 1;
+Field[2].LcMin = lc_fine;// element size inside DistMin
+Field[2].LcMax = lc;  // element size outside DistMax
+Field[2].DistMin = 0.08;
+Field[2].DistMax = 0.1;
+
+
+
+// Define minimum of threshold and function field
+Field[5] = Min;
+Field[5].FieldsList = {2};
+
+
+// Use the min as the background field
+Background Field = 5;
+
+
+
+
+
+
+
Index: mesh/circle_large.msh
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- mesh/circle_large.msh	(date 1569429977000)
+++ mesh/circle_large.msh	(date 1569429977000)
@@ -0,0 +1,8682 @@
+$MeshFormat
+2.2 0 8
+$EndMeshFormat
+$Nodes
+2849
+1 -0 1 0
+2 0 -1 0
+3 -1.3 0 0
+4 1.3 0 0
+5 -0.04906767432728368 0.998795456205179 0
+6 -0.09801714032929187 0.9951847266722234 0
+7 -0.146730474454942 0.9891765099648432 0
+8 -0.1950903220155665 0.9807852804033422 0
+9 -0.2429801799025819 0.9700312531947148 0
+10 -0.2902846772536745 0.9569403357324479 0
+11 -0.3368898533913186 0.9415440651833433 0
+12 -0.3826834323640899 0.923879532511701 0
+13 -0.4275550934291415 0.9039892931239828 0
+14 -0.4713967368247378 0.8819212643490284 0
+15 -0.5141027441918198 0.8577286100011123 0
+16 -0.5555702330180848 0.8314696123035592 0
+17 -0.5956993044908054 0.8032075314818523 0
+18 -0.6343932841619189 0.773010453364154 0
+19 -0.6715589548452278 0.740951125356582 0
+20 -0.7071067811846979 0.7071067811883971 0
+21 -0.7409511253531748 0.6715589548489871 0
+22 -0.7730104533610257 0.6343932841657306 0
+23 -0.8032075314789791 0.5956993044946794 0
+24 -0.8314696123009594 0.5555702330219757 0
+25 -0.8577286099987643 0.5141027441957372 0
+26 -0.8819212643469344 0.4713967368286555 0
+27 -0.9039892931221386 0.4275550934330408 0
+28 -0.9238795325100926 0.3826834323679729 0
+29 -0.9415440651819365 0.3368898533952505 0
+30 -0.9569403357312514 0.2902846772576188 0
+31 -0.970031253193722 0.2429801799065457 0
+32 -0.9807852804025565 0.1950903220195165 0
+33 -0.9891765099642517 0.1467304744589303 0
+34 -0.9951847266718324 0.098017140333261 0
+35 -0.9987954562049828 0.04906767433127661 0
+36 -1 3.95800631512864e-12 0
+37 -0.9987954562053548 -0.04906767432370368 0
+38 -0.9951847266725382 -0.09801714032609508 0
+39 -0.9891765099652572 -0.1467304744521513 0
+40 -0.9807852804038173 -0.1950903220131777 0
+41 -0.9700312531952241 -0.2429801799005487 0
+42 -0.9569403357329597 -0.2902846772519874 0
+43 -0.9415440651838173 -0.336889853389994 0
+44 -0.9238795325121094 -0.3826834323631037 0
+45 -0.9039892931243064 -0.4275550934284573 0
+46 -0.8819212643492466 -0.4713967368243296 0
+47 -0.8577286100011701 -0.5141027441917235 0
+48 -0.8314696123034407 -0.555570233018262 0
+49 -0.8032075314815263 -0.5956993044912449 0
+50 -0.7730104533636663 -0.6343932841625132 0
+51 -0.7409511253558675 -0.6715589548460161 0
+52 -0.7071067811874319 -0.7071067811856632 0
+53 -0.6715589548479064 -0.7409511253541543 0
+54 -0.6343932841646064 -0.7730104533619484 0
+55 -0.5956993044935072 -0.8032075314798486 0
+56 -0.5555702330207316 -0.8314696123017906 0
+57 -0.5141027441942669 -0.8577286099996456 0
+58 -0.4713967368270114 -0.8819212643478131 0
+59 -0.4275550934312692 -0.9039892931229765 0
+60 -0.3826834323660175 -0.9238795325109025 0
+61 -0.3368898533931247 -0.9415440651826971 0
+62 -0.2902846772552609 -0.9569403357319667 0
+63 -0.2429801799039852 -0.9700312531943633 0
+64 -0.1950903220167911 -0.9807852804030986 0
+65 -0.1467304744558165 -0.9891765099647135 0
+66 -0.09801714032988125 -0.9951847266721653 0
+67 -0.04906767432755946 -0.9987954562051654 0
+68 0.04906767432728368 -0.998795456205179 0
+69 0.09801714032929187 -0.9951847266722234 0
+70 0.146730474454942 -0.9891765099648432 0
+71 0.1950903220155665 -0.9807852804033422 0
+72 0.2429801799025819 -0.9700312531947148 0
+73 0.2902846772536745 -0.9569403357324479 0
+74 0.3368898533913186 -0.9415440651833433 0
+75 0.3826834323640899 -0.923879532511701 0
+76 0.4275550934291415 -0.9039892931239828 0
+77 0.4713967368247378 -0.8819212643490284 0
+78 0.5141027441918198 -0.8577286100011123 0
+79 0.5555702330180848 -0.8314696123035592 0
+80 0.5956993044908054 -0.8032075314818523 0
+81 0.6343932841619189 -0.773010453364154 0
+82 0.6715589548452278 -0.740951125356582 0
+83 0.7071067811846979 -0.7071067811883971 0
+84 0.7409511253531748 -0.6715589548489871 0
+85 0.7730104533610257 -0.6343932841657306 0
+86 0.8032075314789791 -0.5956993044946794 0
+87 0.8314696123009594 -0.5555702330219757 0
+88 0.8577286099987643 -0.5141027441957372 0
+89 0.8819212643469344 -0.4713967368286555 0
+90 0.9039892931221386 -0.4275550934330408 0
+91 0.9238795325100926 -0.3826834323679729 0
+92 0.9415440651819365 -0.3368898533952505 0
+93 0.9569403357312514 -0.2902846772576188 0
+94 0.970031253193722 -0.2429801799065457 0
+95 0.9807852804025565 -0.1950903220195165 0
+96 0.9891765099642517 -0.1467304744589303 0
+97 0.9951847266718324 -0.098017140333261 0
+98 0.9987954562049828 -0.04906767433127661 0
+99 1 -3.95800631512864e-12 0
+100 0.9987954562053548 0.04906767432370368 0
+101 0.9951847266725382 0.09801714032609508 0
+102 0.9891765099652572 0.1467304744521513 0
+103 0.9807852804038173 0.1950903220131777 0
+104 0.9700312531952241 0.2429801799005487 0
+105 0.9569403357329597 0.2902846772519874 0
+106 0.9415440651838173 0.336889853389994 0
+107 0.9238795325121094 0.3826834323631037 0
+108 0.9039892931243064 0.4275550934284573 0
+109 0.8819212643492466 0.4713967368243296 0
+110 0.8577286100011701 0.5141027441917235 0
+111 0.8314696123034407 0.555570233018262 0
+112 0.8032075314815263 0.5956993044912449 0
+113 0.7730104533636663 0.6343932841625132 0
+114 0.7409511253558675 0.6715589548460161 0
+115 0.7071067811874319 0.7071067811856632 0
+116 0.6715589548479064 0.7409511253541543 0
+117 0.6343932841646064 0.7730104533619484 0
+118 0.5956993044935072 0.8032075314798486 0
+119 0.5555702330207316 0.8314696123017906 0
+120 0.5141027441942669 0.8577286099996456 0
+121 0.4713967368270114 0.8819212643478131 0
+122 0.4275550934312692 0.9039892931229765 0
+123 0.3826834323660175 0.9238795325109025 0
+124 0.3368898533931247 0.9415440651826971 0
+125 0.2902846772552609 0.9569403357319667 0
+126 0.2429801799039852 0.9700312531943633 0
+127 0.1950903220167911 0.9807852804030986 0
+128 0.1467304744558165 0.9891765099647135 0
+129 0.09801714032988125 0.9951847266721653 0
+130 0.04906767432755946 0.9987954562051654 0
+131 -1.298997747112947 -0.05103776048660255 0
+132 -1.295992533853095 -0.1019968244458301 0
+133 -1.29098899404147 -0.1527986166946286 0
+134 -1.283994842773798 -0.2033648045515467 0
+135 -1.275020864524388 -0.2536174186200197 0
+136 -1.264080896517247 -0.3034789730115638 0
+137 -1.251191807390103 -0.3528725848233145 0
+138 -1.23637347118417 -0.4017220926859851 0
+139 -1.219648736699806 -0.449952174199178 0
+140 -1.201043392265359 -0.4974884620729591 0
+141 -1.180586125973448 -0.5442576587968284 0
+142 -1.158308481445885 -0.590187649659435 0
+143 -1.134244809195832 -0.6352076139439062 0
+144 -1.108432213661711 -0.6792481341284642 0
+145 -1.080910495994927 -0.7222413029230605 0
+146 -1.0517220926893 -0.7641208279776437 0
+147 -1.02091201014698 -0.8048221341002323 0
+148 -0.9885277552821808 -0.8442824628267325 0
+149 -0.9546192622686727 -0.8824409691903563 0
+150 -0.9192388155449513 -0.9192388155400723 0
+151 -0.8824409691954131 -0.9546192622639982 0
+152 -0.8442824628320109 -0.9885277552776727 0
+153 -0.8048221341057096 -1.020912010142662 0
+154 -0.7641208279832837 -1.051722092685202 0
+155 -0.7222413029287508 -1.080910495991125 0
+156 -0.6792481341342129 -1.108432213658188 0
+157 -0.6352076139496596 -1.13424480919261 0
+158 -0.5901876496651958 -1.15830848144295 0
+159 -0.544257658802585 -1.180586125970795 0
+160 -0.497488462078699 -1.201043392262982 0
+161 -0.4499521742050001 -1.219648736697658 0
+162 -0.4017220926918621 -1.23637347118226 0
+163 -0.352872584829122 -1.251191807388465 0
+164 -0.3034789730173434 -1.264080896515859 0
+165 -0.2536174186257163 -1.275020864523255 0
+166 -0.2033648045571883 -1.283994842772905 0
+167 -0.1527986167002044 -1.290988994040811 0
+168 -0.1019968244513211 -1.295992533852663 0
+169 -0.05103776049202149 -1.298997747112734 0
+170 -5.336499796665714e-12 -1.3 0
+171 0.05103776048163391 -1.298997747113142 0
+172 0.1019968244412145 -1.295992533853459 0
+173 0.1527986166904172 -1.290988994041969 0
+174 0.203364804547774 -1.283994842774396 0
+175 0.2536174186166642 -1.275020864525055 0
+176 0.3034789730085882 -1.264080896517961 0
+177 0.3528725848206628 -1.251191807390851 0
+178 0.4017220926836768 -1.23637347118492 0
+179 0.4499521741971809 -1.219648736700543 0
+180 0.4974884620712729 -1.201043392266058 0
+181 0.5442576587955624 -1.180586125974032 0
+182 0.5901876496585204 -1.158308481446351 0
+183 0.635207613943374 -1.13424480919613 0
+184 0.6792481341282683 -1.108432213661831 0
+185 0.7222413029231789 -1.080910495994848 0
+186 0.764120827978103 -1.051722092688966 0
+187 0.8048221341008924 -1.02091201014646 0
+188 0.8442824628275232 -0.9885277552815056 0
+189 0.8824409691913618 -0.9546192622677431 0
+190 0.9192388155412923 -0.9192388155437313 0
+191 0.9546192622653215 -0.8824409691939816 0
+192 0.988527755279156 -0.8442824628302741 0
+193 1.020912010144209 -0.804822134103748 0
+194 1.051722092686789 -0.7641208279810998 0
+195 1.080910495992752 -0.7222413029263156 0
+196 1.108432213659876 -0.6792481341314577 0
+197 1.134244809194267 -0.6352076139467007 0
+198 1.158308481444578 -0.5901876496619994 0
+199 1.180586125972368 -0.5442576587991723 0
+200 1.201043392264452 -0.4974884620751502 0
+201 1.219648736699041 -0.449952174201251 0
+202 1.236373471183532 -0.4017220926879485 0
+203 1.251191807389617 -0.3528725848250387 0
+204 1.264080896516889 -0.3034789730130539 0
+205 1.275020864524131 -0.253617418621312 0
+206 1.283994842773638 -0.2033648045525598 0
+207 1.290988994041387 -0.1527986166953327 0
+208 1.29599253385306 -0.1019968244462815 0
+209 1.298997747112938 -0.05103776048684674 0
+210 1.298997747112947 0.05103776048660255 0
+211 1.295992533853095 0.1019968244458301 0
+212 1.29098899404147 0.1527986166946286 0
+213 1.283994842773798 0.2033648045515467 0
+214 1.275020864524388 0.2536174186200197 0
+215 1.264080896517247 0.3034789730115638 0
+216 1.251191807390103 0.3528725848233145 0
+217 1.23637347118417 0.4017220926859851 0
+218 1.219648736699806 0.449952174199178 0
+219 1.201043392265359 0.4974884620729591 0
+220 1.180586125973448 0.5442576587968284 0
+221 1.158308481445885 0.590187649659435 0
+222 1.134244809195832 0.6352076139439062 0
+223 1.108432213661711 0.6792481341284642 0
+224 1.080910495994927 0.7222413029230605 0
+225 1.0517220926893 0.7641208279776437 0
+226 1.02091201014698 0.8048221341002323 0
+227 0.9885277552821808 0.8442824628267325 0
+228 0.9546192622686727 0.8824409691903563 0
+229 0.9192388155449513 0.9192388155400723 0
+230 0.8824409691954131 0.9546192622639982 0
+231 0.8442824628320109 0.9885277552776727 0
+232 0.8048221341057096 1.020912010142662 0
+233 0.7641208279832837 1.051722092685202 0
+234 0.7222413029287508 1.080910495991125 0
+235 0.6792481341342129 1.108432213658188 0
+236 0.6352076139496596 1.13424480919261 0
+237 0.5901876496651958 1.15830848144295 0
+238 0.544257658802585 1.180586125970795 0
+239 0.497488462078699 1.201043392262982 0
+240 0.4499521742050001 1.219648736697658 0
+241 0.4017220926918621 1.23637347118226 0
+242 0.352872584829122 1.251191807388465 0
+243 0.3034789730173434 1.264080896515859 0
+244 0.2536174186257163 1.275020864523255 0
+245 0.2033648045571883 1.283994842772905 0
+246 0.1527986167002044 1.290988994040811 0
+247 0.1019968244513211 1.295992533852663 0
+248 0.05103776049202149 1.298997747112734 0
+249 5.336499796665714e-12 1.3 0
+250 -0.05103776048163391 1.298997747113142 0
+251 -0.1019968244412145 1.295992533853459 0
+252 -0.1527986166904172 1.290988994041969 0
+253 -0.203364804547774 1.283994842774396 0
+254 -0.2536174186166642 1.275020864525055 0
+255 -0.3034789730085882 1.264080896517961 0
+256 -0.3528725848206628 1.251191807390851 0
+257 -0.4017220926836768 1.23637347118492 0
+258 -0.4499521741971809 1.219648736700543 0
+259 -0.4974884620712729 1.201043392266058 0
+260 -0.5442576587955624 1.180586125974032 0
+261 -0.5901876496585204 1.158308481446351 0
+262 -0.635207613943374 1.13424480919613 0
+263 -0.6792481341282683 1.108432213661831 0
+264 -0.7222413029231789 1.080910495994848 0
+265 -0.764120827978103 1.051722092688966 0
+266 -0.8048221341008924 1.02091201014646 0
+267 -0.8442824628275232 0.9885277552815056 0
+268 -0.8824409691913618 0.9546192622677431 0
+269 -0.9192388155412923 0.9192388155437313 0
+270 -0.9546192622653215 0.8824409691939816 0
+271 -0.988527755279156 0.8442824628302741 0
+272 -1.020912010144209 0.804822134103748 0
+273 -1.051722092686789 0.7641208279810998 0
+274 -1.080910495992752 0.7222413029263156 0
+275 -1.108432213659876 0.6792481341314577 0
+276 -1.134244809194267 0.6352076139467007 0
+277 -1.158308481444578 0.5901876496619994 0
+278 -1.180586125972368 0.5442576587991723 0
+279 -1.201043392264452 0.4974884620751502 0
+280 -1.219648736699041 0.449952174201251 0
+281 -1.236373471183532 0.4017220926879485 0
+282 -1.251191807389617 0.3528725848250387 0
+283 -1.264080896516889 0.3034789730130539 0
+284 -1.275020864524131 0.253617418621312 0
+285 -1.283994842773638 0.2033648045525598 0
+286 -1.290988994041387 0.1527986166953327 0
+287 -1.29599253385306 0.1019968244462815 0
+288 -1.298997747112938 0.05103776048684674 0
+289 1.752636389795595e-14 -2.406646838051056e-14 0
+290 -0.2988312550889128 0.3986047976440821 0
+291 0.2988312550889324 -0.3986047976441131 0
+292 0.3057970456660479 0.3952345071811607 0
+293 -0.3057970456660553 -0.3952345071811632 0
+294 0.5349351489336771 -0.002191873490437795 0
+295 -0.534935148933682 0.002191873490429729 0
+296 -1.05888206708304e-12 -0.618985798982855 0
+297 1.059403280392215e-12 0.6189857989828554 0
+298 -0.6219434266429427 0.3099829824486448 0
+299 0.6219434266429483 -0.3099829824486455 0
+300 0.6131712373037702 0.3042161494454627 0
+301 -0.6131712373037688 -0.3042161494454662 0
+302 -0.01381235221950852 0.3112482826784816 0
+303 0.0138123522195491 -0.311248282678509 0
+304 -0.2699413752178327 0.1158918747331071 0
+305 0.2699413752178533 -0.1158918747331399 0
+306 -0.2713901418686661 0.6737584238871082 0
+307 0.2713901418686538 -0.6737584238871197 0
+308 0.2726709883582072 0.6693532800297461 0
+309 -0.272670988358204 -0.6693532800297496 0
+310 0.2081362899143987 0.1542940861739279 0
+311 -0.2081362899143684 -0.1542940861739522 0
+312 -0.519993906447524 0.5415900924728292 0
+313 0.5199939064475436 -0.5415900924728255 0
+314 0.5133947671458948 0.5404016689298579 0
+315 -0.5133947671458985 -0.5404016689298595 0
+316 -0.7498905364265673 0.1130617342502907 0
+317 0.7498905364265688 -0.1130617342502888 0
+318 -0.7517492759465849 -0.1283803544475234 0
+319 0.7517492759465847 0.1283803544475206 0
+320 -0.4280068996600356 -0.1901848896652776 0
+321 0.4280068996600488 0.1901848896652671 0
+322 -0.1103187549833091 0.8030543897391057 0
+323 0.1103187549832989 -0.803054389739112 0
+324 0.1093310173296403 0.7940860003488008 0
+325 -0.1093310173296354 -0.7940860003488009 0
+326 -0.4267146695953499 0.2252960663813077 0
+327 0.4267146695953572 -0.2252960663813424 0
+328 -0.1158998382945913 -0.4577187619185624 0
+329 0.1158998382945947 0.4577187619185623 0
+330 -0.1250086389883744 0.4698697260200279 0
+331 0.125008638988395 -0.4698697260200537 0
+332 -0.1840717489146268 0.2645896929935293 0
+333 0.1840717489146565 -0.2645896929935571 0
+334 -0.6693939811023052 0.4612514467347539 0
+335 0.6693939811023161 -0.4612514467347448 0
+336 0.6708262186017943 0.4891769963198211 0
+337 -0.6708262186017955 -0.4891769963198231 0
+338 0.4389527171717992 -0.7038900762297956 0
+339 -0.4389527171718006 0.7038900762298076 0
+340 -0.4429604814698641 -0.7000047857880527 0
+341 0.4429604814698658 0.7000047857880527 0
+342 -0.7800758959418332 0.2822687475769619 0
+343 0.7800758959418365 -0.2822687475769578 0
+344 0.3829320937303247 0.02811449391141195 0
+345 -0.382932093730326 -0.02811449391141964 0
+346 0.7796128313572426 0.2880259112829024 0
+347 -0.7796128313572427 -0.2880259112829021 0
+348 -0.05692598240527686 0.1473615150910388 0
+349 0.05692598240531525 -0.14736151509107 0
+350 0.1452685989622083 0.2865941005928982 0
+351 -0.1452685989621472 -0.2865941005928994 0
+352 0.4661324064150958 0.395610336528196 0
+353 -0.4661324064150979 -0.3956103365281999 0
+354 -0.4612399956102043 0.3805608072413166 0
+355 0.4612399956102096 -0.3805608072413358 0
+356 0.6028006412033033 0.1481924455792994 0
+357 -0.6028006412033 -0.1481924455793039 0
+358 -0.5933975433516263 0.152372342073099 0
+359 0.5933975433516294 -0.1523723420730995 0
+360 -0.155537942517871 -0.002229560122089993 0
+361 0.1555379425179042 0.00222956012206517 0
+362 0.3549797378698002 -0.5395647835584186 0
+363 -0.3564002124735422 0.5406986107175971 0
+364 -0.3562234840164235 -0.5419122313645895 0
+365 0.3562234840164222 0.5419122313645828 0
+366 -0.8486553047564428 -0.002350945881299735 0
+367 0.8486553047564436 0.002350945881300484 0
+368 -0.2539603584211166 0.8148321557560148 0
+369 0.2539603584211004 -0.8148321557560224 0
+370 0.2539603584239327 0.814832155755182 0
+371 -0.2539603584239272 -0.8148321557551843 0
+372 -0.1392940796007271 -0.6149567255917725 0
+373 0.1392940796007245 0.6149567255917758 0
+374 -0.1409248745295191 0.6210206074234119 0
+375 0.1409248745295165 -0.6210206074234164 0
+376 -0.07645569746758851 -0.1218152070989683 0
+377 0.07645569746761752 0.1218152070989229 0
+378 0.3044447527412824 0.2548597217695565 0
+379 -0.3044447527412707 -0.2548597217695649 0
+380 0.6820114077262993 -0.006765310189052807 0
+381 -0.6820114077263011 0.006765310189053199 0
+382 0.4320927541445434 -0.094435136843613 0
+383 -0.4320927541445418 0.09443513684359334 0
+384 -0.0002081268168094142 0.871644373685828 0
+385 0.0002081268168016621 -0.8716443736858284 0
+386 -0.6370696629436134 0.5857439174343828 0
+387 0.6370696629436321 -0.5857439174343703 0
+388 0.6358412688842696 0.5892502987698366 0
+389 -0.6358412688842715 -0.5892502987698371 0
+390 -0.2372324881026135 -0.5184517052983404 0
+391 0.2372324881026122 0.5184517052983475 0
+392 -0.008286931313123139 -0.4329982241729042 0
+393 0.008286931313142631 0.4329982241728716 0
+394 -0.8563046818754144 0.183134877144459 0
+395 0.856304681875416 -0.1831348771444548 0
+396 0.2317560419730847 -0.5291604732202299 0
+397 -0.2317560419730733 0.5291604732201891 0
+398 -0.3058871794376702 0.2698357954943963 0
+399 0.3058871794376896 -0.2698357954944303 0
+400 -0.856928515769399 -0.191863511640449 0
+401 0.8569285157693994 0.19186351164045 0
+402 -0.7756143429198377 0.4039192271544186 0
+403 0.7756143429198474 -0.4039192271544114 0
+404 -0.7726006736468871 -0.4050986308892572 0
+405 0.7726006736468869 0.4050986308892576 0
+406 1.255865629001375e-12 0.7394455016889312 0
+407 -1.258928263183902e-12 -0.7394455016889266 0
+408 0.3683918913918794 -0.7975012643762649 0
+409 -0.3683918913918879 0.7975012643762693 0
+410 -0.3675711956828741 -0.797622674052287 0
+411 0.3675711956828792 0.7976226740522864 0
+412 0.5597029157425482 -0.68422687797145 0
+413 -0.5597029157425402 0.6842268779714652 0
+414 -0.559704440988638 -0.6842339020238779 0
+415 0.5597044409886386 0.6842339020238785 0
+416 -0.3284167454971492 -0.1327737726786965 0
+417 0.3284167454971731 0.1327737726786926 0
+418 0.6850733238474508 0.2253870547325782 0
+419 -0.6850733238474478 -0.2253870547325821 0
+420 -0.4948223914476369 -0.2882211390502302 0
+421 0.4948223914476395 0.2882211390502273 0
+422 -0.1828242450746 0.3856064777603981 0
+423 0.1828242450746171 -0.3856064777604364 0
+424 -0.6943035875658818 0.2086424802027576 0
+425 0.6943035875658863 -0.2086424802027546 0
+426 0.5793741886712931 -0.4185324283621949 0
+427 -0.5793741886712868 0.4185324283621931 0
+428 0.5677305128115897 0.4460879459912317 0
+429 -0.5677305128115925 -0.4460879459912345 0
+430 -0.2631292023235096 -0.04122788458021597 0
+431 0.2631292023235154 0.04122788458023659 0
+432 0.06738897563178627 0.2300715420492337 0
+433 -0.0673889756317238 -0.2300715420492629 0
+434 -0.4686237185895942 -0.08301277801568359 0
+435 0.4686237185895915 0.08301277801566741 0
+436 -0.1717896904466634 0.1541256439822175 0
+437 0.1717896904466951 -0.1541256439822527 0
+438 -0.5356757763280676 0.2351156136558533 0
+439 0.535675776328073 -0.2351156136558589 0
+440 -0.1655844020026582 0.8831259286373238 0
+441 0.1655844020026435 -0.8831259286373311 0
+442 0.1629350009316819 0.8844376178692404 0
+443 -0.1629350009316778 -0.884437617869241 0
+444 -0.4003423704383118 -0.3112788274627835 0
+445 0.4003423704383162 0.3112788274627788 0
+446 -0.1609816383185229 -0.698077017740122 0
+447 0.1609816383185237 0.6980770177401227 0
+448 -0.2042879676249977 -0.3915721975918329 0
+449 0.2042879676249963 0.3915721975918457 0
+450 -0.1731794679262454 0.7045471190163185 0
+451 0.1731794679262381 -0.7045471190163343 0
+452 0.07492787240929737 0.3677367163757263 0
+453 -0.07492787240925677 -0.3677367163757424 0
+454 -0.8924140819158903 -0.09537751450386212 0
+455 0.8924140819158902 0.09537751450386299 0
+456 -0.1019986382772865 0.3832002431491533 0
+457 0.1019986382773114 -0.3832002431491835 0
+458 0.03452872972550208 0.5215154524147324 0
+459 -0.03452872972550885 -0.5215154524147494 0
+460 -0.893939666224142 0.0886821817347259 0
+461 0.8939396662241432 -0.0886821817347231 0
+462 -0.354369412780337 0.1501181788824333 0
+463 0.3543694127803474 -0.1501181788824612 0
+464 -0.3782182239176311 0.339520217465505 0
+465 0.3782182239176421 -0.3395202174655329 0
+466 0.6867985983715627 0.3775796469023993 0
+467 -0.6867985983715633 -0.377579646902402 0
+468 -0.3904352471102062 -0.4480839735736247 0
+469 0.3904352471102017 0.4480839735736176 0
+470 -0.6845105852078863 0.370762163555811 0
+471 0.6845105852078966 -0.3707621635558033 0
+472 0.06300160449081785 -0.5368182283623073 0
+473 -0.06300160449083049 0.5368182283623109 0
+474 0.07128570715875319 0.6824918611493372 0
+475 -0.07128570715875247 -0.6824918611493377 0
+476 -0.09792100989621594 0.2424852169781271 0
+477 0.09792100989625095 -0.2424852169781572 0
+478 -0.4383516560970951 0.6013892271807992 0
+479 0.4379202680371902 -0.6010448919162188 0
+480 0.4306034641869991 0.6014095936125963 0
+481 -0.4306034641870023 -0.6014095936126003 0
+482 -0.3913556956288965 0.4564928391130966 0
+483 0.3913556956289092 -0.4564928391131213 0
+484 -0.07695907497437016 0.06069580649107362 0
+485 0.07695907497441049 -0.06069580649111083 0
+486 -0.06807682700875806 0.6844572675086827 0
+487 0.06807682700876552 -0.6844572675086837 0
+488 -0.7106170641916274 0.5500896082571965 0
+489 0.7106170641916426 -0.5500896082571824 0
+490 0.7253963081124595 0.5568426367095902 0
+491 -0.7253963081124605 -0.556842636709591 0
+492 -0.3499250664125369 0.06895823585802299 0
+493 0.3499250664125407 -0.06895823585803769 0
+494 -0.6169601400240783 0.06790765983709228 0
+495 0.6169601400240787 -0.06790765983709346 0
+496 -0.2436979166749595 0.1956460448665002 0
+497 0.2436979166749859 -0.1956460448665344 0
+498 0.3638227777090368 -0.6575661704057463 0
+499 -0.3638227777090373 0.6575661704057729 0
+500 -0.3628736024635992 -0.6565792159526643 0
+501 0.3628736024636011 0.6565792159526694 0
+502 -0.08425444285174354 0.9025460014645877 0
+503 0.0842544428517344 -0.9025460014645921 0
+504 0.08362001779072643 0.9062576947670785 0
+505 -0.08362001779072685 -0.9062576947670824 0
+506 -0.6112176331399117 -0.05585646330467021 0
+507 0.6112176331399077 0.05585646330466722 0
+508 -0.219573588634889 -0.2378988346873695 0
+509 0.219573588634922 0.237898834687368 0
+510 -0.8660515933459939 0.2746388167962303 0
+511 0.8660515933459964 -0.2746388167962245 0
+512 0.5275922925957536 -0.09262647867924335 0
+513 -0.5275922925957541 0.0926264786792365 0
+514 -0.8658416233793798 -0.2818267122750863 0
+515 0.8658416233793798 0.2818267122750871 0
+516 0.7614831511198363 -0.03060643683103469 0
+517 -0.7614831511198361 0.03060643683103553 0
+518 -0.5154204190968801 -0.1930836378756978 0
+519 0.5154204190968911 0.1930836378756998 0
+520 0.4628070933823222 -0.7845647315109978 0
+521 -0.4628070933823261 0.7845647315110015 0
+522 -0.4628070933849773 -0.7845647315094765 0
+523 0.4628070933849802 0.7845647315094758 0
+524 -0.59903592351563 0.5147946700158882 0
+525 0.5990359235156471 -0.514794670015879 0
+526 0.4501191093145965 -0.01194243184867345 0
+527 -0.450119109314601 0.01194243184865939 0
+528 0.2446086680493554 0.3259853101013132 0
+529 -0.24460866804934 -0.3259853101013044 0
+530 0.5326180656964923 -0.3218672688572249 0
+531 -0.5326180656964837 0.3218672688572148 0
+532 -0.768697863456566 0.4899353222863428 0
+533 0.768697863456578 -0.4899353222863345 0
+534 -0.2877375250526937 -0.5855877346857313 0
+535 0.2877375250526961 0.5855877346857313 0
+536 -0.08024256802448476 -0.03810311963198949 0
+537 0.08024256802451531 0.03810311963194789 0
+538 -0.1597139674465285 -0.08278824400972552 0
+539 0.1597139674465634 0.08278824400970212 0
+540 0.7730849676857219 0.2041164311819066 0
+541 -0.7730849676857218 -0.2041164311819066 0
+542 -0.1288030088950114 -0.1791852784776143 0
+543 0.1288030088950454 0.1791852784775632 0
+544 -0.4767892846974701 0.1663396754085937 0
+545 0.476789284697465 -0.1663396754086168 0
+546 -0.8514386310485046 0.3527211803806683 0
+547 0.8514386310485083 -0.3527211803806638 0
+548 -0.309424879793714 0.7457378230062407 0
+549 0.3094248797937046 -0.7457378230062476 0
+550 0.3075574272153209 0.745993799813189 0
+551 -0.3075574272153163 -0.7459937998131912 0
+552 -0.7677118245114081 -0.4912474926492762 0
+553 0.7677118245114068 0.491247492649276 0
+554 0.002264048344059207 -0.08176596651813195 0
+555 -0.002264048344024222 0.0817659665180908 0
+556 0.1928732289650004 -0.07549265695606915 0
+557 -0.1928732289649737 0.07549265695603463 0
+558 0.5951955151834296 0.5218032526132881 0
+559 -0.5951955151834316 -0.5218032526132899 0
+560 0.3032112284436219 -0.4779649226431782 0
+561 -0.3032112284436128 0.4779649226431492 0
+562 0.4688283144197579 0.4692883372601445 0
+563 -0.468828314419762 -0.4692883372601478 0
+564 -0.4719137610177899 0.4695317086690009 0
+565 0.4719137610177996 -0.4695317086690121 0
+566 -0.7738708739203199 0.1944174213590759 0
+567 0.7738708739203231 -0.1944174213590722 0
+568 -0.2886607361856134 0.5812167511619125 0
+569 0.2886607361856248 -0.5812167511619503 0
+570 0.6690095808544143 0.1058716692015414 0
+571 -0.6690095808544125 -0.1058716692015457 0
+572 0.5482431090191308 0.3533104057441344 0
+573 -0.5482431090191316 -0.3533104057441377 0
+574 -0.842373295327608 -0.356626318933039 0
+575 0.8423732953276084 0.3566263189330398 0
+576 -0.6983187170323548 0.292722925442881 0
+577 0.6983187170323613 -0.2927229254428746 0
+578 0.308785811791647 0.477505383277354 0
+579 -0.3087858117916543 -0.4775053832773584 0
+580 0.3227646907438995 -0.8611829735924474 0
+581 -0.3227646907439076 0.8611829735924476 0
+582 -0.3214666930093139 -0.8611446006976657 0
+583 0.321466693009318 0.8611446006976651 0
+584 -0.5912085817471753 -0.2282842290138426 0
+585 0.591208581747189 0.228284229013839 0
+586 -0.6697172179497 0.1240613295903451 0
+587 0.6697172179497026 -0.124061329590344 0
+588 -0.01362552401413922 0.2193716169957996 0
+589 0.01362552401418627 -0.2193716169958292 0
+590 -0.6130436411129668 0.2295907218754802 0
+591 0.6130436411129723 -0.2295907218754806 0
+592 0.2275706747985662 -0.4474346380708753 0
+593 -0.2275706747985583 0.4474346380708332 0
+594 -0.504610473030761 0.621373823353171 0
+595 0.5046104730307857 -0.6213738233531625 0
+596 0.5046174986260464 0.6213737640806862 0
+597 -0.5046174986260498 -0.6213737640806868 0
+598 -0.9270144870646355 -0.02153494399205181 0
+599 0.9270144870646361 0.02153494399205222 0
+600 -0.2593574639279443 0.3322375920509198 0
+601 0.2593574639279617 -0.3322375920509482 0
+602 -0.7906707344446329 -0.05183623483272226 0
+603 0.7906707344446346 0.05183623483272261 0
+604 -0.2456129053946917 0.8908585609486269 0
+605 0.2456129053946791 -0.8908585609486325 0
+606 0.2455509750331481 0.890736825053969 0
+607 -0.2455509750331434 -0.8907368250539697 0
+608 0.702373194452026 0.2976863102595761 0
+609 -0.7023731944520274 -0.2976863102595804 0
+610 -0.160589420174627 -0.5255475112530327 0
+611 0.1605894201746262 0.5255475112530388 0
+612 0.5319464361208588 -0.7546512538200157 0
+613 -0.5319464361208565 0.7546512538200247 0
+614 -0.531946436123433 -0.7546512538182729 0
+615 0.5319464361234343 0.7546512538182731 0
+616 0.6365438279489671 -0.6754171109276532 0
+617 -0.6365438279489556 0.6754171109276649 0
+618 -0.6365480126229952 -0.6754443405929657 0
+619 0.6365480126229955 0.6754443405929652 0
+620 -0.1824999667426084 -0.7822731839577776 0
+621 0.1824999667426129 0.7822731839577798 0
+622 0.2160017511601922 -0.6133256475943646 0
+623 -0.2160017511601942 0.6133256475943568 0
+624 -0.156205575416826 0.5369586440382316 0
+625 0.1562055754168356 -0.5369586440382565 0
+626 0.8186816352146079 -0.07300548226508552 0
+627 -0.8186816352146069 0.07300548226508828 0
+628 0.2907506392166374 -0.03074150467150324 0
+629 -0.2907506392166311 0.03074150467149351 0
+630 -0.1826386411686051 0.785548028047522 0
+631 0.182638641168592 -0.7855480280475361 0
+632 -0.3960625562486422 -0.09969427376719073 0
+633 0.396062556248646 0.09969427376716974 0
+634 0.2151856246598725 0.6160653577582281 0
+635 -0.215185624659872 -0.6160653577582279 0
+636 0.5410485234465789 0.09446540704348735 0
+637 -0.5410485234465811 -0.09446540704349894 0
+638 -0.4526278160838345 0.3013803136616039 0
+639 0.4526278160838412 -0.3013803136616303 0
+640 0.0717929664271385 0.5941338382813586 0
+641 -0.07179296642714011 -0.5941338382813697 0
+642 -0.2786991819957676 -0.1853112369742459 0
+643 0.2786991819957858 0.1853112369742349 0
+644 -0.3547978190154073 -0.2061128229478118 0
+645 0.3547978190154222 0.2061128229478051 0
+646 -0.03946179963521686 0.8040171104441911 0
+647 0.03946179963520775 -0.8040171104441888 0
+648 0.03917144704654005 0.8045770889560967 0
+649 -0.03917144704654409 -0.8045770889560931 0
+650 0.3305494572163742 0.3226765226835258 0
+651 -0.3305494572163706 -0.3226765226835306 0
+652 -0.4293683766178724 -0.5300075535176222 0
+653 0.4293683766178698 0.5300075535176194 0
+654 -0.3796845389699559 -0.3757539559549606 0
+655 0.3796845389699582 0.3757539559549538 0
+656 -0.8285267364731883 -0.1294772761869021 0
+657 0.8285267364731885 0.1294772761869029 0
+658 0.6156498652679614 0.3912165690442951 0
+659 -0.6156498652679627 -0.391216569044298 0
+660 0.1270698147792411 -0.3078347989386475 0
+661 -0.1270698147792081 0.3078347989386116 0
+662 -0.07088960839550092 0.6076262907804348 0
+663 0.07088960839549792 -0.6076262907804212 0
+664 -0.4290690461856029 0.5294855217717795 0
+665 0.4276485715818532 -0.5283516946125887 0
+666 0.3770553380434642 -0.7280380020593044 0
+667 -0.3770553380434759 0.7280380020593191 0
+668 -0.3769037251535085 -0.7281911465665897 0
+669 0.3769037251535127 0.7281911465665915 0
+670 -0.9200734388795039 -0.1595448731707876 0
+671 0.920073438879504 0.1595448731707884 0
+672 -0.5378616901761551 0.483065227647501 0
+673 0.5378616901761651 -0.4830652276475003 0
+674 0.05933946393553336 0.2995513656724948 0
+675 -0.0593394639354846 -0.2995513656725193 0
+676 -0.9227251349360273 0.1516093281744423 0
+677 0.9227251349360279 -0.1516093281744383 0
+678 0.01423765090758669 0.1532153079516443 0
+679 -0.01423765090754974 -0.1532153079516815 0
+680 -0.2402671707251071 -0.7379836525915557 0
+681 0.2402671707251113 0.7379836525915574 0
+682 -0.7470731686934112 0.3432710620794203 0
+683 0.7470731686934219 -0.3432710620794162 0
+684 -0.189275832396584 -0.462073497336136 0
+685 0.1892758323965812 0.4620734973361505 0
+686 0.01840639678104743 0.9332025900400688 0
+687 -0.01840639678104927 -0.9332025900400724 0
+688 -0.7202430348129211 -0.06078550984428131 0
+689 0.7202430348129232 0.06078550984427786 0
+690 -0.3512194883803429 0.2185456283076085 0
+691 0.3512194883803549 -0.2185456283076446 0
+692 -0.2397538720664046 0.741719693265532 0
+693 0.2397538720663885 -0.7417196932655501 0
+694 -0.1181058558222839 0.1169967237777094 0
+695 0.1181058558223207 -0.116996723777745 0
+696 -0.69234911330989 0.6206334643077821 0
+697 0.6923491133099032 -0.6206334643077721 0
+698 0.6966756968120239 0.6203574837116108 0
+699 -0.696675696812025 -0.620357483711611 0
+700 -0.7545419064228802 -0.3545029193424327 0
+701 0.7545419064228801 0.3545029193424322 0
+702 -0.5675288983688154 0.5827039801045489 0
+703 0.5675288983688394 -0.5827039801045382 0
+704 0.6971378516598867 -0.05569200602250605 0
+705 -0.6971378516598865 0.05569200602250726 0
+706 0.5710394068675455 0.5714334402575401 0
+707 -0.5710394068675484 -0.5714334402575415 0
+708 -0.2537783054129218 -0.446618410321614 0
+709 0.2537783054129115 0.4466184103216226 0
+710 -0.2668096051101326 -0.1073286345120402 0
+711 0.2668096051101668 0.107328634512038 0
+712 -0.1330361050270015 -0.369224539430247 0
+713 0.1330361050270263 0.36922453943024 0
+714 0.4347683076596986 0.2441224883979997 0
+715 -0.4347683076596922 -0.2441224883980064 0
+716 -0.07650628062246984 0.4660365348174462 0
+717 0.07650628062247489 -0.4660365348174591 0
+718 0.02627235870958384 -0.3734614890834432 0
+719 -0.02627235870956004 0.3734614890834119 0
+720 -0.2218651457179028 0.0101406762048816 0
+721 0.221865145717925 -0.01014067620484174 0
+722 -0.115966605446403 0.1935405385308268 0
+723 0.1159666054464392 -0.1935405385308587 0
+724 -0.3220004145809322 -0.067901061342724 0
+725 0.3220004145809404 0.06790106134271977 0
+726 -0.06135516771571064 -0.4315693187379949 0
+727 0.06135516771572816 0.4315693187379729 0
+728 0.4318125048155277 -0.8425272796785006 0
+729 -0.4318125048155315 0.8425272796785026 0
+730 -0.4318125048182495 -0.8425272796771918 0
+731 0.4318125048182516 0.8425272796771908 0
+732 0.06477905414127821 0.7427429615712547 0
+733 -0.064779054141281 -0.7427429615712501 0
+734 -0.9090935771933021 0.220800265588204 0
+735 0.9090935771933037 -0.2208002655881991 0
+736 -0.846174913549695 0.4270108788326172 0
+737 0.8461749135496988 -0.4270108788326177 0
+738 0.6523896489540169 0.5422609512042852 0
+739 -0.6523896489540185 -0.5422609512042864 0
+740 -0.9355457521888146 0.04023064065464154 0
+741 0.9355457521888157 -0.04023064065464059 0
+742 -0.9076641110755205 -0.2302900532446123 0
+743 0.9076641110755206 0.2302900532446133 0
+744 -0.8460697172987595 -0.4279943897206252 0
+745 0.8460697172987595 0.4279943897206254 0
+746 -0.6525247959032345 0.5386621418843126 0
+747 0.6525247959032514 -0.5386621418843002 0
+748 -0.8093572196676642 0.1407746006721267 0
+749 0.8093572196676656 -0.1407746006721231 0
+750 0.6194143023212441 -0.3657420783106433 0
+751 -0.619414302321235 0.3657420783106423 0
+752 -0.3154643939262504 0.3251422009042685 0
+753 0.3154643939262661 -0.3251422009042972 0
+754 0.01609611148632131 -0.6745642090942495 0
+755 -0.01609611148631737 0.6745642090942481 0
+756 -0.7253833715891562 0.4249063396384527 0
+757 0.7253833715891665 -0.424906339638443 0
+758 -0.4696080781973645 -0.3164051981233079 0
+759 0.4696080781973663 0.3164051981233029 0
+760 0.1264964228150864 0.2436487329805912 0
+761 -0.1264964228150168 -0.2436487329806168 0
+762 -0.0647672104291603 0.7475101980601471 0
+763 0.06476721042915555 -0.7475101980601516 0
+764 -0.2551865220513815 0.2633097248735159 0
+765 0.2551865220514043 -0.2633097248735456 0
+766 0.7193300880831721 0.4200113380542492 0
+767 -0.7193300880831732 -0.4200113380542508 0
+768 -0.7177446163896954 -0.1568280614636795 0
+769 0.7177446163896953 0.156828061463673 0
+770 -0.1124427018962278 0.851695502326846 0
+771 0.1124427018962125 -0.8516955023268505 0
+772 -0.1098570017746611 -0.8526730500083174 0
+773 0.1098570017746643 0.8526730500083173 0
+774 -0.4319387522027526 0.17883627027202 0
+775 0.4319387522027572 -0.1788362702720492 0
+776 -0.144609060527038 0.4051634211942627 0
+777 0.1446090605270537 -0.4051634211942977 0
+778 0.4750340008436253 0.140796294988299 0
+779 -0.4750340008436092 -0.1407962949883107 0
+780 -0.201749494637425 -0.05565002158804744 0
+781 0.2017494946374614 0.05565002158804883 0
+782 -0.8262592620381281 0.2319257273806262 0
+783 0.8262592620381305 -0.2319257273806215 0
+784 0.8218915138185598 0.2377268317116537 0
+785 -0.8218915138185594 -0.2377268317116533 0
+786 -0.36845809362625 0.3906891061336665 0
+787 0.3684580936262663 -0.3906891061336959 0
+788 0.5416337887867434 -0.1752352974377423 0
+789 -0.5416337887867479 0.175235297437747 0
+790 0.3435618491390117 0.5991704771116086 0
+791 -0.3435618491390042 -0.5991704771116095 0
+792 -0.1312084325508976 0.9264182631065946 0
+793 0.1312084325508855 -0.9264182631066001 0
+794 0.1347948150871492 0.9298017722422809 0
+795 -0.1347948150871484 -0.929801772242283 0
+796 0.09206371537982043 0.5557970068517522 0
+797 -0.09206371537982556 -0.5557970068517547 0
+798 0.5268779338390275 -0.3873920537262336 0
+799 -0.526877933839021 0.3873920537262235 0
+800 -0.3704418476768654 0.5864472185695402 0
+801 0.3731016987764014 -0.5931680987593652 0
+802 -0.5887669071141377 -0.008044450006504972 0
+803 0.5887669071141343 0.008044450006501421 0
+804 0.5030858768674638 -0.710354511273014 0
+805 -0.5030858768674598 0.7103545112730276 0
+806 -0.5030858768699069 -0.7103545112713298 0
+807 0.5030858768699082 0.7103545112713304 0
+808 -0.3091133195763489 0.1571343654648526 0
+809 0.3091133195763663 -0.1571343654648854 0
+810 -0.6274147072594572 0.4233567195870468 0
+811 0.6274147072594671 -0.4233567195870417 0
+812 0.5808554881301742 -0.7422894008860557 0
+813 -0.5808554881301703 0.7422894008860642 0
+814 -0.5808556787881778 -0.7422902788909009 0
+815 0.5808556787881782 0.7422902788909012 0
+816 -0.8439887885161692 -0.06135116108462742 0
+817 0.8439887885161705 0.06135116108462715 0
+818 -0.06078694708861281 0.3099832049198565 0
+819 0.06078694708864845 -0.3099832049198882 0
+820 0.1277885024418108 -0.7343706966334391 0
+821 -0.1277885024418188 0.7343706966334287 0
+822 0.6404573892424625 0.170213471837376 0
+823 -0.6404573892424562 -0.1702134718373803 0
+824 0.1375013207476445 0.6577456563728504 0
+825 -0.137501320747645 -0.6577456563728513 0
+826 -0.1520733074536679 0.05001677927671371 0
+827 0.1520733074537039 -0.05001677927674544 0
+828 -0.3659628563584201 -0.2535784932503556 0
+829 0.3659628563584293 0.2535784932503491 0
+830 -0.4179495383933003 0.04181488812255862 0
+831 0.4179495383933015 -0.04181488812257083 0
+832 -0.2022966023318268 0.3191632300474992 0
+833 0.2022966023318465 -0.3191632300475281 0
+834 -0.5642885995701559 -0.3139151896795471 0
+835 0.5642885995701552 0.3139151896795442 0
+836 -0.1784826056546602 0.4716779276939679 0
+837 0.1784826056546714 -0.4716779276940042 0
+838 -0.6404641487343408 -0.2572839608589081 0
+839 0.6404641487343496 0.2572839608589108 0
+840 -0.1054023132560934 0.5628799993924427 0
+841 0.1054023132560848 -0.5628799993924293 0
+842 0.005495709822139998 -0.4947902284436029 0
+843 -0.005495709822119105 0.4947902284435634 0
+844 0.5204051472143032 0.4241173451744131 0
+845 -0.520405147214306 -0.4241173451744162 0
+846 0.5183781270899994 0.4795915241193874 0
+847 -0.5183781270900024 -0.4795915241193902 0
+848 -0.1947460115039094 0.2094458785577558 0
+849 0.1947460115039404 -0.2094458785577871 0
+850 0.1274975830436328 0.7317018128048312 0
+851 -0.1274975830436313 -0.731701812804829 0
+852 -0.5991005598259845 0.6546123011461601 0
+853 0.5991005598259977 -0.6546123011461494 0
+854 0.5991139881363134 0.654652368994308 0
+855 -0.5991139881363141 -0.6546523689943091 0
+856 -0.7097856167844305 0.1535051998166114 0
+857 0.7097856167844333 -0.1535051998166096 0
+858 -0.6514757618307927 0.1665905572002944 0
+859 0.6514757618307964 -0.1665905572002928 0
+860 -0.1395840436747025 0.6633672482014602 0
+861 0.139584043674702 -0.6633672482014693 0
+862 -0.3826810350498726 0.2733651220200987 0
+863 0.3826810350498842 -0.2733651220201306 0
+864 0.2548852734227728 -0.3992730073681761 0
+865 -0.2548852734227549 0.3992730073681372 0
+866 0.7338483036616194 0.2543337924064877 0
+867 -0.7338483036616185 -0.2543337924064902 0
+868 0.6183841596421129 0.469068438379954 0
+869 -0.6183841596421151 -0.4690684383799569 0
+870 -0.003215465774333393 0.5614742191555873 0
+871 0.00321546577432557 -0.5614742191555867 0
+872 -0.3155159448773052 0.8039119408818465 0
+873 0.3155159448773016 -0.8039119408818499 0
+874 0.3113611030551672 0.8050363627565137 0
+875 -0.3113611030551622 -0.8050363627565146 0
+876 -0.2297427753567136 0.1446400955493867 0
+877 0.2297427753567407 -0.1446400955494241 0
+878 -0.0366250078566798 0.9400021805896208 0
+879 0.03662500785667375 -0.9400021805896251 0
+880 -0.2028246372188413 -0.5602253609181987 0
+881 0.2028246372188385 0.5602253609182032 0
+882 -0.426815468952397 -0.04608242988181601 0
+883 0.4268154689523943 0.04608242988180335 0
+884 -0.4980456761769724 -0.03417662709171884 0
+885 0.4980456761769664 0.03417662709170435 0
+886 -0.7381778639250958 0.2429071708373087 0
+887 0.7381778639251002 -0.2429071708373044 0
+888 -0.5104488651405593 0.04663021889452081 0
+889 0.5104488651405583 -0.0466302188945317 0
+890 -0.2010273608802339 -0.3360577191600521 0
+891 0.2010273608802634 0.3360577191600674 0
+892 0.7817547806569749 -0.5466898873582927 0
+893 -0.7817547806569645 0.5466898873583002 0
+894 0.477308132735555 -0.2537530093387013 0
+895 -0.4773081327355453 0.2537530093386822 0
+896 0.3208113423770002 0.01132995019250807 0
+897 -0.3208113423770159 -0.01132995019251128 0
+898 0.05250661590094165 -0.8544618240213832 0
+899 -0.05250661590094897 0.8544618240213827 0
+900 -0.0529998443616119 -0.8550218301783213 0
+901 0.05299984436160601 0.8550218301783225 0
+902 0.2119385135378926 0.9259587717068882 0
+903 -0.2119385135378904 -0.9259587717068889 0
+904 -0.2122739481681454 0.9260679547611054 0
+905 0.212273948168137 -0.9260679547611096 0
+906 0.2232497492117492 -0.6602371308037402 0
+907 -0.223249749211761 0.6602371308037271 0
+908 0.08376744155001788 0.1738726032886056 0
+909 -0.08376744154997268 -0.1738726032886512 0
+910 -0.3048850330936297 0.5303449847374661 0
+911 0.3046821081502513 -0.5301830094290445 0
+912 0.9415332278752855 0.07500368457556256 0
+913 -0.9415332278752853 -0.07500368457556202 0
+914 -0.2499292973656503 -0.3801949424523525 0
+915 0.249929297365645 0.3801949424523631 0
+916 0.2885106475975086 0.5287233016231035 0
+917 -0.2885106475975078 -0.5287233016231048 0
+918 0.322254794087167 -0.6946189073257588 0
+919 -0.3222547940871572 0.6946189073257539 0
+920 -0.322254794089523 -0.6946189073246536 0
+921 0.3222547940895217 0.6946189073246513 0
+922 0.3776200395750541 -0.1069718631447196 0
+923 -0.3776200395750507 0.1069718631446992 0
+924 -0.774693258677059 -0.5492658962380829 0
+925 0.7746932586770586 0.5492658962380825 0
+926 -0.2035678832761446 -0.8297977499381137 0
+927 0.2035678832761497 0.8297977499381128 0
+928 0.4625235189348081 -0.6433209585382959 0
+929 -0.4625549612132022 0.6433460558607914 0
+930 -0.4676602461826981 -0.6522719319250122 0
+931 0.4676602461826954 0.6522719319250107 0
+932 0.5559496326039747 -0.2772670214029613 0
+933 -0.5559496326039681 0.2772670214029566 0
+934 0.3695713063069094 -0.8697129901665291 0
+935 -0.3695713063069156 0.8697129901665299 0
+936 0.3694167827695949 0.8697084219638708 0
+937 -0.3694167827695911 -0.8697084219638711 0
+938 -0.06094744064103666 0.4162713924054672 0
+939 0.06094744064105753 -0.4162713924054808 0
+940 0.0169549905351951 0.2569529797599838 0
+941 -0.01695499053514662 -0.2569529797600116 0
+942 0.2189707061912405 0.6692946771308906 0
+943 -0.2189707061912392 -0.6692946771308903 0
+944 0.3906055990070429 0.149352773070654 0
+945 -0.3906055990070308 -0.1493527730706679 0
+946 0.6542313223490263 0.06803297022275549 0
+947 -0.6542313223490269 -0.06803297022275789 0
+948 -0.2040063115266956 0.8323751162078048 0
+949 0.2040063115266822 -0.8323751162078157 0
+950 0.3272594883339762 -0.1120439197062715 0
+951 -0.3272594883339643 0.1120439197062487 0
+952 -0.3030730043120484 0.2114868532299546 0
+953 0.3030730043120667 -0.2114868532299908 0
+954 -0.6488389048849263 0.2707979132297764 0
+955 0.6488389048849308 -0.2707979132297751 0
+956 -0.7220423913623021 0.5037014392040206 0
+957 0.7220423913623182 -0.5037014392040061 0
+958 0.01659521535473724 0.3855935702080604 0
+959 -0.01659521535470786 -0.3855935702080865 0
+960 -0.88429437177222 0.3216488163996549 0
+961 0.8842943717722218 -0.3216488163996503 0
+962 0.7210633956148275 0.5021206962031248 0
+963 -0.7210633956148286 -0.5021206962031262 0
+964 0.6596886976365836 0.4244261757436971 0
+965 -0.6596886976365846 -0.4244261757436995 0
+966 -0.5077803883479209 0.432166898142763 0
+967 0.5077803883479256 -0.4321668981427718 0
+968 0.5706535121662537 -0.3517074027174598 0
+969 -0.5706535121662479 0.3517074027174526 0
+970 0.1620267320726065 0.421806371381565 0
+971 -0.1620267320725999 -0.4218063713815569 0
+972 0.1926945479260285 0.2030160122059945 0
+973 -0.1926945479259967 -0.203016012206011 0
+974 -0.8862878472620026 -0.3358842341329774 0
+975 0.8862878472620026 0.335884234132978 0
+976 0.3420021545892769 -0.4281208501603376 0
+977 -0.3420021545892588 0.4281208501603102 0
+978 -0.04747576235090255 0.1014775358935357 0
+979 0.04747576235093952 -0.1014775358935703 0
+980 -0.8261486349499242 -0.4763036399497189 0
+981 0.8261486349499237 0.4763036399497192 0
+982 -0.05053023087493995 0.01408160356303605 0
+983 0.0505302308749753 -0.01408160356307956 0
+984 -0.3133049768248687 0.6333392889384146 0
+985 0.3133049768248717 -0.6333392889384184 0
+986 -0.8601633066786606 0.1317834210271283 0
+987 0.8601633066786617 -0.1317834210271245 0
+988 -0.3559974189774074 0.4877122724889733 0
+989 0.3547832189913142 -0.4874527291727514 0
+990 -0.1077360985392683 0.01663148181237525 0
+991 0.1077360985393039 -0.01663148181240973 0
+992 0.1058398210782486 0.3247951121013838 0
+993 -0.1058398210782011 -0.324795112101399 0
+994 -0.8280200948616352 0.4761546933073781 0
+995 0.8280200948616396 -0.4761546933073761 0
+996 -0.04638006843186448 0.2615151859360151 0
+997 0.0463800684319054 -0.2615151859360447 0
+998 0.07248727684567101 0.4830697395669786 0
+999 -0.07248727684568136 -0.4830697395669903 0
+1000 -0.1456167898635472 0.2316929189543772 0
+1001 0.1456167898635789 -0.2316929189544074 0
+1002 -0.9361637289865692 0.1071590807173264 0
+1003 0.9361637289865697 -0.1071590807173234 0
+1004 0.5694014873667189 -0.04664714895990505 0
+1005 -0.5694014873667206 0.04664714895990015 0
+1006 0.4225928110756998 -0.7444550388166622 0
+1007 -0.4225928110757071 0.7444550388166737 0
+1008 -0.4227786612879503 -0.7430043481508211 0
+1009 0.422778661287954 0.7430043481508216 0
+1010 -0.8849977030602445 0.04161963096638582 0
+1011 0.8849977030602458 -0.04161963096638373 0
+1012 0.5106020786049412 -0.8048197080340541 0
+1013 -0.5106020786049408 0.8048197080340583 0
+1014 -0.5106020786076702 -0.8048197080324565 0
+1015 0.510602078607671 0.8048197080324565 0
+1016 0.3350855320899456 0.44073602502711 0
+1017 -0.3350855320899513 -0.4407360250271152 0
+1018 0.3535937059333403 0.4890868953977142 0
+1019 -0.3535937059333451 -0.4890868953977213 0
+1020 -0.4180250491469457 0.3736259174241438 0
+1021 0.4180250491469529 -0.3736259174241665 0
+1022 0.6598661570212262 0.3282570685486054 0
+1023 -0.6598661570212275 -0.3282570685486086 0
+1024 -0.1434914033996635 0.3517775236550517 0
+1025 0.1434914033996881 -0.3517775236550842 0
+1026 0.5488538789161674 0.2329824027757451 0
+1027 -0.5488538789161597 -0.2329824027757474 0
+1028 -0.6614114842887034 0.3336886790082553 0
+1029 0.6614114842887124 -0.3336886790082507 0
+1030 -0.8253175074700162 0.3092877673306685 0
+1031 0.8253175074700204 -0.3092877673306633 0
+1032 0.5808546982954673 -0.09974432673666532 0
+1033 -0.5808546982954681 0.09974432673666289 0
+1034 0.8248838978655624 0.3148472152091811 0
+1035 -0.8248838978655624 -0.3148472152091804 0
+1036 0.4385013235909532 0.4394668207021348 0
+1037 -0.438501323590957 -0.4394668207021392 0
+1038 -0.216057413243596 -0.1080773603154494 0
+1039 0.2160574132436303 0.1080773603154408 0
+1040 -0.5984003765697524 0.4633873105795143 0
+1041 0.5984003765697596 -0.4633873105795093 0
+1042 0.2957468432313132 -0.9053490726577481 0
+1043 -0.2957468432313221 0.9053490726577481 0
+1044 0.2958362424261567 0.9052599758674711 0
+1045 -0.2958362424261542 -0.9052599758674712 0
+1046 -0.4683235938992683 -0.2202703405558584 0
+1047 0.4683235938992794 0.2202703405558528 0
+1048 -0.4373986944987764 0.4293266638126908 0
+1049 0.4373986944987842 -0.4293266638127095 0
+1050 -0.1964109211392188 0.5633003795999043 0
+1051 0.196410921139222 -0.5633003795999334 0
+1052 -0.02961420139852041 -0.6611546761040706 0
+1053 0.02961420139852554 0.6611546761040674 0
+1054 0.5528121071715458 0.05065522101577467 0
+1055 -0.5528121071715481 -0.05065522101578401 0
+1056 0.4168360473082911 -0.6602734799343005 0
+1057 -0.4168374114221219 0.6602745687741557 0
+1058 -0.4223511737214436 -0.6477910131784281 0
+1059 0.4223511737214418 0.6477910131784269 0
+1060 -0.1525230052084725 -0.8207058987333791 0
+1061 0.152523005208477 0.8207058987333801 0
+1062 0.4809306460221737 -0.1192038542610616 0
+1063 -0.4809306460221732 0.1192038542610418 0
+1064 -0.2434960954656315 0.05459106861255519 0
+1065 0.243496095465654 -0.05459106861256612 0
+1066 0.1284405042321423 0.04351391552524508 0
+1067 -0.1284405042321119 -0.04351391552527426 0
+1068 -0.1027680381978942 0.5108015394441119 0
+1069 0.1027680381978934 -0.5108015394441212 0
+1070 0.2540281281772686 0.2724248544374497 0
+1071 -0.2540281281772424 -0.2724248544374497 0
+1072 -0.06521284992386869 0.198574476673355 0
+1073 0.06521284992390759 -0.1985744766733855 0
+1074 -0.128236812678181 -0.134645562154327 0
+1075 0.1282368126782145 0.1346455621542895 0
+1076 -0.7304223778059916 -0.01229423137772983 0
+1077 0.7304223778059872 0.01229423137772647 0
+1078 0.3103874040719949 0.6390360665797589 0
+1079 -0.3103874040719921 -0.6390360665797604 0
+1080 0.1998291721867616 0.2921769395229185 0
+1081 -0.1998291721867257 -0.2921769395229079 0
+1082 -0.02821283459254105 -0.03876624818264156 0
+1083 0.02821283459257449 0.03876624818259431 0
+1084 0.5474897914952646 0.1475589500416382 0
+1085 -0.547489791495266 -0.1475589500416412 0
+1086 -0.3972313376127691 -0.5674384253831009 0
+1087 0.3972313376127675 0.5674384253830962 0
+1088 -0.4827400730024164 0.5775275726502928 0
+1089 0.4826784461367366 -0.5774783818982077 0
+1090 0.4816531567504441 0.5809879510200745 0
+1091 -0.4816531567504477 -0.5809879510200742 0
+1092 -0.5154209442055518 -0.3259357902338784 0
+1093 0.5154209442055517 0.3259357902338761 0
+1094 -0.1536551054918179 0.823354392515986 0
+1095 0.1536551054918045 -0.823354392515995 0
+1096 -0.109449143103832 -0.4096111415688207 0
+1097 0.1094491431038506 0.4096111415688133 0
+1098 -0.7950559396531149 0.357710692708559 0
+1099 0.7950559396531235 -0.3577106927085526 0
+1100 -0.03048995657970823 -0.3384695365260473 0
+1101 0.03048995657975204 0.3384695365260206 0
+1102 -0.2800621865310668 0.4381592168751971 0
+1103 0.2800621865310865 -0.438159216875229 0
+1104 0.07036771143711927 0.9539517892913008 0
+1105 -0.07036771143711949 -0.9539517892913039 0
+1106 -0.4263441374046311 -0.351948224687149 0
+1107 0.4263441374046324 0.3519482246871438 0
+1108 -0.654420775191829 0.04722659397367249 0
+1109 0.6544207751918292 -0.04722659397367261 0
+1110 -0.8742357345428129 -0.1420318113826652 0
+1111 0.8742357345428131 0.1420318113826659 0
+1112 0.6277919710187804 0.1014569621339647 0
+1113 -0.6277919710187807 -0.1014569621339683 0
+1114 -0.7922345601803055 -0.1543046930403332 0
+1115 0.7922345601803054 0.1543046930403318 0
+1116 -0.7984782779793302 -0.3595114068775231 0
+1117 0.7984782779793305 0.3595114068775239 0
+1118 -0.1831169415710052 0.4288915854795699 0
+1119 0.1831169415710139 -0.4288915854796108 0
+1120 -0.8109571172495984 0.03099306668415378 0
+1121 0.8109571172495987 -0.0309930666841515 0
+1122 0.7516912512860261 -0.5830971933378251 0
+1123 -0.7516912512860172 0.5830971933378319 0
+1124 0.7400337939153269 0.599145269138133 0
+1125 -0.7400337939153273 -0.5991452691381339 0
+1126 -0.4280959551857136 0.4842129839682768 0
+1127 0.4279751665289456 -0.4841165700942093 0
+1128 0.0318725702602028 0.1974136926150037 0
+1129 -0.03187257026014523 -0.197413692615045 0
+1130 0.4323225082091515 0.4862216642431145 0
+1131 -0.4323225082091549 -0.4862216642431197 0
+1132 -0.4817794424704016 0.3391683723647565 0
+1133 0.4817794424704092 -0.3391683723647752 0
+1134 0.6898982982169933 -0.6634918681214728 0
+1135 -0.689898298216985 0.6634918681214778 0
+1136 -0.6901066781373697 -0.6638111319147197 0
+1137 0.6901066781373698 0.6638111319147194 0
+1138 0.4679645023313453 -0.8277761064703564 0
+1139 -0.4679645023313477 0.8277761064703588 0
+1140 0.4679645023339401 0.8277761064689712 0
+1141 -0.4679645023339384 -0.8277761064689718 0
+1142 0.3964957462335905 0.2252339982759233 0
+1143 -0.3964957462335799 -0.225233998275931 0
+1144 -0.1782574601958678 0.643469043678238 0
+1145 0.1782574601958565 -0.643469043678251 0
+1146 0.8759220536453862 -0.3886750994300935 0
+1147 -0.875922053645386 0.3886750994300943 0
+1148 0.1767531020428159 0.6431938758399752 0
+1149 -0.1767531020428159 -0.6431938758399752 0
+1150 -0.952581487104065 -0.1283915908169172 0
+1151 0.952581487104065 0.1283915908169176 0
+1152 0.4362528568354801 0.1321531858450568 0
+1153 -0.4362528568354712 -0.1321531858450712 0
+1154 0.4683970750152741 -0.7367231429569974 0
+1155 -0.4683970750152764 0.7367231429570059 0
+1156 -0.4680334420180908 -0.7344285293954059 0
+1157 0.4680334420180938 0.7344285293954061 0
+1158 0.9153775347042843 -0.2635813898970243 0
+1159 -0.9153775347042827 0.2635813898970288 0
+1160 0.08897930373711502 0.6394670103152386 0
+1161 -0.08897930373711457 -0.6394670103152391 0
+1162 -0.6770111520076588 0.5868707479805841 0
+1163 0.6770111520076739 -0.586870747980571 0
+1164 0.6797362761564041 0.5792340300570787 0
+1165 -0.6797362761564053 -0.5792340300570796 0
+1166 0.7763842828957028 -0.07168242507388974 0
+1167 -0.776384282895702 0.07168242507389198 0
+1168 -0.3707344223522185 0.02482438792223577 0
+1169 0.3707344223522149 -0.02482438792224429 0
+1170 0.03622846856281345 0.7094862843967836 0
+1171 -0.03622846856281502 -0.7094862843967823 0
+1172 0.2775518136277875 -0.8551128655921391 0
+1173 -0.2775518136277981 0.8551128655921328 0
+1174 -0.2757476526678961 -0.8558849022062528 0
+1175 0.2757476526679002 0.8558849022062508 0
+1176 0.2621454285328956 -0.4935149341825774 0
+1177 -0.26217441781051 0.4935380735123179 0
+1178 0.470068800894623 0.5216112085248309 0
+1179 -0.4700688008946264 -0.5216112085248332 0
+1180 -0.1587202875674828 0.1071764502713248 0
+1181 0.1587202875675163 -0.1071764502713616 0
+1182 0.4697538952775314 -0.5240851338847883 0
+1183 -0.4699828795812654 0.5242679098541231 0
+1184 0.2440880526057061 -0.5756051589251571 0
+1185 -0.2440880526056986 0.5756051589251264 0
+1186 0.05897760591892637 0.07658346677642192 0
+1187 -0.05897760591889874 -0.07658346677646841 0
+1188 0.5648038105044877 0.1904448551751902 0
+1189 -0.5648038105044746 -0.1904448551751974 0
+1190 0.6312792975880241 -0.721232804167698 0
+1191 -0.6312792975880179 0.7212328041677054 0
+1192 -0.6312800268117128 -0.721237488777894 0
+1193 0.6312800268117131 0.7212374887778937 0
+1194 0.1760173492045153 0.1292264823957873 0
+1195 -0.1760173492044821 -0.1292264823958124 0
+1196 0.09317085126862931 0.2747445960211873 0
+1197 -0.09317085126857265 -0.2747445960212082 0
+1198 -0.8022814968860521 -0.1006155182638524 0
+1199 0.8022814968860525 0.1006155182638519 0
+1200 -0.1053445259612989 -0.08290825253279216 0
+1201 0.1053445259613299 0.0829082525327549 0
+1202 -0.2668752233189073 -0.7684337199173353 0
+1203 0.2668752233189139 0.7684337199173344 0
+1204 -0.2365374795988546 -0.1929058420915238 0
+1205 0.2365374795988782 0.192905842091512 0
+1206 0.7552330579224011 0.4465541088318468 0
+1207 -0.7552330579224024 -0.4465541088318469 0
+1208 -0.08319886993936403 0.951654820077059 0
+1209 0.08319886993935524 -0.9516548200770641 0
+1210 0.5782844726654885 -0.2042856922456171 0
+1211 -0.5782844726654872 0.2042856922456166 0
+1212 0.6248259306910923 -0.113104011549783 0
+1213 -0.6248259306910909 0.1131040115497844 0
+1214 -0.7587678794649575 0.4457999940016 0
+1215 0.7587678794649666 -0.4457999940015923 0
+1216 0.03469528277935074 -0.894406847630123 0
+1217 -0.0346952827793577 0.8944068476301215 0
+1218 -0.1738051865416987 -0.2494554337301175 0
+1219 0.1738051865417511 0.2494554337301544 0
+1220 -0.25958515433737 -0.6275854945325033 0
+1221 0.2595851543373718 0.6275854945325026 0
+1222 0.6030161534033194 0.3508215474717806 0
+1223 -0.6030161534033199 -0.3508215474717835 0
+1224 0.9137318817427564 0.2728627675539017 0
+1225 -0.9137318817427565 -0.2728627675539011 0
+1226 0.3025877164416959 -0.07318900015438556 0
+1227 -0.3025877164416796 0.07318900015437711 0
+1228 0.01390651234017366 -0.04002131878694649 0
+1229 -0.0139065123401372 0.04002131878690292 0
+1230 0.05343185506563857 -0.6497438703631985 0
+1231 -0.05343185506561765 0.6497438703631957 0
+1232 -0.8860883430859399 -0.05071205897176994 0
+1233 0.8860883430859401 0.05071205897177043 0
+1234 0.2920277499159715 0.3476245773867152 0
+1235 -0.2920277499159706 -0.3476245773867161 0
+1236 -0.02606048700249322 -0.4697530896422731 0
+1237 0.02606048700250538 0.4697530896422406 0
+1238 -0.8731012142840575 -0.3875824664066523 0
+1239 0.873101214284058 0.3875824664066527 0
+1240 0.2594492346427996 -0.6229137335517915 0
+1241 -0.2594492346428003 0.6229137335517743 0
+1242 -0.5185160314141708 0.2786548407229549 0
+1243 0.5185160314141798 -0.2786548407229651 0
+1244 -0.5526478098569542 0.5148116567546606 0
+1245 0.5526478098569707 -0.5148116567546562 0
+1246 -0.6066815386412292 0.5596913565118417 0
+1247 0.6066815386412497 -0.5596913565118292 0
+1248 0.2485130095854978 0.5574310301124377 0
+1249 -0.2485130095855003 -0.5574310301124296 0
+1250 0.4582452832906239 -0.05331719744590145 0
+1251 -0.4582452832906251 0.05331719744588233 0
+1252 0.2743391979219096 -0.7181304326696065 0
+1253 -0.274339197921926 0.7181304326695938 0
+1254 0.3305109715355523 -0.5833487413173637 0
+1255 -0.3303382296101507 0.582444561696994 0
+1256 -0.350756110457576 0.2945562238545608 0
+1257 0.3507561104575906 -0.2945562238545927 0
+1258 0.09895333292562528 -0.6453594353779918 0
+1259 -0.09895333292561638 0.6453594353779991 0
+1260 -0.7238389754731244 -0.1994994169735171 0
+1261 0.7238389754731244 0.1994994169735126 0
+1262 -0.4181221305605707 -0.003616764652631435 0
+1263 0.4181221305605679 0.003616764652619425 0
+1264 -0.8681598428781286 0.2270132993472409 0
+1265 0.8681598428781314 -0.2270132993472363 0
+1266 0.3500165891210759 -0.7604617576688493 0
+1267 -0.3500165891210852 0.7604617576688524 0
+1268 -0.348043600704751 -0.7603726925934072 0
+1269 0.3480436007047552 0.7603726925934079 0
+1270 -0.5512600377169856 0.133179269363587 0
+1271 0.5512600377169855 -0.1331792693635932 0
+1272 -0.2692973656544457 0.7691200354870343 0
+1273 0.2692973656544346 -0.7691200354870447 0
+1274 -0.6346748368771069 0.4893270549701004 0
+1275 0.6346748368771195 -0.4893270549700847 0
+1276 -0.6406361967628655 -0.2092212716516892 0
+1277 0.6406361967628735 0.2092212716516862 0
+1278 -0.8113821442711963 0.5158685568163566 0
+1279 0.811382144271206 -0.5158685568163524 0
+1280 0.4637092095878285 -0.205447233306922 0
+1281 -0.4637092095878244 0.2054472333068994 0
+1282 0.4186383712776325 -0.7983525926735093 0
+1283 -0.4186383712776396 0.7983525926735152 0
+1284 -0.4185476790657473 -0.7981626953882559 0
+1285 0.4185476790657514 0.7981626953882557 0
+1286 -0.2926706431316516 -0.3012833470593265 0
+1287 0.2926706431316607 0.3012833470593241 0
+1288 -0.5132888439100303 0.6714552859018356 0
+1289 0.5132843521559823 -0.6714517005700438 0
+1290 0.5140208273454756 0.6727311951125363 0
+1291 -0.5140208273454761 -0.6727311951125373 0
+1292 -0.7282235611459918 0.3833528984392949 0
+1293 0.7282235611460014 -0.3833528984392868 0
+1294 0.2758571011929465 0.7163336884679987 0
+1295 -0.2758571011929436 -0.7163336884680004 0
+1296 -0.8671924307713998 -0.2353231075112286 0
+1297 0.8671924307714 0.2353231075112299 0
+1298 0.1097771896225533 -0.4304965557902764 0
+1299 -0.1097771896225375 0.4304965557902526 0
+1300 -0.268079503923206 -0.4805736601058183 0
+1301 0.2680795039232008 0.4805736601058201 0
+1302 0.5676507992273676 0.3970502181124138 0
+1303 -0.5676507992273695 -0.3970502181124169 0
+1304 -0.8115503880886005 -0.5172980012094126 0
+1305 0.8115503880885999 0.5172980012094126 0
+1306 -0.1159352112982642 -0.5127126099428034 0
+1307 0.1159352112982586 0.5127126099428028 0
+1308 -0.3117490964211634 -0.2125403913835663 0
+1309 0.3117490964211787 0.2125403913835578 0
+1310 -0.0234325007146206 0.174418839524692 0
+1311 0.02343250071465829 -0.1744188395247193 0
+1312 0.03168198745920583 0.1150576105028985 0
+1313 -0.03168198745917305 -0.1150576105029405 0
+1314 -0.4071976493636614 0.5674549731386841 0
+1315 0.4051196205744051 -0.56589965425625 0
+1316 0.5841753054137907 0.2721130769734633 0
+1317 -0.5841753054137905 -0.2721130769734684 0
+1318 0.400599221140419 0.6897041481548586 0
+1319 -0.4005992211404172 -0.6897041481548594 0
+1320 0.4443837851176966 -0.1396863545442173 0
+1321 -0.444383785117695 0.1396863545441926 0
+1322 0.3412586007928424 0.9003073192445211 0
+1323 -0.3412586007928403 -0.9003073192445213 0
+1324 -0.3415312252075107 0.900333726822354 0
+1325 0.3415312252075061 -0.9003337268223536 0
+1326 -0.5060763126609625 -0.1137051497144497 0
+1327 0.5060763126609616 0.1137051497144329 0
+1328 0.2675053712615525 0.2259901468906131 0
+1329 -0.2675053712615313 -0.22599014689062 0
+1330 0.6405712610864179 0.02119716610144915 0
+1331 -0.6405712610864219 -0.02119716610144767 0
+1332 -0.07735896951619074 0.8188755179457223 0
+1333 0.07735896951617632 -0.8188755179457193 0
+1334 0.0773589695190135 0.8188755179454185 0
+1335 -0.07735896951900781 -0.8188755179454134 0
+1336 0.7114881874290335 0.1087448952725785 0
+1337 -0.7114881874290319 -0.1087448952725831 0
+1338 0.5511028095968429 0.5247077572860365 0
+1339 -0.551102809596846 -0.5247077572860387 0
+1340 -0.7065501896841734 0.3361939738954743 0
+1341 0.7065501896841846 -0.3361939738954673 0
+1342 -0.7416623086081391 0.3031499992884619 0
+1343 0.7416623086081464 -0.3031499992884568 0
+1344 -0.3196633329492842 -0.5586584662404354 0
+1345 0.3196633329492847 0.5586584662404329 0
+1346 0.938661523893066 0.1977046434910381 0
+1347 -0.9386615238930657 -0.1977046434910376 0
+1348 0.183982779988291 -0.03075277044257679 0
+1349 -0.183982779988241 0.03075277044255467 0
+1350 -0.7078151975844265 0.1005086209196944 0
+1351 0.7078151975844282 -0.1005086209196925 0
+1352 0.6834673933271096 -0.4168026580871314 0
+1353 -0.6834673933270996 0.4168026580871398 0
+1354 -0.225459765470866 0.1015955909662844 0
+1355 0.2254597654708787 -0.1015955909663261 0
+1356 0.2917660595361323 0.4397421455358664 0
+1357 -0.2917660595361438 -0.4397421455358674 0
+1358 0.6115855208011129 0.5577075841529638 0
+1359 -0.6115855208011154 -0.5577075841529651 0
+1360 0.6471299159181698 -0.6269030610731462 0
+1361 -0.6471299159181553 0.6269030610731563 0
+1362 0.6493543416242943 0.6287448598227598 0
+1363 -0.649354341624295 -0.6287448598227606 0
+1364 -0.03355519639755533 -0.8930935569507095 0
+1365 0.03355519639754503 0.8930935569507054 0
+1366 -0.3910941764367581 0.5122956722401787 0
+1367 0.3910941764367669 -0.5122956722402028 0
+1368 -0.3651894192095309 -0.06771612572173764 0
+1369 0.3651894192095325 0.06771612572172683 0
+1370 0.8145873216468565 0.1913961103704713 0
+1371 -0.8145873216468561 -0.1913961103704719 0
+1372 0.5145242218985402 0.379379905806222 0
+1373 -0.5145242218985417 -0.3793799058062251 0
+1374 -0.1643023387823191 0.7496229437649653 0
+1375 0.1643023387823078 -0.7496229437649801 0
+1376 -0.2498900796048912 -0.1483341115450928 0
+1377 0.2498900796049183 0.1483341115450816 0
+1378 -0.7887756357174371 -0.009967210163157205 0
+1379 0.788775635717438 0.009967210163157426 0
+1380 0.5701582248647948 0.4882517836779795 0
+1381 -0.5701582248647975 -0.4882517836779821 0
+1382 0.0004760733227509647 0.7830057718862645 0
+1383 -0.0004760733227596389 -0.7830057718862616 0
+1384 -0.727642257210412 -0.3821018240773014 0
+1385 0.7276422572104115 0.3821018240772998 0
+1386 -0.9611214689624135 0.004893580519772843 0
+1387 0.961121468962414 -0.004893580519772458 0
+1388 -0.7590272719652251 0.1521558777873887 0
+1389 0.7590272719652273 -0.1521558777873862 0
+1390 -0.7313944693937101 0.1940469855829131 0
+1391 0.7313944693937143 -0.1940469855829097 0
+1392 0.3381977728391579 0.3627653019323844 0
+1393 -0.3381977728391568 -0.3627653019323884 0
+1394 -0.5046310585901267 0.2014380965879578 0
+1395 0.5046310585901299 -0.2014380965879669 0
+1396 -0.1954207514847758 -0.5049745559833906 0
+1397 0.1954207514847758 0.5049745559833995 0
+1398 0.0003950719332827754 -0.8258816336048278 0
+1399 -0.0003950719332987283 0.8258816336048295 0
+1400 -0.2724474875544061 0.2938310255867919 0
+1401 0.2724474875544256 -0.2938310255868223 0
+1402 0.01402977590804158 -0.1288827959136856 0
+1403 -0.01402977590800529 0.12888279591365 0
+1404 -0.9385857048721308 0.1893353694777579 0
+1405 0.9385857048721317 -0.1893353694777551 0
+1406 -0.8142372526364737 0.1825619448378503 0
+1407 0.8142372526364756 -0.1825619448378463 0
+1408 0.3262759198378647 -0.03038326323514669 0
+1409 -0.3262759198378786 0.03038326323513675 0
+1410 0.2257319680633497 -0.7816717122929265 0
+1411 -0.225731968063363 0.7816717122929187 0
+1412 0.1624512524362308 0.7454961479184792 0
+1413 -0.1624512524362308 -0.7454961479184762 0
+1414 0.3931957765832922 0.5104584572466242 0
+1415 -0.3931957765832952 -0.5104584572466296 0
+1416 -0.04208556227466108 0.5771701818203676 0
+1417 0.04208556227465511 -0.5771701818203584 0
+1418 0.03818437832706626 0.5680545348242039 0
+1419 -0.03818437832707173 -0.5680545348242125 0
+1420 -0.512120792509702 -0.07323442625141914 0
+1421 0.512120792509705 0.07323442625140121 0
+1422 -0.3734078923197682 -0.3374821181231046 0
+1423 0.3734078923197715 0.3374821181230995 0
+1424 -0.6869126921390575 0.2485334173809014 0
+1425 0.6869126921390624 -0.2485334173808969 0
+1426 0.3530990681286797 -0.8332124747626205 0
+1427 -0.3530990681286862 0.8332124747626218 0
+1428 -0.3532890068811561 -0.8341934059040933 0
+1429 0.353289006881161 0.8341934059040929 0
+1430 -0.3829108686117415 0.1910774698197273 0
+1431 0.3829108686117477 -0.1910774698197616 0
+1432 0.1035529503276246 0.209550061480185 0
+1433 -0.1035529503275495 -0.2095500614802371 0
+1434 0.5260724824620312 0.5818755690284687 0
+1435 -0.526072482462036 -0.5818755690284686 0
+1436 0.7806908443488242 0.2478753529983106 0
+1437 -0.780690844348824 -0.2478753529983096 0
+1438 -0.5295321549069418 0.5833918739415475 0
+1439 0.5295269145272301 -0.5833876910544579 0
+1440 0.7098545851261924 0.3396622781450573 0
+1441 -0.7098545851261918 -0.3396622781450605 0
+1442 0.7426520105385488 0.307628905466784 0
+1443 -0.7426520105385505 -0.3076289054667838 0
+1444 0.6001145246328048 -0.2712940578382642 0
+1445 -0.6001145246328032 0.2712940578382632 0
+1446 -0.9585264511101503 0.07388143488152327 0
+1447 0.9585264511101507 -0.07388143488152196 0
+1448 -0.4286743687659867 0.3349254900558634 0
+1449 0.4286743687659918 -0.334925490055889 0
+1450 0.1432079210079343 0.5649534965797604 0
+1451 -0.1432079210079369 -0.5649534965797562 0
+1452 0.6062333093699409 0.4295973197030443 0
+1453 -0.6062333093699438 -0.4295973197030474 0
+1454 -0.159563057572488 0.1882979947676635 0
+1455 0.1595630575725207 -0.1882979947676964 0
+1456 0.04454956131602279 -0.7211834673830536 0
+1457 -0.044549561316025 0.7211834673830509 0
+1458 0.257575372899818 -0.9306550796184653 0
+1459 -0.2575753728998212 0.9306550796184653 0
+1460 -0.2574498519077706 -0.9302736780176649 0
+1461 0.257449851907772 0.9302736780176649 0
+1462 0.6618128521835028 -0.08475003698218192 0
+1463 -0.6618128521835018 0.08475003698218263 0
+1464 0.5805267779125635 0.0996975748531386 0
+1465 -0.5805267779125646 -0.09969757485314441 0
+1466 0.6014964178471423 -0.6955556990198012 0
+1467 -0.6014964178471338 0.695555699019812 0
+1468 0.6015004294695678 0.6955716758559894 0
+1469 -0.6015004294695676 -0.6955716758559896 0
+1470 -0.326470679667143 -0.516160115194075 0
+1471 0.3264706796671407 0.5161601151940696 0
+1472 0.3888780071484118 0.6162136030788484 0
+1473 -0.388878007148413 -0.6162136030788514 0
+1474 -0.6837499320101049 -0.2651191454829508 0
+1475 0.6837499320101104 0.2651191454829487 0
+1476 0.123372494825369 -0.8909464238838434 0
+1477 -0.1233724948253818 0.890946423883838 0
+1478 -0.1218034142545548 -0.8926440194274282 0
+1479 0.1218034142545558 0.8926440194274272 0
+1480 0.8011156510130272 -0.4384125965264559 0
+1481 -0.8011156510130222 0.4384125965264577 0
+1482 -0.652353472167653 0.2210998646579963 0
+1483 0.6523534721676576 -0.2210998646579934 0
+1484 -0.3401372187321637 0.1856724991409152 0
+1485 0.3401372187321766 -0.1856724991409487 0
+1486 -0.406169354063287 -0.4059190334058205 0
+1487 0.4061693540632859 0.4059190334058152 0
+1488 -0.7517304791350864 -0.168625791421392 0
+1489 0.7517304791350862 0.1686257914213889 0
+1490 -0.6155877476755434 0.1909008663209542 0
+1491 0.615587747675548 -0.190900866320955 0
+1492 0.2252122012424395 0.7811801173425583 0
+1493 -0.2252122012424342 -0.7811801173425599 0
+1494 0.7544025022945644 0.0822597688427821 0
+1495 -0.7544025022945628 -0.08225976884278502 0
+1496 0.554934708072973 -0.7872875013051073 0
+1497 -0.5549347080729715 0.7872875013051117 0
+1498 -0.5549347462067039 -0.7872876769046538 0
+1499 0.5549347462067046 0.787287676904654 0
+1500 -0.2123840134967871 -0.8760099789142662 0
+1501 0.212384013496791 0.8760099789142649 0
+1502 0.5532243219010663 0.6268656981187112 0
+1503 -0.5532243219010685 -0.6268656981187118 0
+1504 -0.8892513233023472 -0.002840657561247992 0
+1505 0.8892513233023471 0.002840657561249378 0
+1506 -0.5531000918512962 0.6284737371446817 0
+1507 0.5530987015464864 -0.6284726273991196 0
+1508 -0.09895850366770134 0.1524432481431022 0
+1509 0.09895850366773863 -0.152443248143136 0
+1510 -0.8560010274314878 0.0804271644272722 0
+1511 0.8560010274314889 -0.08042716442726919 0
+1512 0.3327677922896912 0.278415683334387 0
+1513 -0.3327677922896822 -0.2784156833343926 0
+1514 -0.165348394094261 0.3038847180016867 0
+1515 0.1653483940942869 -0.303884718001712 0
+1516 0.04415432424310312 0.6180276899792971 0
+1517 -0.04415432424310235 -0.6180276899793021 0
+1518 -0.286565349333903 0.3608608374298506 0
+1519 0.2865653493339207 -0.3608608374298801 0
+1520 -0.3154438367115453 -0.170979687853432 0
+1521 0.3154438367115639 0.170979687853425 0
+1522 -0.1565246309535737 -0.4808055513025802 0
+1523 0.1565246309535738 0.4808055513025864 0
+1524 -0.2670974984491916 -0.003243956676132594 0
+1525 0.2670974984492013 0.003243956676142323 0
+1526 0.8236627944364215 -0.3907028644735913 0
+1527 -0.8236627944364149 0.3907028644735942 0
+1528 -0.2108826633446247 0.8761417861490629 0
+1529 0.2108826633446095 -0.8761417861490726 0
+1530 -0.424669476415343 0.2692591811831158 0
+1531 0.4246694764153504 -0.2692591811831456 0
+1532 -0.1754530729060386 -0.5998789633375862 0
+1533 0.1754530729060371 0.5998789633375885 0
+1534 0.1754134816023926 -0.6025580988262709 0
+1535 -0.1754134816023983 0.6025580988262556 0
+1536 0.3983575581374996 -0.6974374865047749 0
+1537 -0.398357720532007 0.6974376161285859 0
+1538 -0.7856024314844541 0.2339804802374184 0
+1539 0.7856024314844576 -0.2339804802374134 0
+1540 -0.1906176970646904 0.5163322229040047 0
+1541 0.1906176970647026 -0.5163322229040399 0
+1542 -0.5101602698695904 0.5008047505630721 0
+1543 0.5101330098334407 -0.5007829915191037 0
+1544 0.2271236174456761 -0.3632493804923008 0
+1545 -0.2271236174456563 0.3632493804922651 0
+1546 -0.8965276833889974 -0.1922867223139931 0
+1547 0.896527683388998 0.1922867223139942 0
+1548 0.6472709723369029 0.3657287068594881 0
+1549 -0.6472709723369036 -0.3657287068594904 0
+1550 0.4853265407005598 -0.07976746819438506 0
+1551 -0.4853265407005555 0.07976746819437074 0
+1552 -0.798340355367413 -0.4395359558872394 0
+1553 0.7983403553674125 0.4395359558872398 0
+1554 -0.9656929280215378 -0.02814254447351732 0
+1555 0.9656929280215381 0.02814254447351759 0
+1556 0.3947017859090693 -0.4140449409587983 0
+1557 -0.3947017859090554 0.4140449409587727 0
+1558 0.4358184642919544 0.2928987930782991 0
+1559 -0.4358184642919503 -0.2928987930783047 0
+1560 0.1096040820146779 0.9575280511985899 0
+1561 -0.1096040820146773 -0.9575280511985914 0
+1562 0.667277431956782 -0.7016399379523605 0
+1563 -0.6672774319567768 0.7016399379523653 0
+1564 -0.6673200907214832 -0.7017101735650794 0
+1565 0.6673200907214833 0.701710173565079 0
+1566 0.09394139101940753 -0.2867097344019314 0
+1567 -0.09394139101937328 0.2867097344019005 0
+1568 -0.7790706357966519 0.3206620407886995 0
+1569 0.7790706357966596 -0.3206620407886948 0
+1570 -0.7292643597955152 0.6290159748870985 0
+1571 0.7292643597955221 -0.6290159748870953 0
+1572 -0.1138627568724847 -0.6947480215610047 0
+1573 0.1138627568724844 0.6947480215610033 0
+1574 -0.2222597848038218 -0.4267719629614552 0
+1575 0.2222597848038155 0.4267719629614654 0
+1576 0.5392039862498208 -0.7193609360185695 0
+1577 -0.5392039862498128 0.7193609360185822 0
+1578 -0.5392039862523103 -0.7193609360167562 0
+1579 0.5392039862523107 0.7193609360167562 0
+1580 -0.7903594660344312 0.1066206014729189 0
+1581 0.7903594660344316 -0.1066206014729165 0
+1582 -0.8931885972455154 0.1755150005761848 0
+1583 0.8931885972455166 -0.1755150005761807 0
+1584 0.1702254087704465 -0.9506877322630117 0
+1585 -0.1702254087704593 0.9506877322630035 0
+1586 0.170277134796608 0.9445050595300044 0
+1587 -0.1702771347966066 -0.9445050595300057 0
+1588 0.2319588021066283 -0.2901416007286444 0
+1589 -0.2319588021066074 0.2901416007286166 0
+1590 0.6308111341303531 0.5059985319707957 0
+1591 -0.6308111341303542 -0.5059985319707979 0
+1592 -0.4289809430804196 -0.08318124004465433 0
+1593 0.4289809430804196 0.08318124004463585 0
+1594 0.5130780919140233 -0.1464608727189493 0
+1595 -0.5130780919140221 0.1464608727189274 0
+1596 -0.3579513188115026 -0.1074646129050726 0
+1597 0.3579513188115125 0.107464612905059 0
+1598 -0.3997861370053562 -0.2712637460805328 0
+1599 0.3997861370053631 0.2712637460805267 0
+1600 0.2149531192489799 -0.4084458187115736 0
+1601 -0.2149531192489712 0.4084458187115319 0
+1602 -0.2835303420332524 -0.07294375838438773 0
+1603 0.2835303420332753 0.0729437583843932 0
+1604 -0.2276744443539871 -0.4732439653344589 0
+1605 0.2276744443539828 0.4732439653344676 0
+1606 0.7805070152083168 0.3260729954358467 0
+1607 -0.7805070152083166 -0.3260729954358464 0
+1608 0.444112208673783 0.5624895492713864 0
+1609 -0.4441122086737861 -0.5624895492713881 0
+1610 0.06901457800059871 0.781148708245351 0
+1611 -0.06901457800059191 -0.7811487082453468 0
+1612 -0.1070675972305489 -0.5938616155239783 0
+1613 0.1070675972305465 0.593861615523977 0
+1614 0.3340817585472722 -0.3713558015024629 0
+1615 -0.3340817585472541 0.371355801502436 0
+1616 -0.2011590514495998 0.7424170003484597 0
+1617 0.2011590514495863 -0.742417000348479 0
+1618 -0.1438672629526444 -0.7776660025926092 0
+1619 0.1438672629526489 0.7776660025926124 0
+1620 0.8540153792595853 0.09855351038678305 0
+1621 -0.8540153792595861 -0.0985535103867837 0
+1622 0.5470456639067143 -0.4487477447520226 0
+1623 -0.5470456639067072 0.4487477447520203 0
+1624 -0.4454682608460083 0.5600250409191357 0
+1625 0.4446241603215434 -0.5593719513136107 0
+1626 -0.1480919829516503 0.4993749303468764 0
+1627 0.1480919829516609 -0.4993749303469128 0
+1628 0.1462029329573267 -0.5764747077054823 0
+1629 -0.1462029329573347 0.5764747077054676 0
+1630 0.4954950345805422 -0.7615074193026719 0
+1631 -0.4954950345805426 0.7615074193026794 0
+1632 -0.4954430870117482 -0.7611796173639132 0
+1633 0.4954430870117504 0.7611796173639135 0
+1634 0.6079813238920633 0.1892712546514782 0
+1635 -0.6079813238920544 -0.1892712546514827 0
+1636 -0.8220596620404834 -0.02993206367328231 0
+1637 0.8220596620404845 0.02993206367328334 0
+1638 -0.7235885313163375 0.02852013466252193 0
+1639 0.7235885313163374 -0.02852013466252273 0
+1640 -0.7161270707883269 0.4643111867158299 0
+1641 0.7161270707883394 -0.4643111867158202 0
+1642 0.7141866299948187 0.4637991578546523 0
+1643 -0.7141866299948196 -0.4637991578546536 0
+1644 0.2048734454847587 0.7303242764430894 0
+1645 -0.2048734454847564 -0.7303242764430884 0
+1646 0.3876878557358432 -0.7648580915277574 0
+1647 -0.3876878557358543 0.7648580915277663 0
+1648 -0.3876462077639 -0.7640641552024821 0
+1649 0.3876462077639058 0.7640641552024833 0
+1650 -0.2436079997766318 -0.06841856503947534 0
+1651 0.243607999776658 0.06841856503948189 0
+1652 0.05649641412830322 -0.3533834815028525 0
+1653 -0.056496414128275 0.3533834815028212 0
+1654 0.03400283554339222 0.7650444910410957 0
+1655 -0.03400283554339804 -0.7650444910410943 0
+1656 0.2305119134074209 -0.706801633331805 0
+1657 -0.2305119134074338 0.7068016333317897 0
+1658 -0.006617535351928594 0.9652532001127602 0
+1659 0.006617535351924346 -0.9652532001127619 0
+1660 0.05110218276533084 0.1499943344889786 0
+1661 -0.05110218276529756 -0.1499943344890279 0
+1662 0.1193803969568805 -0.9629389740743567 0
+1663 -0.1193803969568894 0.9629389740743489 0
+1664 -0.1393599911172828 0.7755111073821288 0
+1665 0.1393599911172727 -0.7755111073821387 0
+1666 -0.2185340053508245 0.4911030490888266 0
+1667 0.2185298640254599 -0.4910997434703242 0
+1668 -0.151707029334116 -0.2115800768422141 0
+1669 0.1517070293341464 0.211580076842163 0
+1670 0.2380423018022043 0.850698154627911 0
+1671 -0.2380423018022003 -0.8506981546279134 0
+1672 -0.8219561037147962 -0.3943322743562914 0
+1673 0.8219561037147964 0.3943322743562919 0
+1674 0.2384028104629717 -0.8538640969307364 0
+1675 -0.2384028104629854 0.8538640969307284 0
+1676 -0.9562556480491416 -0.1654923807888143 0
+1677 0.9562556480491416 0.1654923807888146 0
+1678 0.1669838519392665 0.03949404024109084 0
+1679 -0.1669838519392346 -0.03949404024110486 0
+1680 -0.2251954881620312 0.2415836992551711 0
+1681 0.2251954881620574 -0.2415836992552012 0
+1682 -0.6599249339042937 -0.2905125269191028 0
+1683 0.6599249339042965 0.2905125269191008 0
+1684 0.7309386817987055 0.6354731385728934 0
+1685 -0.7309386817987058 -0.6354731385728937 0
+1686 -0.4917192091366633 0.004693451858188597 0
+1687 0.4917192091366533 -0.004693451858200097 0
+1688 0.6443139445365895 0.1365952950143625 0
+1689 -0.6443139445365877 -0.1365952950143678 0
+1690 -0.9197978975216071 0.3023700418107096 0
+1691 0.9197978975216077 -0.3023700418107029 0
+1692 0.4914297752308802 -0.3036296490202677 0
+1693 -0.4914297752308674 0.3036296490202547 0
+1694 -0.1012516807096455 0.3347478235786562 0
+1695 0.1012516807096811 -0.3347478235786945 0
+1696 -0.2711136782275806 0.1649598467687602 0
+1697 0.2711136782276026 -0.1649598467687949 0
+1698 -0.196625230020551 0.1251239612856629 0
+1699 0.1966252300205746 -0.1251239612857136 0
+1700 -0.2689709516958554 0.2313072804878276 0
+1701 0.268970951695876 -0.231307280487859 0
+1702 0.3605283907953397 -0.7005286178870317 0
+1703 -0.3605284232742427 0.7005286438118008 0
+1704 0.3607565657698194 0.6988151882274306 0
+1705 -0.3607565657698177 -0.6988151882274297 0
+1706 -0.01964130010283383 0.5281794060957454 0
+1707 0.0196413001028364 -0.528179406095779 0
+1708 0.4038859354053577 -0.1435208789178036 0
+1709 -0.4038859354053531 0.1435208789177776 0
+1710 -0.404435897574479 0.6218282588528796 0
+1711 0.4044358975745244 -0.6218282588528576 0
+1712 0.3592282484564329 0.404748799512507 0
+1713 -0.3592282484564354 -0.4047487995125121 0
+1714 0.1158089859907834 -0.07878730927867718 0
+1715 -0.1158089859907464 0.07878730927864171 0
+1716 -0.3086348222999328 -0.1050832248377111 0
+1717 0.3086348222999531 0.1050832248377064 0
+1718 0.1109299505657153 -0.6018452612754845 0
+1719 -0.1109299505657169 0.6018452612754905 0
+1720 -0.06992546382012035 0.7818847849628164 0
+1721 0.06992546382011162 -0.7818847849628175 0
+1722 -0.03460507484844755 0.7622394707637765 0
+1723 0.03460507484844063 -0.7622394707637751 0
+1724 0.3506009125865273 -0.6213787406503229 0
+1725 -0.3524856400149031 0.6194085689323841 0
+1726 0.6974961903705555 0.5317453467836767 0
+1727 -0.6974961903705563 -0.5317453467836779 0
+1728 -0.3437477690647927 0.2559143478830508 0
+1729 0.3437477690648096 -0.255914347883085 0
+1730 -0.5086044906842536 -0.1535075757710282 0
+1731 0.5086044906842624 0.1535075757710366 0
+1732 -0.8355032630320434 -0.1619490912938354 0
+1733 0.8355032630320446 0.1619490912938367 0
+1734 0.5051071406255265 0.2470583742006184 0
+1735 -0.5051071406255214 -0.2470583742006206 0
+1736 -0.1928879096249963 -0.01247857301497093 0
+1737 0.1928879096250114 0.01247857301499353 0
+1738 -0.1356615247612054 0.2728661800447053 0
+1739 0.135661524761237 -0.2728661800447354 0
+1740 -0.08570569420188021 0.1096270231125169 0
+1741 0.08570569420191801 -0.1096270231125516 0
+1742 0.8967868712455339 -0.3579858368574909 0
+1743 -0.8967868712455349 0.357985836857495 0
+1744 -0.6849006219201188 0.5060741896028914 0
+1745 0.6849006219201352 -0.5060741896028805 0
+1746 0.7569028570151094 0.04342859101213328 0
+1747 -0.7569028570151092 -0.04342859101213513 0
+1748 -0.2918256535546816 -0.1417643679153867 0
+1749 0.291825653554705 0.1417643679153791 0
+1750 -0.388065544997675 -0.1884181646475063 0
+1751 0.3880655449976883 0.1884181646474948 0
+1752 -0.3525058787832769 -0.1631975662060008 0
+1753 0.3525058787832941 0.1631975662059978 0
+1754 -0.2313368940093045 -0.02756658080357953 0
+1755 0.2313368940093249 0.027566580803598 0
+1756 -0.6523201216338067 0.3902985448706311 0
+1757 0.652320121633821 -0.3902985448706207 0
+1758 0.03041045921712981 0.9650338191809402 0
+1759 -0.03041045921713272 -0.9650338191809411 0
+1760 -0.8993022968406785 0.128000565300541 0
+1761 0.8993022968406793 -0.1280005653005372 0
+1762 0.5754611602569637 -0.2443785119894085 0
+1763 -0.575461160256963 0.2443785119894072 0
+1764 -0.1993607802625475 0.1695466031681978 0
+1765 0.1993607802625762 -0.1695466031682347 0
+1766 -0.2432121698554754 -0.5905460259564779 0
+1767 0.2432121698554757 0.5905460259564806 0
+1768 0.03626625311403866 -0.6199221111943765 0
+1769 -0.0362662531140359 0.6199221111943695 0
+1770 -0.2183007793683989 -0.3618168458153293 0
+1771 0.2183007793684024 0.3618168458153527 0
+1772 -0.2952048764159615 -0.03982404469587619 0
+1773 0.2952048764159665 0.0398240446958834 0
+1774 0.2662664734895125 -0.5419360653837917 0
+1775 -0.2663128563337049 0.5419730883114023 0
+1776 0.4757915058755019 0.433960222404645 0
+1777 -0.4757915058755054 -0.4339602224046479 0
+1778 -0.9535277966055282 0.1412966948792647 0
+1779 0.9535277966055294 -0.1412966948792596 0
+1780 0.05285406923920968 0.2695170538607985 0
+1781 -0.05285406923915775 -0.2695170538608245 0
+1782 0.4784059576242373 0.3538558910757482 0
+1783 -0.4784059576242374 -0.353855891075752 0
+1784 -0.1373890486496201 0.1434010097830596 0
+1785 0.1373890486496547 -0.1434010097830934 0
+1786 0.7361940104204586 -0.06912251061218232 0
+1787 -0.736194010420458 0.06912251061218433 0
+1788 -0.04014826614757168 0.06128968322775346 0
+1789 0.0401482661476104 -0.06128968322779283 0
+1790 0.2425278823904528 0.7046579149326564 0
+1791 -0.24252788239045 -0.7046579149326568 0
+1792 0.2647060985569104 0.4177123936904957 0
+1793 -0.2647060985569186 -0.4177123936904905 0
+1794 0.9161675940635114 0.1200698948899595 0
+1795 -0.9161675940635114 -0.1200698948899588 0
+1796 -0.568845598141665 0.4861600666774973 0
+1797 0.5688455981416766 -0.4861600666774941 0
+1798 -0.1603846048747085 -0.3294992996486363 0
+1799 -0.177306571113942 -0.3681473870843123 0
+1800 0.1603846048747448 0.3294992996486402 0
+1801 0.1773065711139608 0.3681473870843332 0
+1802 -0.1155937069668127 0.6954657755724747 0
+1803 0.1155937069668124 -0.695465775572485 0
+1804 -0.4747052419244936 0.6834601670647309 0
+1805 0.4747052419244914 -0.683460167064735 0
+1806 0.4778816225342485 0.6909587553740854 0
+1807 -0.4778816225342475 -0.6909587553740864 0
+1808 -0.3879976680116725 0.2389970778156516 0
+1809 0.3879976680116825 -0.2389970778156855 0
+1810 -0.6017684445915156 0.6063547255691285 0
+1811 0.6017682128740625 -0.6063545406115254 0
+1812 -0.8269125310053701 0.1065222539729069 0
+1813 0.8269125310053711 -0.1065222539729038 0
+1814 -0.343856004863935 0.7258770267743934 0
+1815 0.3438559983681502 -0.7258770215894382 0
+1816 0.343103222586586 0.725598346905054 0
+1817 -0.3431032225865833 -0.7255983469050543 0
+1818 -0.9269425914985532 0.07493263837111085 0
+1819 0.9269425914985527 -0.07493263837110825 0
+1820 -0.8138595220561302 0.2705803754012168 0
+1821 0.8138595220561333 -0.2705803754012115 0
+1822 0.5834489106772863 -0.3163101352625332 0
+1823 -0.58344891067728 0.316310135262529 0
+1824 0.6033598080357671 0.6047757083526866 0
+1825 -0.6033598080357687 -0.6047757083526875 0
+1826 0.467259332724881 0.1768584113784151 0
+1827 -0.4672593327248635 -0.1768584113784216 0
+1828 -0.406576716549931 0.3029063589099677 0
+1829 0.4065767165499401 -0.3029063589099957 0
+1830 -0.6253553297515813 0.02321751614196091 0
+1831 0.6253553297515797 -0.02321751614196223 0
+1832 0.02515263973530073 0.2970248888253659 0
+1833 -0.02515263973525451 -0.2970248888253884 0
+1834 0.7399560784683721 0.5282822711671878 0
+1835 -0.7399560784683733 -0.528282271167189 0
+1836 -0.330123473247048 0.5091801976467963 0
+1837 0.3294140733637468 -0.5087913612008481 0
+1838 -0.5872357241772296 0.3837796556947552 0
+1839 0.5872357241772403 -0.3837796556947584 0
+1840 0.7442296228367178 -0.5319897736704789 0
+1841 -0.7442296228367022 0.5319897736704919 0
+1842 0.8449280811797704 -0.04208661074398326 0
+1843 -0.8449280811797695 0.04208661074398572 0
+1844 -0.00769010323143459 0.3486579076841743 0
+1845 0.0076901032314723 -0.3486579076841995 0
+1846 0.813341930809808 0.2778713594905033 0
+1847 -0.8133419308098065 -0.2778713594905031 0
+1848 -0.5080058007221131 0.4673589336890732 0
+1849 0.5080043815199027 -0.4673578008775417 0
+1850 -0.392105764919537 0.8356741637647929 0
+1851 0.3921057649195307 -0.8356741637647908 0
+1852 -0.391959769469521 -0.8358254763192842 0
+1853 0.3919597694695249 0.8358254763192835 0
+1854 -0.3999960962442631 -0.06495771266536367 0
+1855 0.3999960962442634 0.06495771266534954 0
+1856 -0.473630118334382 0.4228204388931626 0
+1857 0.4736301183343862 -0.4228204388931792 0
+1858 0.0257597263686387 -0.4560288208015135 0
+1859 -0.02575972636862933 0.4560288208014927 0
+1860 0.04886210993413353 -0.4987757929941305 0
+1861 -0.04886210993412946 0.4987757929941117 0
+1862 0.4719331765348801 -0.6108045139264712 0
+1863 -0.4720642908358686 0.6109091697612635 0
+1864 -0.4670148769521276 -0.6157719472159678 0
+1865 0.4670148769521221 0.6157719472159663 0
+1866 -0.5625700386228489 0.5494972716335526 0
+1867 0.5625691652262467 -0.5494965744856976 0
+1868 0.4111214475965557 -0.8727383809313203 0
+1869 -0.4111214475965616 0.8727383809313191 0
+1870 -0.4111214475995081 -0.8727383809300063 0
+1871 0.4111214475995117 0.8727383809300056 0
+1872 -0.08688512746232935 0.7225042364083739 0
+1873 0.0868851274623256 -0.7225042364083832 0
+1874 -0.713497415357023 0.5932108628758204 0
+1875 0.7134974153570355 -0.5932108628758086 0
+1876 0.07147220009725141 0.3326521738983527 0
+1877 -0.07147220009720777 -0.3326521738983721 0
+1878 -0.02017282562202458 0.4116732318094471 0
+1879 0.02017282562204421 -0.4116732318094736 0
+1880 -0.9183039075353918 -0.3104486358297554 0
+1881 0.9183039075353912 0.3104486358297561 0
+1882 0.6860254078420618 0.03953293123624779 0
+1883 -0.6860254078420622 -0.03953293123624974 0
+1884 -0.6884314429583336 -0.07907168082316589 0
+1885 0.6884314429583369 0.079071680823162 0
+1886 -0.1660665366779795 -0.167516321085496 0
+1887 0.1660665366780121 0.1675163210854629 0
+1888 -0.14959307867902 0.4424380171551587 0
+1889 0.1495930786790271 -0.4424380171551837 0
+1890 0.0845351981454238 0.7152421749198322 0
+1891 -0.0845351981454219 -0.7152421749198274 0
+1892 0.3888422842497485 -0.06881815218276484 0
+1893 -0.3888422842497477 0.06881815218274878 0
+1894 -0.5354447100298027 -0.2800376621522487 0
+1895 0.5354447100298051 0.2800376621522456 0
+1896 0.09667269773569151 0.7571830654521982 0
+1897 -0.09667269773568976 -0.7571830654521998 0
+1898 0.05218896722639803 0.9240391989461626 0
+1899 -0.05218896722639797 -0.9240391989461666 0
+1900 0.003913364854844311 -0.9064699097792717 0
+1901 -0.00391336485485089 0.906469909779269 0
+1902 -0.3339444633651887 -0.2411014225371383 0
+1903 0.3339444633652007 0.2411014225371311 0
+1904 -0.459850362173377 -0.02581380478008774 0
+1905 0.4598503621733712 0.02581380478007171 0
+1906 -0.366619796493851 -0.2971217968306497 0
+1907 0.3666197964938572 0.2971217968306443 0
+1908 -0.4676960974931122 -0.2700544726195159 0
+1909 0.4676960974931165 0.2700544726195102 0
+1910 -0.07624425786020919 -0.5177495213024427 0
+1911 0.07624425786019176 0.5177495213024302 0
+1912 -0.6780982942964415 -0.1464890473158131 0
+1913 0.6780982942964425 0.1464890473158033 0
+1914 -0.09984084170900344 0.7608059021976666 0
+1915 0.09984084170899585 -0.7608059021976735 0
+1916 -0.1799835847636278 0.3458020419939175 0
+1917 0.179983584763646 -0.3458020419939449 0
+1918 0.6809747993353414 0.1846063873291048 0
+1919 -0.6809747993353383 -0.1846063873291102 0
+1920 -0.7622490553820828 0.372472030893944 0
+1921 0.7622490553820928 -0.3724720308939375 0
+1922 -1.129344538244401 0.1941053451698195 0
+1923 1.129344538244401 -0.1941053451698198 0
+1924 1.072052457515525 -0.4012444900950647 0
+1925 -1.072052457515525 0.4012444900950654 0
+1926 0.02994852424730878 1.145512573907929 0
+1927 -0.02994852424730877 -1.145512573907929 0
+1928 -0.6613139754588377 -0.9358203871194907 0
+1929 0.6613139754588382 0.9358203871194904 0
+1930 -1.145512573907998 -0.02994852424281639 0
+1931 1.145512573907999 0.02994852424281678 0
+1932 0.1843876305691445 -1.129732186931879 0
+1933 -0.1843876305691459 1.12973218693188 0
+1934 -0.6149188471642677 0.9710629749672427 0
+1935 0.6149188471642676 -0.9710629749672419 0
+1936 -0.4106998550185159 1.069776425321571 0
+1937 0.4106998550185162 -1.069776425321571 0
+1938 0.9731743533716399 -0.6026817488827354 0
+1939 -0.9731743533716393 0.6026817488827355 0
+1940 -0.8324395562819632 0.7925483424292129 0
+1941 0.8324395562819639 -0.7925483424292131 0
+1942 -0.2528514886692573 -1.11765920376616 0
+1943 0.2528514886692568 1.117659203766161 0
+1944 0.4743328626414008 1.041778262354791 0
+1945 -0.4743328626414003 -1.041778262354791 0
+1946 0.9397629714853462 0.6631554203400779 0
+1947 -0.939762971485346 -0.6631554203400785 0
+1948 0.83118630710095 0.7912719315281714 0
+1949 -0.8311863071009492 -0.7912719315281711 0
+1950 -1.046854817215583 -0.4660375121788757 0
+1951 1.046854817215583 0.4660375121788751 0
+1952 -1.117659203767 -0.252851488665159 0
+1953 1.117659203766999 0.2528514886651591 0
+1954 -0.7249962610229215 0.8832939994886665 0
+1955 0.7249962610229218 -0.883293999488666 0
+1956 -0.1399273913548312 -1.105189899804694 0
+1957 0.139927391354831 1.105189899804694 0
+1958 1.111252465616563 -0.07837312768050386 0
+1959 -1.111252465616563 0.07837312768050385 0
+1960 -0.7303559840063214 -0.841192324089835 0
+1961 0.7303559840063214 0.8411923240898351 0
+1962 0.3493503418059064 1.057498578086473 0
+1963 -0.3493503418059063 -1.057498578086473 0
+1964 -0.551186878798368 -0.9661491708115543 0
+1965 0.551186878798368 0.966149170811554 0
+1966 0.8793733209378647 -0.6808500335675518 0
+1967 -0.8793733209378649 0.6808500335675512 0
+1968 0.9675144335635028 0.5522139171807646 0
+1969 -0.9675144335635026 -0.5522139171807648 0
+1970 -1.072918610016505 0.2934226506240774 0
+1971 1.072918610016504 -0.2934226506240775 0
+1972 -1.105189899805255 -0.1399273913506963 0
+1973 1.105189899805255 0.1399273913506965 0
+1974 -1.056655505941545 -0.3528505792048794 0
+1975 1.056655505941545 0.3528505792048793 0
+1976 -0.9953036614483939 0.4962104667312126 0
+1977 0.9953036614483939 -0.4962104667312124 0
+1978 0.2970405381863357 -1.073366583534274 0
+1979 -0.2970405381863359 1.073366583534275 0
+1980 -0.4971006537895222 0.9950588603800424 0
+1981 0.4971006537895224 -0.9950588603800424 0
+1982 -0.07846857953982465 1.109546699172157 0
+1983 0.0784685795398247 -1.109546699172158 0
+1984 -0.9290361456727361 -0.7624402606645457 0
+1985 0.9290361456727364 0.7624402606645456 0
+1986 0.8489566888879192 0.6965211477732913 0
+1987 -0.8489566888879192 -0.6965211477732914 0
+1988 1.065491389413536 0.569216897351642 0
+1989 -1.065491389413535 -0.5692168973516432 0
+1990 -0.7661466125484707 -0.9339695633292787 0
+1991 0.7661466125484708 0.9339695633292782 0
+1992 0.5716126045337775 -1.064380260728856 0
+1993 -0.5716126045337773 1.064380260728857 0
+1994 1.156066978934865 0.3504124960124437 0
+1995 -1.156066978934865 -0.3504124960124443 0
+1996 0.5692168973550281 1.065491389411814 0
+1997 -0.5692168973550281 -1.065491389411814 0
+1998 -0.9324124053844141 0.76827951643682 0
+1999 0.9324124053844139 -0.7682795164368197 0
+2000 1.155913314833109 -0.3509190586682988 0
+2001 -1.15591331483311 0.350919058668299 0
+2002 0.3509190586635309 -1.155913314834498 0
+2003 -0.350919058663532 1.155913314834498 0
+2004 -1.20221556278529 -0.1181419389647532 0
+2005 1.20221556278529 0.1181419389647537 0
+2006 0.350412496016528 1.156066978933634 0
+2007 -0.3504124960165281 -1.156066978933634 0
+2008 1.065241852453368 -0.5696837481680433 0
+2009 -1.065241852453368 0.5696837481680442 0
+2010 -1.202163676767591 0.1186687465416989 0
+2011 1.202163676767591 -0.1186687465416981 0
+2012 0.1181419389693654 1.202215562784833 0
+2013 -0.1181419389693653 -1.202215562784833 0
+2014 -0.118668746536901 1.202163676768045 0
+2015 0.1186687465369009 -1.202163676768045 0
+2016 0.7091890603223704 -0.9750087116584879 0
+2017 -0.7091890603223702 0.9750087116584883 0
+2018 -0.8162468419823234 0.8874575187967634 0
+2019 0.816246841982323 -0.8874575187967635 0
+2020 0.7489984354571277 -0.7914734469470359 0
+2021 -0.7489984354571272 0.7914734469470359 0
+2022 -0.6310181466276199 0.8878558112644964 0
+2023 0.6310181466276208 -0.887855811264496 0
+2024 1.026966400487477 0.6425513872379055 0
+2025 -1.026966400487477 -0.6425513872379075 0
+2026 -1.132589086115075 -0.4298537367337261 0
+2027 1.132589086115074 0.4298537367337271 0
+2028 -1.194687008326217 -0.2006370481913738 0
+2029 1.194687008326217 0.200637048191374 0
+2030 -0.6425513872408405 -1.026966400485489 0
+2031 0.6425513872408407 1.026966400485489 0
+2032 -0.200637048195903 -1.194687008325513 0
+2033 0.2006370481959042 1.194687008325514 0
+2034 0.4298537367376028 1.132589086113662 0
+2035 -0.4298537367376038 -1.132589086113663 0
+2036 -0.8305561482793342 -0.8818779720160634 0
+2037 0.8305561482793347 0.8818779720160632 0
+2038 1.104813915252746 -0.4969089309275742 0
+2039 -1.104813915252746 0.496908930927575 0
+2040 1.210873778795784 -0.03629000959325354 0
+2041 -1.210873778795783 0.03629000959325421 0
+2042 -0.9866431023174691 0.7028994676489695 0
+2043 0.9866431023174697 -0.7028994676489692 0
+2044 -1.180527349011807 0.2718224626604988 0
+2045 1.180527349011808 -0.2718224626604992 0
+2046 0.4969089309226202 -1.104813915255342 0
+2047 -0.4969089309226194 1.104813915255342 0
+2048 -0.2718224626555882 1.180527349013071 0
+2049 0.2718224626555874 -1.180527349013071 0
+2050 -0.03629000958841844 1.210873778795977 0
+2051 0.0362900095884188 -1.210873778795978 0
+2052 -1.07891546924331 0.009120890410999944 0
+2053 1.07891546924331 -0.009120890410999921 0
+2054 0.009120890406689862 -1.078915469243336 0
+2055 -0.009120890406689855 1.078915469243336 0
+2056 0.5918295754464615 0.9021527221270473 0
+2057 -0.5918295754464604 -0.9021527221270474 0
+2058 -1.05640501358588 0.2194316013817204 0
+2059 1.056405013585879 -0.2194316013817207 0
+2060 -0.201540331267954 -1.059963808479774 0
+2061 0.2015403312679542 1.059963808479774 0
+2062 -1.015418588746353 0.3581131586530493 0
+2063 1.015418588746353 -0.3581131586530492 0
+2064 -0.4647851269340184 -0.9712336127591054 0
+2065 0.4647851269340184 0.971233612759105 0
+2066 -0.1531337752621038 1.065772016730616 0
+2067 0.1531337752621027 -1.065772016730616 0
+2068 -0.4213096789657558 0.9932975056970289 0
+2069 0.421309678965756 -0.993297505697028 0
+2070 0.9260431938505727 -0.5493304541850197 0
+2071 -0.9260431938505728 0.5493304541850196 0
+2072 -1.000278332991943 -0.4044564710340072 0
+2073 1.000278332991944 0.4044564710340068 0
+2074 -1.059963808480539 -0.2015403312639466 0
+2075 1.05996380848054 0.2015403312639468 0
+2076 -0.5541190503716263 0.9177444786444567 0
+2077 0.554119050371627 -0.9177444786444565 0
+2078 0.7920070118505109 -0.7225148740661788 0
+2079 -0.7920070118505107 0.7225148740661789 0
+2080 0.753665720440591 0.7696731499286552 0
+2081 -0.7536657204405907 -0.7696731499286553 0
+2082 0.9017439511400334 0.5888281268957402 0
+2083 -0.9017439511400334 -0.5888281268957403 0
+2084 -1.03935567705471 -0.2751221844590312 0
+2085 1.03935567705471 0.2751221844590321 0
+2086 0.9657110735984522 0.4726040225563757 0
+2087 -0.9657110735984518 -0.4726040225563759 0
+2088 0.275122184462715 1.039355677053518 0
+2089 -0.275122184462715 -1.039355677053518 0
+2090 1.073058424718454 0.06706755510334693 0
+2091 -1.073058424718453 -0.06706755510334647 0
+2092 0.4007586727896044 1.001306641242944 0
+2093 -0.4007586727896043 -1.001306641242945 0
+2094 -0.06706755510750995 -1.07305842471807 0
+2095 0.06706755510750974 1.07305842471807 0
+2096 -0.6519239531082103 -0.8549547351586494 0
+2097 0.6519239531082106 0.8549547351586488 0
+2098 -0.9914098912169489 0.4246515409253048 0
+2099 0.9914098912169488 -0.4246515409253047 0
+2100 1.065524138898048 -0.1435644427824291 0
+2101 -1.065524138898047 0.1435644427824286 0
+2102 -0.8895148222881777 0.6099064555673192 0
+2103 0.8895148222881775 -0.6099064555673195 0
+2104 -0.2230775057087201 1.055205634016282 0
+2105 0.2230775057087194 -1.055205634016282 0
+2106 0.3486793396391511 -1.017042357974594 0
+2107 -0.3486793396391509 1.017042357974593 0
+2108 -0.8854008270460972 0.8485428120660795 0
+2109 0.8854008270460969 -0.8485428120660804 0
+2110 0.6595051674000368 -1.033930588876777 0
+2111 -0.6595051674000378 1.033930588876777 0
+2112 -0.9902895565855899 -0.7185611647858403 0
+2113 0.9902895565855908 0.71856116478584 0
+2114 -0.8973913092906073 -0.8317463551475283 0
+2115 0.8973913092906074 0.8317463551475286 0
+2116 -1.224005480693666 -0.03971039988210808 0
+2117 1.224005480693666 0.03971039988210837 0
+2118 0.03971039988691895 1.224005480693535 0
+2119 -0.03971039988691911 -1.224005480693535 0
+2120 1.115637099165832 0.505094244266286 0
+2121 -1.115637099165832 -0.5050942442662881 0
+2122 -1.192739443896396 -0.2777389990624174 0
+2123 1.192739443896396 0.2777389990624161 0
+2124 -0.7130390009257347 -0.9956614463687771 0
+2125 0.7130390009257352 0.995661446368777 0
+2126 0.2777389990668215 1.192739443895472 0
+2127 -0.2777389990668226 -1.192739443895472 0
+2128 0.5050942442698907 1.115637099164405 0
+2129 -0.5050942442698896 -1.115637099164406 0
+2130 1.14603012342223 -0.4317189929056572 0
+2131 -1.14603012342223 0.4317189929056593 0
+2132 1.208233673297657 -0.1998442476941713 0
+2133 -1.208233673297657 0.1998442476941706 0
+2134 -1.0397852786049 0.6470030193307015 0
+2135 1.039785278604901 -0.6470030193306994 0
+2136 0.4317189929008091 -1.146030123423956 0
+2137 -0.4317189929008119 1.146030123423955 0
+2138 0.1998442476892864 -1.208233673298429 0
+2139 -0.1998442476892859 1.20823367329843 0
+2140 -0.7798855200993073 0.9502932558002688 0
+2141 0.779885520099308 -0.950293255800269 0
+2142 -0.6777315643982296 0.8284496210875035 0
+2143 0.6777315643982307 -0.8284496210875032 0
+2144 -0.8542234956896939 -0.6332268743238796 0
+2145 0.8542234956896938 0.6332268743238797 0
+2146 -0.7910801406413492 -0.7128727503113991 0
+2147 0.7910801406413495 0.7128727503113992 0
+2148 -0.9793277235575251 -0.6131097689256266 0
+2149 0.9793277235575251 0.613109768925626 0
+2150 0.7921573414667789 0.8408039200000559 0
+2151 -0.7921573414667786 -0.8408039200000559 0
+2152 1.151962466199818 -0.03414900420621906 0
+2153 -1.151962466199817 0.03414900420621928 0
+2154 0.6115554108528523 0.9767317622875978 0
+2155 -0.611555410852852 -0.9767317622875984 0
+2156 -0.03415335240976249 1.15188476182478 0
+2157 0.03415335240976249 -1.151884761824781 0
+2158 0.4723607976012549 -1.051132833135302 0
+2159 -0.4723607976012535 1.051132833135302 0
+2160 -1.077342802883977 -0.4092873844809989 0
+2161 1.077342802883977 0.4092873844809986 0
+2162 1.051426244650452 -0.4777799267123592 0
+2163 -1.051426244650451 0.4777799267123596 0
+2164 -0.4040210567212412 -1.084316424060494 0
+2165 0.404021056721242 1.084316424060494 0
+2166 1.123088630598124 -0.2582186744338271 0
+2167 -1.123088630598123 0.2582186744338253 0
+2168 -1.13648997065253 -0.191243887816363 0
+2169 1.136489970652529 0.1912438878163631 0
+2170 0.9380131444278574 -0.6737226040364518 0
+2171 -0.9380131444278572 0.6737226040364515 0
+2172 0.1912438878205435 1.136489970651874 0
+2173 -0.191243887820544 -1.136489970651874 0
+2174 0.2664826969885692 -1.126038229354289 0
+2175 -0.2664826969885699 1.12603822935429 0
+2176 1.021918297631763 0.5242511412629448 0
+2177 -1.021918297631762 -0.524251141262945 0
+2178 -1.144751625240751 -0.09327369757250582 0
+2179 1.144751625240751 0.0932736975725062 0
+2180 1.104558748058465 0.3148114328254306 0
+2181 -1.104558748058467 -0.31481143282543 0
+2182 0.09327369757686196 1.144751625240392 0
+2183 -0.09327369757686203 -1.144751625240393 0
+2184 -0.7135441723473178 -0.900006100123337 0
+2185 0.7135441723473178 0.9000061001233365 0
+2186 -0.5230662471106498 -1.018758363014962 0
+2187 0.5230662471106499 1.018758363014962 0
+2188 0.3143113989146188 1.104679186935381 0
+2189 -0.314311398914619 -1.10467918693538 0
+2190 1.090234637218523 -0.3505072565414405 0
+2191 -1.090234637218523 0.3505072565414408 0
+2192 -0.8727777821408663 0.7432717586028575 0
+2193 0.8727777821408662 -0.7432717586028574 0
+2194 0.558810337021012 -1.000987748819342 0
+2195 -0.5588103370210119 1.000987748819343 0
+2196 1.140952339448758 -0.1318484935690954 0
+2197 -1.140952339448758 0.1318484935690959 0
+2198 -1.000930490523258 0.5563757489236064 0
+2199 1.000930490523259 -0.556375748923606 0
+2200 0.3523864962997864 -1.09312923241553 0
+2201 -0.3523864962997865 1.09312923241553 0
+2202 -0.1310781314381538 1.137666657917792 0
+2203 0.1310781314381534 -1.137666657917792 0
+2204 -1.050622107810588 0.0860167900348664 0
+2205 1.050622107810588 -0.08601679003486667 0
+2206 -0.1206022038006693 -1.047215741873078 0
+2207 0.1206022038006692 1.047215741873078 0
+2208 -0.8309667027881724 0.6484927797769436 0
+2209 0.8309667027881725 -0.6484927797769439 0
+2210 -0.5195456860790171 -0.9171263962193923 0
+2211 0.519545686079017 0.9171263962193921 0
+2212 0.07754167547947659 -1.051206846975987 0
+2213 -0.0775416754794766 1.051206846975987 0
+2214 -1.015880571733224 0.28113201621379 0
+2215 1.015880571733224 -0.2811320162137899 0
+2216 0.3242256378821596 1.003017688767081 0
+2217 -0.3242256378821597 -1.003017688767081 0
+2218 -0.6820789613718514 -0.8037250724235979 0
+2219 0.6820789613718514 0.8037250724235978 0
+2220 -0.9415145758315225 0.4739186112216413 0
+2221 0.9415145758315224 -0.4739186112216412 0
+2222 1.047215741873556 0.120602203796721 0
+2223 -1.047215741873556 -0.1206022037967209 0
+2224 -0.2876630056427721 1.014108842000726 0
+2225 0.287663005642772 -1.014108842000726 0
+2226 -0.4739186112174713 0.9415145758334996 0
+2227 0.4739186112174712 -0.9415145758334995 0
+2228 0.9213487247402067 0.5121740221918611 0
+2229 -0.9213487247402063 -0.5121740221918613 0
+2230 1.003565462261386 0.3225865225713266 0
+2231 -1.003565462261387 -0.3225865225713263 0
+2232 -0.6831295573916347 0.9253232882490171 0
+2233 0.6831295573916355 -0.9253232882490169 0
+2234 0.7740081995294341 -0.8501882550635989 0
+2235 -0.7740081995294342 0.8501882550635995 0
+2236 -0.9130389004223025 -0.7122045805744897 0
+2237 0.9130389004223028 0.7122045805744894 0
+2238 1.07917019055047 0.6179108575200015 0
+2239 -1.079170190550469 -0.6179108575200036 0
+2240 1.178982666112693 0.3955022136712003 0
+2241 -1.178982666112693 -0.3955022136711988 0
+2242 1.233487498996903 0.1578946415509997 0
+2243 -1.233487498996904 -0.1578946415509994 0
+2244 0.6179108575230645 1.079170190548312 0
+2245 -0.6179108575230646 -1.079170190548312 0
+2246 0.8165735336446014 0.9378858097682186 0
+2247 -0.8165735336446002 -0.9378858097682194 0
+2248 0.3955022136752341 1.178982666111168 0
+2249 -0.3955022136752347 -1.178982666111169 0
+2250 0.1578946415557043 1.233487498996258 0
+2251 -0.1578946415557031 -1.233487498996257 0
+2252 -0.9838557468044193 0.7605590032951383 0
+2253 0.9838557468044202 -0.7605590032951376 0
+2254 -1.113328935370739 0.5540043408487874 0
+2255 1.113328935370739 -0.5540043408487868 0
+2256 -0.5540043408438433 1.113328935373619 0
+2257 0.5540043408438433 -1.11332893537362 0
+2258 -1.200017517312969 0.3261596022729897 0
+2259 1.200017517312969 -0.3261596022729897 0
+2260 1.240590099042513 -0.08578073309437179 0
+2261 -1.240590099042513 0.08578073309437366 0
+2262 -0.326159602268018 1.200017517314484 0
+2263 0.3261596022680185 -1.200017517314483 0
+2264 0.085780733089405 -1.240590099042898 0
+2265 -0.08578073308940533 1.240590099042898 0
+2266 -0.7514271863039055 0.7408925473296143 0
+2267 0.7514271863039059 -0.7408925473296141 0
+2268 0.5794312590569922 -0.8819149997660046 0
+2269 -0.5794312590569914 0.8819149997660048 0
+2270 -0.8763949041207567 -0.7571510741774879 0
+2271 0.8763949041207568 0.7571510741774881 0
+2272 0.9331907150981348 -0.8317537633864589 0
+2273 -0.9331907150981348 0.8317537633864588 0
+2274 -0.6337153709342503 1.077526826716876 0
+2275 0.6337153709342502 -1.077526826716876 0
+2276 -1.15648830558856 -0.1406862954434563 0
+2277 1.15648830558856 0.1406862954434567 0
+2278 -1.106820172398128 -0.36360272367148 0
+2279 1.106820172398127 0.3636027236714798 0
+2280 1.015124314329356 0.5728476176262377 0
+2281 -1.015124314329356 -0.572847617626238 0
+2282 -0.1406862954478028 -1.156488305588004 0
+2283 0.1406862954478027 1.156488305588004 0
+2284 0.5720943595060235 1.013700082600868 0
+2285 -0.5720943595060235 -1.013700082600868 0
+2286 0.3617494038591353 1.108407598837234 0
+2287 -0.3617494038591348 -1.108407598837233 0
+2288 -0.7598356294299666 -0.8838430563417791 0
+2289 0.7598356294299666 0.8838430563417785 0
+2290 1.161713241760873 -0.08763662822019193 0
+2291 -1.161713241760873 0.08763662822019282 0
+2292 -1.038973304856978 0.5259098393814889 0
+2293 1.038973304856979 -0.5259098393814885 0
+2294 -0.9160902195502646 0.7193059594355256 0
+2295 0.9160902195502646 -0.7193059594355254 0
+2296 -1.121326003580224 0.3122624014162071 0
+2297 1.121326003580224 -0.3122624014162074 0
+2298 -0.08750251580466561 1.160699411290936 0
+2299 0.08750251580466523 -1.160699411290936 0
+2300 0.3150146313893709 -1.122584437074939 0
+2301 -0.3150146313893714 1.12258443707494 0
+2302 -0.5258767398626093 1.038704795655041 0
+2303 0.5258767398626097 -1.038704795655041 0
+2304 -0.8694968746126293 0.8984408871058031 0
+2305 0.8694968746126287 -0.8984408871058037 0
+2306 0.7110023113329231 -1.028027040252884 0
+2307 -0.7110023113329237 1.028027040252883 0
+2308 -0.7574086789980687 0.9955752652404232 0
+2309 0.7574086789980691 -0.9955752652404229 0
+2310 -0.8304461517458702 0.9378661785974254 0
+2311 0.8304461517458708 -0.9378661785974254 0
+2312 0.9865344265208522 0.7684147404174108 0
+2313 -0.9865344265208513 -0.768414740417411 0
+2314 -0.9464904874057831 -0.8160689548433023 0
+2315 0.9464904874057835 0.8160689548433028 0
+2316 -1.246372091529154 -0.07929264816165693 0
+2317 1.246372091529153 0.07929264816165725 0
+2318 0.07929264816663245 1.246372091528886 0
+2319 -0.0792926481666323 -1.246372091528886 0
+2320 0.3209241948546894 1.206954173012333 0
+2321 -0.3209241948546899 -1.206954173012333 0
+2322 1.237892629540563 -0.1653860705268642 0
+2323 -1.237892629540563 0.1653860705268639 0
+2324 -1.181841648016958 0.4037090952747003 0
+2325 1.181841648016958 -0.403709095274699 0
+2326 1.206954173013443 0.3209241948499432 0
+2327 -1.206954173013442 -0.3209241948499439 0
+2328 -0.5502228047105475 -1.121153682494612 0
+2329 0.550222804710548 1.121153682494611 0
+2330 -0.7583766607497866 -0.9922678847088106 0
+2331 0.7583766607497866 0.9922678847088107 0
+2332 0.1653860705219451 -1.237892629541186 0
+2333 -0.1653860705219451 1.237892629541186 0
+2334 -1.080373154744581 0.6265178058938375 0
+2335 1.080373154744581 -0.626517805893836 0
+2336 1.121153682496373 0.5502228047063559 0
+2337 -1.121153682496372 -0.5502228047063569 0
+2338 -0.403709095269934 1.181841648018464 0
+2339 0.4037090952699323 -1.181841648018464 0
+2340 1.037158237173312 0.6937552893170135 0
+2341 -1.037158237173311 -0.6937552893170148 0
+2342 -0.8827645104386007 -0.8818845896726366 0
+2343 0.8827645104386005 0.8818845896726368 0
+2344 -0.6120951705744038 1.022180493444387 0
+2345 0.612095170574404 -1.022180493444385 0
+2346 0.8831283023837737 -0.7997463399285926 0
+2347 -0.8831283023837733 0.7997463399285921 0
+2348 -0.6014488656277163 -0.8534158162081106 0
+2349 0.6014488656277164 0.8534158162081104 0
+2350 -0.22907820302377 -1.01861792160681 0
+2351 0.2290782030237699 1.01861792160681 0
+2352 0.9543545234733127 0.4233990279219367 0
+2353 -0.9543545234733122 -0.4233990279219366 0
+2354 1.018617921607688 0.2290782030200899 0
+2355 -1.018617921607688 -0.2290782030200898 0
+2356 0.422544665990173 0.9574289988190104 0
+2357 -0.422544665990173 -0.9574289988190104 0
+2358 -1.028744682233921 0.1781675393952453 0
+2359 1.028744682233922 -0.1781675393952454 0
+2360 -0.9757887362437705 0.3782203388978878 0
+2361 0.9757887362437706 -0.3782203388978878 0
+2362 -0.883252101582683 0.5613198799134196 0
+2363 0.8832521015826827 -0.5613198799134196 0
+2364 -1.043736404261592 -0.0259540312445736 0
+2365 1.043736404261592 0.02595403124457366 0
+2366 0.02595403124865796 1.043736404261463 0
+2367 -0.02595403124865799 -1.043736404261463 0
+2368 0.1805860023629081 -1.030826357000443 0
+2369 -0.1805860023629087 1.030826357000443 0
+2370 -0.3754422314094403 0.9742188789963283 0
+2371 0.3754422314094402 -0.9742188789963281 0
+2372 0.7334849209198632 -0.9310366212227067 0
+2373 -0.7334849209198622 0.9310366212227079 0
+2374 -1.221662010413224 -0.2408359673424336 0
+2375 1.221662010413224 0.2408359673424333 0
+2376 -0.2408359673470828 -1.221662010412405 0
+2377 0.2408359673470833 1.221662010412406 0
+2378 -1.151203351018772 -0.4745428067684687 0
+2379 1.151203351018772 0.4745428067684684 0
+2380 0.474542806772444 1.151203351017323 0
+2381 0.6900132322599721 1.036504592444736 0
+2382 -0.6900132322599722 -1.036504592444736 0
+2383 -0.4745428067724438 -1.151203351017324 0
+2384 -1.245172883863358 0.002126063245693066 0
+2385 1.245172883863358 -0.002126063245693056 0
+2386 -0.002126063240737192 1.245172883863404 0
+2387 0.002126063240737838 -1.245172883863403 0
+2388 1.149576132659377 -0.4784712594014763 0
+2389 -1.149576132659377 0.4784712594014778 0
+2390 -1.220832461687253 0.2450063904147643 0
+2391 1.220832461687253 -0.2450063904147653 0
+2392 1.034142237543245 -0.6935487462192708 0
+2393 -1.034142237543244 0.6935487462192724 0
+2394 -0.24500639040977 1.220832461688278 0
+2395 0.245006390409769 -1.220832461688278 0
+2396 0.4784712593964836 -1.14957613266152 0
+2397 -0.4784712593964846 1.149576132661519 0
+2398 -0.8132255698161532 -0.6618829773023687 0
+2399 0.8132255698161536 0.6618829773023686 0
+2400 -0.6884677819732821 0.7889104490433668 0
+2401 0.6884677819732827 -0.7889104490433665 0
+2402 -0.7701756964569288 0.8980980469367871 0
+2403 0.7701756964569282 -0.8980980469367837 0
+2404 -0.5995502183059125 0.9266550053163883 0
+2405 0.599550218305913 -0.926655005316388 0
+2406 0.7920177148956441 -0.7687964318793341 0
+2407 -0.7920177148956441 0.7687964318793342 0
+2408 -0.8274211714054682 -0.7419011904938181 0
+2409 0.8274211714054683 0.7419011904938183 0
+2410 0.6304778370318085 -0.8360996481393115 0
+2411 -0.630477837031808 0.8360996481393123 0
+2412 0.6618202567461839 -0.9851964390622334 0
+2413 -0.6618202567461839 0.9851964390622335 0
+2414 0.8368658095282228 -0.8415745467035578 0
+2415 -0.836865809528223 0.8415745467035576 0
+2416 -0.8961748487706702 -0.6588483755592767 0
+2417 0.8961748487706706 0.6588483755592763 0
+2418 0.9872837951433103 0.6700241868938633 0
+2419 -0.9872837951433098 -0.6700241868938639 0
+2420 -0.849759373538149 -0.8375981794749545 0
+2421 0.8497593735381492 0.8375981794749553 0
+2422 -1.184827956898722 -0.06182268804748286 0
+2423 1.184827956898722 0.06182268804748319 0
+2424 0.06182268805209672 1.184827956898501 0
+2425 -0.06182268805209648 -1.184827956898501 0
+2426 -0.2917615562602967 -1.150006037020738 0
+2427 0.2917615562602957 1.150006037020739 0
+2428 1.150000811817044 0.2917832500778846 0
+2429 -1.150000811817045 -0.2917832500778852 0
+2430 -0.510839230464422 -1.070622442831686 0
+2431 0.5108392304644225 1.070622442831687 0
+2432 1.070979780464865 0.5105307454414825 0
+2433 -1.070979780464865 -0.5105307454414835 0
+2434 -1.118262273372643 0.3958265054640256 0
+2435 1.118262273372643 -0.3958265054640246 0
+2436 1.174122828055554 -0.1705136852129819 0
+2437 -1.174122828055554 0.1705136852129832 0
+2438 0.7096588305692515 0.9508015967597262 0
+2439 -0.7096588305692512 -0.9508015967597264 0
+2440 -1.019554340677623 0.60637901629576 0
+2441 1.019554340677624 -0.6063790162957595 0
+2442 -0.1700586631374981 1.173997097768276 0
+2443 0.1700586631374988 -1.173997097768276 0
+2444 -0.3963182538927958 1.1182891095449 0
+2445 0.3963182538927949 -1.1182891095449 0
+2446 -0.02997783803244031 -1.09974372047706 0
+2447 0.02997783803244 1.099743720477059 0
+2448 -1.099743720477153 -0.02997783802808988 0
+2449 1.099743720477153 0.02997783802809059 0
+2450 1.084460839334237 -0.1851475342865757 0
+2451 -1.084460839334238 0.1851475342865759 0
+2452 1.026741135712071 -0.3985022296327085 0
+2453 -1.026741135712071 0.3985022296327086 0
+2454 -0.1905378622344757 1.084756520994787 0
+2455 0.1905378622344735 -1.084756520994787 0
+2456 0.39315779068606 -1.027502736310115 0
+2457 -0.3931577906860597 1.027502736310115 0
+2458 0.92926866438787 -0.5911523798245961 0
+2459 -0.92926866438787 0.591152379824596 0
+2460 0.6359105364145561 0.897748690435534 0
+2461 -0.635910536414555 -0.8977486904355345 0
+2462 0.4442319906983863 1.007799248474418 0
+2463 -0.4442319906983861 -1.007799248474419 0
+2464 0.2439511788438199 1.072764067184587 0
+2465 -0.24395117884382 -1.072764067184587 0
+2466 -1.004558692404553 -0.4485496126584727 0
+2467 1.004558692404554 0.4485496126584725 0
+2468 1.072764067185446 0.2439511788398278 0
+2469 -1.072764067185446 -0.243951178839827 0
+2470 -1.168873074812068 -0.242515106859272 0
+2471 1.168873074812068 0.2425151068592717 0
+2472 -1.099101156144017 -0.4658910716449735 0
+2473 1.099101156144017 0.465891071644973 0
+2474 -0.2425114912266511 -1.168873945678693 0
+2475 0.2425114912266508 1.168873945678694 0
+2476 -0.6713553062179145 -0.9870810309109695 0
+2477 0.6713553062179149 0.9870810309109693 0
+2478 0.4611748435421488 1.09146509673689 0
+2479 -0.4611748435421483 -1.09146509673689 0
+2480 -1.193725856726557 -0.009819422521206796 0
+2481 1.193725856726557 0.00981942252120711 0
+2482 1.097741190410315 -0.4452165777618506 0
+2483 -1.097741190410314 0.4452165777618515 0
+2484 -0.00981869782456754 -1.193712905997354 0
+2485 0.009818697824567721 1.193712905997354 0
+2486 1.172691580149133 -0.2232518009310107 0
+2487 -1.172691580149132 0.2232518009310103 0
+2488 0.9897911105439889 -0.6508199854065299 0
+2489 -0.9897911105439881 0.6508199854065304 0
+2490 -0.2229326497636619 1.163735076115163 0
+2491 0.2229326497636613 -1.163735076115163 0
+2492 0.4477463482887464 -1.106603089890432 0
+2493 -0.4477463482887467 1.106603089890431 0
+2494 -0.7176545530488905 0.8359942000629532 0
+2495 0.7176545530488914 -0.8359942000629532 0
+2496 -0.6787737275012488 0.8739849642769427 0
+2497 0.6787737275012498 -0.8739849642769428 0
+2498 -0.02567885437371833 1.038827041305021 0
+2499 0.02567885437371838 -1.038827041305021 0
+2500 -1.037042441757611 0.02545796301768272 0
+2501 1.037042441757611 -0.02545796301768272 0
+2502 -0.4212660657734561 0.9499241691504607 0
+2503 0.4212660657734561 -0.9499241691504605 0
+2504 0.1273339689266452 -1.033559235797778 0
+2505 -0.1273339689266452 1.033559235797778 0
+2506 -1.013856575027214 0.2278505443981891 0
+2507 1.013856575027214 -0.2278505443981891 0
+2508 -0.511397671213231 0.9059818824095073 0
+2509 0.5113976712132309 -0.9059818824095071 0
+2510 -0.988858059892619 0.3265246865566616 0
+2511 0.9888580598926188 -0.3265246865566615 0
+2512 -0.9061556233043717 0.5131672435954783 0
+2513 0.9061556233043715 -0.5131672435954779 0
+2514 0.7888049582211797 -0.6783196055418085 0
+2515 -0.7888049582211796 0.6783196055418087 0
+2516 0.555790194315395 0.8780195243907067 0
+2517 -0.5557901943153949 -0.8780195243907066 0
+2518 0.7152982446638585 0.7513012412263231 0
+2519 -0.7152982446638581 -0.7513012412263227 0
+2520 0.1773481485146513 1.022082564231393 0
+2521 -0.1773481485146513 -1.022082564231393 0
+2522 -0.4683404196961348 -0.9301160598680333 0
+2523 0.4683404196961347 0.9301160598680333 0
+2524 0.9678446269532562 0.3733388701501557 0
+2525 -0.9678446269532561 -0.3733388701501557 0
+2526 0.8764129634340456 0.5549823883800346 0
+2527 -0.8764129634340455 -0.5549823883800344 0
+2528 1.022082564232026 0.1773481485108721 0
+2529 -1.022082564232026 -0.1773481485108721 0
+2530 1.067623513115821 0.6610680212786948 0
+2531 -1.067623513115821 -0.6610680212786957 0
+2532 -0.8566487995839677 -0.9181414535278206 0
+2533 0.856648799583969 0.9181414535278191 0
+2534 0.9578502280315769 0.7008874666325347 0
+2535 -0.957850228031576 -0.700887466632535 0
+2536 0.9239161649096578 0.465060315574047 0
+2537 -0.9239161649096582 -0.4650603155740473 0
+2538 -0.9968921415925058 -0.2758772098858509 0
+2539 0.9968921415925059 0.2758772098858509 0
+2540 -0.2758772098892922 -0.9968921415914364 0
+2541 0.2758772098892922 0.9968921415914362 0
+2542 -0.6363714141453828 -0.815434608145537 0
+2543 0.6363714141453829 0.815434608145537 0
+2544 -0.3720581926319151 -0.9707496603354046 0
+2545 0.3720581926319151 0.9707496603354047 0
+2546 -0.8505628769951776 0.6014921435705037 0
+2547 0.8505628769951776 -0.6014921435705042 0
+2548 1.026581883328565 -0.1266167987434943 0
+2549 -1.026581883328564 0.1266167987434942 0
+2550 -1.031558112336977 -0.07609229773517337 0
+2551 1.031558112336979 0.07609229773517349 0
+2552 -0.9515648457935109 0.4239980551244502 0
+2553 0.9515648457935109 -0.4239980551244502 0
+2554 -0.07609229773912293 -1.031558112336621 0
+2555 0.07609229773912293 1.031558112336621 0
+2556 0.229964533814998 -1.013853300499114 0
+2557 -0.2299645338149982 1.013853300499114 0
+2558 0.3244600826494049 -0.9821546882591999 0
+2559 -0.3244600826494048 0.9821546882591997 0
+2560 0.5976310142080773 -1.112042543902231 0
+2561 -0.5976310142080773 1.112042543902232 0
+2562 0.9740829312291107 -0.8030964398371029 0
+2563 -0.9740829312291113 0.8030964398371034 0
+2564 -0.7537909048053406 -0.7201597587913801 0
+2565 0.7537909048053408 0.7201597587913801 0
+2566 -0.8538583974540358 -0.5973520278689318 0
+2567 0.8538583974540357 0.5973520278689317 0
+2568 0.455069422987558 -1.00952422247922 0
+2569 -0.4550694229875573 1.009524222479219 0
+2570 1.107182989639796 -0.03408117124710063 0
+2571 -1.107182989639795 0.03408117124710083 0
+2572 0.03410113125706051 -1.106826295475981 0
+2573 -0.03410113125706082 1.10682629547598 0
+2574 1.078906137887194 -0.2493769859862352 0
+2575 -1.078906137887194 0.2493769859862351 0
+2576 0.7574209200389717 0.8079202225893981 0
+2577 -0.7574209200389714 -0.8079202225893986 0
+2578 -0.5865656885053202 -0.9392380042238032 0
+2579 0.5865656885053202 0.9392380042238025 0
+2580 -0.9401566605574014 -0.5852507131628755 0
+2581 0.9401566605574017 0.5852507131628749 0
+2582 0.1825743748861144 1.092557685623933 0
+2583 -0.1825743748861143 -1.092557685623933 0
+2584 -1.035946002464138 -0.3922136901737163 0
+2585 1.035946002464138 0.3922136901737159 0
+2586 -1.09255768562458 -0.1825743748820157 0
+2587 1.09255768562458 0.1825743748820154 0
+2588 -1.178491393008701 -0.4382798736251459 0
+2589 1.178491393008702 0.4382798736251471 0
+2590 -1.241351173023611 -0.1999461833919096 0
+2591 1.241351173023612 0.1999461833919086 0
+2592 0.659770714107815 1.070342849663704 0
+2593 -0.6597707141078152 -1.070342849663704 0
+2594 -0.1999461833965624 -1.241351173022866 0
+2595 0.1999461833965626 1.241351173022866 0
+2596 0.4382798736290375 1.178491393007252 0
+2597 -0.438279873629038 -1.178491393007251 0
+2598 1.143229926264198 -0.5234085848691498 0
+2599 -1.143229926264198 0.5234085848691508 0
+2600 -1.223375033164402 0.2903183412234115 0
+2601 1.223375033164402 -0.2903183412234118 0
+2602 1.019151134428546 -0.7363845301294124 0
+2603 -1.019151134428545 0.7363845301294135 0
+2604 -1.25650652361689 0.04607132653701903 0
+2605 1.256506523616892 -0.04607132653701858 0
+2606 0.2903183412183185 -1.223375033165695 0
+2607 -0.290318341218318 1.223375033165695 0
+2608 0.5234085848639998 -1.143229926266787 0
+2609 -0.5234085848640022 1.143229926266787 0
+2610 -0.04607132653201077 1.2565065236171 0
+2611 0.04607132653201029 -1.2565065236171 0
+2612 -0.1175950314414472 1.082549930151212 0
+2613 -1.038807384241318 0.3265304903617788 0
+2614 0.1175950314414469 -1.082549930151211 0
+2615 1.038807384241317 -0.3265304903617786 0
+2616 0.9551761698839794 -0.5228007772636075 0
+2617 -0.9551761698839791 0.5228007772636077 0
+2618 -0.5036558217490817 -0.9654396697404981 0
+2619 0.5036558217490816 0.965439669740498 0
+2620 -0.5283764411983638 0.9536328895593562 0
+2621 0.5283764411983639 -0.9536328895593558 0
+2622 0.8323039684262683 -0.7041167934207418 0
+2623 -0.8323039684262684 0.7041167934207417 0
+2624 -0.2535841853521814 1.08093163051682 0
+2625 0.2535841853521807 -1.080931630516819 0
+2626 -1.010594805830324 0.4580334374193059 0
+2627 1.010594805830324 -0.4580334374193057 0
+2628 0.901818619210236 -0.6463897194503668 0
+2629 -0.901818619210236 0.6463897194503662 0
+2630 0.3896858935640882 1.039645628697343 0
+2631 -0.3896858935640878 -1.039645628697343 0
+2632 0.8733752207140988 0.8028352523144421 0
+2633 -0.873375220714099 -0.8028352523144417 0
+2634 -0.5711549788122364 0.9540166194613574 0
+2635 0.5711549788122365 -0.9540166194613569 0
+2636 0.8243092067190505 -0.746249640079665 0
+2637 -0.8243092067190506 0.7462496400796651 0
+2638 0.928552379293111 0.6219131519663258 0
+2639 -0.9285523792931094 -0.6219131519663259 0
+2640 0.788841838776002 0.7919090845374939 0
+2641 -0.7888418387760014 -0.7919090845374942 0
+2642 0.6380874052471242 -0.9392187037718752 0
+2643 -0.6380874052471237 0.9392187037718757 0
+2644 0.7968659431384786 -0.8089162046045479 0
+2645 -0.7968659431384784 0.8089162046045479 0
+2646 -0.6919325974789835 -0.8637141799787278 0
+2647 0.6919325974789831 0.863714179978727 0
+2648 -0.9821075074558868 -0.5101350291336595 0
+2649 0.9821075074558893 0.5101350291336602 0
+2650 -1.100008385470674 0.1214679218739834 0
+2651 1.100008385470673 -0.121467921873984 0
+2652 0.3337349399523395 -1.055174816798302 0
+2653 -0.3337349399523399 1.055174816798302 0
+2654 0.3087332577112585 1.062758994190668 0
+2655 -0.3087332577112593 -1.062758994190667 0
+2656 -0.09546704033145073 -1.102569248782359 0
+2657 0.09546704033145063 1.102569248782358 0
+2658 -1.062758994191745 -0.3087332577076838 0
+2659 1.062758994191742 0.3087332577076862 0
+2660 -1.102569248782719 -0.09546704032732245 0
+2661 1.102569248782718 0.09546704032732284 0
+2662 -0.7135798196014078 0.7519054520143074 0
+2663 0.7135798196014085 -0.7519054520143069 0
+2664 0.1246086802272931 1.257519294416955 0
+2665 -0.1246086802272924 -1.257519294416956 0
+2666 1.257519294417278 0.1246086802222856 0
+2667 -1.257519294417278 -0.1246086802222848 0
+2668 0.3675442034670818 1.209046466235259 0
+2669 -0.3675442034670829 -1.209046466235258 0
+2670 1.257666361338289 -0.1231154847166353 0
+2671 -1.257666361338289 0.1231154847166351 0
+2672 1.209046466236264 0.3675442034622993 0
+2673 -1.209046466236264 -0.3675442034623003 0
+2674 -0.5963552090883912 -1.114110660397245 0
+2675 0.5963552090883909 1.114110660397245 0
+2676 0.1231154847116371 -1.257666361338754 0
+2677 -0.1231154847116375 1.257666361338754 0
+2678 -1.209482015300221 0.3661083906218545 0
+2679 1.209482015300221 -0.366108390621854 0
+2680 -1.114817953699634 0.5950319563914067 0
+2681 1.114817953699635 -0.5950319563914054 0
+2682 0.8022486184641748 0.9763602066806617 0
+2683 -0.8022486184641748 -0.9763602066806625 0
+2684 -0.3661083906169679 1.209482015301486 0
+2685 0.366108390616967 -1.209482015301487 0
+2686 1.114110660398803 0.5963552090840801 0
+2687 -1.114110660398802 -0.5963552090840814 0
+2688 0.6822184314854123 -1.066605862066489 0
+2689 -0.6822184314854124 1.066605862066489 0
+2690 -0.9131950625045488 0.8775966674660355 0
+2691 0.9131950625045491 -0.8775966674660359 0
+2692 0.5938630014367201 -0.8467464316605718 0
+2693 -0.5938630014367199 0.8467464316605723 0
+2694 0.4311652031772256 -1.032026748106577 0
+2695 -0.4311652031772252 1.032026748106575 0
+2696 0.003405168089675697 -1.118468169447868 0
+2697 -0.003405168089676415 1.118468169447866 0
+2698 1.11853022638197 -0.00340169549090991 0
+2699 -1.118530226381969 0.003401695490910624 0
+2700 1.096312801854142 -0.2215420540860039 0
+2701 -1.096312801854141 0.221542054086004 0
+2702 0.6185563277346329 0.931864105251906 0
+2703 -0.6185563277346331 -0.9318641052519069 0
+2704 -1.034688955155076 -0.4249002293973438 0
+2705 1.034688955155076 0.4249002293973431 0
+2706 0.2148780891882848 1.097701619589108 0
+2707 -0.2148780891882847 -1.097701619589107 0
+2708 -1.097701619589829 -0.2148780891841766 0
+2709 1.097701619589829 0.2148780891841763 0
+2710 0.5267714371763285 -1.078141761343279 0
+2711 -0.5267714371763281 1.078141761343279 0
+2712 -0.3071399400659708 1.160669388645367 0
+2713 0.3071399400659708 -1.160669388645367 0
+2714 0.7955453984037164 0.9004856081768432 0
+2715 -0.7955453984037162 -0.9004856081768443 0
+2716 0.9545726483483639 -0.7276239588383518 0
+2717 -0.9545726483483636 0.7276239588383522 0
+2718 1.158546066543707 -0.3051244190112297 0
+2719 -1.158546066543708 0.3051244190112294 0
+2720 -1.076816114714732 0.5261836283975286 0
+2721 1.076816114714732 -0.5261836283975279 0
+2722 1.197758419823514 -0.0737974707502308 0
+2723 -1.197758419823514 0.07379747075023269 0
+2724 -0.07324041366093216 1.195811749895207 0
+2725 0.07324041366093167 -1.195811749895207 0
+2726 -1.038398253787749 -0.6046012257724825 0
+2727 1.03839825378775 0.604601225772482 0
+2728 -0.6034602341863211 -1.034971325755844 0
+2729 0.6034602341863211 1.034971325755843 0
+2730 -0.3894558358193025 -1.13569913466052 0
+2731 0.3894558358193033 1.13569913466052 0
+2732 1.134825558374418 0.3901823304664648 0
+2733 -1.13482555837442 -0.3901823304664646 0
+2734 0.1612916027829486 1.189140999974078 0
+2735 -0.1612916027829484 -1.189140999974078 0
+2736 -1.189140999974752 -0.1612916027784868 0
+2737 1.189140999974752 0.1612916027784872 0
+2738 -0.1553464861890653 1.100095462545257 0
+2739 0.1553464861890642 -1.100095462545257 0
+2740 1.048650840686758 -0.3669795250568083 0
+2741 -1.048650840686758 0.3669795250568086 0
+2742 0.9569185744034642 -0.5644682218159128 0
+2743 -0.9569185744034637 0.5644682218159131 0
+2744 0.4820144098267075 1.001001831268755 0
+2745 -0.4820144098267072 -1.001001831268755 0
+2746 -1.262909640639825 -0.0335829490569349 0
+2747 1.262909640639825 0.03358294905693502 0
+2748 -0.03358294906203432 -1.262909640639712 0
+2749 0.03358294906203443 1.262909640639712 0
+2750 -0.2793191105823311 -1.232091477671865 0
+2751 0.2793191105823308 1.232091477671865 0
+2752 1.23209147767294 0.2793191105772752 0
+2753 -1.232091477672939 -0.2793191105772756 0
+2754 1.245194894364648 -0.2134437863619345 0
+2755 -1.245194894364648 0.2134437863619341 0
+2756 0.5143211953268333 1.153924730182023 0
+2757 -0.514321195326833 -1.153924730182023 0
+2758 -1.179628006612411 0.4522679967716478 0
+2759 1.179628006612412 -0.4522679967716467 0
+2760 -0.7295582049695056 -1.03141330243973 0
+2761 0.7295582049695056 1.03141330243973 0
+2762 -0.2134437863570879 1.245194894365469 0
+2763 0.2134437863570877 -1.245194894365469 0
+2764 1.153924730183957 0.5143211953221795 0
+2765 -1.153924730183957 -0.5143211953221801 0
+2766 -1.06872867610907 0.6737118017003167 0
+2767 1.068728676109071 -0.6737118017003157 0
+2768 -0.4522679967671369 1.179628006614108 0
+2769 0.4522679967671357 -1.179628006614108 0
+2770 -0.8046892055255533 0.9804455559740552 0
+2771 0.8046892055255536 -0.9804455559740554 0
+2772 -0.9188217229163124 -0.8653947754118279 0
+2773 0.9188217229163121 0.8653947754118283 0
+2774 1.028019683262912 0.7323366757413414 0
+2775 -1.028019683262911 -0.7323366757413418 0
+2776 0.7777660421722323 0.6777642507626638 0
+2777 -0.7777660421722323 -0.6777642507626641 0
+2778 -0.7909976805282831 -0.7546313109318195 0
+2779 0.7909976805282835 0.7546313109318196 0
+2780 0.4531796464164062 -0.9760899494435573 0
+2781 -0.4531796464164055 0.9760899494435569 0
+2782 0.04514994772583641 -1.075213868749394 0
+2783 -0.04514994772583628 1.075213868749394 0
+2784 1.075170029020105 -0.04631263506053675 0
+2785 -1.075170029020104 0.04631263506053648 0
+2786 1.045745617913111 -0.2540462240347521 0
+2787 -1.045745617913112 0.2540462240347521 0
+2788 0.72691633537724 0.7931851192007182 0
+2789 -0.7269163353772399 -0.7931851192007185 0
+2790 0.559816010076857 0.9190916255697513 0
+2791 -0.5598160100768566 -0.9190916255697515 0
+2792 0.1643325164240573 1.063546085280299 0
+2793 -0.1643325164240573 -1.063546085280299 0
+2794 0.9197331849506525 0.5581776021713123 0
+2795 -0.9197331849506525 -0.5581776021713124 0
+2796 -1.011050661927626 -0.3686624614537343 0
+2797 1.011050661927626 0.3686624614537343 0
+2798 1.063546085280916 0.1643325164200674 0
+2799 -1.063546085280915 -0.1643325164200674 0
+2800 -0.9082632931530747 -0.7952044652162066 0
+2801 0.908263293153075 0.7952044652162072 0
+2802 0.541457285442891 -0.8819484292216276 0
+2803 -0.5414572854428906 0.8819484292216271 0
+2804 -0.7593689612773479 0.7031129385911606 0
+2805 0.7593689612773487 -0.7031129385911602 0
+2806 -0.8885358422877041 -0.6231855711018187 0
+2807 0.8885358422877037 0.6231855711018184 0
+2808 -0.4290342199928113 -1.044385216927813 0
+2809 0.4290342199928118 1.044385216927813 0
+2810 0.936930119038295 -0.6291121488613332 0
+2811 -0.9369301190382947 0.6291121488613332 0
+2812 -1.041660954222606 0.434238033757766 0
+2813 1.041660954222606 -0.4342380337577655 0
+2814 -0.2235004217694591 1.106733212988203 0
+2815 0.2235004217694581 -1.106733212988203 0
+2816 0.9856161698389492 0.8083970730469193 0
+2817 -0.985616169838949 -0.8083970730469195 0
+2818 -0.9563572986108171 -0.7347845963159466 0
+2819 0.9563572986108181 0.7347845963159467 0
+2820 0.6497914880074828 -0.8056321958383429 0
+2821 -0.6497914880074814 0.8056321958383437 0
+2822 0.799404855230658 -0.919661334053234 0
+2823 -0.799404855230658 0.9196613340532365 0
+2824 -0.8704472684439257 0.6374262263865367 0
+2825 0.8704472684439258 -0.6374262263865373 0
+2826 0.97807755602414 -0.4553624222843828 0
+2827 -0.97807755602414 0.455362422284383 0
+2828 0.2583285375322681 -1.045421348063104 0
+2829 -0.2583285375322686 1.045421348063105 0
+2830 0.3660126529988562 1.012755728758954 0
+2831 -0.3660126529988562 -1.012755728758954 0
+2832 -1.004230077661247 -0.4843154635580658 0
+2833 1.004230077661248 0.4843154635580657 0
+2834 -1.079419338051474 -0.2790939084994262 0
+2835 1.079419338051472 0.2790939084994272 0
+2836 -0.6709250469615808 -0.8904488185631478 0
+2837 0.6709250469615811 0.8904488185631473 0
+2838 -0.2789939017203341 -1.079443425826062 0
+2839 0.2789939017203338 1.079443425826063 0
+2840 1.113127118625415 0.06314693105481665 0
+2841 -1.113127118625415 -0.0631469310548162 0
+2842 -0.06314693105911437 -1.113127118625162 0
+2843 0.06314693105911422 1.113127118625162 0
+2844 1.104058048279223 -0.1552267475363808 0
+2845 -1.104058048279223 0.1552267475363806 0
+2846 0.3677316843191707 -1.052525113764022 0
+2847 -0.3677316843191706 1.052525113764022 0
+2848 -0.8197224401978529 -0.6266885096017649 0
+2849 0.8197224401978536 0.6266885096017647 0
+$EndNodes
+$Elements
+5824
+1 1 2 9 1 1 5
+2 1 2 9 1 5 6
+3 1 2 9 1 6 7
+4 1 2 9 1 7 8
+5 1 2 9 1 8 9
+6 1 2 9 1 9 10
+7 1 2 9 1 10 11
+8 1 2 9 1 11 12
+9 1 2 9 1 12 13
+10 1 2 9 1 13 14
+11 1 2 9 1 14 15
+12 1 2 9 1 15 16
+13 1 2 9 1 16 17
+14 1 2 9 1 17 18
+15 1 2 9 1 18 19
+16 1 2 9 1 19 20
+17 1 2 9 1 20 21
+18 1 2 9 1 21 22
+19 1 2 9 1 22 23
+20 1 2 9 1 23 24
+21 1 2 9 1 24 25
+22 1 2 9 1 25 26
+23 1 2 9 1 26 27
+24 1 2 9 1 27 28
+25 1 2 9 1 28 29
+26 1 2 9 1 29 30
+27 1 2 9 1 30 31
+28 1 2 9 1 31 32
+29 1 2 9 1 32 33
+30 1 2 9 1 33 34
+31 1 2 9 1 34 35
+32 1 2 9 1 35 36
+33 1 2 9 1 36 37
+34 1 2 9 1 37 38
+35 1 2 9 1 38 39
+36 1 2 9 1 39 40
+37 1 2 9 1 40 41
+38 1 2 9 1 41 42
+39 1 2 9 1 42 43
+40 1 2 9 1 43 44
+41 1 2 9 1 44 45
+42 1 2 9 1 45 46
+43 1 2 9 1 46 47
+44 1 2 9 1 47 48
+45 1 2 9 1 48 49
+46 1 2 9 1 49 50
+47 1 2 9 1 50 51
+48 1 2 9 1 51 52
+49 1 2 9 1 52 53
+50 1 2 9 1 53 54
+51 1 2 9 1 54 55
+52 1 2 9 1 55 56
+53 1 2 9 1 56 57
+54 1 2 9 1 57 58
+55 1 2 9 1 58 59
+56 1 2 9 1 59 60
+57 1 2 9 1 60 61
+58 1 2 9 1 61 62
+59 1 2 9 1 62 63
+60 1 2 9 1 63 64
+61 1 2 9 1 64 65
+62 1 2 9 1 65 66
+63 1 2 9 1 66 67
+64 1 2 9 1 67 2
+65 1 2 9 2 2 68
+66 1 2 9 2 68 69
+67 1 2 9 2 69 70
+68 1 2 9 2 70 71
+69 1 2 9 2 71 72
+70 1 2 9 2 72 73
+71 1 2 9 2 73 74
+72 1 2 9 2 74 75
+73 1 2 9 2 75 76
+74 1 2 9 2 76 77
+75 1 2 9 2 77 78
+76 1 2 9 2 78 79
+77 1 2 9 2 79 80
+78 1 2 9 2 80 81
+79 1 2 9 2 81 82
+80 1 2 9 2 82 83
+81 1 2 9 2 83 84
+82 1 2 9 2 84 85
+83 1 2 9 2 85 86
+84 1 2 9 2 86 87
+85 1 2 9 2 87 88
+86 1 2 9 2 88 89
+87 1 2 9 2 89 90
+88 1 2 9 2 90 91
+89 1 2 9 2 91 92
+90 1 2 9 2 92 93
+91 1 2 9 2 93 94
+92 1 2 9 2 94 95
+93 1 2 9 2 95 96
+94 1 2 9 2 96 97
+95 1 2 9 2 97 98
+96 1 2 9 2 98 99
+97 1 2 9 2 99 100
+98 1 2 9 2 100 101
+99 1 2 9 2 101 102
+100 1 2 9 2 102 103
+101 1 2 9 2 103 104
+102 1 2 9 2 104 105
+103 1 2 9 2 105 106
+104 1 2 9 2 106 107
+105 1 2 9 2 107 108
+106 1 2 9 2 108 109
+107 1 2 9 2 109 110
+108 1 2 9 2 110 111
+109 1 2 9 2 111 112
+110 1 2 9 2 112 113
+111 1 2 9 2 113 114
+112 1 2 9 2 114 115
+113 1 2 9 2 115 116
+114 1 2 9 2 116 117
+115 1 2 9 2 117 118
+116 1 2 9 2 118 119
+117 1 2 9 2 119 120
+118 1 2 9 2 120 121
+119 1 2 9 2 121 122
+120 1 2 9 2 122 123
+121 1 2 9 2 123 124
+122 1 2 9 2 124 125
+123 1 2 9 2 125 126
+124 1 2 9 2 126 127
+125 1 2 9 2 127 128
+126 1 2 9 2 128 129
+127 1 2 9 2 129 130
+128 1 2 9 2 130 1
+129 1 2 99 5 3 131
+130 1 2 99 5 131 132
+131 1 2 99 5 132 133
+132 1 2 99 5 133 134
+133 1 2 99 5 134 135
+134 1 2 99 5 135 136
+135 1 2 99 5 136 137
+136 1 2 99 5 137 138
+137 1 2 99 5 138 139
+138 1 2 99 5 139 140
+139 1 2 99 5 140 141
+140 1 2 99 5 141 142
+141 1 2 99 5 142 143
+142 1 2 99 5 143 144
+143 1 2 99 5 144 145
+144 1 2 99 5 145 146
+145 1 2 99 5 146 147
+146 1 2 99 5 147 148
+147 1 2 99 5 148 149
+148 1 2 99 5 149 150
+149 1 2 99 5 150 151
+150 1 2 99 5 151 152
+151 1 2 99 5 152 153
+152 1 2 99 5 153 154
+153 1 2 99 5 154 155
+154 1 2 99 5 155 156
+155 1 2 99 5 156 157
+156 1 2 99 5 157 158
+157 1 2 99 5 158 159
+158 1 2 99 5 159 160
+159 1 2 99 5 160 161
+160 1 2 99 5 161 162
+161 1 2 99 5 162 163
+162 1 2 99 5 163 164
+163 1 2 99 5 164 165
+164 1 2 99 5 165 166
+165 1 2 99 5 166 167
+166 1 2 99 5 167 168
+167 1 2 99 5 168 169
+168 1 2 99 5 169 170
+169 1 2 99 5 170 171
+170 1 2 99 5 171 172
+171 1 2 99 5 172 173
+172 1 2 99 5 173 174
+173 1 2 99 5 174 175
+174 1 2 99 5 175 176
+175 1 2 99 5 176 177
+176 1 2 99 5 177 178
+177 1 2 99 5 178 179
+178 1 2 99 5 179 180
+179 1 2 99 5 180 181
+180 1 2 99 5 181 182
+181 1 2 99 5 182 183
+182 1 2 99 5 183 184
+183 1 2 99 5 184 185
+184 1 2 99 5 185 186
+185 1 2 99 5 186 187
+186 1 2 99 5 187 188
+187 1 2 99 5 188 189
+188 1 2 99 5 189 190
+189 1 2 99 5 190 191
+190 1 2 99 5 191 192
+191 1 2 99 5 192 193
+192 1 2 99 5 193 194
+193 1 2 99 5 194 195
+194 1 2 99 5 195 196
+195 1 2 99 5 196 197
+196 1 2 99 5 197 198
+197 1 2 99 5 198 199
+198 1 2 99 5 199 200
+199 1 2 99 5 200 201
+200 1 2 99 5 201 202
+201 1 2 99 5 202 203
+202 1 2 99 5 203 204
+203 1 2 99 5 204 205
+204 1 2 99 5 205 206
+205 1 2 99 5 206 207
+206 1 2 99 5 207 208
+207 1 2 99 5 208 209
+208 1 2 99 5 209 4
+209 1 2 99 6 4 210
+210 1 2 99 6 210 211
+211 1 2 99 6 211 212
+212 1 2 99 6 212 213
+213 1 2 99 6 213 214
+214 1 2 99 6 214 215
+215 1 2 99 6 215 216
+216 1 2 99 6 216 217
+217 1 2 99 6 217 218
+218 1 2 99 6 218 219
+219 1 2 99 6 219 220
+220 1 2 99 6 220 221
+221 1 2 99 6 221 222
+222 1 2 99 6 222 223
+223 1 2 99 6 223 224
+224 1 2 99 6 224 225
+225 1 2 99 6 225 226
+226 1 2 99 6 226 227
+227 1 2 99 6 227 228
+228 1 2 99 6 228 229
+229 1 2 99 6 229 230
+230 1 2 99 6 230 231
+231 1 2 99 6 231 232
+232 1 2 99 6 232 233
+233 1 2 99 6 233 234
+234 1 2 99 6 234 235
+235 1 2 99 6 235 236
+236 1 2 99 6 236 237
+237 1 2 99 6 237 238
+238 1 2 99 6 238 239
+239 1 2 99 6 239 240
+240 1 2 99 6 240 241
+241 1 2 99 6 241 242
+242 1 2 99 6 242 243
+243 1 2 99 6 243 244
+244 1 2 99 6 244 245
+245 1 2 99 6 245 246
+246 1 2 99 6 246 247
+247 1 2 99 6 247 248
+248 1 2 99 6 248 249
+249 1 2 99 6 249 250
+250 1 2 99 6 250 251
+251 1 2 99 6 251 252
+252 1 2 99 6 252 253
+253 1 2 99 6 253 254
+254 1 2 99 6 254 255
+255 1 2 99 6 255 256
+256 1 2 99 6 256 257
+257 1 2 99 6 257 258
+258 1 2 99 6 258 259
+259 1 2 99 6 259 260
+260 1 2 99 6 260 261
+261 1 2 99 6 261 262
+262 1 2 99 6 262 263
+263 1 2 99 6 263 264
+264 1 2 99 6 264 265
+265 1 2 99 6 265 266
+266 1 2 99 6 266 267
+267 1 2 99 6 267 268
+268 1 2 99 6 268 269
+269 1 2 99 6 269 270
+270 1 2 99 6 270 271
+271 1 2 99 6 271 272
+272 1 2 99 6 272 273
+273 1 2 99 6 273 274
+274 1 2 99 6 274 275
+275 1 2 99 6 275 276
+276 1 2 99 6 276 277
+277 1 2 99 6 277 278
+278 1 2 99 6 278 279
+279 1 2 99 6 279 280
+280 1 2 99 6 280 281
+281 1 2 99 6 281 282
+282 1 2 99 6 282 283
+283 1 2 99 6 283 284
+284 1 2 99 6 284 285
+285 1 2 99 6 285 286
+286 1 2 99 6 286 287
+287 1 2 99 6 287 288
+288 1 2 99 6 288 3
+289 2 2 1 4 1777 847 563
+290 2 2 1 4 1776 846 562
+291 2 2 1 4 1823 969 751
+292 2 2 1 4 1822 968 750
+293 2 2 1 4 725 896 1369
+294 2 2 1 4 1369 896 344
+295 2 2 1 4 724 897 1368
+296 2 2 1 4 1368 897 345
+297 2 2 1 4 845 847 1777
+298 2 2 1 4 844 846 1776
+299 2 2 1 4 905 441 1584
+300 2 2 1 4 904 440 1585
+301 2 2 1 4 903 1587 443
+302 2 2 1 4 902 1586 442
+303 2 2 1 4 1584 441 793
+304 2 2 1 4 1585 440 792
+305 2 2 1 4 1587 795 443
+306 2 2 1 4 1586 794 442
+307 2 2 1 4 298 1823 751
+308 2 2 1 4 299 1822 750
+309 2 2 1 4 1556 976 483
+310 2 2 1 4 1557 977 482
+311 2 2 1 4 787 976 1556
+312 2 2 1 4 786 977 1557
+313 2 2 1 4 1697 497 953
+314 2 2 1 4 1696 496 952
+315 2 2 1 4 1406 394 986
+316 2 2 1 4 1407 395 987
+317 2 2 1 4 748 1406 986
+318 2 2 1 4 749 1407 987
+319 2 2 1 4 1023 1549 1223
+320 2 2 1 4 1022 1548 1222
+321 2 2 1 4 301 1023 1223
+322 2 2 1 4 300 1022 1222
+323 2 2 1 4 759 1107 1558
+324 2 2 1 4 758 1106 1559
+325 2 2 1 4 1830 1005 494
+326 2 2 1 4 1831 1004 495
+327 2 2 1 4 808 1696 952
+328 2 2 1 4 809 1697 953
+329 2 2 1 4 1052 1517 1161
+330 2 2 1 4 1053 1516 1160
+331 2 2 1 4 475 1052 1161
+332 2 2 1 4 474 1053 1160
+333 2 2 1 4 1642 336 964
+334 2 2 1 4 1643 337 965
+335 2 2 1 4 1614 291 976
+336 2 2 1 4 1615 290 977
+337 2 2 1 4 802 1005 1830
+338 2 2 1 4 803 1004 1831
+339 2 2 1 4 766 1642 964
+340 2 2 1 4 767 1643 965
+341 2 2 1 4 1559 1106 444
+342 2 2 1 4 1558 1107 445
+343 2 2 1 4 26 27 736
+344 2 2 1 4 89 90 737
+345 2 2 1 4 558 706 1338
+346 2 2 1 4 559 707 1339
+347 2 2 1 4 369 1172 873
+348 2 2 1 4 368 1173 872
+349 2 2 1 4 49 1125 924
+350 2 2 1 4 112 1124 925
+351 2 2 1 4 81 812 80
+352 2 2 1 4 18 813 17
+353 2 2 1 4 54 55 814
+354 2 2 1 4 117 118 815
+355 2 2 1 4 787 1614 976
+356 2 2 1 4 786 1615 977
+357 2 2 1 4 915 1792 1575
+358 2 2 1 4 914 1793 1574
+359 2 2 1 4 844 1372 1302
+360 2 2 1 4 845 1373 1303
+361 2 2 1 4 354 1132 1448
+362 2 2 1 4 355 1133 1449
+363 2 2 1 4 586 858 856
+364 2 2 1 4 587 859 857
+365 2 2 1 4 424 856 858
+366 2 2 1 4 425 857 859
+367 2 2 1 4 652 1086 1415
+368 2 2 1 4 653 1087 1414
+369 2 2 1 4 386 746 1246
+370 2 2 1 4 387 747 1247
+371 2 2 1 4 353 1486 1106
+372 2 2 1 4 352 1487 1107
+373 2 2 1 4 109 745 108
+374 2 2 1 4 46 744 45
+375 2 2 1 4 41 1225 742
+376 2 2 1 4 104 1224 743
+377 2 2 1 4 449 915 1575
+378 2 2 1 4 448 914 1574
+379 2 2 1 4 558 1358 706
+380 2 2 1 4 559 1359 707
+381 2 2 1 4 353 1037 1486
+382 2 2 1 4 352 1036 1487
+383 2 2 1 4 332 848 1000
+384 2 2 1 4 333 849 1001
+385 2 2 1 4 294 1054 885
+386 2 2 1 4 295 1055 884
+387 2 2 1 4 330 716 1068
+388 2 2 1 4 331 717 1069
+389 2 2 1 4 1857 967 798
+390 2 2 1 4 1856 966 799
+391 2 2 1 4 354 1448 1020
+392 2 2 1 4 355 1449 1021
+393 2 2 1 4 453 993 712
+394 2 2 1 4 452 992 713
+395 2 2 1 4 398 1400 752
+396 2 2 1 4 399 1401 753
+397 2 2 1 4 80 812 1496
+398 2 2 1 4 17 813 1497
+399 2 2 1 4 118 1499 815
+400 2 2 1 4 55 1498 814
+401 2 2 1 4 388 1358 738
+402 2 2 1 4 389 1359 739
+403 2 2 1 4 357 1085 1465
+404 2 2 1 4 356 1084 1464
+405 2 2 1 4 329 970 1523
+406 2 2 1 4 328 971 1522
+407 2 2 1 4 428 846 844
+408 2 2 1 4 429 847 845
+409 2 2 1 4 432 940 1128
+410 2 2 1 4 433 941 1129
+411 2 2 1 4 534 791 1079
+412 2 2 1 4 535 790 1078
+413 2 2 1 4 358 789 1211
+414 2 2 1 4 359 788 1210
+415 2 2 1 4 295 1005 802
+416 2 2 1 4 294 1004 803
+417 2 2 1 4 428 844 1302
+418 2 2 1 4 429 845 1303
+419 2 2 1 4 355 1857 798
+420 2 2 1 4 354 1856 799
+421 2 2 1 4 685 1523 970
+422 2 2 1 4 684 1522 971
+423 2 2 1 4 294 803 1054
+424 2 2 1 4 295 802 1055
+425 2 2 1 4 507 1054 803
+426 2 2 1 4 506 1055 802
+427 2 2 1 4 640 1418 796
+428 2 2 1 4 641 1419 797
+429 2 2 1 4 393 958 727
+430 2 2 1 4 392 959 726
+431 2 2 1 4 452 727 958
+432 2 2 1 4 453 726 959
+433 2 2 1 4 706 1434 1338
+434 2 2 1 4 707 1435 1339
+435 2 2 1 4 386 1162 746
+436 2 2 1 4 387 1163 747
+437 2 2 1 4 466 766 964
+438 2 2 1 4 467 767 965
+439 2 2 1 4 576 1342 886
+440 2 2 1 4 577 1343 887
+441 2 2 1 4 600 752 1400
+442 2 2 1 4 601 753 1401
+443 2 2 1 4 473 1416 840
+444 2 2 1 4 472 1417 841
+445 2 2 1 4 662 840 1416
+446 2 2 1 4 663 841 1417
+447 2 2 1 4 476 722 1072
+448 2 2 1 4 477 723 1073
+449 2 2 1 4 453 712 1096
+450 2 2 1 4 452 713 1097
+451 2 2 1 4 797 1419 1910
+452 2 2 1 4 796 1418 1911
+453 2 2 1 4 434 779 1153
+454 2 2 1 4 435 778 1152
+455 2 2 1 4 721 1348 1065
+456 2 2 1 4 720 1349 1064
+457 2 2 1 4 336 868 964
+458 2 2 1 4 337 869 965
+459 2 2 1 4 109 981 745
+460 2 2 1 4 46 980 744
+461 2 2 1 4 26 736 994
+462 2 2 1 4 89 737 995
+463 2 2 1 4 450 1144 860
+464 2 2 1 4 451 1145 861
+465 2 2 1 4 330 1299 716
+466 2 2 1 4 331 1298 717
+467 2 2 1 4 404 1384 700
+468 2 2 1 4 405 1385 701
+469 2 2 1 4 502 770 899
+470 2 2 1 4 503 771 898
+471 2 2 1 4 504 901 773
+472 2 2 1 4 505 900 772
+473 2 2 1 4 625 1069 841
+474 2 2 1 4 624 1068 840
+475 2 2 1 4 580 873 1172
+476 2 2 1 4 581 872 1173
+477 2 2 1 4 538 780 1038
+478 2 2 1 4 539 781 1039
+479 2 2 1 4 1206 553 1642
+480 2 2 1 4 1207 552 1643
+481 2 2 1 4 1810 1361 386
+482 2 2 1 4 1811 1360 387
+483 2 2 1 4 404 700 1116
+484 2 2 1 4 405 701 1117
+485 2 2 1 4 1642 553 962
+486 2 2 1 4 1643 552 963
+487 2 2 1 4 557 1064 1349
+488 2 2 1 4 556 1065 1348
+489 2 2 1 4 560 1176 911
+490 2 2 1 4 561 1177 910
+491 2 2 1 4 451 906 1145
+492 2 2 1 4 450 907 1144
+493 2 2 1 4 443 772 1060
+494 2 2 1 4 442 773 1061
+495 2 2 1 4 381 1108 705
+496 2 2 1 4 380 1109 704
+497 2 2 1 4 588 1128 940
+498 2 2 1 4 589 1129 941
+499 2 2 1 4 31 734 1159
+500 2 2 1 4 94 735 1158
+501 2 2 1 4 321 1047 714
+502 2 2 1 4 320 1046 715
+503 2 2 1 4 476 1000 722
+504 2 2 1 4 477 1001 723
+505 2 2 1 4 388 738 1164
+506 2 2 1 4 389 739 1165
+507 2 2 1 4 302 818 996
+508 2 2 1 4 303 819 997
+509 2 2 1 4 377 1075 908
+510 2 2 1 4 376 1074 909
+511 2 2 1 4 543 908 1075
+512 2 2 1 4 542 909 1074
+513 2 2 1 4 383 1709 1321
+514 2 2 1 4 382 1708 1320
+515 2 2 1 4 1824 388 1362
+516 2 2 1 4 1825 389 1363
+517 2 2 1 4 381 705 1638
+518 2 2 1 4 380 704 1639
+519 2 2 1 4 383 923 1709
+520 2 2 1 4 382 922 1708
+521 2 2 1 4 881 1533 1450
+522 2 2 1 4 880 1532 1451
+523 2 2 1 4 611 881 1450
+524 2 2 1 4 610 880 1451
+525 2 2 1 4 459 1910 1419
+526 2 2 1 4 458 1911 1418
+527 2 2 1 4 468 1131 1415
+528 2 2 1 4 469 1130 1414
+529 2 2 1 4 468 1415 1019
+530 2 2 1 4 469 1414 1018
+531 2 2 1 4 329 998 727
+532 2 2 1 4 328 999 726
+533 2 2 1 4 599 1505 741
+534 2 2 1 4 598 1504 740
+535 2 2 1 4 635 1220 943
+536 2 2 1 4 634 1221 942
+537 2 2 1 4 309 943 1220
+538 2 2 1 4 308 942 1221
+539 2 2 1 4 328 726 1096
+540 2 2 1 4 329 727 1097
+541 2 2 1 4 299 750 1029
+542 2 2 1 4 298 751 1028
+543 2 2 1 4 44 1238 974
+544 2 2 1 4 107 1239 975
+545 2 2 1 4 490 1124 1164
+546 2 2 1 4 491 1125 1165
+547 2 2 1 4 698 1164 1124
+548 2 2 1 4 699 1165 1125
+549 2 2 1 4 576 886 1424
+550 2 2 1 4 577 887 1425
+551 2 2 1 4 575 1034 975
+552 2 2 1 4 574 1035 974
+553 2 2 1 4 515 975 1034
+554 2 2 1 4 514 974 1035
+555 2 2 1 4 427 810 1838
+556 2 2 1 4 751 1838 810
+557 2 2 1 4 426 811 1839
+558 2 2 1 4 750 1839 811
+559 2 2 1 4 510 1030 960
+560 2 2 1 4 546 960 1030
+561 2 2 1 4 511 1031 961
+562 2 2 1 4 547 961 1031
+563 2 2 1 4 708 1574 1793
+564 2 2 1 4 709 1575 1792
+565 2 2 1 4 94 1405 735
+566 2 2 1 4 31 1404 734
+567 2 2 1 4 314 1338 1434
+568 2 2 1 4 315 1339 1435
+569 2 2 1 4 1715 990 484
+570 2 2 1 4 826 990 1715
+571 2 2 1 4 1714 991 485
+572 2 2 1 4 827 991 1714
+573 2 2 1 4 722 1508 1072
+574 2 2 1 4 723 1509 1073
+575 2 2 1 4 571 1113 947
+576 2 2 1 4 570 1112 946
+577 2 2 1 4 307 1240 906
+578 2 2 1 4 622 906 1240
+579 2 2 1 4 306 1241 907
+580 2 2 1 4 623 907 1241
+581 2 2 1 4 533 1215 1641
+582 2 2 1 4 532 1214 1640
+583 2 2 1 4 911 1176 1774
+584 2 2 1 4 910 1177 1775
+585 2 2 1 4 533 1641 957
+586 2 2 1 4 532 1640 956
+587 2 2 1 4 476 1072 996
+588 2 2 1 4 588 996 1072
+589 2 2 1 4 477 1073 997
+590 2 2 1 4 589 997 1073
+591 2 2 1 4 705 1463 1350
+592 2 2 1 4 704 1462 1351
+593 2 2 1 4 1282 1138 520
+594 2 2 1 4 1283 1139 521
+595 2 2 1 4 1284 522 1141
+596 2 2 1 4 1285 523 1140
+597 2 2 1 4 407 754 1171
+598 2 2 1 4 406 755 1170
+599 2 2 1 4 354 799 1132
+600 2 2 1 4 355 798 1133
+601 2 2 1 4 531 1132 799
+602 2 2 1 4 530 1133 798
+603 2 2 1 4 728 1138 1282
+604 2 2 1 4 729 1139 1283
+605 2 2 1 4 730 1284 1141
+606 2 2 1 4 731 1285 1140
+607 2 2 1 4 348 1072 1508
+608 2 2 1 4 349 1073 1509
+609 2 2 1 4 35 1386 740
+610 2 2 1 4 98 1387 741
+611 2 2 1 4 885 1054 1421
+612 2 2 1 4 884 1055 1420
+613 2 2 1 4 321 714 1142
+614 2 2 1 4 320 715 1143
+615 2 2 1 4 1710 1057 929
+616 2 2 1 4 1711 1056 928
+617 2 2 1 4 1804 1057 339
+618 2 2 1 4 1805 1056 338
+619 2 2 1 4 929 1057 1804
+620 2 2 1 4 928 1056 1805
+621 2 2 1 4 311 1038 1376
+622 2 2 1 4 710 1376 1038
+623 2 2 1 4 310 1039 1377
+624 2 2 1 4 711 1377 1039
+625 2 2 1 4 852 1361 1810
+626 2 2 1 4 853 1360 1811
+627 2 2 1 4 721 1065 1525
+628 2 2 1 4 720 1064 1524
+629 2 2 1 4 302 1653 818
+630 2 2 1 4 303 1652 819
+631 2 2 1 4 506 947 1113
+632 2 2 1 4 507 946 1112
+633 2 2 1 4 456 776 1024
+634 2 2 1 4 457 777 1025
+635 2 2 1 4 297 755 1769
+636 2 2 1 4 296 754 1768
+637 2 2 1 4 304 808 951
+638 2 2 1 4 305 809 950
+639 2 2 1 4 854 1824 1362
+640 2 2 1 4 855 1825 1363
+641 2 2 1 4 358 1211 1490
+642 2 2 1 4 359 1210 1491
+643 2 2 1 4 478 1710 929
+644 2 2 1 4 479 1711 928
+645 2 2 1 4 637 1465 1085
+646 2 2 1 4 636 1464 1084
+647 2 2 1 4 432 760 1196
+648 2 2 1 4 433 761 1197
+649 2 2 1 4 77 728 1868
+650 2 2 1 4 14 729 1869
+651 2 2 1 4 58 1870 730
+652 2 2 1 4 121 1871 731
+653 2 2 1 4 453 1096 726
+654 2 2 1 4 452 1097 727
+655 2 2 1 4 524 1246 746
+656 2 2 1 4 525 1247 747
+657 2 2 1 4 444 1106 1422
+658 2 2 1 4 445 1107 1423
+659 2 2 1 4 364 1415 1086
+660 2 2 1 4 365 1414 1087
+661 2 2 1 4 628 1525 1065
+662 2 2 1 4 629 1524 1064
+663 2 2 1 4 323 771 1095
+664 2 2 1 4 322 770 1094
+665 2 2 1 4 294 889 1004
+666 2 2 1 4 295 888 1005
+667 2 2 1 4 512 1004 889
+668 2 2 1 4 513 1005 888
+669 2 2 1 4 848 1454 1000
+670 2 2 1 4 849 1455 1001
+671 2 2 1 4 71 72 905
+672 2 2 1 4 8 9 904
+673 2 2 1 4 64 903 63
+674 2 2 1 4 127 902 126
+675 2 2 1 4 586 1350 1463
+676 2 2 1 4 587 1351 1462
+677 2 2 1 4 370 874 1175
+678 2 2 1 4 371 875 1174
+679 2 2 1 4 583 1175 874
+680 2 2 1 4 582 1174 875
+681 2 2 1 4 302 1844 1653
+682 2 2 1 4 303 1845 1652
+683 2 2 1 4 648 901 1399
+684 2 2 1 4 649 900 1398
+685 2 2 1 4 529 1081 1071
+686 2 2 1 4 528 1080 1070
+687 2 2 1 4 1864 1058 481
+688 2 2 1 4 1865 1059 480
+689 2 2 1 4 930 1058 1864
+690 2 2 1 4 931 1059 1865
+691 2 2 1 4 652 1609 1086
+692 2 2 1 4 653 1608 1087
+693 2 2 1 4 420 1092 758
+694 2 2 1 4 421 1093 759
+695 2 2 1 4 566 748 1388
+696 2 2 1 4 567 749 1389
+697 2 2 1 4 456 1299 776
+698 2 2 1 4 457 1298 777
+699 2 2 1 4 464 752 1615
+700 2 2 1 4 465 753 1614
+701 2 2 1 4 359 859 1212
+702 2 2 1 4 587 1212 859
+703 2 2 1 4 358 858 1213
+704 2 2 1 4 586 1213 858
+705 2 2 1 4 423 777 1119
+706 2 2 1 4 422 776 1118
+707 2 2 1 4 77 1138 728
+708 2 2 1 4 14 1139 729
+709 2 2 1 4 58 730 1141
+710 2 2 1 4 121 731 1140
+711 2 2 1 4 366 1232 816
+712 2 2 1 4 367 1233 817
+713 2 2 1 4 44 974 43
+714 2 2 1 4 107 975 106
+715 2 2 1 4 314 1090 1178
+716 2 2 1 4 315 1091 1179
+717 2 2 1 4 1090 1608 1178
+718 2 2 1 4 1091 1609 1179
+719 2 2 1 4 384 1399 901
+720 2 2 1 4 385 1398 900
+721 2 2 1 4 440 1094 770
+722 2 2 1 4 441 1095 771
+723 2 2 1 4 818 1567 996
+724 2 2 1 4 819 1566 997
+725 2 2 1 4 612 804 1630
+726 2 2 1 4 613 805 1631
+727 2 2 1 4 614 1632 806
+728 2 2 1 4 615 1633 807
+729 2 2 1 4 463 950 809
+730 2 2 1 4 462 951 808
+731 2 2 1 4 392 726 1236
+732 2 2 1 4 393 727 1237
+733 2 2 1 4 566 1406 748
+734 2 2 1 4 567 1407 749
+735 2 2 1 4 350 1196 760
+736 2 2 1 4 351 1197 761
+737 2 2 1 4 602 816 1198
+738 2 2 1 4 603 817 1199
+739 2 2 1 4 326 1281 774
+740 2 2 1 4 544 774 1281
+741 2 2 1 4 327 1280 775
+742 2 2 1 4 545 775 1280
+743 2 2 1 4 556 827 1181
+744 2 2 1 4 557 826 1180
+745 2 2 1 4 105 1224 104
+746 2 2 1 4 42 1225 41
+747 2 2 1 4 296 1052 754
+748 2 2 1 4 297 1053 755
+749 2 2 1 4 326 774 1430
+750 2 2 1 4 327 775 1431
+751 2 2 1 4 482 988 1366
+752 2 2 1 4 483 989 1367
+753 2 2 1 4 755 1231 1769
+754 2 2 1 4 754 1230 1768
+755 2 2 1 4 534 1079 1220
+756 2 2 1 4 535 1078 1221
+757 2 2 1 4 297 870 1418
+758 2 2 1 4 296 871 1419
+759 2 2 1 4 462 923 951
+760 2 2 1 4 492 951 923
+761 2 2 1 4 463 922 950
+762 2 2 1 4 493 950 922
+763 2 2 1 4 410 875 1268
+764 2 2 1 4 411 874 1269
+765 2 2 1 4 35 740 1446
+766 2 2 1 4 98 741 1447
+767 2 2 1 4 617 1361 852
+768 2 2 1 4 616 1360 853
+769 2 2 1 4 546 1030 1098
+770 2 2 1 4 547 1031 1099
+771 2 2 1 4 734 1264 1159
+772 2 2 1 4 735 1265 1158
+773 2 2 1 4 1264 510 1159
+774 2 2 1 4 1265 511 1158
+775 2 2 1 4 318 768 1337
+776 2 2 1 4 319 769 1336
+777 2 2 1 4 619 854 1362
+778 2 2 1 4 618 855 1363
+779 2 2 1 4 334 810 1274
+780 2 2 1 4 335 811 1275
+781 2 2 1 4 458 843 1237
+782 2 2 1 4 459 842 1236
+783 2 2 1 4 530 798 968
+784 2 2 1 4 531 799 969
+785 2 2 1 4 369 873 1273
+786 2 2 1 4 368 872 1272
+787 2 2 1 4 600 1518 752
+788 2 2 1 4 601 1519 753
+789 2 2 1 4 482 1366 1126
+790 2 2 1 4 483 1367 1127
+791 2 2 1 4 336 1726 738
+792 2 2 1 4 337 1727 739
+793 2 2 1 4 422 1024 776
+794 2 2 1 4 423 1025 777
+795 2 2 1 4 443 1060 926
+796 2 2 1 4 442 1061 927
+797 2 2 1 4 72 1458 905
+798 2 2 1 4 9 1459 904
+799 2 2 1 4 63 903 1460
+800 2 2 1 4 126 902 1461
+801 2 2 1 4 738 1358 1590
+802 2 2 1 4 739 1359 1591
+803 2 2 1 4 987 1583 1761
+804 2 2 1 4 986 1582 1760
+805 2 2 1 4 563 847 1179
+806 2 2 1 4 562 846 1178
+807 2 2 1 4 315 1179 847
+808 2 2 1 4 314 1178 846
+809 2 2 1 4 499 984 919
+810 2 2 1 4 306 919 984
+811 2 2 1 4 498 985 918
+812 2 2 1 4 307 918 985
+813 2 2 1 4 464 1256 752
+814 2 2 1 4 465 1257 753
+815 2 2 1 4 27 1147 736
+816 2 2 1 4 90 1146 737
+817 2 2 1 4 447 824 1148
+818 2 2 1 4 446 825 1149
+819 2 2 1 4 324 1061 773
+820 2 2 1 4 325 1060 772
+821 2 2 1 4 336 738 1590
+822 2 2 1 4 337 739 1591
+823 2 2 1 4 612 1496 812
+824 2 2 1 4 613 1497 813
+825 2 2 1 4 615 815 1499
+826 2 2 1 4 614 814 1498
+827 2 2 1 4 647 1398 898
+828 2 2 1 4 385 898 1398
+829 2 2 1 4 646 1399 899
+830 2 2 1 4 384 899 1399
+831 2 2 1 4 298 1028 954
+832 2 2 1 4 576 954 1028
+833 2 2 1 4 299 1029 955
+834 2 2 1 4 577 955 1029
+835 2 2 1 4 573 834 1223
+836 2 2 1 4 572 835 1222
+837 2 2 1 4 301 1223 834
+838 2 2 1 4 300 1222 835
+839 2 2 1 4 312 1183 1088
+840 2 2 1 4 313 1182 1089
+841 2 2 1 4 485 1741 1714
+842 2 2 1 4 484 1740 1715
+843 2 2 1 4 485 979 1741
+844 2 2 1 4 484 978 1740
+845 2 2 1 4 41 742 1347
+846 2 2 1 4 104 743 1346
+847 2 2 1 4 502 1208 792
+848 2 2 1 4 503 1209 793
+849 2 2 1 4 351 761 1218
+850 2 2 1 4 350 760 1219
+851 2 2 1 4 341 1009 1318
+852 2 2 1 4 669 1318 1009
+853 2 2 1 4 340 1008 1319
+854 2 2 1 4 668 1319 1008
+855 2 2 1 4 341 1059 931
+856 2 2 1 4 340 1058 930
+857 2 2 1 4 598 740 1386
+858 2 2 1 4 599 741 1387
+859 2 2 1 4 529 890 1081
+860 2 2 1 4 528 891 1080
+861 2 2 1 4 402 1292 756
+862 2 2 1 4 403 1293 757
+863 2 2 1 4 816 1621 1198
+864 2 2 1 4 817 1620 1199
+865 2 2 1 4 488 1744 746
+866 2 2 1 4 489 1745 747
+867 2 2 1 4 464 786 1020
+868 2 2 1 4 465 787 1021
+869 2 2 1 4 625 1627 1069
+870 2 2 1 4 624 1626 1068
+871 2 2 1 4 398 752 1256
+872 2 2 1 4 399 753 1257
+873 2 2 1 4 405 766 1385
+874 2 2 1 4 404 767 1384
+875 2 2 1 4 1088 1183 1624
+876 2 2 1 4 1089 1182 1625
+877 2 2 1 4 464 1615 786
+878 2 2 1 4 465 1614 787
+879 2 2 1 4 827 1714 1181
+880 2 2 1 4 826 1715 1180
+881 2 2 1 4 804 1154 1630
+882 2 2 1 4 805 1155 1631
+883 2 2 1 4 807 1633 1157
+884 2 2 1 4 806 1632 1156
+885 2 2 1 4 373 824 1160
+886 2 2 1 4 372 825 1161
+887 2 2 1 4 486 755 1457
+888 2 2 1 4 487 754 1456
+889 2 2 1 4 38 913 37
+890 2 2 1 4 101 912 100
+891 2 2 1 4 394 1406 782
+892 2 2 1 4 395 1407 783
+893 2 2 1 4 45 744 1238
+894 2 2 1 4 108 745 1239
+895 2 2 1 4 297 1418 1516
+896 2 2 1 4 296 1419 1517
+897 2 2 1 4 434 1153 1592
+898 2 2 1 4 435 1152 1593
+899 2 2 1 4 868 1452 964
+900 2 2 1 4 869 1453 965
+901 2 2 1 4 113 1124 112
+902 2 2 1 4 50 1125 49
+903 2 2 1 4 942 1790 1644
+904 2 2 1 4 943 1791 1645
+905 2 2 1 4 598 913 1232
+906 2 2 1 4 599 912 1233
+907 2 2 1 4 454 1232 913
+908 2 2 1 4 455 1233 912
+909 2 2 1 4 742 1225 1296
+910 2 2 1 4 743 1224 1297
+911 2 2 1 4 1296 1225 514
+912 2 2 1 4 1297 1224 515
+913 2 2 1 4 1800 350 1080
+914 2 2 1 4 891 1800 1080
+915 2 2 1 4 1798 351 1081
+916 2 2 1 4 890 1798 1081
+917 2 2 1 4 21 1570 1135
+918 2 2 1 4 84 1571 1134
+919 2 2 1 4 407 1456 754
+920 2 2 1 4 406 1457 755
+921 2 2 1 4 491 924 1125
+922 2 2 1 4 490 925 1124
+923 2 2 1 4 395 1583 987
+924 2 2 1 4 394 1582 986
+925 2 2 1 4 361 1066 991
+926 2 2 1 4 360 1067 990
+927 2 2 1 4 354 1020 1048
+928 2 2 1 4 355 1021 1049
+929 2 2 1 4 524 746 1274
+930 2 2 1 4 525 747 1275
+931 2 2 1 4 447 942 1644
+932 2 2 1 4 446 943 1645
+933 2 2 1 4 862 1256 1828
+934 2 2 1 4 863 1257 1829
+935 2 2 1 4 488 746 1162
+936 2 2 1 4 489 747 1163
+937 2 2 1 4 360 990 826
+938 2 2 1 4 361 991 827
+939 2 2 1 4 394 782 1264
+940 2 2 1 4 395 783 1265
+941 2 2 1 4 537 991 1066
+942 2 2 1 4 536 990 1067
+943 2 2 1 4 539 1039 1194
+944 2 2 1 4 538 1038 1195
+945 2 2 1 4 703 1439 1507
+946 2 2 1 4 702 1438 1506
+947 2 2 1 4 459 1707 842
+948 2 2 1 4 458 1706 843
+949 2 2 1 4 432 1432 760
+950 2 2 1 4 433 1433 761
+951 2 2 1 4 741 1505 1011
+952 2 2 1 4 740 1504 1010
+953 2 2 1 4 707 1503 1435
+954 2 2 1 4 706 1502 1434
+955 2 2 1 4 558 1590 1358
+956 2 2 1 4 559 1591 1359
+957 2 2 1 4 401 784 1370
+958 2 2 1 4 400 785 1371
+959 2 2 1 4 24 893 23
+960 2 2 1 4 87 892 86
+961 2 2 1 4 456 1653 938
+962 2 2 1 4 719 938 1653
+963 2 2 1 4 457 1652 939
+964 2 2 1 4 718 939 1652
+965 2 2 1 4 450 1802 821
+966 2 2 1 4 451 1803 820
+967 2 2 1 4 751 1756 1028
+968 2 2 1 4 750 1757 1029
+969 2 2 1 4 459 871 1707
+970 2 2 1 4 458 870 1706
+971 2 2 1 4 111 112 925
+972 2 2 1 4 48 49 924
+973 2 2 1 4 1030 1568 1098
+974 2 2 1 4 1031 1569 1099
+975 2 2 1 4 853 1811 1507
+976 2 2 1 4 852 1810 1506
+977 2 2 1 4 450 1657 907
+978 2 2 1 4 451 1656 906
+979 2 2 1 4 420 758 1908
+980 2 2 1 4 421 759 1909
+981 2 2 1 4 501 1078 790
+982 2 2 1 4 500 1079 791
+983 2 2 1 4 458 1237 998
+984 2 2 1 4 459 1236 999
+985 2 2 1 4 447 1148 942
+986 2 2 1 4 446 1149 943
+987 2 2 1 4 398 1700 764
+988 2 2 1 4 399 1701 765
+989 2 2 1 4 654 1422 1106
+990 2 2 1 4 655 1423 1107
+991 2 2 1 4 427 1040 810
+992 2 2 1 4 426 1041 811
+993 2 2 1 4 450 1616 1657
+994 2 2 1 4 451 1617 1656
+995 2 2 1 4 575 1117 1034
+996 2 2 1 4 574 1116 1035
+997 2 2 1 4 855 1503 1825
+998 2 2 1 4 854 1502 1824
+999 2 2 1 4 318 1198 1114
+1000 2 2 1 4 319 1199 1115
+1001 2 2 1 4 656 1114 1198
+1002 2 2 1 4 657 1115 1199
+1003 2 2 1 4 402 756 1214
+1004 2 2 1 4 403 757 1215
+1005 2 2 1 4 290 1102 977
+1006 2 2 1 4 561 977 1102
+1007 2 2 1 4 291 1103 976
+1008 2 2 1 4 560 976 1103
+1009 2 2 1 4 504 794 1560
+1010 2 2 1 4 505 795 1561
+1011 2 2 1 4 609 867 1443
+1012 2 2 1 4 608 866 1442
+1013 2 2 1 4 487 1230 754
+1014 2 2 1 4 486 1231 755
+1015 2 2 1 4 312 1438 1866
+1016 2 2 1 4 313 1439 1867
+1017 2 2 1 4 365 1087 790
+1018 2 2 1 4 364 1086 791
+1019 2 2 1 4 400 1296 785
+1020 2 2 1 4 401 1297 784
+1021 2 2 1 4 289 982 1082
+1022 2 2 1 4 536 1082 982
+1023 2 2 1 4 289 983 1083
+1024 2 2 1 4 537 1083 983
+1025 2 2 1 4 1828 1256 464
+1026 2 2 1 4 1829 1257 465
+1027 2 2 1 4 748 1580 1388
+1028 2 2 1 4 749 1581 1389
+1029 2 2 1 4 410 1428 875
+1030 2 2 1 4 411 1429 874
+1031 2 2 1 4 450 860 1802
+1032 2 2 1 4 451 861 1803
+1033 2 2 1 4 5 1208 878
+1034 2 2 1 4 68 1209 879
+1035 2 2 1 4 398 764 1400
+1036 2 2 1 4 399 765 1401
+1037 2 2 1 4 551 875 1202
+1038 2 2 1 4 550 874 1203
+1039 2 2 1 4 371 1202 875
+1040 2 2 1 4 370 1203 874
+1041 2 2 1 4 447 1573 824
+1042 2 2 1 4 446 1572 825
+1043 2 2 1 4 343 887 1343
+1044 2 2 1 4 342 886 1342
+1045 2 2 1 4 363 800 1314
+1046 2 2 1 4 629 897 1524
+1047 2 2 1 4 628 896 1525
+1048 2 2 1 4 574 974 1238
+1049 2 2 1 4 575 975 1239
+1050 2 2 1 4 372 1149 825
+1051 2 2 1 4 373 1148 824
+1052 2 2 1 4 479 1315 1711
+1053 2 2 1 4 569 985 1254
+1054 2 2 1 4 568 984 1255
+1055 2 2 1 4 585 839 1316
+1056 2 2 1 4 584 838 1317
+1057 2 2 1 4 300 1316 839
+1058 2 2 1 4 301 1317 838
+1059 2 2 1 4 801 1711 1315
+1060 2 2 1 4 426 1839 798
+1061 2 2 1 4 427 1838 799
+1062 2 2 1 4 588 940 996
+1063 2 2 1 4 302 996 940
+1064 2 2 1 4 589 941 997
+1065 2 2 1 4 303 997 941
+1066 2 2 1 4 456 938 1299
+1067 2 2 1 4 457 939 1298
+1068 2 2 1 4 420 1894 1092
+1069 2 2 1 4 421 1895 1093
+1070 2 2 1 4 296 1417 871
+1071 2 2 1 4 297 1416 870
+1072 2 2 1 4 466 1385 766
+1073 2 2 1 4 467 1384 767
+1074 2 2 1 4 405 1206 766
+1075 2 2 1 4 404 1207 767
+1076 2 2 1 4 470 1028 1756
+1077 2 2 1 4 471 1029 1757
+1078 2 2 1 4 1811 703 1507
+1079 2 2 1 4 1810 702 1506
+1080 2 2 1 4 344 896 1169
+1081 2 2 1 4 345 897 1168
+1082 2 2 1 4 447 850 1573
+1083 2 2 1 4 446 851 1572
+1084 2 2 1 4 551 1268 875
+1085 2 2 1 4 550 1269 874
+1086 2 2 1 4 609 1474 867
+1087 2 2 1 4 608 1475 866
+1088 2 2 1 4 834 1092 1894
+1089 2 2 1 4 835 1093 1895
+1090 2 2 1 4 1573 474 1160
+1091 2 2 1 4 1572 475 1161
+1092 2 2 1 4 824 1573 1160
+1093 2 2 1 4 825 1572 1161
+1094 2 2 1 4 508 1071 1081
+1095 2 2 1 4 509 1070 1080
+1096 2 2 1 4 610 1396 880
+1097 2 2 1 4 390 880 1396
+1098 2 2 1 4 611 1397 881
+1099 2 2 1 4 391 881 1397
+1100 2 2 1 4 440 770 1477
+1101 2 2 1 4 441 771 1476
+1102 2 2 1 4 505 772 1478
+1103 2 2 1 4 504 773 1479
+1104 2 2 1 4 510 960 1690
+1105 2 2 1 4 511 961 1691
+1106 2 2 1 4 664 1183 1126
+1107 2 2 1 4 564 1126 1183
+1108 2 2 1 4 665 1182 1127
+1109 2 2 1 4 565 1127 1182
+1110 2 2 1 4 716 1299 938
+1111 2 2 1 4 717 1298 939
+1112 2 2 1 4 537 1066 1201
+1113 2 2 1 4 536 1067 1200
+1114 2 2 1 4 1825 1503 707
+1115 2 2 1 4 1824 1502 706
+1116 2 2 1 4 537 1201 1186
+1117 2 2 1 4 536 1200 1187
+1118 2 2 1 4 810 1040 1274
+1119 2 2 1 4 811 1041 1275
+1120 2 2 1 4 419 838 1276
+1121 2 2 1 4 418 839 1277
+1122 2 2 1 4 468 1713 1486
+1123 2 2 1 4 469 1712 1487
+1124 2 2 1 4 427 799 1623
+1125 2 2 1 4 426 798 1622
+1126 2 2 1 4 476 996 1567
+1127 2 2 1 4 477 997 1566
+1128 2 2 1 4 318 1488 768
+1129 2 2 1 4 319 1489 769
+1130 2 2 1 4 548 1272 872
+1131 2 2 1 4 549 1273 873
+1132 2 2 1 4 782 1406 1538
+1133 2 2 1 4 783 1407 1539
+1134 2 2 1 4 334 1353 810
+1135 2 2 1 4 335 1352 811
+1136 2 2 1 4 685 970 1575
+1137 2 2 1 4 684 971 1574
+1138 2 2 1 4 566 1538 1406
+1139 2 2 1 4 567 1539 1407
+1140 2 2 1 4 109 110 981
+1141 2 2 1 4 46 47 980
+1142 2 2 1 4 510 1690 1159
+1143 2 2 1 4 511 1691 1158
+1144 2 2 1 4 346 1442 866
+1145 2 2 1 4 347 1443 867
+1146 2 2 1 4 473 840 1068
+1147 2 2 1 4 472 841 1069
+1148 2 2 1 4 322 1332 770
+1149 2 2 1 4 323 1333 771
+1150 2 2 1 4 325 772 1335
+1151 2 2 1 4 324 773 1334
+1152 2 2 1 4 502 1477 770
+1153 2 2 1 4 503 1476 771
+1154 2 2 1 4 442 1479 773
+1155 2 2 1 4 443 1478 772
+1156 2 2 1 4 572 1302 1372
+1157 2 2 1 4 573 1303 1373
+1158 2 2 1 4 81 1190 812
+1159 2 2 1 4 18 1191 813
+1160 2 2 1 4 54 814 1192
+1161 2 2 1 4 117 815 1193
+1162 2 2 1 4 496 848 1680
+1163 2 2 1 4 497 849 1681
+1164 2 2 1 4 359 1271 788
+1165 2 2 1 4 358 1270 789
+1166 2 2 1 4 510 782 1820
+1167 2 2 1 4 511 783 1821
+1168 2 2 1 4 413 1467 852
+1169 2 2 1 4 617 852 1467
+1170 2 2 1 4 412 1466 853
+1171 2 2 1 4 616 853 1466
+1172 2 2 1 4 697 1163 1360
+1173 2 2 1 4 696 1162 1361
+1174 2 2 1 4 699 1363 1165
+1175 2 2 1 4 698 1362 1164
+1176 2 2 1 4 380 1330 1831
+1177 2 2 1 4 381 1331 1830
+1178 2 2 1 4 754 1052 1171
+1179 2 2 1 4 755 1053 1170
+1180 2 2 1 4 544 1321 774
+1181 2 2 1 4 545 1320 775
+1182 2 2 1 4 460 1510 986
+1183 2 2 1 4 461 1511 987
+1184 2 2 1 4 309 1079 920
+1185 2 2 1 4 308 1078 921
+1186 2 2 1 4 500 920 1079
+1187 2 2 1 4 501 921 1078
+1188 2 2 1 4 579 1017 1019
+1189 2 2 1 4 578 1016 1018
+1190 2 2 1 4 468 1019 1017
+1191 2 2 1 4 469 1018 1016
+1192 2 2 1 4 440 948 1094
+1193 2 2 1 4 441 949 1095
+1194 2 2 1 4 415 854 1468
+1195 2 2 1 4 414 855 1469
+1196 2 2 1 4 619 1468 854
+1197 2 2 1 4 618 1469 855
+1198 2 2 1 4 540 1370 784
+1199 2 2 1 4 541 1371 785
+1200 2 2 1 4 858 1490 1482
+1201 2 2 1 4 859 1491 1483
+1202 2 2 1 4 316 1388 1580
+1203 2 2 1 4 317 1389 1581
+1204 2 2 1 4 897 1772 1524
+1205 2 2 1 4 896 1773 1525
+1206 2 2 1 4 26 994 25
+1207 2 2 1 4 89 995 88
+1208 2 2 1 4 1077 1379 1746
+1209 2 2 1 4 1076 1378 1747
+1210 2 2 1 4 374 1259 860
+1211 2 2 1 4 375 1258 861
+1212 2 2 1 4 516 1379 1077
+1213 2 2 1 4 517 1378 1076
+1214 2 2 1 4 366 1504 1232
+1215 2 2 1 4 367 1505 1233
+1216 2 2 1 4 332 832 1589
+1217 2 2 1 4 333 833 1588
+1218 2 2 1 4 363 1314 1366
+1219 2 2 1 4 562 1178 1130
+1220 2 2 1 4 653 1130 1178
+1221 2 2 1 4 563 1179 1131
+1222 2 2 1 4 652 1131 1179
+1223 2 2 1 4 51 1136 1685
+1224 2 2 1 4 114 1137 1684
+1225 2 2 1 4 573 1092 834
+1226 2 2 1 4 572 1093 835
+1227 2 2 1 4 496 1680 1700
+1228 2 2 1 4 497 1681 1701
+1229 2 2 1 4 424 858 1482
+1230 2 2 1 4 425 859 1483
+1231 2 2 1 4 380 1831 1109
+1232 2 2 1 4 381 1830 1108
+1233 2 2 1 4 449 1575 970
+1234 2 2 1 4 448 1574 971
+1235 2 2 1 4 865 1518 1545
+1236 2 2 1 4 864 1519 1544
+1237 2 2 1 4 468 1017 1713
+1238 2 2 1 4 469 1016 1712
+1239 2 2 1 4 304 1227 1064
+1240 2 2 1 4 629 1064 1227
+1241 2 2 1 4 305 1226 1065
+1242 2 2 1 4 628 1065 1226
+1243 2 2 1 4 1040 1623 1796
+1244 2 2 1 4 1041 1622 1797
+1245 2 2 1 4 387 1360 1163
+1246 2 2 1 4 386 1361 1162
+1247 2 2 1 4 389 1165 1363
+1248 2 2 1 4 388 1164 1362
+1249 2 2 1 4 510 1264 782
+1250 2 2 1 4 511 1265 783
+1251 2 2 1 4 419 867 1474
+1252 2 2 1 4 418 866 1475
+1253 2 2 1 4 484 990 982
+1254 2 2 1 4 536 982 990
+1255 2 2 1 4 485 991 983
+1256 2 2 1 4 537 983 991
+1257 2 2 1 4 514 1847 785
+1258 2 2 1 4 515 1846 784
+1259 2 2 1 4 432 1780 940
+1260 2 2 1 4 433 1781 941
+1261 2 2 1 4 605 905 1458
+1262 2 2 1 4 604 904 1459
+1263 2 2 1 4 607 1460 903
+1264 2 2 1 4 606 1461 902
+1265 2 2 1 4 435 1327 778
+1266 2 2 1 4 434 1326 779
+1267 2 2 1 4 334 1640 1353
+1268 2 2 1 4 335 1641 1352
+1269 2 2 1 4 696 1135 1570
+1270 2 2 1 4 697 1134 1571
+1271 2 2 1 4 554 1082 1187
+1272 2 2 1 4 555 1083 1186
+1273 2 2 1 4 538 1679 780
+1274 2 2 1 4 539 1678 781
+1275 2 2 1 4 560 989 976
+1276 2 2 1 4 561 988 977
+1277 2 2 1 4 36 1386 35
+1278 2 2 1 4 99 1387 98
+1279 2 2 1 4 95 1779 1405
+1280 2 2 1 4 32 1778 1404
+1281 2 2 1 4 316 1350 856
+1282 2 2 1 4 317 1351 857
+1283 2 2 1 4 586 856 1350
+1284 2 2 1 4 587 857 1351
+1285 2 2 1 4 513 1033 1005
+1286 2 2 1 4 512 1032 1004
+1287 2 2 1 4 494 1005 1033
+1288 2 2 1 4 495 1004 1032
+1289 2 2 1 4 694 1180 1715
+1290 2 2 1 4 695 1181 1714
+1291 2 2 1 4 332 1589 1680
+1292 2 2 1 4 333 1588 1681
+1293 2 2 1 4 52 1136 51
+1294 2 2 1 4 115 1137 114
+1295 2 2 1 4 20 21 1135
+1296 2 2 1 4 83 84 1134
+1297 2 2 1 4 713 970 1097
+1298 2 2 1 4 712 971 1096
+1299 2 2 1 4 985 1724 1254
+1300 2 2 1 4 984 1725 1255
+1301 2 2 1 4 592 1103 864
+1302 2 2 1 4 593 1102 865
+1303 2 2 1 4 439 1210 788
+1304 2 2 1 4 438 1211 789
+1305 2 2 1 4 584 1317 1027
+1306 2 2 1 4 585 1316 1026
+1307 2 2 1 4 482 977 988
+1308 2 2 1 4 483 976 989
+1309 2 2 1 4 329 1097 970
+1310 2 2 1 4 328 1096 971
+1311 2 2 1 4 540 784 1436
+1312 2 2 1 4 541 785 1437
+1313 2 2 1 4 986 1510 1812
+1314 2 2 1 4 987 1511 1813
+1315 2 2 1 4 656 1198 1621
+1316 2 2 1 4 657 1199 1620
+1317 2 2 1 4 419 1276 1919
+1318 2 2 1 4 418 1277 1918
+1319 2 2 1 4 555 1312 1403
+1320 2 2 1 4 554 1313 1402
+1321 2 2 1 4 514 785 1296
+1322 2 2 1 4 515 784 1297
+1323 2 2 1 4 408 1266 873
+1324 2 2 1 4 409 1267 872
+1325 2 2 1 4 548 872 1267
+1326 2 2 1 4 549 873 1266
+1327 2 2 1 4 383 830 1893
+1328 2 2 1 4 382 831 1892
+1329 2 2 1 4 100 912 1555
+1330 2 2 1 4 37 913 1554
+1331 2 2 1 4 644 1143 828
+1332 2 2 1 4 645 1142 829
+1333 2 2 1 4 30 31 1159
+1334 2 2 1 4 93 94 1158
+1335 2 2 1 4 290 865 1102
+1336 2 2 1 4 291 864 1103
+1337 2 2 1 4 677 1761 1583
+1338 2 2 1 4 676 1760 1582
+1339 2 2 1 4 1840 489 1122
+1340 2 2 1 4 892 1840 1122
+1341 2 2 1 4 1841 488 1123
+1342 2 2 1 4 893 1841 1123
+1343 2 2 1 4 595 1507 1439
+1344 2 2 1 4 594 1506 1438
+1345 2 2 1 4 597 1435 1503
+1346 2 2 1 4 596 1434 1502
+1347 2 2 1 4 95 1405 94
+1348 2 2 1 4 32 1404 31
+1349 2 2 1 4 77 1868 76
+1350 2 2 1 4 14 1869 13
+1351 2 2 1 4 58 59 1870
+1352 2 2 1 4 121 122 1871
+1353 2 2 1 4 435 883 1905
+1354 2 2 1 4 435 1905 885
+1355 2 2 1 4 434 882 1904
+1356 2 2 1 4 434 1904 884
+1357 2 2 1 4 593 1118 836
+1358 2 2 1 4 592 1119 837
+1359 2 2 1 4 620 926 1060
+1360 2 2 1 4 621 927 1061
+1361 2 2 1 4 304 1696 808
+1362 2 2 1 4 305 1697 809
+1363 2 2 1 4 506 802 1331
+1364 2 2 1 4 507 803 1330
+1365 2 2 1 4 600 1545 1518
+1366 2 2 1 4 601 1544 1519
+1367 2 2 1 4 365 790 1345
+1368 2 2 1 4 535 1345 790
+1369 2 2 1 4 364 791 1344
+1370 2 2 1 4 534 1344 791
+1371 2 2 1 4 594 929 1288
+1372 2 2 1 4 595 928 1289
+1373 2 2 1 4 596 1290 931
+1374 2 2 1 4 597 1291 930
+1375 2 2 1 4 631 949 1410
+1376 2 2 1 4 369 1410 949
+1377 2 2 1 4 630 948 1411
+1378 2 2 1 4 368 1411 948
+1379 2 2 1 4 715 1046 1908
+1380 2 2 1 4 714 1047 1909
+1381 2 2 1 4 439 788 1395
+1382 2 2 1 4 438 789 1394
+1383 2 2 1 4 502 792 1477
+1384 2 2 1 4 503 793 1476
+1385 2 2 1 4 442 794 1479
+1386 2 2 1 4 443 795 1478
+1387 2 2 1 4 939 1879 1858
+1388 2 2 1 4 938 1878 1859
+1389 2 2 1 4 532 994 1481
+1390 2 2 1 4 533 995 1480
+1391 2 2 1 4 455 912 1794
+1392 2 2 1 4 454 913 1795
+1393 2 2 1 4 717 939 1858
+1394 2 2 1 4 716 938 1859
+1395 2 2 1 4 672 1796 1623
+1396 2 2 1 4 673 1797 1622
+1397 2 2 1 4 1046 1735 1908
+1398 2 2 1 4 1047 1734 1909
+1399 2 2 1 4 660 1025 1515
+1400 2 2 1 4 661 1024 1514
+1401 2 2 1 4 362 911 1254
+1402 2 2 1 4 569 1254 911
+1403 2 2 1 4 363 910 1255
+1404 2 2 1 4 568 1255 910
+1405 2 2 1 4 433 1129 909
+1406 2 2 1 4 432 1128 908
+1407 2 2 1 4 1034 1117 1606
+1408 2 2 1 4 1035 1116 1607
+1409 2 2 1 4 678 1128 1310
+1410 2 2 1 4 588 1310 1128
+1411 2 2 1 4 679 1129 1311
+1412 2 2 1 4 589 1311 1129
+1413 2 2 1 4 1020 1557 1048
+1414 2 2 1 4 1021 1556 1049
+1415 2 2 1 4 336 1590 868
+1416 2 2 1 4 337 1591 869
+1417 2 2 1 4 452 958 1101
+1418 2 2 1 4 453 959 1100
+1419 2 2 1 4 509 1219 972
+1420 2 2 1 4 508 1218 973
+1421 2 2 1 4 476 1738 1000
+1422 2 2 1 4 477 1739 1001
+1423 2 2 1 4 768 1912 1337
+1424 2 2 1 4 769 1913 1336
+1425 2 2 1 4 501 790 1472
+1426 2 2 1 4 500 791 1473
+1427 2 2 1 4 798 1839 968
+1428 2 2 1 4 799 1838 969
+1429 2 2 1 4 23 893 1123
+1430 2 2 1 4 86 892 1122
+1431 2 2 1 4 327 1431 1809
+1432 2 2 1 4 326 1430 1808
+1433 2 2 1 4 612 1576 804
+1434 2 2 1 4 613 1577 805
+1435 2 2 1 4 615 807 1579
+1436 2 2 1 4 614 806 1578
+1437 2 2 1 4 111 925 1305
+1438 2 2 1 4 48 924 1304
+1439 2 2 1 4 471 1352 1293
+1440 2 2 1 4 757 1293 1352
+1441 2 2 1 4 470 1353 1292
+1442 2 2 1 4 756 1292 1353
+1443 2 2 1 4 34 1002 1778
+1444 2 2 1 4 97 1003 1779
+1445 2 2 1 4 128 1560 794
+1446 2 2 1 4 65 1561 795
+1447 2 2 1 4 440 1477 792
+1448 2 2 1 4 441 1476 793
+1449 2 2 1 4 504 1479 794
+1450 2 2 1 4 505 1478 795
+1451 2 2 1 4 350 992 1196
+1452 2 2 1 4 351 993 1197
+1453 2 2 1 4 101 1151 912
+1454 2 2 1 4 38 1150 913
+1455 2 2 1 4 639 894 1531
+1456 2 2 1 4 327 1531 894
+1457 2 2 1 4 638 895 1530
+1458 2 2 1 4 326 1530 895
+1459 2 2 1 4 383 1251 830
+1460 2 2 1 4 527 830 1251
+1461 2 2 1 4 382 1250 831
+1462 2 2 1 4 526 831 1250
+1463 2 2 1 4 321 944 1152
+1464 2 2 1 4 320 945 1153
+1465 2 2 1 4 5 878 1658
+1466 2 2 1 4 68 879 1659
+1467 2 2 1 4 751 810 1756
+1468 2 2 1 4 750 811 1757
+1469 2 2 1 4 363 1255 800
+1470 2 2 1 4 362 1254 801
+1471 2 2 1 4 128 794 1586
+1472 2 2 1 4 65 795 1587
+1473 2 2 1 4 439 1395 894
+1474 2 2 1 4 438 1394 895
+1475 2 2 1 4 366 816 1636
+1476 2 2 1 4 367 817 1637
+1477 2 2 1 4 95 96 1779
+1478 2 2 1 4 32 33 1778
+1479 2 2 1 4 291 1519 864
+1480 2 2 1 4 290 1518 865
+1481 2 2 1 4 797 1306 1451
+1482 2 2 1 4 796 1307 1450
+1483 2 2 1 4 610 1451 1306
+1484 2 2 1 4 611 1450 1307
+1485 2 2 1 4 640 796 1613
+1486 2 2 1 4 641 797 1612
+1487 2 2 1 4 705 1108 1463
+1488 2 2 1 4 704 1109 1462
+1489 2 2 1 4 476 1567 1738
+1490 2 2 1 4 477 1566 1739
+1491 2 2 1 4 821 1914 1664
+1492 2 2 1 4 820 1915 1665
+1493 2 2 1 4 73 74 1042
+1494 2 2 1 4 10 11 1043
+1495 2 2 1 4 62 1045 61
+1496 2 2 1 4 125 1044 124
+1497 2 2 1 4 297 1769 1416
+1498 2 2 1 4 296 1768 1417
+1499 2 2 1 4 361 827 1348
+1500 2 2 1 4 556 1348 827
+1501 2 2 1 4 360 826 1349
+1502 2 2 1 4 557 1349 826
+1503 2 2 1 4 6 1208 5
+1504 2 2 1 4 69 1209 68
+1505 2 2 1 4 425 1425 887
+1506 2 2 1 4 424 1424 886
+1507 2 2 1 4 496 1764 848
+1508 2 2 1 4 497 1765 849
+1509 2 2 1 4 756 1353 1640
+1510 2 2 1 4 757 1352 1641
+1511 2 2 1 4 34 1778 33
+1512 2 2 1 4 97 1779 96
+1513 2 2 1 4 612 812 1576
+1514 2 2 1 4 613 813 1577
+1515 2 2 1 4 412 1576 812
+1516 2 2 1 4 413 1577 813
+1517 2 2 1 4 414 814 1578
+1518 2 2 1 4 415 815 1579
+1519 2 2 1 4 615 1579 815
+1520 2 2 1 4 614 1578 814
+1521 2 2 1 4 627 1120 1167
+1522 2 2 1 4 626 1121 1166
+1523 2 2 1 4 516 1166 1121
+1524 2 2 1 4 517 1167 1120
+1525 2 2 1 4 462 808 1484
+1526 2 2 1 4 463 809 1485
+1527 2 2 1 4 362 801 1315
+1528 2 2 1 4 374 860 1144
+1529 2 2 1 4 375 861 1145
+1530 2 2 1 4 823 1919 1276
+1531 2 2 1 4 822 1918 1277
+1532 2 2 1 4 123 936 1871
+1533 2 2 1 4 60 937 1870
+1534 2 2 1 4 12 1869 935
+1535 2 2 1 4 75 1868 934
+1536 2 2 1 4 662 1719 840
+1537 2 2 1 4 663 1718 841
+1538 2 2 1 4 312 1866 1244
+1539 2 2 1 4 313 1867 1245
+1540 2 2 1 4 488 956 1744
+1541 2 2 1 4 489 957 1745
+1542 2 2 1 4 554 1187 1313
+1543 2 2 1 4 555 1186 1312
+1544 2 2 1 4 336 962 1726
+1545 2 2 1 4 337 963 1727
+1546 2 2 1 4 341 1318 1059
+1547 2 2 1 4 340 1319 1058
+1548 2 2 1 4 630 1094 948
+1549 2 2 1 4 631 1095 949
+1550 2 2 1 4 622 1145 906
+1551 2 2 1 4 623 1144 907
+1552 2 2 1 4 469 1036 1130
+1553 2 2 1 4 468 1037 1131
+1554 2 2 1 4 562 1130 1036
+1555 2 2 1 4 563 1131 1037
+1556 2 2 1 4 383 1893 923
+1557 2 2 1 4 382 1892 922
+1558 2 2 1 4 494 1033 1213
+1559 2 2 1 4 495 1032 1212
+1560 2 2 1 4 799 966 1623
+1561 2 2 1 4 798 967 1622
+1562 2 2 1 4 24 1278 893
+1563 2 2 1 4 87 1279 892
+1564 2 2 1 4 482 1126 1048
+1565 2 2 1 4 564 1048 1126
+1566 2 2 1 4 483 1127 1049
+1567 2 2 1 4 565 1049 1127
+1568 2 2 1 4 390 1300 917
+1569 2 2 1 4 579 917 1300
+1570 2 2 1 4 391 1301 916
+1571 2 2 1 4 578 916 1301
+1572 2 2 1 4 405 1673 1553
+1573 2 2 1 4 404 1672 1552
+1574 2 2 1 4 496 876 1764
+1575 2 2 1 4 497 877 1765
+1576 2 2 1 4 292 915 1234
+1577 2 2 1 4 293 914 1235
+1578 2 2 1 4 745 1553 1673
+1579 2 2 1 4 744 1552 1672
+1580 2 2 1 4 716 1861 1068
+1581 2 2 1 4 717 1860 1069
+1582 2 2 1 4 532 1481 1214
+1583 2 2 1 4 533 1480 1215
+1584 2 2 1 4 1025 1917 1515
+1585 2 2 1 4 1024 1916 1514
+1586 2 2 1 4 427 1623 1040
+1587 2 2 1 4 426 1622 1041
+1588 2 2 1 4 680 1493 1645
+1589 2 2 1 4 681 1492 1644
+1590 2 2 1 4 792 1208 1663
+1591 2 2 1 4 793 1209 1662
+1592 2 2 1 4 583 874 1429
+1593 2 2 1 4 582 875 1428
+1594 2 2 1 4 602 1636 816
+1595 2 2 1 4 603 1637 817
+1596 2 2 1 4 304 876 1696
+1597 2 2 1 4 305 877 1697
+1598 2 2 1 4 519 1188 1026
+1599 2 2 1 4 518 1189 1027
+1600 2 2 1 4 585 1026 1188
+1601 2 2 1 4 584 1027 1189
+1602 2 2 1 4 571 947 1884
+1603 2 2 1 4 570 946 1885
+1604 2 2 1 4 307 1252 918
+1605 2 2 1 4 549 918 1252
+1606 2 2 1 4 306 1253 919
+1607 2 2 1 4 548 919 1253
+1608 2 2 1 4 79 1012 78
+1609 2 2 1 4 16 1013 15
+1610 2 2 1 4 56 57 1014
+1611 2 2 1 4 119 120 1015
+1612 2 2 1 4 321 1152 1826
+1613 2 2 1 4 320 1153 1827
+1614 2 2 1 4 644 828 1902
+1615 2 2 1 4 645 829 1903
+1616 2 2 1 4 502 1217 878
+1617 2 2 1 4 503 1216 879
+1618 2 2 1 4 357 823 1635
+1619 2 2 1 4 356 822 1634
+1620 2 2 1 4 1027 1317 1894
+1621 2 2 1 4 1026 1316 1895
+1622 2 2 1 4 504 1560 1104
+1623 2 2 1 4 505 1561 1105
+1624 2 2 1 4 816 1232 1621
+1625 2 2 1 4 817 1233 1620
+1626 2 2 1 4 454 1621 1232
+1627 2 2 1 4 455 1620 1233
+1628 2 2 1 4 526 1263 831
+1629 2 2 1 4 527 1262 830
+1630 2 2 1 4 372 1161 1612
+1631 2 2 1 4 373 1160 1613
+1632 2 2 1 4 514 1880 974
+1633 2 2 1 4 515 1881 975
+1634 2 2 1 4 412 812 1466
+1635 2 2 1 4 413 813 1467
+1636 2 2 1 4 414 1469 814
+1637 2 2 1 4 415 1468 815
+1638 2 2 1 4 310 1194 1039
+1639 2 2 1 4 311 1195 1038
+1640 2 2 1 4 944 1753 1597
+1641 2 2 1 4 945 1752 1596
+1642 2 2 1 4 621 1492 927
+1643 2 2 1 4 620 1493 926
+1644 2 2 1 4 370 927 1492
+1645 2 2 1 4 371 926 1493
+1646 2 2 1 4 912 1151 1794
+1647 2 2 1 4 913 1150 1795
+1648 2 2 1 4 332 1680 848
+1649 2 2 1 4 333 1681 849
+1650 2 2 1 4 659 1549 965
+1651 2 2 1 4 658 1548 964
+1652 2 2 1 4 467 965 1549
+1653 2 2 1 4 466 964 1548
+1654 2 2 1 4 592 1176 1103
+1655 2 2 1 4 593 1177 1102
+1656 2 2 1 4 623 1241 1185
+1657 2 2 1 4 622 1240 1184
+1658 2 2 1 4 620 1645 1493
+1659 2 2 1 4 621 1644 1492
+1660 2 2 1 4 330 1626 836
+1661 2 2 1 4 331 1627 837
+1662 2 2 1 4 601 833 1544
+1663 2 2 1 4 600 832 1545
+1664 2 2 1 4 638 1693 895
+1665 2 2 1 4 639 1692 894
+1666 2 2 1 4 451 820 1375
+1667 2 2 1 4 450 821 1374
+1668 2 2 1 4 433 1197 1781
+1669 2 2 1 4 432 1196 1780
+1670 2 2 1 4 481 1086 1609
+1671 2 2 1 4 480 1087 1608
+1672 2 2 1 4 338 1536 1006
+1673 2 2 1 4 666 1006 1536
+1674 2 2 1 4 339 1537 1007
+1675 2 2 1 4 667 1007 1537
+1676 2 2 1 4 636 1084 1327
+1677 2 2 1 4 637 1085 1326
+1678 2 2 1 4 686 878 1901
+1679 2 2 1 4 687 879 1900
+1680 2 2 1 4 356 1688 822
+1681 2 2 1 4 357 1689 823
+1682 2 2 1 4 1687 526 1250
+1683 2 2 1 4 889 1687 1250
+1684 2 2 1 4 1686 527 1251
+1685 2 2 1 4 888 1686 1251
+1686 2 2 1 4 548 1253 1272
+1687 2 2 1 4 549 1252 1273
+1688 2 2 1 4 692 1272 1253
+1689 2 2 1 4 693 1273 1252
+1690 2 2 1 4 512 1062 1594
+1691 2 2 1 4 513 1063 1595
+1692 2 2 1 4 560 1103 1176
+1693 2 2 1 4 561 1102 1177
+1694 2 2 1 4 584 1276 838
+1695 2 2 1 4 585 1277 839
+1696 2 2 1 4 1888 330 836
+1697 2 2 1 4 1889 331 837
+1698 2 2 1 4 702 1866 1438
+1699 2 2 1 4 703 1867 1439
+1700 2 2 1 4 398 1728 952
+1701 2 2 1 4 690 952 1728
+1702 2 2 1 4 399 1729 953
+1703 2 2 1 4 691 953 1729
+1704 2 2 1 4 624 840 1629
+1705 2 2 1 4 625 841 1628
+1706 2 2 1 4 493 1226 950
+1707 2 2 1 4 492 1227 951
+1708 2 2 1 4 678 1403 1312
+1709 2 2 1 4 679 1402 1313
+1710 2 2 1 4 681 1644 1790
+1711 2 2 1 4 680 1645 1791
+1712 2 2 1 4 418 1261 866
+1713 2 2 1 4 419 1260 867
+1714 2 2 1 4 540 866 1261
+1715 2 2 1 4 541 867 1260
+1716 2 2 1 4 366 1378 1120
+1717 2 2 1 4 367 1379 1121
+1718 2 2 1 4 357 1465 1113
+1719 2 2 1 4 356 1464 1112
+1720 2 2 1 4 460 1818 1010
+1721 2 2 1 4 461 1819 1011
+1722 2 2 1 4 740 1010 1818
+1723 2 2 1 4 741 1011 1819
+1724 2 2 1 4 502 899 1217
+1725 2 2 1 4 503 898 1216
+1726 2 2 1 4 301 834 1317
+1727 2 2 1 4 300 835 1316
+1728 2 2 1 4 502 878 1208
+1729 2 2 1 4 503 879 1209
+1730 2 2 1 4 345 1262 882
+1731 2 2 1 4 344 1263 883
+1732 2 2 1 4 553 1305 925
+1733 2 2 1 4 552 1304 924
+1734 2 2 1 4 413 852 1506
+1735 2 2 1 4 412 853 1507
+1736 2 2 1 4 428 1380 846
+1737 2 2 1 4 429 1381 847
+1738 2 2 1 4 532 893 1278
+1739 2 2 1 4 533 892 1279
+1740 2 2 1 4 770 1332 899
+1741 2 2 1 4 771 1333 898
+1742 2 2 1 4 773 901 1334
+1743 2 2 1 4 772 900 1335
+1744 2 2 1 4 809 953 1485
+1745 2 2 1 4 808 952 1484
+1746 2 2 1 4 681 1294 1203
+1747 2 2 1 4 680 1295 1202
+1748 2 2 1 4 550 1203 1294
+1749 2 2 1 4 551 1202 1295
+1750 2 2 1 4 401 1111 1547
+1751 2 2 1 4 400 1110 1546
+1752 2 2 1 4 300 839 1683
+1753 2 2 1 4 301 838 1682
+1754 2 2 1 4 123 1871 122
+1755 2 2 1 4 60 1870 59
+1756 2 2 1 4 12 13 1869
+1757 2 2 1 4 75 76 1868
+1758 2 2 1 4 415 1502 854
+1759 2 2 1 4 414 1503 855
+1760 2 2 1 4 428 868 1380
+1761 2 2 1 4 429 869 1381
+1762 2 2 1 4 558 1380 868
+1763 2 2 1 4 559 1381 869
+1764 2 2 1 4 664 1366 1314
+1765 2 2 1 4 764 1680 1589
+1766 2 2 1 4 765 1681 1588
+1767 2 2 1 4 443 1500 903
+1768 2 2 1 4 442 1501 902
+1769 2 2 1 4 606 902 1501
+1770 2 2 1 4 607 903 1500
+1771 2 2 1 4 600 1589 832
+1772 2 2 1 4 601 1588 833
+1773 2 2 1 4 409 872 1427
+1774 2 2 1 4 408 873 1426
+1775 2 2 1 4 581 1427 872
+1776 2 2 1 4 580 1426 873
+1777 2 2 1 4 332 1514 832
+1778 2 2 1 4 333 1515 833
+1779 2 2 1 4 498 1711 1724
+1780 2 2 1 4 499 1710 1725
+1781 2 2 1 4 398 952 1700
+1782 2 2 1 4 399 953 1701
+1783 2 2 1 4 724 1596 1716
+1784 2 2 1 4 725 1597 1717
+1785 2 2 1 4 305 950 1226
+1786 2 2 1 4 304 951 1227
+1787 2 2 1 4 504 1365 901
+1788 2 2 1 4 505 1364 900
+1789 2 2 1 4 658 964 1452
+1790 2 2 1 4 659 965 1453
+1791 2 2 1 4 593 836 1666
+1792 2 2 1 4 592 837 1667
+1793 2 2 1 4 391 916 1248
+1794 2 2 1 4 390 917 1249
+1795 2 2 1 4 535 1248 916
+1796 2 2 1 4 534 1249 917
+1797 2 2 1 4 583 1044 1175
+1798 2 2 1 4 582 1045 1174
+1799 2 2 1 4 606 1175 1044
+1800 2 2 1 4 607 1174 1045
+1801 2 2 1 4 581 1173 1043
+1802 2 2 1 4 604 1043 1173
+1803 2 2 1 4 580 1172 1042
+1804 2 2 1 4 605 1042 1172
+1805 2 2 1 4 351 1218 1081
+1806 2 2 1 4 350 1219 1080
+1807 2 2 1 4 633 944 1597
+1808 2 2 1 4 632 945 1596
+1809 2 2 1 4 481 1058 1473
+1810 2 2 1 4 480 1059 1472
+1811 2 2 1 4 309 920 1295
+1812 2 2 1 4 308 921 1294
+1813 2 2 1 4 551 1295 920
+1814 2 2 1 4 550 1294 921
+1815 2 2 1 4 314 846 1338
+1816 2 2 1 4 315 847 1339
+1817 2 2 1 4 390 1249 880
+1818 2 2 1 4 391 1248 881
+1819 2 2 1 4 308 1221 1078
+1820 2 2 1 4 309 1220 1079
+1821 2 2 1 4 496 1696 876
+1822 2 2 1 4 497 1697 877
+1823 2 2 1 4 419 1474 838
+1824 2 2 1 4 418 1475 839
+1825 2 2 1 4 514 1225 1880
+1826 2 2 1 4 515 1224 1881
+1827 2 2 1 4 378 1328 1309
+1828 2 2 1 4 379 1329 1308
+1829 2 2 1 4 764 1700 1680
+1830 2 2 1 4 765 1701 1681
+1831 2 2 1 4 498 1536 1056
+1832 2 2 1 4 499 1537 1057
+1833 2 2 1 4 566 1390 886
+1834 2 2 1 4 567 1391 887
+1835 2 2 1 4 424 886 1390
+1836 2 2 1 4 425 887 1391
+1837 2 2 1 4 634 942 1148
+1838 2 2 1 4 635 943 1149
+1839 2 2 1 4 406 1170 1654
+1840 2 2 1 4 407 1171 1655
+1841 2 2 1 4 352 1372 844
+1842 2 2 1 4 353 1373 845
+1843 2 2 1 4 352 844 1776
+1844 2 2 1 4 353 845 1777
+1845 2 2 1 4 896 1408 1169
+1846 2 2 1 4 897 1409 1168
+1847 2 2 1 4 820 1665 1375
+1848 2 2 1 4 821 1664 1374
+1849 2 2 1 4 778 1826 1152
+1850 2 2 1 4 779 1827 1153
+1851 2 2 1 4 712 993 1798
+1852 2 2 1 4 713 992 1800
+1853 2 2 1 4 373 1450 1533
+1854 2 2 1 4 372 1451 1532
+1855 2 2 1 4 590 1482 1490
+1856 2 2 1 4 591 1483 1491
+1857 2 2 1 4 481 1473 1086
+1858 2 2 1 4 480 1472 1087
+1859 2 2 1 4 633 1152 944
+1860 2 2 1 4 632 1153 945
+1861 2 2 1 4 635 880 1766
+1862 2 2 1 4 634 881 1767
+1863 2 2 1 4 568 1241 984
+1864 2 2 1 4 306 984 1241
+1865 2 2 1 4 569 1240 985
+1866 2 2 1 4 307 985 1240
+1867 2 2 1 4 804 1576 1289
+1868 2 2 1 4 805 1577 1288
+1869 2 2 1 4 412 1289 1576
+1870 2 2 1 4 413 1288 1577
+1871 2 2 1 4 414 1578 1291
+1872 2 2 1 4 415 1579 1290
+1873 2 2 1 4 806 1291 1578
+1874 2 2 1 4 807 1290 1579
+1875 2 2 1 4 625 1628 1051
+1876 2 2 1 4 624 1629 1050
+1877 2 2 1 4 304 1354 876
+1878 2 2 1 4 305 1355 877
+1879 2 2 1 4 447 1412 850
+1880 2 2 1 4 446 1413 851
+1881 2 2 1 4 699 1685 1136
+1882 2 2 1 4 698 1684 1137
+1883 2 2 1 4 329 1307 998
+1884 2 2 1 4 328 1306 999
+1885 2 2 1 4 294 885 1687
+1886 2 2 1 4 295 884 1686
+1887 2 2 1 4 474 1170 1053
+1888 2 2 1 4 475 1171 1052
+1889 2 2 1 4 385 1216 898
+1890 2 2 1 4 384 1217 899
+1891 2 2 1 4 316 856 1388
+1892 2 2 1 4 317 857 1389
+1893 2 2 1 4 424 1390 856
+1894 2 2 1 4 425 1391 857
+1895 2 2 1 4 486 1457 1872
+1896 2 2 1 4 487 1456 1873
+1897 2 2 1 4 342 1538 886
+1898 2 2 1 4 343 1539 887
+1899 2 2 1 4 295 1686 888
+1900 2 2 1 4 294 1687 889
+1901 2 2 1 4 292 1234 1392
+1902 2 2 1 4 293 1235 1393
+1903 2 2 1 4 366 1636 1378
+1904 2 2 1 4 367 1637 1379
+1905 2 2 1 4 357 1189 1085
+1906 2 2 1 4 356 1188 1084
+1907 2 2 1 4 712 1799 971
+1908 2 2 1 4 448 971 1799
+1909 2 2 1 4 713 1801 970
+1910 2 2 1 4 449 970 1801
+1911 2 2 1 4 339 1155 1804
+1912 2 2 1 4 338 1154 1805
+1913 2 2 1 4 341 1806 1157
+1914 2 2 1 4 340 1807 1156
+1915 2 2 1 4 517 1638 1787
+1916 2 2 1 4 516 1639 1786
+1917 2 2 1 4 789 1595 1394
+1918 2 2 1 4 788 1594 1395
+1919 2 2 1 4 358 1490 858
+1920 2 2 1 4 359 1491 859
+1921 2 2 1 4 439 894 1243
+1922 2 2 1 4 438 895 1242
+1923 2 2 1 4 745 1673 1239
+1924 2 2 1 4 744 1672 1238
+1925 2 2 1 4 850 1619 1896
+1926 2 2 1 4 851 1618 1897
+1927 2 2 1 4 311 1204 973
+1928 2 2 1 4 310 1205 972
+1929 2 2 1 4 512 1594 1271
+1930 2 2 1 4 513 1595 1270
+1931 2 2 1 4 440 904 1528
+1932 2 2 1 4 604 1528 904
+1933 2 2 1 4 441 905 1529
+1934 2 2 1 4 605 1529 905
+1935 2 2 1 4 558 868 1590
+1936 2 2 1 4 559 869 1591
+1937 2 2 1 4 686 1658 878
+1938 2 2 1 4 687 1659 879
+1939 2 2 1 4 346 866 1436
+1940 2 2 1 4 347 867 1437
+1941 2 2 1 4 719 958 1878
+1942 2 2 1 4 393 1878 958
+1943 2 2 1 4 718 959 1879
+1944 2 2 1 4 392 1879 959
+1945 2 2 1 4 74 1325 1042
+1946 2 2 1 4 11 1324 1043
+1947 2 2 1 4 61 1045 1323
+1948 2 2 1 4 124 1044 1322
+1949 2 2 1 4 529 1770 890
+1950 2 2 1 4 528 1771 891
+1951 2 2 1 4 555 1403 978
+1952 2 2 1 4 554 1402 979
+1953 2 2 1 4 552 1552 980
+1954 2 2 1 4 553 1553 981
+1955 2 2 1 4 592 864 1600
+1956 2 2 1 4 593 865 1601
+1957 2 2 1 4 78 1012 1138
+1958 2 2 1 4 15 1013 1139
+1959 2 2 1 4 120 1140 1015
+1960 2 2 1 4 57 1141 1014
+1961 2 2 1 4 507 1330 946
+1962 2 2 1 4 506 1331 947
+1963 2 2 1 4 623 1185 1050
+1964 2 2 1 4 622 1184 1051
+1965 2 2 1 4 417 1597 1753
+1966 2 2 1 4 416 1596 1752
+1967 2 2 1 4 540 1436 866
+1968 2 2 1 4 541 1437 867
+1969 2 2 1 4 322 1664 1914
+1970 2 2 1 4 323 1665 1915
+1971 2 2 1 4 458 1418 870
+1972 2 2 1 4 459 1419 871
+1973 2 2 1 4 732 1654 1170
+1974 2 2 1 4 733 1655 1171
+1975 2 2 1 4 518 1827 1730
+1976 2 2 1 4 519 1826 1731
+1977 2 2 1 4 81 82 1190
+1978 2 2 1 4 18 19 1191
+1979 2 2 1 4 54 1192 53
+1980 2 2 1 4 117 1193 116
+1981 2 2 1 4 531 933 1242
+1982 2 2 1 4 438 1242 933
+1983 2 2 1 4 530 932 1243
+1984 2 2 1 4 439 1243 932
+1985 2 2 1 4 456 1024 1694
+1986 2 2 1 4 457 1025 1695
+1987 2 2 1 4 101 102 1151
+1988 2 2 1 4 38 39 1150
+1989 2 2 1 4 805 1804 1155
+1990 2 2 1 4 804 1805 1154
+1991 2 2 1 4 807 1157 1806
+1992 2 2 1 4 806 1156 1807
+1993 2 2 1 4 428 1452 868
+1994 2 2 1 4 429 1453 869
+1995 2 2 1 4 725 1773 896
+1996 2 2 1 4 724 1772 897
+1997 2 2 1 4 718 1845 959
+1998 2 2 1 4 719 1844 958
+1999 2 2 1 4 528 1234 915
+2000 2 2 1 4 529 1235 914
+2001 2 2 1 4 568 1185 1241
+2002 2 2 1 4 569 1184 1240
+2003 2 2 1 4 572 1372 1093
+2004 2 2 1 4 573 1373 1092
+2005 2 2 1 4 544 1394 1595
+2006 2 2 1 4 545 1395 1594
+2007 2 2 1 4 435 885 1421
+2008 2 2 1 4 434 884 1420
+2009 2 2 1 4 338 1006 1154
+2010 2 2 1 4 339 1007 1155
+2011 2 2 1 4 340 1156 1008
+2012 2 2 1 4 341 1157 1009
+2013 2 2 1 4 403 1480 1526
+2014 2 2 1 4 402 1481 1527
+2015 2 2 1 4 561 910 1836
+2016 2 2 1 4 560 911 1837
+2017 2 2 1 4 351 1798 993
+2018 2 2 1 4 350 1800 992
+2019 2 2 1 4 493 922 1892
+2020 2 2 1 4 492 923 1893
+2021 2 2 1 4 568 910 1775
+2022 2 2 1 4 569 911 1774
+2023 2 2 1 4 435 1593 883
+2024 2 2 1 4 434 1592 882
+2025 2 2 1 4 327 894 1280
+2026 2 2 1 4 326 895 1281
+2027 2 2 1 4 423 1119 1600
+2028 2 2 1 4 422 1118 1601
+2029 2 2 1 4 2 68 1659
+2030 2 2 1 4 1 5 1658
+2031 2 2 1 4 359 1032 1271
+2032 2 2 1 4 358 1033 1270
+2033 2 2 1 4 520 1138 1012
+2034 2 2 1 4 521 1139 1013
+2035 2 2 1 4 522 1014 1141
+2036 2 2 1 4 523 1015 1140
+2037 2 2 1 4 22 23 1123
+2038 2 2 1 4 85 86 1122
+2039 2 2 1 4 532 1841 893
+2040 2 2 1 4 533 1840 892
+2041 2 2 1 4 635 1532 880
+2042 2 2 1 4 634 1533 881
+2043 2 2 1 4 671 1547 1111
+2044 2 2 1 4 670 1546 1110
+2045 2 2 1 4 479 1625 1315
+2046 2 2 1 4 344 883 1855
+2047 2 2 1 4 345 882 1854
+2048 2 2 1 4 396 1774 1176
+2049 2 2 1 4 397 1775 1177
+2050 2 2 1 4 566 886 1538
+2051 2 2 1 4 567 887 1539
+2052 2 2 1 4 637 1420 1055
+2053 2 2 1 4 636 1421 1054
+2054 2 2 1 4 528 915 1771
+2055 2 2 1 4 529 914 1770
+2056 2 2 1 4 510 1820 1030
+2057 2 2 1 4 511 1821 1031
+2058 2 2 1 4 658 1222 1548
+2059 2 2 1 4 659 1223 1549
+2060 2 2 1 4 513 888 1551
+2061 2 2 1 4 512 889 1550
+2062 2 2 1 4 1051 1628 1534
+2063 2 2 1 4 1050 1629 1535
+2064 2 2 1 4 129 130 1104
+2065 2 2 1 4 66 67 1105
+2066 2 2 1 4 40 41 1347
+2067 2 2 1 4 103 104 1346
+2068 2 2 1 4 647 898 1333
+2069 2 2 1 4 646 899 1332
+2070 2 2 1 4 649 1335 900
+2071 2 2 1 4 648 1334 901
+2072 2 2 1 4 484 982 1788
+2073 2 2 1 4 485 983 1789
+2074 2 2 1 4 99 100 1555
+2075 2 2 1 4 36 37 1554
+2076 2 2 1 4 75 934 1325
+2077 2 2 1 4 12 935 1324
+2078 2 2 1 4 60 1323 937
+2079 2 2 1 4 123 1322 936
+2080 2 2 1 4 653 1178 1608
+2081 2 2 1 4 652 1179 1609
+2082 2 2 1 4 472 1069 1860
+2083 2 2 1 4 473 1068 1861
+2084 2 2 1 4 491 1835 924
+2085 2 2 1 4 490 1834 925
+2086 2 2 1 4 639 1449 1133
+2087 2 2 1 4 638 1448 1132
+2088 2 2 1 4 640 1160 1516
+2089 2 2 1 4 641 1161 1517
+2090 2 2 1 4 514 1035 1847
+2091 2 2 1 4 515 1034 1846
+2092 2 2 1 4 380 1639 1077
+2093 2 2 1 4 381 1638 1076
+2094 2 2 1 4 385 900 1364
+2095 2 2 1 4 384 901 1365
+2096 2 2 1 4 543 1075 1887
+2097 2 2 1 4 542 1074 1886
+2098 2 2 1 4 530 1822 932
+2099 2 2 1 4 531 1823 933
+2100 2 2 1 4 508 973 1204
+2101 2 2 1 4 509 972 1205
+2102 2 2 1 4 1084 1731 1327
+2103 2 2 1 4 1085 1730 1326
+2104 2 2 1 4 517 1787 1167
+2105 2 2 1 4 516 1786 1166
+2106 2 2 1 4 378 1070 1328
+2107 2 2 1 4 379 1071 1329
+2108 2 2 1 4 575 1239 1673
+2109 2 2 1 4 574 1238 1672
+2110 2 2 1 4 759 1782 1107
+2111 2 2 1 4 758 1783 1106
+2112 2 2 1 4 352 1107 1782
+2113 2 2 1 4 353 1106 1783
+2114 2 2 1 4 372 1532 1149
+2115 2 2 1 4 373 1533 1148
+2116 2 2 1 4 392 1858 1879
+2117 2 2 1 4 393 1859 1878
+2118 2 2 1 4 929 1804 1288
+2119 2 2 1 4 928 1805 1289
+2120 2 2 1 4 931 1290 1806
+2121 2 2 1 4 930 1291 1807
+2122 2 2 1 4 307 906 1656
+2123 2 2 1 4 306 907 1657
+2124 2 2 1 4 479 928 1862
+2125 2 2 1 4 478 929 1863
+2126 2 2 1 4 323 1095 1665
+2127 2 2 1 4 322 1094 1664
+2128 2 2 1 4 722 1454 1784
+2129 2 2 1 4 723 1455 1785
+2130 2 2 1 4 801 1724 1711
+2131 2 2 1 4 800 1725 1710
+2132 2 2 1 4 520 1154 1006
+2133 2 2 1 4 521 1155 1007
+2134 2 2 1 4 522 1008 1156
+2135 2 2 1 4 523 1009 1157
+2136 2 2 1 4 449 1771 915
+2137 2 2 1 4 448 1770 914
+2138 2 2 1 4 546 1743 960
+2139 2 2 1 4 547 1742 961
+2140 2 2 1 4 518 1046 1827
+2141 2 2 1 4 519 1047 1826
+2142 2 2 1 4 628 1408 896
+2143 2 2 1 4 629 1409 897
+2144 2 2 1 4 518 1027 1735
+2145 2 2 1 4 519 1026 1734
+2146 2 2 1 4 543 1432 908
+2147 2 2 1 4 542 1433 909
+2148 2 2 1 4 719 1878 938
+2149 2 2 1 4 718 1879 939
+2150 2 2 1 4 709 1356 1301
+2151 2 2 1 4 578 1301 1356
+2152 2 2 1 4 708 1357 1300
+2153 2 2 1 4 579 1300 1357
+2154 2 2 1 4 499 1703 1537
+2155 2 2 1 4 498 1702 1536
+2156 2 2 1 4 535 916 1345
+2157 2 2 1 4 534 917 1344
+2158 2 2 1 4 362 1837 911
+2159 2 2 1 4 363 1836 910
+2160 2 2 1 4 498 1056 1711
+2161 2 2 1 4 499 1057 1710
+2162 2 2 1 4 340 930 1807
+2163 2 2 1 4 341 931 1806
+2164 2 2 1 4 674 1196 992
+2165 2 2 1 4 675 1197 993
+2166 2 2 1 4 894 1395 1280
+2167 2 2 1 4 895 1394 1281
+2168 2 2 1 4 77 78 1138
+2169 2 2 1 4 14 15 1139
+2170 2 2 1 4 121 1140 120
+2171 2 2 1 4 58 1141 57
+2172 2 2 1 4 909 1129 1661
+2173 2 2 1 4 908 1128 1660
+2174 2 2 1 4 736 1147 1527
+2175 2 2 1 4 737 1146 1526
+2176 2 2 1 4 571 1337 1912
+2177 2 2 1 4 570 1336 1913
+2178 2 2 1 4 553 925 1834
+2179 2 2 1 4 552 924 1835
+2180 2 2 1 4 972 1219 1669
+2181 2 2 1 4 973 1218 1668
+2182 2 2 1 4 518 1735 1046
+2183 2 2 1 4 519 1734 1047
+2184 2 2 1 4 580 1325 934
+2185 2 2 1 4 581 1324 935
+2186 2 2 1 4 583 936 1322
+2187 2 2 1 4 582 937 1323
+2188 2 2 1 4 882 1262 1904
+2189 2 2 1 4 883 1263 1905
+2190 2 2 1 4 432 908 1432
+2191 2 2 1 4 433 909 1433
+2192 2 2 1 4 591 1444 955
+2193 2 2 1 4 590 1445 954
+2194 2 2 1 4 299 955 1444
+2195 2 2 1 4 298 954 1445
+2196 2 2 1 4 494 1213 1463
+2197 2 2 1 4 495 1212 1462
+2198 2 2 1 4 377 908 1660
+2199 2 2 1 4 376 909 1661
+2200 2 2 1 4 737 1526 1480
+2201 2 2 1 4 736 1527 1481
+2202 2 2 1 4 324 1896 1619
+2203 2 2 1 4 325 1897 1618
+2204 2 2 1 4 636 1054 1464
+2205 2 2 1 4 507 1464 1054
+2206 2 2 1 4 637 1055 1465
+2207 2 2 1 4 506 1465 1055
+2208 2 2 1 4 500 1058 1319
+2209 2 2 1 4 501 1059 1318
+2210 2 2 1 4 127 1586 902
+2211 2 2 1 4 64 1587 903
+2212 2 2 1 4 8 904 1585
+2213 2 2 1 4 71 905 1584
+2214 2 2 1 4 303 941 1833
+2215 2 2 1 4 302 940 1832
+2216 2 2 1 4 99 1555 1387
+2217 2 2 1 4 36 1554 1386
+2218 2 2 1 4 530 968 1822
+2219 2 2 1 4 531 969 1823
+2220 2 2 1 4 498 918 1702
+2221 2 2 1 4 499 919 1703
+2222 2 2 1 4 500 1705 920
+2223 2 2 1 4 501 1704 921
+2224 2 2 1 4 726 999 1236
+2225 2 2 1 4 727 998 1237
+2226 2 2 1 4 487 1803 1258
+2227 2 2 1 4 486 1802 1259
+2228 2 2 1 4 289 1229 982
+2229 2 2 1 4 289 1228 983
+2230 2 2 1 4 493 1892 1169
+2231 2 2 1 4 831 1169 1892
+2232 2 2 1 4 492 1893 1168
+2233 2 2 1 4 830 1168 1893
+2234 2 2 1 4 578 1471 916
+2235 2 2 1 4 579 1470 917
+2236 2 2 1 4 527 1904 1262
+2237 2 2 1 4 526 1905 1263
+2238 2 2 1 4 311 1376 1204
+2239 2 2 1 4 310 1377 1205
+2240 2 2 1 4 861 1258 1803
+2241 2 2 1 4 860 1259 1802
+2242 2 2 1 4 959 1845 1100
+2243 2 2 1 4 958 1844 1101
+2244 2 2 1 4 374 1719 1259
+2245 2 2 1 4 375 1718 1258
+2246 2 2 1 4 580 1042 1325
+2247 2 2 1 4 581 1043 1324
+2248 2 2 1 4 582 1323 1045
+2249 2 2 1 4 583 1322 1044
+2250 2 2 1 4 293 1793 914
+2251 2 2 1 4 292 1792 915
+2252 2 2 1 4 664 1624 1183
+2253 2 2 1 4 665 1625 1182
+2254 2 2 1 4 781 1755 1651
+2255 2 2 1 4 780 1754 1650
+2256 2 2 1 4 463 1708 922
+2257 2 2 1 4 462 1709 923
+2258 2 2 1 4 532 956 1841
+2259 2 2 1 4 533 957 1840
+2260 2 2 1 4 378 1287 1070
+2261 2 2 1 4 379 1286 1071
+2262 2 2 1 4 466 1022 1440
+2263 2 2 1 4 608 1440 1022
+2264 2 2 1 4 467 1023 1441
+2265 2 2 1 4 609 1441 1023
+2266 2 2 1 4 780 1650 1038
+2267 2 2 1 4 781 1651 1039
+2268 2 2 1 4 342 1568 1030
+2269 2 2 1 4 343 1569 1031
+2270 2 2 1 4 25 994 1278
+2271 2 2 1 4 88 995 1279
+2272 2 2 1 4 654 1106 1486
+2273 2 2 1 4 655 1107 1487
+2274 2 2 1 4 572 1222 1302
+2275 2 2 1 4 573 1223 1303
+2276 2 2 1 4 658 1302 1222
+2277 2 2 1 4 659 1303 1223
+2278 2 2 1 4 599 1555 912
+2279 2 2 1 4 598 1554 913
+2280 2 2 1 4 397 1050 1185
+2281 2 2 1 4 396 1051 1184
+2282 2 2 1 4 359 1212 1032
+2283 2 2 1 4 358 1213 1033
+2284 2 2 1 4 1075 1194 1887
+2285 2 2 1 4 1074 1195 1886
+2286 2 2 1 4 747 1745 1275
+2287 2 2 1 4 746 1744 1274
+2288 2 2 1 4 643 1309 1328
+2289 2 2 1 4 642 1308 1329
+2290 2 2 1 4 520 1006 1282
+2291 2 2 1 4 521 1007 1283
+2292 2 2 1 4 522 1284 1008
+2293 2 2 1 4 523 1285 1009
+2294 2 2 1 4 29 960 1743
+2295 2 2 1 4 92 961 1742
+2296 2 2 1 4 380 1882 1330
+2297 2 2 1 4 381 1883 1331
+2298 2 2 1 4 946 1330 1882
+2299 2 2 1 4 947 1331 1883
+2300 2 2 1 4 79 1496 1012
+2301 2 2 1 4 16 1497 1013
+2302 2 2 1 4 56 1014 1498
+2303 2 2 1 4 119 1015 1499
+2304 2 2 1 4 650 1392 1234
+2305 2 2 1 4 651 1393 1235
+2306 2 2 1 4 612 1012 1496
+2307 2 2 1 4 613 1013 1497
+2308 2 2 1 4 614 1498 1014
+2309 2 2 1 4 615 1499 1015
+2310 2 2 1 4 549 1815 918
+2311 2 2 1 4 548 1814 919
+2312 2 2 1 4 551 920 1817
+2313 2 2 1 4 550 921 1816
+2314 2 2 1 4 91 1146 90
+2315 2 2 1 4 28 1147 27
+2316 2 2 1 4 539 1201 1066
+2317 2 2 1 4 538 1200 1067
+2318 2 2 1 4 443 926 1500
+2319 2 2 1 4 442 927 1501
+2320 2 2 1 4 47 1304 980
+2321 2 2 1 4 110 1305 981
+2322 2 2 1 4 403 1921 1293
+2323 2 2 1 4 402 1920 1292
+2324 2 2 1 4 382 1062 1550
+2325 2 2 1 4 383 1063 1551
+2326 2 2 1 4 580 934 1426
+2327 2 2 1 4 581 935 1427
+2328 2 2 1 4 583 1429 936
+2329 2 2 1 4 582 1428 937
+2330 2 2 1 4 895 1693 1242
+2331 2 2 1 4 894 1692 1243
+2332 2 2 1 4 722 1000 1454
+2333 2 2 1 4 723 1001 1455
+2334 2 2 1 4 546 1527 1147
+2335 2 2 1 4 547 1526 1146
+2336 2 2 1 4 538 1074 1200
+2337 2 2 1 4 539 1075 1201
+2338 2 2 1 4 371 1671 926
+2339 2 2 1 4 370 1670 927
+2340 2 2 1 4 552 1207 1552
+2341 2 2 1 4 553 1206 1553
+2342 2 2 1 4 392 1236 1858
+2343 2 2 1 4 842 1858 1236
+2344 2 2 1 4 393 1237 1859
+2345 2 2 1 4 843 1859 1237
+2346 2 2 1 4 692 1657 1616
+2347 2 2 1 4 693 1656 1617
+2348 2 2 1 4 492 1409 1227
+2349 2 2 1 4 493 1408 1226
+2350 2 2 1 4 376 1187 1200
+2351 2 2 1 4 377 1186 1201
+2352 2 2 1 4 538 1195 1074
+2353 2 2 1 4 539 1194 1075
+2354 2 2 1 4 595 1862 928
+2355 2 2 1 4 594 1863 929
+2356 2 2 1 4 597 930 1864
+2357 2 2 1 4 596 931 1865
+2358 2 2 1 4 348 1310 1072
+2359 2 2 1 4 349 1311 1073
+2360 2 2 1 4 588 1072 1310
+2361 2 2 1 4 589 1073 1311
+2362 2 2 1 4 376 1200 1074
+2363 2 2 1 4 377 1201 1075
+2364 2 2 1 4 553 1834 962
+2365 2 2 1 4 552 1835 963
+2366 2 2 1 4 532 1278 994
+2367 2 2 1 4 533 1279 995
+2368 2 2 1 4 536 1187 1082
+2369 2 2 1 4 537 1186 1083
+2370 2 2 1 4 745 981 1553
+2371 2 2 1 4 744 980 1552
+2372 2 2 1 4 321 1751 944
+2373 2 2 1 4 320 1750 945
+2374 2 2 1 4 311 973 1886
+2375 2 2 1 4 310 972 1887
+2376 2 2 1 4 519 1084 1188
+2377 2 2 1 4 518 1085 1189
+2378 2 2 1 4 470 1292 1340
+2379 2 2 1 4 682 1340 1292
+2380 2 2 1 4 471 1293 1341
+2381 2 2 1 4 683 1341 1293
+2382 2 2 1 4 430 1524 1772
+2383 2 2 1 4 431 1525 1773
+2384 2 2 1 4 661 1694 1024
+2385 2 2 1 4 660 1695 1025
+2386 2 2 1 4 439 932 1762
+2387 2 2 1 4 438 933 1763
+2388 2 2 1 4 553 981 1305
+2389 2 2 1 4 552 980 1304
+2390 2 2 1 4 564 966 1856
+2391 2 2 1 4 565 967 1857
+2392 2 2 1 4 401 1547 1297
+2393 2 2 1 4 400 1546 1296
+2394 2 2 1 4 743 1297 1547
+2395 2 2 1 4 742 1296 1546
+2396 2 2 1 4 513 1270 1033
+2397 2 2 1 4 512 1271 1032
+2398 2 2 1 4 576 1424 954
+2399 2 2 1 4 577 1425 955
+2400 2 2 1 4 309 1791 943
+2401 2 2 1 4 308 1790 942
+2402 2 2 1 4 879 1216 1900
+2403 2 2 1 4 878 1217 1901
+2404 2 2 1 4 509 1080 1219
+2405 2 2 1 4 508 1081 1218
+2406 2 2 1 4 602 1747 1378
+2407 2 2 1 4 603 1746 1379
+2408 2 2 1 4 488 1841 956
+2409 2 2 1 4 489 1840 957
+2410 2 2 1 4 292 1016 1356
+2411 2 2 1 4 293 1017 1357
+2412 2 2 1 4 578 1356 1016
+2413 2 2 1 4 579 1357 1017
+2414 2 2 1 4 690 1484 952
+2415 2 2 1 4 691 1485 953
+2416 2 2 1 4 590 954 1482
+2417 2 2 1 4 591 955 1483
+2418 2 2 1 4 577 1029 1341
+2419 2 2 1 4 576 1028 1340
+2420 2 2 1 4 471 1341 1029
+2421 2 2 1 4 470 1340 1028
+2422 2 2 1 4 440 1528 948
+2423 2 2 1 4 441 1529 949
+2424 2 2 1 4 642 1204 1376
+2425 2 2 1 4 643 1205 1377
+2426 2 2 1 4 289 1082 1228
+2427 2 2 1 4 289 1083 1229
+2428 2 2 1 4 554 1228 1082
+2429 2 2 1 4 555 1229 1083
+2430 2 2 1 4 565 1849 967
+2431 2 2 1 4 564 1848 966
+2432 2 2 1 4 676 1002 1760
+2433 2 2 1 4 677 1003 1761
+2434 2 2 1 4 460 1760 1002
+2435 2 2 1 4 461 1761 1003
+2436 2 2 1 4 738 1726 1164
+2437 2 2 1 4 739 1727 1165
+2438 2 2 1 4 349 979 1402
+2439 2 2 1 4 348 978 1403
+2440 2 2 1 4 368 948 1675
+2441 2 2 1 4 369 949 1674
+2442 2 2 1 4 474 1890 1170
+2443 2 2 1 4 475 1891 1171
+2444 2 2 1 4 524 1274 1040
+2445 2 2 1 4 525 1275 1041
+2446 2 2 1 4 982 1229 1788
+2447 2 2 1 4 983 1228 1789
+2448 2 2 1 4 496 1700 952
+2449 2 2 1 4 497 1701 953
+2450 2 2 1 4 640 1516 1418
+2451 2 2 1 4 641 1517 1419
+2452 2 2 1 4 680 1202 1493
+2453 2 2 1 4 681 1203 1492
+2454 2 2 1 4 554 979 1789
+2455 2 2 1 4 555 978 1788
+2456 2 2 1 4 1093 1372 1782
+2457 2 2 1 4 1092 1373 1783
+2458 2 2 1 4 750 968 1839
+2459 2 2 1 4 751 969 1838
+2460 2 2 1 4 331 1069 1627
+2461 2 2 1 4 330 1068 1626
+2462 2 2 1 4 678 1660 1128
+2463 2 2 1 4 679 1661 1129
+2464 2 2 1 4 545 1062 1320
+2465 2 2 1 4 544 1063 1321
+2466 2 2 1 4 300 1683 1022
+2467 2 2 1 4 301 1682 1023
+2468 2 2 1 4 490 1164 1726
+2469 2 2 1 4 491 1165 1727
+2470 2 2 1 4 416 1716 1596
+2471 2 2 1 4 417 1717 1597
+2472 2 2 1 4 528 1070 1287
+2473 2 2 1 4 529 1071 1286
+2474 2 2 1 4 363 1366 988
+2475 2 2 1 4 362 1367 989
+2476 2 2 1 4 347 1035 1607
+2477 2 2 1 4 346 1034 1606
+2478 2 2 1 4 362 989 1837
+2479 2 2 1 4 363 988 1836
+2480 2 2 1 4 508 1329 1071
+2481 2 2 1 4 509 1328 1070
+2482 2 2 1 4 538 1067 1679
+2483 2 2 1 4 539 1066 1678
+2484 2 2 1 4 304 1064 1354
+2485 2 2 1 4 305 1065 1355
+2486 2 2 1 4 850 1412 1619
+2487 2 2 1 4 851 1413 1618
+2488 2 2 1 4 335 1275 1745
+2489 2 2 1 4 334 1274 1744
+2490 2 2 1 4 560 1837 989
+2491 2 2 1 4 561 1836 988
+2492 2 2 1 4 29 1690 960
+2493 2 2 1 4 92 1691 961
+2494 2 2 1 4 478 1314 1710
+2495 2 2 1 4 800 1710 1314
+2496 2 2 1 4 336 1642 962
+2497 2 2 1 4 337 1643 963
+2498 2 2 1 4 44 45 1238
+2499 2 2 1 4 107 108 1239
+2500 2 2 1 4 833 1917 1544
+2501 2 2 1 4 832 1916 1545
+2502 2 2 1 4 394 1264 1582
+2503 2 2 1 4 395 1265 1583
+2504 2 2 1 4 734 1582 1264
+2505 2 2 1 4 735 1583 1265
+2506 2 2 1 4 397 1540 1050
+2507 2 2 1 4 624 1050 1540
+2508 2 2 1 4 396 1541 1051
+2509 2 2 1 4 625 1051 1541
+2510 2 2 1 4 473 1706 1416
+2511 2 2 1 4 870 1416 1706
+2512 2 2 1 4 472 1707 1417
+2513 2 2 1 4 871 1417 1707
+2514 2 2 1 4 633 1593 1152
+2515 2 2 1 4 632 1592 1153
+2516 2 2 1 4 606 1044 1461
+2517 2 2 1 4 607 1045 1460
+2518 2 2 1 4 125 1461 1044
+2519 2 2 1 4 62 1460 1045
+2520 2 2 1 4 604 1459 1043
+2521 2 2 1 4 605 1458 1042
+2522 2 2 1 4 10 1043 1459
+2523 2 2 1 4 73 1042 1458
+2524 2 2 1 4 564 1183 1542
+2525 2 2 1 4 565 1182 1543
+2526 2 2 1 4 24 25 1278
+2527 2 2 1 4 87 88 1279
+2528 2 2 1 4 719 1653 1844
+2529 2 2 1 4 718 1652 1845
+2530 2 2 1 4 546 1147 1743
+2531 2 2 1 4 547 1146 1742
+2532 2 2 1 4 998 1307 1911
+2533 2 2 1 4 999 1306 1910
+2534 2 2 1 4 774 1321 1709
+2535 2 2 1 4 775 1320 1708
+2536 2 2 1 4 401 1733 1111
+2537 2 2 1 4 400 1732 1110
+2538 2 2 1 4 630 1411 1616
+2539 2 2 1 4 631 1410 1617
+2540 2 2 1 4 106 975 1881
+2541 2 2 1 4 43 974 1880
+2542 2 2 1 4 402 1527 1098
+2543 2 2 1 4 403 1526 1099
+2544 2 2 1 4 779 1730 1827
+2545 2 2 1 4 778 1731 1826
+2546 2 2 1 4 556 1181 1699
+2547 2 2 1 4 557 1180 1698
+2548 2 2 1 4 382 1320 1062
+2549 2 2 1 4 383 1321 1063
+2550 2 2 1 4 352 1776 1036
+2551 2 2 1 4 353 1777 1037
+2552 2 2 1 4 318 1114 1488
+2553 2 2 1 4 319 1115 1489
+2554 2 2 1 4 365 1018 1414
+2555 2 2 1 4 364 1019 1415
+2556 2 2 1 4 578 1018 1471
+2557 2 2 1 4 579 1019 1470
+2558 2 2 1 4 932 1822 1444
+2559 2 2 1 4 933 1823 1445
+2560 2 2 1 4 299 1444 1822
+2561 2 2 1 4 298 1445 1823
+2562 2 2 1 4 724 1368 1596
+2563 2 2 1 4 725 1369 1597
+2564 2 2 1 4 627 1843 1120
+2565 2 2 1 4 626 1842 1121
+2566 2 2 1 4 609 1023 1682
+2567 2 2 1 4 608 1022 1683
+2568 2 2 1 4 75 1325 74
+2569 2 2 1 4 12 1324 11
+2570 2 2 1 4 60 61 1323
+2571 2 2 1 4 123 124 1322
+2572 2 2 1 4 837 1119 1889
+2573 2 2 1 4 836 1118 1888
+2574 2 2 1 4 34 1446 1002
+2575 2 2 1 4 97 1447 1003
+2576 2 2 1 4 564 1856 1048
+2577 2 2 1 4 565 1857 1049
+2578 2 2 1 4 736 1481 994
+2579 2 2 1 4 737 1480 995
+2580 2 2 1 4 654 1486 1713
+2581 2 2 1 4 655 1487 1712
+2582 2 2 1 4 7 1585 1663
+2583 2 2 1 4 70 1584 1662
+2584 2 2 1 4 557 1354 1064
+2585 2 2 1 4 556 1355 1065
+2586 2 2 1 4 111 1305 110
+2587 2 2 1 4 48 1304 47
+2588 2 2 1 4 864 1544 1600
+2589 2 2 1 4 423 1600 1544
+2590 2 2 1 4 865 1545 1601
+2591 2 2 1 4 422 1601 1545
+2592 2 2 1 4 762 1872 1457
+2593 2 2 1 4 763 1873 1456
+2594 2 2 1 4 436 1784 1454
+2595 2 2 1 4 437 1785 1455
+2596 2 2 1 4 129 1560 128
+2597 2 2 1 4 66 1561 65
+2598 2 2 1 4 464 1020 1448
+2599 2 2 1 4 465 1021 1449
+2600 2 2 1 4 364 1470 1019
+2601 2 2 1 4 365 1471 1018
+2602 2 2 1 4 333 1001 1739
+2603 2 2 1 4 332 1000 1738
+2604 2 2 1 4 292 1712 1016
+2605 2 2 1 4 293 1713 1017
+2606 2 2 1 4 862 1808 1728
+2607 2 2 1 4 863 1809 1729
+2608 2 2 1 4 674 992 1876
+2609 2 2 1 4 452 1876 992
+2610 2 2 1 4 675 993 1877
+2611 2 2 1 4 453 1877 993
+2612 2 2 1 4 382 1550 1250
+2613 2 2 1 4 383 1551 1251
+2614 2 2 1 4 484 1788 978
+2615 2 2 1 4 485 1789 979
+2616 2 2 1 4 568 1775 1185
+2617 2 2 1 4 569 1774 1184
+2618 2 2 1 4 576 1340 1342
+2619 2 2 1 4 682 1342 1340
+2620 2 2 1 4 577 1341 1343
+2621 2 2 1 4 683 1343 1341
+2622 2 2 1 4 366 1010 1504
+2623 2 2 1 4 367 1011 1505
+2624 2 2 1 4 458 998 1911
+2625 2 2 1 4 459 999 1910
+2626 2 2 1 4 748 986 1812
+2627 2 2 1 4 749 987 1813
+2628 2 2 1 4 460 1010 1510
+2629 2 2 1 4 461 1011 1511
+2630 2 2 1 4 452 1101 1876
+2631 2 2 1 4 453 1100 1877
+2632 2 2 1 4 314 1434 1090
+2633 2 2 1 4 315 1435 1091
+2634 2 2 1 4 596 1090 1434
+2635 2 2 1 4 597 1091 1435
+2636 2 2 1 4 348 1740 978
+2637 2 2 1 4 349 1741 979
+2638 2 2 1 4 695 1714 1741
+2639 2 2 1 4 694 1715 1740
+2640 2 2 1 4 91 92 1742
+2641 2 2 1 4 28 29 1743
+2642 2 2 1 4 312 1088 1438
+2643 2 2 1 4 313 1089 1439
+2644 2 2 1 4 594 1438 1088
+2645 2 2 1 4 595 1439 1089
+2646 2 2 1 4 791 1086 1473
+2647 2 2 1 4 790 1087 1472
+2648 2 2 1 4 357 1635 1189
+2649 2 2 1 4 356 1634 1188
+2650 2 2 1 4 460 986 1760
+2651 2 2 1 4 461 987 1761
+2652 2 2 1 4 645 1309 1521
+2653 2 2 1 4 644 1308 1520
+2654 2 2 1 4 556 1699 1355
+2655 2 2 1 4 557 1698 1354
+2656 2 2 1 4 652 1415 1131
+2657 2 2 1 4 653 1414 1130
+2658 2 2 1 4 499 1725 984
+2659 2 2 1 4 498 1724 985
+2660 2 2 1 4 697 1360 1134
+2661 2 2 1 4 696 1361 1135
+2662 2 2 1 4 699 1136 1363
+2663 2 2 1 4 698 1137 1362
+2664 2 2 1 4 635 1149 1532
+2665 2 2 1 4 634 1148 1533
+2666 2 2 1 4 378 1512 1287
+2667 2 2 1 4 379 1513 1286
+2668 2 2 1 4 468 1486 1037
+2669 2 2 1 4 469 1487 1036
+2670 2 2 1 4 628 1226 1408
+2671 2 2 1 4 629 1227 1409
+2672 2 2 1 4 343 1821 1539
+2673 2 2 1 4 342 1820 1538
+2674 2 2 1 4 831 1263 1169
+2675 2 2 1 4 830 1262 1168
+2676 2 2 1 4 422 1916 1024
+2677 2 2 1 4 423 1917 1025
+2678 2 2 1 4 786 1557 1020
+2679 2 2 1 4 787 1556 1021
+2680 2 2 1 4 466 1548 1022
+2681 2 2 1 4 467 1549 1023
+2682 2 2 1 4 356 1112 1688
+2683 2 2 1 4 357 1113 1689
+2684 2 2 1 4 460 1002 1818
+2685 2 2 1 4 461 1003 1819
+2686 2 2 1 4 657 1620 1111
+2687 2 2 1 4 656 1621 1110
+2688 2 2 1 4 455 1111 1620
+2689 2 2 1 4 454 1110 1621
+2690 2 2 1 4 431 1651 1755
+2691 2 2 1 4 430 1650 1754
+2692 2 2 1 4 676 1778 1002
+2693 2 2 1 4 677 1779 1003
+2694 2 2 1 4 520 1012 1630
+2695 2 2 1 4 521 1013 1631
+2696 2 2 1 4 522 1632 1014
+2697 2 2 1 4 523 1633 1015
+2698 2 2 1 4 756 1640 1214
+2699 2 2 1 4 757 1641 1215
+2700 2 2 1 4 345 1168 1262
+2701 2 2 1 4 344 1169 1263
+2702 2 2 1 4 612 1630 1012
+2703 2 2 1 4 613 1631 1013
+2704 2 2 1 4 615 1015 1633
+2705 2 2 1 4 614 1014 1632
+2706 2 2 1 4 666 1646 1006
+2707 2 2 1 4 667 1647 1007
+2708 2 2 1 4 668 1008 1648
+2709 2 2 1 4 669 1009 1649
+2710 2 2 1 4 404 1116 1672
+2711 2 2 1 4 405 1117 1673
+2712 2 2 1 4 501 1472 1059
+2713 2 2 1 4 500 1473 1058
+2714 2 2 1 4 324 1619 1061
+2715 2 2 1 4 325 1618 1060
+2716 2 2 1 4 366 1843 1010
+2717 2 2 1 4 367 1842 1011
+2718 2 2 1 4 482 1048 1557
+2719 2 2 1 4 483 1049 1556
+2720 2 2 1 4 512 1550 1062
+2721 2 2 1 4 513 1551 1063
+2722 2 2 1 4 881 1248 1767
+2723 2 2 1 4 880 1249 1766
+2724 2 2 1 4 692 1616 1411
+2725 2 2 1 4 693 1617 1410
+2726 2 2 1 4 792 1663 1585
+2727 2 2 1 4 793 1662 1584
+2728 2 2 1 4 297 1516 1053
+2729 2 2 1 4 296 1517 1052
+2730 2 2 1 4 641 1612 1161
+2731 2 2 1 4 640 1613 1160
+2732 2 2 1 4 837 1627 1541
+2733 2 2 1 4 625 1541 1627
+2734 2 2 1 4 836 1626 1540
+2735 2 2 1 4 624 1540 1626
+2736 2 2 1 4 540 1115 1370
+2737 2 2 1 4 541 1114 1371
+2738 2 2 1 4 732 1170 1890
+2739 2 2 1 4 733 1171 1891
+2740 2 2 1 4 487 1258 1230
+2741 2 2 1 4 486 1259 1231
+2742 2 2 1 4 623 1050 1535
+2743 2 2 1 4 622 1051 1534
+2744 2 2 1 4 677 1405 1779
+2745 2 2 1 4 676 1404 1778
+2746 2 2 1 4 342 1030 1820
+2747 2 2 1 4 343 1031 1821
+2748 2 2 1 4 590 1490 1211
+2749 2 2 1 4 591 1491 1210
+2750 2 2 1 4 362 1315 1367
+2751 2 2 1 4 665 1367 1315
+2752 2 2 1 4 466 1440 1385
+2753 2 2 1 4 467 1441 1384
+2754 2 2 1 4 701 1385 1440
+2755 2 2 1 4 700 1384 1441
+2756 2 2 1 4 423 1544 1917
+2757 2 2 1 4 422 1545 1916
+2758 2 2 1 4 664 1126 1366
+2759 2 2 1 4 665 1127 1367
+2760 2 2 1 4 622 1534 1145
+2761 2 2 1 4 623 1535 1144
+2762 2 2 1 4 508 1204 1329
+2763 2 2 1 4 509 1205 1328
+2764 2 2 1 4 657 1733 1115
+2765 2 2 1 4 656 1732 1114
+2766 2 2 1 4 663 1230 1258
+2767 2 2 1 4 662 1231 1259
+2768 2 2 1 4 528 1287 1234
+2769 2 2 1 4 529 1286 1235
+2770 2 2 1 4 338 1056 1536
+2771 2 2 1 4 339 1057 1537
+2772 2 2 1 4 381 1076 1883
+2773 2 2 1 4 380 1077 1882
+2774 2 2 1 4 688 1883 1076
+2775 2 2 1 4 689 1882 1077
+2776 2 2 1 4 347 1847 1035
+2777 2 2 1 4 346 1846 1034
+2778 2 2 1 4 494 1463 1108
+2779 2 2 1 4 495 1462 1109
+2780 2 2 1 4 85 1122 1571
+2781 2 2 1 4 22 1123 1570
+2782 2 2 1 4 823 1276 1635
+2783 2 2 1 4 822 1277 1634
+2784 2 2 1 4 127 128 1586
+2785 2 2 1 4 64 65 1587
+2786 2 2 1 4 8 1585 7
+2787 2 2 1 4 71 1584 70
+2788 2 2 1 4 516 1121 1379
+2789 2 2 1 4 517 1120 1378
+2790 2 2 1 4 562 1036 1776
+2791 2 2 1 4 563 1037 1777
+2792 2 2 1 4 710 1038 1650
+2793 2 2 1 4 711 1039 1651
+2794 2 2 1 4 377 1312 1186
+2795 2 2 1 4 376 1313 1187
+2796 2 2 1 4 564 1542 1848
+2797 2 2 1 4 565 1543 1849
+2798 2 2 1 4 616 1134 1360
+2799 2 2 1 4 617 1135 1361
+2800 2 2 1 4 619 1362 1137
+2801 2 2 1 4 618 1363 1136
+2802 2 2 1 4 626 1511 1842
+2803 2 2 1 4 627 1510 1843
+2804 2 2 1 4 493 1169 1408
+2805 2 2 1 4 492 1168 1409
+2806 2 2 1 4 690 1728 1808
+2807 2 2 1 4 691 1729 1809
+2808 2 2 1 4 650 1234 1287
+2809 2 2 1 4 651 1235 1286
+2810 2 2 1 4 524 1040 1796
+2811 2 2 1 4 525 1041 1797
+2812 2 2 1 4 354 1048 1856
+2813 2 2 1 4 355 1049 1857
+2814 2 2 1 4 334 1744 1640
+2815 2 2 1 4 335 1745 1641
+2816 2 2 1 4 956 1640 1744
+2817 2 2 1 4 957 1641 1745
+2818 2 2 1 4 545 1594 1062
+2819 2 2 1 4 544 1595 1063
+2820 2 2 1 4 620 1060 1618
+2821 2 2 1 4 621 1061 1619
+2822 2 2 1 4 320 1827 1046
+2823 2 2 1 4 321 1826 1047
+2824 2 2 1 4 311 1886 1195
+2825 2 2 1 4 310 1887 1194
+2826 2 2 1 4 542 1668 1433
+2827 2 2 1 4 543 1669 1432
+2828 2 2 1 4 828 1598 1906
+2829 2 2 1 4 829 1599 1907
+2830 2 2 1 4 540 1489 1115
+2831 2 2 1 4 541 1488 1114
+2832 2 2 1 4 598 1232 1504
+2833 2 2 1 4 599 1233 1505
+2834 2 2 1 4 436 1454 1764
+2835 2 2 1 4 848 1764 1454
+2836 2 2 1 4 437 1455 1765
+2837 2 2 1 4 849 1765 1455
+2838 2 2 1 4 415 1290 1502
+2839 2 2 1 4 414 1291 1503
+2840 2 2 1 4 413 1506 1288
+2841 2 2 1 4 412 1507 1289
+2842 2 2 1 4 594 1088 1863
+2843 2 2 1 4 595 1089 1862
+2844 2 2 1 4 596 1865 1090
+2845 2 2 1 4 597 1864 1091
+2846 2 2 1 4 97 98 1447
+2847 2 2 1 4 34 35 1446
+2848 2 2 1 4 708 1604 1574
+2849 2 2 1 4 709 1605 1575
+2850 2 2 1 4 507 1112 1464
+2851 2 2 1 4 506 1113 1465
+2852 2 2 1 4 546 1098 1527
+2853 2 2 1 4 547 1099 1526
+2854 2 2 1 4 647 1721 1723
+2855 2 2 1 4 646 1720 1722
+2856 2 2 1 4 73 1458 72
+2857 2 2 1 4 10 1459 9
+2858 2 2 1 4 62 63 1460
+2859 2 2 1 4 125 126 1461
+2860 2 2 1 4 361 1678 1066
+2861 2 2 1 4 360 1679 1067
+2862 2 2 1 4 643 1328 1205
+2863 2 2 1 4 642 1329 1204
+2864 2 2 1 4 665 1315 1625
+2865 2 2 1 4 674 1780 1196
+2866 2 2 1 4 675 1781 1197
+2867 2 2 1 4 627 1812 1510
+2868 2 2 1 4 626 1813 1511
+2869 2 2 1 4 517 1076 1638
+2870 2 2 1 4 516 1077 1639
+2871 2 2 1 4 645 1521 1753
+2872 2 2 1 4 644 1520 1752
+2873 2 2 1 4 656 1110 1732
+2874 2 2 1 4 657 1111 1733
+2875 2 2 1 4 79 80 1496
+2876 2 2 1 4 16 17 1497
+2877 2 2 1 4 56 1498 55
+2878 2 2 1 4 119 1499 118
+2879 2 2 1 4 500 1319 1705
+2880 2 2 1 4 501 1318 1704
+2881 2 2 1 4 761 1433 1668
+2882 2 2 1 4 760 1432 1669
+2883 2 2 1 4 630 1664 1094
+2884 2 2 1 4 631 1665 1095
+2885 2 2 1 4 767 1207 1643
+2886 2 2 1 4 766 1206 1642
+2887 2 2 1 4 303 1833 1100
+2888 2 2 1 4 302 1832 1101
+2889 2 2 1 4 675 1100 1833
+2890 2 2 1 4 674 1101 1832
+2891 2 2 1 4 722 1784 1508
+2892 2 2 1 4 723 1785 1509
+2893 2 2 1 4 480 1608 1090
+2894 2 2 1 4 481 1609 1091
+2895 2 2 1 4 2 1759 67
+2896 2 2 1 4 1 1758 130
+2897 2 2 1 4 554 1789 1228
+2898 2 2 1 4 555 1788 1229
+2899 2 2 1 4 682 1098 1568
+2900 2 2 1 4 683 1099 1569
+2901 2 2 1 4 478 1088 1624
+2902 2 2 1 4 479 1089 1625
+2903 2 2 1 4 52 53 1564
+2904 2 2 1 4 115 116 1565
+2905 2 2 1 4 20 1563 19
+2906 2 2 1 4 83 1562 82
+2907 2 2 1 4 307 1656 1252
+2908 2 2 1 4 306 1657 1253
+2909 2 2 1 4 812 1190 1466
+2910 2 2 1 4 813 1191 1467
+2911 2 2 1 4 814 1469 1192
+2912 2 2 1 4 815 1468 1193
+2913 2 2 1 4 675 1877 1100
+2914 2 2 1 4 674 1876 1101
+2915 2 2 1 4 688 1076 1747
+2916 2 2 1 4 689 1077 1746
+2917 2 2 1 4 130 1758 1104
+2918 2 2 1 4 67 1759 1105
+2919 2 2 1 4 650 1287 1512
+2920 2 2 1 4 651 1286 1513
+2921 2 2 1 4 705 1787 1638
+2922 2 2 1 4 704 1786 1639
+2923 2 2 1 4 846 1380 1338
+2924 2 2 1 4 847 1381 1339
+2925 2 2 1 4 374 1144 1535
+2926 2 2 1 4 375 1145 1534
+2927 2 2 1 4 129 1104 1560
+2928 2 2 1 4 66 1105 1561
+2929 2 2 1 4 518 1730 1085
+2930 2 2 1 4 519 1731 1084
+2931 2 2 1 4 602 1198 1495
+2932 2 2 1 4 603 1199 1494
+2933 2 2 1 4 673 1622 1849
+2934 2 2 1 4 672 1623 1848
+2935 2 2 1 4 967 1849 1622
+2936 2 2 1 4 966 1848 1623
+2937 2 2 1 4 113 114 1684
+2938 2 2 1 4 50 51 1685
+2939 2 2 1 4 616 1562 1134
+2940 2 2 1 4 617 1563 1135
+2941 2 2 1 4 618 1136 1564
+2942 2 2 1 4 619 1137 1565
+2943 2 2 1 4 620 1413 1645
+2944 2 2 1 4 621 1412 1644
+2945 2 2 1 4 688 1495 1337
+2946 2 2 1 4 689 1494 1336
+2947 2 2 1 4 318 1337 1495
+2948 2 2 1 4 319 1336 1494
+2949 2 2 1 4 670 1150 1676
+2950 2 2 1 4 671 1151 1677
+2951 2 2 1 4 39 1676 1150
+2952 2 2 1 4 102 1677 1151
+2953 2 2 1 4 105 106 1881
+2954 2 2 1 4 42 43 1880
+2955 2 2 1 4 478 1863 1088
+2956 2 2 1 4 479 1862 1089
+2957 2 2 1 4 480 1090 1865
+2958 2 2 1 4 481 1091 1864
+2959 2 2 1 4 782 1538 1820
+2960 2 2 1 4 783 1539 1821
+2961 2 2 1 4 429 1303 1453
+2962 2 2 1 4 428 1302 1452
+2963 2 2 1 4 659 1453 1303
+2964 2 2 1 4 658 1452 1302
+2965 2 2 1 4 444 1906 1598
+2966 2 2 1 4 445 1907 1599
+2967 2 2 1 4 829 1142 1599
+2968 2 2 1 4 828 1143 1598
+2969 2 2 1 4 714 1599 1142
+2970 2 2 1 4 715 1598 1143
+2971 2 2 1 4 454 1795 1110
+2972 2 2 1 4 455 1794 1111
+2973 2 2 1 4 670 1110 1795
+2974 2 2 1 4 671 1111 1794
+2975 2 2 1 4 593 1601 1118
+2976 2 2 1 4 592 1600 1119
+2977 2 2 1 4 862 1728 1256
+2978 2 2 1 4 863 1729 1257
+2979 2 2 1 4 20 1135 1563
+2980 2 2 1 4 83 1134 1562
+2981 2 2 1 4 52 1564 1136
+2982 2 2 1 4 115 1565 1137
+2983 2 2 1 4 758 1092 1783
+2984 2 2 1 4 759 1093 1782
+2985 2 2 1 4 585 1188 1634
+2986 2 2 1 4 584 1189 1635
+2987 2 2 1 4 690 1808 1430
+2988 2 2 1 4 691 1809 1431
+2989 2 2 1 4 328 1522 1306
+2990 2 2 1 4 329 1523 1307
+2991 2 2 1 4 708 1300 1604
+2992 2 2 1 4 709 1301 1605
+2993 2 2 1 4 22 1570 21
+2994 2 2 1 4 85 1571 84
+2995 2 2 1 4 692 1411 1272
+2996 2 2 1 4 693 1410 1273
+2997 2 2 1 4 934 1868 1851
+2998 2 2 1 4 935 1869 1850
+2999 2 2 1 4 936 1853 1871
+3000 2 2 1 4 937 1852 1870
+3001 2 2 1 4 313 1245 1543
+3002 2 2 1 4 312 1244 1542
+3003 2 2 1 4 673 1543 1245
+3004 2 2 1 4 672 1542 1244
+3005 2 2 1 4 776 1299 1888
+3006 2 2 1 4 330 1888 1299
+3007 2 2 1 4 777 1298 1889
+3008 2 2 1 4 331 1889 1298
+3009 2 2 1 4 804 1289 1805
+3010 2 2 1 4 805 1288 1804
+3011 2 2 1 4 806 1807 1291
+3012 2 2 1 4 807 1806 1290
+3013 2 2 1 4 349 1402 1311
+3014 2 2 1 4 348 1403 1310
+3015 2 2 1 4 682 1920 1098
+3016 2 2 1 4 683 1921 1099
+3017 2 2 1 4 402 1098 1920
+3018 2 2 1 4 403 1099 1921
+3019 2 2 1 4 113 1684 1124
+3020 2 2 1 4 50 1685 1125
+3021 2 2 1 4 769 1261 1918
+3022 2 2 1 4 768 1260 1919
+3023 2 2 1 4 418 1918 1261
+3024 2 2 1 4 419 1919 1260
+3025 2 2 1 4 835 1895 1316
+3026 2 2 1 4 834 1894 1317
+3027 2 2 1 4 303 1100 1845
+3028 2 2 1 4 302 1101 1844
+3029 2 2 1 4 700 1607 1116
+3030 2 2 1 4 701 1606 1117
+3031 2 2 1 4 504 1898 1365
+3032 2 2 1 4 505 1899 1364
+3033 2 2 1 4 402 1214 1481
+3034 2 2 1 4 403 1215 1480
+3035 2 2 1 4 690 1430 1484
+3036 2 2 1 4 462 1484 1430
+3037 2 2 1 4 691 1431 1485
+3038 2 2 1 4 463 1485 1431
+3039 2 2 1 4 1104 1758 1898
+3040 2 2 1 4 1105 1759 1899
+3041 2 2 1 4 803 1831 1330
+3042 2 2 1 4 802 1830 1331
+3043 2 2 1 4 609 1443 1441
+3044 2 2 1 4 608 1442 1440
+3045 2 2 1 4 700 1441 1443
+3046 2 2 1 4 701 1440 1442
+3047 2 2 1 4 759 1558 1909
+3048 2 2 1 4 758 1559 1908
+3049 2 2 1 4 6 7 1663
+3050 2 2 1 4 69 70 1662
+3051 2 2 1 4 463 1431 1708
+3052 2 2 1 4 775 1708 1431
+3053 2 2 1 4 462 1430 1709
+3054 2 2 1 4 774 1709 1430
+3055 2 2 1 4 606 1670 1175
+3056 2 2 1 4 607 1671 1174
+3057 2 2 1 4 916 1471 1345
+3058 2 2 1 4 917 1470 1344
+3059 2 2 1 4 365 1345 1471
+3060 2 2 1 4 364 1344 1470
+3061 2 2 1 4 644 1750 1143
+3062 2 2 1 4 645 1751 1142
+3063 2 2 1 4 570 1688 1112
+3064 2 2 1 4 571 1689 1113
+3065 2 2 1 4 591 1210 1762
+3066 2 2 1 4 590 1211 1763
+3067 2 2 1 4 616 1466 1190
+3068 2 2 1 4 617 1467 1191
+3069 2 2 1 4 619 1193 1468
+3070 2 2 1 4 618 1192 1469
+3071 2 2 1 4 574 1672 1116
+3072 2 2 1 4 575 1673 1117
+3073 2 2 1 4 856 1390 1388
+3074 2 2 1 4 566 1388 1390
+3075 2 2 1 4 857 1391 1389
+3076 2 2 1 4 567 1389 1391
+3077 2 2 1 4 1006 1646 1282
+3078 2 2 1 4 1007 1647 1283
+3079 2 2 1 4 1008 1284 1648
+3080 2 2 1 4 1009 1285 1649
+3081 2 2 1 4 544 1281 1394
+3082 2 2 1 4 545 1280 1395
+3083 2 2 1 4 800 1255 1725
+3084 2 2 1 4 801 1254 1724
+3085 2 2 1 4 862 1530 1808
+3086 2 2 1 4 326 1808 1530
+3087 2 2 1 4 863 1531 1809
+3088 2 2 1 4 327 1809 1531
+3089 2 2 1 4 347 1437 1847
+3090 2 2 1 4 346 1436 1846
+3091 2 2 1 4 93 1691 92
+3092 2 2 1 4 30 1690 29
+3093 2 2 1 4 504 1104 1898
+3094 2 2 1 4 505 1105 1899
+3095 2 2 1 4 103 1677 102
+3096 2 2 1 4 40 1676 39
+3097 2 2 1 4 587 1462 1212
+3098 2 2 1 4 586 1463 1213
+3099 2 2 1 4 616 1190 1562
+3100 2 2 1 4 617 1191 1563
+3101 2 2 1 4 619 1565 1193
+3102 2 2 1 4 618 1564 1192
+3103 2 2 1 4 368 1272 1411
+3104 2 2 1 4 369 1273 1410
+3105 2 2 1 4 593 1666 1177
+3106 2 2 1 4 592 1667 1176
+3107 2 2 1 4 661 1738 1567
+3108 2 2 1 4 660 1739 1566
+3109 2 2 1 4 584 1635 1276
+3110 2 2 1 4 585 1634 1277
+3111 2 2 1 4 318 1495 1198
+3112 2 2 1 4 319 1494 1199
+3113 2 2 1 4 370 1492 1203
+3114 2 2 1 4 371 1493 1202
+3115 2 2 1 4 660 1566 1695
+3116 2 2 1 4 819 1695 1566
+3117 2 2 1 4 661 1567 1694
+3118 2 2 1 4 818 1694 1567
+3119 2 2 1 4 494 1108 1830
+3120 2 2 1 4 495 1109 1831
+3121 2 2 1 4 435 1421 1327
+3122 2 2 1 4 434 1420 1326
+3123 2 2 1 4 558 1338 1380
+3124 2 2 1 4 559 1339 1381
+3125 2 2 1 4 542 1886 1668
+3126 2 2 1 4 973 1668 1886
+3127 2 2 1 4 543 1887 1669
+3128 2 2 1 4 972 1669 1887
+3129 2 2 1 4 1115 1733 1370
+3130 2 2 1 4 1114 1732 1371
+3131 2 2 1 4 1122 1875 1571
+3132 2 2 1 4 1123 1874 1570
+3133 2 2 1 4 642 1376 1748
+3134 2 2 1 4 643 1377 1749
+3135 2 2 1 4 540 1261 1489
+3136 2 2 1 4 541 1260 1488
+3137 2 2 1 4 648 1399 1382
+3138 2 2 1 4 649 1398 1383
+3139 2 2 1 4 291 1614 1519
+3140 2 2 1 4 290 1615 1518
+3141 2 2 1 4 753 1519 1614
+3142 2 2 1 4 752 1518 1615
+3143 2 2 1 4 679 1311 1402
+3144 2 2 1 4 678 1310 1403
+3145 2 2 1 4 728 1851 1868
+3146 2 2 1 4 729 1850 1869
+3147 2 2 1 4 731 1871 1853
+3148 2 2 1 4 730 1870 1852
+3149 2 2 1 4 796 1911 1307
+3150 2 2 1 4 797 1910 1306
+3151 2 2 1 4 694 1784 1180
+3152 2 2 1 4 436 1180 1784
+3153 2 2 1 4 695 1785 1181
+3154 2 2 1 4 437 1181 1785
+3155 2 2 1 4 420 1735 1894
+3156 2 2 1 4 1027 1894 1735
+3157 2 2 1 4 421 1734 1895
+3158 2 2 1 4 1026 1895 1734
+3159 2 2 1 4 662 1259 1719
+3160 2 2 1 4 663 1258 1718
+3161 2 2 1 4 630 1616 1374
+3162 2 2 1 4 631 1617 1375
+3163 2 2 1 4 600 1400 1589
+3164 2 2 1 4 601 1401 1588
+3165 2 2 1 4 626 1166 1581
+3166 2 2 1 4 627 1167 1580
+3167 2 2 1 4 531 1693 1132
+3168 2 2 1 4 530 1692 1133
+3169 2 2 1 4 784 1846 1436
+3170 2 2 1 4 785 1847 1437
+3171 2 2 1 4 760 1669 1219
+3172 2 2 1 4 761 1668 1218
+3173 2 2 1 4 637 1326 1420
+3174 2 2 1 4 636 1327 1421
+3175 2 2 1 4 604 1173 1675
+3176 2 2 1 4 605 1172 1674
+3177 2 2 1 4 650 1423 1392
+3178 2 2 1 4 651 1422 1393
+3179 2 2 1 4 655 1392 1423
+3180 2 2 1 4 654 1393 1422
+3181 2 2 1 4 768 1488 1260
+3182 2 2 1 4 769 1489 1261
+3183 2 2 1 4 313 1543 1182
+3184 2 2 1 4 312 1542 1183
+3185 2 2 1 4 698 1124 1684
+3186 2 2 1 4 699 1125 1685
+3187 2 2 1 4 366 1120 1843
+3188 2 2 1 4 367 1121 1842
+3189 2 2 1 4 343 1343 1569
+3190 2 2 1 4 342 1342 1568
+3191 2 2 1 4 682 1568 1342
+3192 2 2 1 4 683 1569 1343
+3193 2 2 1 4 488 1162 1874
+3194 2 2 1 4 489 1163 1875
+3195 2 2 1 4 696 1874 1162
+3196 2 2 1 4 697 1875 1163
+3197 2 2 1 4 796 1450 1613
+3198 2 2 1 4 797 1451 1612
+3199 2 2 1 4 686 1898 1758
+3200 2 2 1 4 687 1899 1759
+3201 2 2 1 4 639 1133 1692
+3202 2 2 1 4 638 1132 1693
+3203 2 2 1 4 647 1383 1398
+3204 2 2 1 4 646 1382 1399
+3205 2 2 1 4 776 1888 1118
+3206 2 2 1 4 777 1889 1119
+3207 2 2 1 4 317 1166 1786
+3208 2 2 1 4 316 1167 1787
+3209 2 2 1 4 421 1909 1734
+3210 2 2 1 4 420 1908 1735
+3211 2 2 1 4 316 1580 1167
+3212 2 2 1 4 317 1581 1166
+3213 2 2 1 4 684 1574 1604
+3214 2 2 1 4 685 1575 1605
+3215 2 2 1 4 396 1176 1667
+3216 2 2 1 4 397 1177 1666
+3217 2 2 1 4 520 1630 1154
+3218 2 2 1 4 521 1631 1155
+3219 2 2 1 4 522 1156 1632
+3220 2 2 1 4 523 1157 1633
+3221 2 2 1 4 408 1282 1646
+3222 2 2 1 4 409 1283 1647
+3223 2 2 1 4 410 1648 1284
+3224 2 2 1 4 411 1649 1285
+3225 2 2 1 4 321 1142 1751
+3226 2 2 1 4 320 1143 1750
+3227 2 2 1 4 763 1723 1721
+3228 2 2 1 4 762 1722 1720
+3229 2 2 1 4 642 1748 1520
+3230 2 2 1 4 643 1749 1521
+3231 2 2 1 4 491 1727 1835
+3232 2 2 1 4 490 1726 1834
+3233 2 2 1 4 963 1835 1727
+3234 2 2 1 4 962 1834 1726
+3235 2 2 1 4 82 1562 1190
+3236 2 2 1 4 19 1563 1191
+3237 2 2 1 4 53 1192 1564
+3238 2 2 1 4 116 1193 1565
+3239 2 2 1 4 833 1515 1917
+3240 2 2 1 4 832 1514 1916
+3241 2 2 1 4 374 1629 1719
+3242 2 2 1 4 840 1719 1629
+3243 2 2 1 4 841 1718 1628
+3244 2 2 1 4 375 1628 1718
+3245 2 2 1 4 375 1534 1628
+3246 2 2 1 4 374 1535 1629
+3247 2 2 1 4 105 1881 1224
+3248 2 2 1 4 42 1880 1225
+3249 2 2 1 4 369 1674 1172
+3250 2 2 1 4 368 1675 1173
+3251 2 2 1 4 405 1553 1206
+3252 2 2 1 4 404 1552 1207
+3253 2 2 1 4 489 1875 1122
+3254 2 2 1 4 488 1874 1123
+3255 2 2 1 4 596 1502 1290
+3256 2 2 1 4 597 1503 1291
+3257 2 2 1 4 594 1288 1506
+3258 2 2 1 4 595 1289 1507
+3259 2 2 1 4 728 1282 1851
+3260 2 2 1 4 729 1283 1850
+3261 2 2 1 4 408 1851 1282
+3262 2 2 1 4 409 1850 1283
+3263 2 2 1 4 410 1284 1852
+3264 2 2 1 4 411 1285 1853
+3265 2 2 1 4 731 1853 1285
+3266 2 2 1 4 730 1852 1284
+3267 2 2 1 4 609 1682 1474
+3268 2 2 1 4 608 1683 1475
+3269 2 2 1 4 677 1583 1405
+3270 2 2 1 4 676 1582 1404
+3271 2 2 1 4 734 1404 1582
+3272 2 2 1 4 735 1405 1583
+3273 2 2 1 4 644 1752 1750
+3274 2 2 1 4 945 1750 1752
+3275 2 2 1 4 645 1753 1751
+3276 2 2 1 4 944 1751 1753
+3277 2 2 1 4 703 1811 1247
+3278 2 2 1 4 702 1810 1246
+3279 2 2 1 4 387 1247 1811
+3280 2 2 1 4 386 1246 1810
+3281 2 2 1 4 789 1270 1595
+3282 2 2 1 4 788 1271 1594
+3283 2 2 1 4 91 1742 1146
+3284 2 2 1 4 28 1743 1147
+3285 2 2 1 4 534 1220 1766
+3286 2 2 1 4 535 1221 1767
+3287 2 2 1 4 599 1387 1555
+3288 2 2 1 4 598 1386 1554
+3289 2 2 1 4 438 1763 1211
+3290 2 2 1 4 439 1762 1210
+3291 2 2 1 4 638 1828 1448
+3292 2 2 1 4 639 1829 1449
+3293 2 2 1 4 378 1903 1512
+3294 2 2 1 4 379 1902 1513
+3295 2 2 1 4 829 1512 1903
+3296 2 2 1 4 828 1513 1902
+3297 2 2 1 4 610 1306 1522
+3298 2 2 1 4 611 1307 1523
+3299 2 2 1 4 889 1250 1550
+3300 2 2 1 4 888 1251 1551
+3301 2 2 1 4 361 1348 1737
+3302 2 2 1 4 721 1737 1348
+3303 2 2 1 4 360 1349 1736
+3304 2 2 1 4 720 1736 1349
+3305 2 2 1 4 670 1347 1546
+3306 2 2 1 4 671 1346 1547
+3307 2 2 1 4 742 1546 1347
+3308 2 2 1 4 743 1547 1346
+3309 2 2 1 4 642 1520 1308
+3310 2 2 1 4 643 1521 1309
+3311 2 2 1 4 30 1159 1690
+3312 2 2 1 4 93 1158 1691
+3313 2 2 1 4 370 1175 1670
+3314 2 2 1 4 371 1174 1671
+3315 2 2 1 4 667 1267 1647
+3316 2 2 1 4 666 1266 1646
+3317 2 2 1 4 409 1647 1267
+3318 2 2 1 4 408 1646 1266
+3319 2 2 1 4 669 1649 1269
+3320 2 2 1 4 668 1648 1268
+3321 2 2 1 4 411 1269 1649
+3322 2 2 1 4 410 1268 1648
+3323 2 2 1 4 549 1266 1815
+3324 2 2 1 4 548 1267 1814
+3325 2 2 1 4 551 1817 1268
+3326 2 2 1 4 550 1816 1269
+3327 2 2 1 4 292 1392 1712
+3328 2 2 1 4 293 1393 1713
+3329 2 2 1 4 955 1425 1483
+3330 2 2 1 4 954 1424 1482
+3331 2 2 1 4 591 1762 1444
+3332 2 2 1 4 590 1763 1445
+3333 2 2 1 4 457 1695 1652
+3334 2 2 1 4 819 1652 1695
+3335 2 2 1 4 818 1653 1694
+3336 2 2 1 4 456 1694 1653
+3337 2 2 1 4 436 1698 1180
+3338 2 2 1 4 437 1699 1181
+3339 2 2 1 4 851 1897 1891
+3340 2 2 1 4 850 1896 1890
+3341 2 2 1 4 534 1766 1249
+3342 2 2 1 4 535 1767 1248
+3343 2 2 1 4 670 1795 1150
+3344 2 2 1 4 671 1794 1151
+3345 2 2 1 4 6 1663 1208
+3346 2 2 1 4 69 1662 1209
+3347 2 2 1 4 436 1764 1698
+3348 2 2 1 4 437 1765 1699
+3349 2 2 1 4 345 1854 1368
+3350 2 2 1 4 344 1855 1369
+3351 2 2 1 4 638 1530 1828
+3352 2 2 1 4 639 1531 1829
+3353 2 2 1 4 424 1482 1424
+3354 2 2 1 4 425 1483 1425
+3355 2 2 1 4 524 1244 1866
+3356 2 2 1 4 525 1245 1867
+3357 2 2 1 4 524 1866 1246
+3358 2 2 1 4 525 1867 1247
+3359 2 2 1 4 324 1334 1610
+3360 2 2 1 4 325 1335 1611
+3361 2 2 1 4 679 1313 1661
+3362 2 2 1 4 376 1661 1313
+3363 2 2 1 4 678 1312 1660
+3364 2 2 1 4 377 1660 1312
+3365 2 2 1 4 701 1442 1606
+3366 2 2 1 4 700 1443 1607
+3367 2 2 1 4 346 1606 1442
+3368 2 2 1 4 347 1607 1443
+3369 2 2 1 4 876 1698 1764
+3370 2 2 1 4 877 1699 1765
+3371 2 2 1 4 407 1655 1383
+3372 2 2 1 4 406 1654 1382
+3373 2 2 1 4 353 1783 1373
+3374 2 2 1 4 352 1782 1372
+3375 2 2 1 4 710 1748 1376
+3376 2 2 1 4 711 1749 1377
+3377 2 2 1 4 531 1242 1693
+3378 2 2 1 4 530 1243 1692
+3379 2 2 1 4 610 1522 1396
+3380 2 2 1 4 611 1523 1397
+3381 2 2 1 4 646 1722 1382
+3382 2 2 1 4 647 1723 1383
+3383 2 2 1 4 684 1396 1522
+3384 2 2 1 4 685 1397 1523
+3385 2 2 1 4 669 1704 1318
+3386 2 2 1 4 668 1705 1319
+3387 2 2 1 4 606 1501 1670
+3388 2 2 1 4 607 1500 1671
+3389 2 2 1 4 762 1457 1722
+3390 2 2 1 4 763 1456 1723
+3391 2 2 1 4 406 1722 1457
+3392 2 2 1 4 407 1723 1456
+3393 2 2 1 4 684 1604 1396
+3394 2 2 1 4 685 1605 1397
+3395 2 2 1 4 390 1396 1604
+3396 2 2 1 4 391 1397 1605
+3397 2 2 1 4 646 1332 1720
+3398 2 2 1 4 647 1333 1721
+3399 2 2 1 4 693 1252 1656
+3400 2 2 1 4 692 1253 1657
+3401 2 2 1 4 778 1327 1731
+3402 2 2 1 4 779 1326 1730
+3403 2 2 1 4 390 1604 1300
+3404 2 2 1 4 391 1605 1301
+3405 2 2 1 4 396 1184 1774
+3406 2 2 1 4 397 1185 1775
+3407 2 2 1 4 333 1739 1515
+3408 2 2 1 4 332 1738 1514
+3409 2 2 1 4 602 1378 1636
+3410 2 2 1 4 603 1379 1637
+3411 2 2 1 4 308 1294 1790
+3412 2 2 1 4 309 1295 1791
+3413 2 2 1 4 843 1861 1859
+3414 2 2 1 4 842 1860 1858
+3415 2 2 1 4 644 1902 1308
+3416 2 2 1 4 645 1903 1309
+3417 2 2 1 4 667 1537 1703
+3418 2 2 1 4 666 1536 1702
+3419 2 2 1 4 317 1786 1351
+3420 2 2 1 4 316 1787 1350
+3421 2 2 1 4 478 1624 1314
+3422 2 2 1 4 664 1314 1624
+3423 2 2 1 4 650 1907 1423
+3424 2 2 1 4 651 1906 1422
+3425 2 2 1 4 635 1766 1220
+3426 2 2 1 4 634 1767 1221
+3427 2 2 1 4 697 1571 1875
+3428 2 2 1 4 696 1570 1874
+3429 2 2 1 4 811 1352 1757
+3430 2 2 1 4 810 1353 1756
+3431 2 2 1 4 385 1900 1216
+3432 2 2 1 4 384 1901 1217
+3433 2 2 1 4 940 1780 1832
+3434 2 2 1 4 674 1832 1780
+3435 2 2 1 4 941 1781 1833
+3436 2 2 1 4 675 1833 1781
+3437 2 2 1 4 648 1610 1334
+3438 2 2 1 4 649 1611 1335
+3439 2 2 1 4 663 1768 1230
+3440 2 2 1 4 662 1769 1231
+3441 2 2 1 4 632 1596 1368
+3442 2 2 1 4 633 1597 1369
+3443 2 2 1 4 398 1256 1728
+3444 2 2 1 4 399 1257 1729
+3445 2 2 1 4 672 1244 1796
+3446 2 2 1 4 673 1245 1797
+3447 2 2 1 4 524 1796 1244
+3448 2 2 1 4 525 1797 1245
+3449 2 2 1 4 764 1589 1400
+3450 2 2 1 4 765 1588 1401
+3451 2 2 1 4 2 1659 1759
+3452 2 2 1 4 1 1658 1758
+3453 2 2 1 4 450 1374 1616
+3454 2 2 1 4 451 1375 1617
+3455 2 2 1 4 650 1512 1907
+3456 2 2 1 4 651 1513 1906
+3457 2 2 1 4 671 1677 1346
+3458 2 2 1 4 670 1676 1347
+3459 2 2 1 4 103 1346 1677
+3460 2 2 1 4 40 1347 1676
+3461 2 2 1 4 936 1429 1853
+3462 2 2 1 4 937 1428 1852
+3463 2 2 1 4 934 1851 1426
+3464 2 2 1 4 935 1850 1427
+3465 2 2 1 4 663 1417 1768
+3466 2 2 1 4 662 1416 1769
+3467 2 2 1 4 444 1598 1559
+3468 2 2 1 4 445 1599 1558
+3469 2 2 1 4 715 1559 1598
+3470 2 2 1 4 714 1558 1599
+3471 2 2 1 4 702 1246 1866
+3472 2 2 1 4 703 1247 1867
+3473 2 2 1 4 603 1494 1746
+3474 2 2 1 4 602 1495 1747
+3475 2 2 1 4 604 1675 1528
+3476 2 2 1 4 605 1674 1529
+3477 2 2 1 4 710 1716 1748
+3478 2 2 1 4 711 1717 1749
+3479 2 2 1 4 621 1619 1412
+3480 2 2 1 4 620 1618 1413
+3481 2 2 1 4 648 1382 1654
+3482 2 2 1 4 649 1383 1655
+3483 2 2 1 4 630 1374 1664
+3484 2 2 1 4 631 1375 1665
+3485 2 2 1 4 667 1814 1267
+3486 2 2 1 4 666 1815 1266
+3487 2 2 1 4 669 1269 1816
+3488 2 2 1 4 668 1268 1817
+3489 2 2 1 4 733 1891 1897
+3490 2 2 1 4 732 1890 1896
+3491 2 2 1 4 724 1716 1602
+3492 2 2 1 4 725 1717 1603
+3493 2 2 1 4 292 1356 1792
+3494 2 2 1 4 293 1357 1793
+3495 2 2 1 4 707 1359 1825
+3496 2 2 1 4 706 1358 1824
+3497 2 2 1 4 388 1824 1358
+3498 2 2 1 4 389 1825 1359
+3499 2 2 1 4 372 1612 1451
+3500 2 2 1 4 373 1613 1450
+3501 2 2 1 4 447 1644 1412
+3502 2 2 1 4 446 1645 1413
+3503 2 2 1 4 682 1292 1920
+3504 2 2 1 4 683 1293 1921
+3505 2 2 1 4 681 1790 1294
+3506 2 2 1 4 680 1791 1295
+3507 2 2 1 4 322 1720 1332
+3508 2 2 1 4 323 1721 1333
+3509 2 2 1 4 890 1770 1799
+3510 2 2 1 4 448 1799 1770
+3511 2 2 1 4 891 1771 1801
+3512 2 2 1 4 449 1801 1771
+3513 2 2 1 4 527 1686 1904
+3514 2 2 1 4 884 1904 1686
+3515 2 2 1 4 526 1687 1905
+3516 2 2 1 4 885 1905 1687
+3517 2 2 1 4 876 1354 1698
+3518 2 2 1 4 877 1355 1699
+3519 2 2 1 4 688 1884 1883
+3520 2 2 1 4 689 1885 1882
+3521 2 2 1 4 716 1859 1861
+3522 2 2 1 4 717 1858 1860
+3523 2 2 1 4 396 1667 1541
+3524 2 2 1 4 397 1666 1540
+3525 2 2 1 4 947 1883 1884
+3526 2 2 1 4 946 1882 1885
+3527 2 2 1 4 828 1906 1513
+3528 2 2 1 4 829 1907 1512
+3529 2 2 1 4 926 1671 1500
+3530 2 2 1 4 927 1670 1501
+3531 2 2 1 4 851 1891 1572
+3532 2 2 1 4 850 1890 1573
+3533 2 2 1 4 400 1371 1732
+3534 2 2 1 4 401 1370 1733
+3535 2 2 1 4 406 1382 1722
+3536 2 2 1 4 407 1383 1723
+3537 2 2 1 4 471 1757 1352
+3538 2 2 1 4 470 1756 1353
+3539 2 2 1 4 655 1712 1392
+3540 2 2 1 4 654 1713 1393
+3541 2 2 1 4 626 1581 1813
+3542 2 2 1 4 627 1580 1812
+3543 2 2 1 4 704 1351 1786
+3544 2 2 1 4 705 1350 1787
+3545 2 2 1 4 379 1308 1902
+3546 2 2 1 4 378 1309 1903
+3547 2 2 1 4 838 1474 1682
+3548 2 2 1 4 839 1475 1683
+3549 2 2 1 4 385 1364 1900
+3550 2 2 1 4 384 1365 1901
+3551 2 2 1 4 709 1792 1356
+3552 2 2 1 4 708 1793 1357
+3553 2 2 1 4 416 1752 1520
+3554 2 2 1 4 417 1753 1521
+3555 2 2 1 4 688 1337 1884
+3556 2 2 1 4 689 1336 1885
+3557 2 2 1 4 632 1368 1854
+3558 2 2 1 4 633 1369 1855
+3559 2 2 1 4 748 1812 1580
+3560 2 2 1 4 749 1813 1581
+3561 2 2 1 4 571 1884 1337
+3562 2 2 1 4 570 1885 1336
+3563 2 2 1 4 686 1365 1898
+3564 2 2 1 4 687 1364 1899
+3565 2 2 1 4 948 1528 1675
+3566 2 2 1 4 949 1529 1674
+3567 2 2 1 4 836 1540 1666
+3568 2 2 1 4 837 1541 1667
+3569 2 2 1 4 720 1524 1754
+3570 2 2 1 4 430 1754 1524
+3571 2 2 1 4 721 1525 1755
+3572 2 2 1 4 431 1755 1525
+3573 2 2 1 4 689 1746 1494
+3574 2 2 1 4 688 1747 1495
+3575 2 2 1 4 648 1654 1610
+3576 2 2 1 4 732 1610 1654
+3577 2 2 1 4 649 1655 1611
+3578 2 2 1 4 733 1611 1655
+3579 2 2 1 4 430 1602 1650
+3580 2 2 1 4 710 1650 1602
+3581 2 2 1 4 431 1603 1651
+3582 2 2 1 4 711 1651 1603
+3583 2 2 1 4 687 1900 1364
+3584 2 2 1 4 686 1901 1365
+3585 2 2 1 4 348 1508 1740
+3586 2 2 1 4 349 1509 1741
+3587 2 2 1 4 932 1444 1762
+3588 2 2 1 4 933 1445 1763
+3589 2 2 1 4 1002 1446 1818
+3590 2 2 1 4 1003 1447 1819
+3591 2 2 1 4 740 1818 1446
+3592 2 2 1 4 741 1819 1447
+3593 2 2 1 4 464 1448 1828
+3594 2 2 1 4 465 1449 1829
+3595 2 2 1 4 694 1740 1508
+3596 2 2 1 4 695 1741 1509
+3597 2 2 1 4 661 1514 1738
+3598 2 2 1 4 660 1515 1739
+3599 2 2 1 4 325 1611 1897
+3600 2 2 1 4 324 1610 1896
+3601 2 2 1 4 408 1426 1851
+3602 2 2 1 4 409 1427 1850
+3603 2 2 1 4 410 1852 1428
+3604 2 2 1 4 411 1853 1429
+3605 2 2 1 4 416 1520 1748
+3606 2 2 1 4 417 1521 1749
+3607 2 2 1 4 843 1706 1861
+3608 2 2 1 4 842 1707 1860
+3609 2 2 1 4 822 1913 1918
+3610 2 2 1 4 823 1912 1919
+3611 2 2 1 4 444 1422 1906
+3612 2 2 1 4 445 1423 1907
+3613 2 2 1 4 360 1736 1679
+3614 2 2 1 4 780 1679 1736
+3615 2 2 1 4 361 1737 1678
+3616 2 2 1 4 781 1678 1737
+3617 2 2 1 4 694 1508 1784
+3618 2 2 1 4 695 1509 1785
+3619 2 2 1 4 720 1754 1736
+3620 2 2 1 4 780 1736 1754
+3621 2 2 1 4 721 1755 1737
+3622 2 2 1 4 781 1737 1755
+3623 2 2 1 4 710 1602 1716
+3624 2 2 1 4 711 1603 1717
+3625 2 2 1 4 1011 1842 1511
+3626 2 2 1 4 1010 1843 1510
+3627 2 2 1 4 862 1828 1530
+3628 2 2 1 4 863 1829 1531
+3629 2 2 1 4 417 1749 1717
+3630 2 2 1 4 416 1748 1716
+3631 2 2 1 4 672 1848 1542
+3632 2 2 1 4 673 1849 1543
+3633 2 2 1 4 430 1772 1602
+3634 2 2 1 4 724 1602 1772
+3635 2 2 1 4 431 1773 1603
+3636 2 2 1 4 725 1603 1773
+3637 2 2 1 4 632 1854 1592
+3638 2 2 1 4 633 1855 1593
+3639 2 2 1 4 686 1758 1658
+3640 2 2 1 4 687 1759 1659
+3641 2 2 1 4 822 1688 1913
+3642 2 2 1 4 823 1689 1912
+3643 2 2 1 4 769 1918 1913
+3644 2 2 1 4 768 1919 1912
+3645 2 2 1 4 732 1896 1610
+3646 2 2 1 4 733 1897 1611
+3647 2 2 1 4 882 1592 1854
+3648 2 2 1 4 883 1593 1855
+3649 2 2 1 4 715 1908 1559
+3650 2 2 1 4 714 1909 1558
+3651 2 2 1 4 475 1572 1891
+3652 2 2 1 4 474 1573 1890
+3653 2 2 1 4 666 1702 1815
+3654 2 2 1 4 918 1815 1702
+3655 2 2 1 4 919 1814 1703
+3656 2 2 1 4 667 1703 1814
+3657 2 2 1 4 920 1705 1817
+3658 2 2 1 4 921 1704 1816
+3659 2 2 1 4 668 1817 1705
+3660 2 2 1 4 669 1816 1704
+3661 2 2 1 4 762 1914 1872
+3662 2 2 1 4 763 1915 1873
+3663 2 2 1 4 712 1798 1799
+3664 2 2 1 4 890 1799 1798
+3665 2 2 1 4 713 1800 1801
+3666 2 2 1 4 891 1801 1800
+3667 2 2 1 4 821 1872 1914
+3668 2 2 1 4 820 1873 1915
+3669 2 2 1 4 473 1861 1706
+3670 2 2 1 4 472 1860 1707
+3671 2 2 1 4 571 1912 1689
+3672 2 2 1 4 570 1913 1688
+3673 2 2 1 4 821 1802 1872
+3674 2 2 1 4 820 1803 1873
+3675 2 2 1 4 486 1872 1802
+3676 2 2 1 4 487 1873 1803
+3677 2 2 1 4 762 1720 1914
+3678 2 2 1 4 763 1721 1915
+3679 2 2 1 4 322 1914 1720
+3680 2 2 1 4 323 1915 1721
+3681 2 2 2 13 2086 2228 2649
+3682 2 2 2 13 2087 2229 2648
+3683 2 2 2 13 2096 2646 2218
+3684 2 2 2 13 2097 2647 2219
+3685 2 2 2 13 2084 2231 2658
+3686 2 2 2 13 2085 2230 2659
+3687 2 2 2 13 2088 2654 2216
+3688 2 2 2 13 2089 2655 2217
+3689 2 2 2 13 2100 2205 2651
+3690 2 2 2 13 2101 2204 2650
+3691 2 2 2 13 2106 2652 2225
+3692 2 2 2 13 2107 2653 2224
+3693 2 2 2 13 2091 2223 2660
+3694 2 2 2 13 2090 2222 2661
+3695 2 2 2 13 2094 2656 2206
+3696 2 2 2 13 2095 2657 2207
+3697 2 2 2 13 144 143 2531
+3698 2 2 2 13 223 222 2530
+3699 2 2 2 13 2533 231 230
+3700 2 2 2 13 2532 152 151
+3701 2 2 2 13 2016 2372 2309
+3702 2 2 2 13 2017 2373 2308
+3703 2 2 2 13 2141 2309 2372
+3704 2 2 2 13 2140 2308 2373
+3705 2 2 2 13 2530 222 2238
+3706 2 2 2 13 2531 143 2239
+3707 2 2 2 13 2246 231 2533
+3708 2 2 2 13 2247 152 2532
+3709 2 2 2 13 146 2313 147
+3710 2 2 2 13 225 2312 226
+3711 2 2 2 13 148 2314 149
+3712 2 2 2 13 227 2315 228
+3713 2 2 2 13 146 2775 2313
+3714 2 2 2 13 225 2774 2312
+3715 2 2 2 13 149 2314 2772
+3716 2 2 2 13 228 2315 2773
+3717 2 2 2 13 1987 2270 2236
+3718 2 2 2 13 1986 2271 2237
+3719 2 2 2 13 1991 2438 2331
+3720 2 2 2 13 1990 2439 2330
+3721 2 2 2 13 2004 2316 2422
+3722 2 2 2 13 2005 2317 2423
+3723 2 2 2 13 2010 2323 2437
+3724 2 2 2 13 2011 2322 2436
+3725 2 2 2 13 2000 2325 2435
+3726 2 2 2 13 2001 2324 2434
+3727 2 2 2 13 2013 2425 2319
+3728 2 2 2 13 2012 2424 2318
+3729 2 2 2 13 2007 2426 2321
+3730 2 2 2 13 2006 2427 2320
+3731 2 2 2 13 1989 2337 2433
+3732 2 2 2 13 1988 2336 2432
+3733 2 2 2 13 1997 2430 2328
+3734 2 2 2 13 1996 2431 2329
+3735 2 2 2 13 1994 2326 2428
+3736 2 2 2 13 1995 2327 2429
+3737 2 2 2 13 2015 2443 2332
+3738 2 2 2 13 2014 2442 2333
+3739 2 2 2 13 2009 2334 2440
+3740 2 2 2 13 2008 2335 2441
+3741 2 2 2 13 2002 2445 2339
+3742 2 2 2 13 2003 2444 2338
+3743 2 2 2 13 2084 2538 2231
+3744 2 2 2 13 2085 2539 2230
+3745 2 2 2 13 2086 2536 2228
+3746 2 2 2 13 2087 2537 2229
+3747 2 2 2 13 2089 2217 2540
+3748 2 2 2 13 2088 2216 2541
+3749 2 2 2 13 2096 2218 2542
+3750 2 2 2 13 2097 2219 2543
+3751 2 2 2 13 2091 2550 2223
+3752 2 2 2 13 2090 2551 2222
+3753 2 2 2 13 2095 2207 2555
+3754 2 2 2 13 2094 2206 2554
+3755 2 2 2 13 2100 2548 2205
+3756 2 2 2 13 2101 2549 2204
+3757 2 2 2 13 2106 2225 2558
+3758 2 2 2 13 2107 2224 2559
+3759 2 2 2 13 2028 2736 2168
+3760 2 2 2 13 2029 2737 2169
+3761 2 2 2 13 2026 2733 2160
+3762 2 2 2 13 2027 2732 2161
+3763 2 2 2 13 2024 2727 2149
+3764 2 2 2 13 2025 2726 2148
+3765 2 2 2 13 2032 2173 2735
+3766 2 2 2 13 2033 2172 2734
+3767 2 2 2 13 2031 2154 2729
+3768 2 2 2 13 2030 2155 2728
+3769 2 2 2 13 2035 2164 2730
+3770 2 2 2 13 2034 2165 2731
+3771 2 2 2 13 2036 2151 2715
+3772 2 2 2 13 2037 2150 2714
+3773 2 2 2 13 2041 2723 2153
+3774 2 2 2 13 2040 2722 2152
+3775 2 2 2 13 2039 2720 2163
+3776 2 2 2 13 2038 2721 2162
+3777 2 2 2 13 2042 2717 2171
+3778 2 2 2 13 2043 2716 2170
+3779 2 2 2 13 2044 2719 2167
+3780 2 2 2 13 2045 2718 2166
+3781 2 2 2 13 2050 2156 2724
+3782 2 2 2 13 2051 2157 2725
+3783 2 2 2 13 2049 2174 2713
+3784 2 2 2 13 2048 2175 2712
+3785 2 2 2 13 2047 2159 2711
+3786 2 2 2 13 2046 2158 2710
+3787 2 2 2 13 2018 2235 2415
+3788 2 2 2 13 2019 2234 2414
+3789 2 2 2 13 2016 2412 2233
+3790 2 2 2 13 2017 2413 2232
+3791 2 2 2 13 2117 2423 2317
+3792 2 2 2 13 2116 2422 2316
+3793 2 2 2 13 2119 2319 2425
+3794 2 2 2 13 2118 2318 2424
+3795 2 2 2 13 2124 2330 2439
+3796 2 2 2 13 2125 2331 2438
+3797 2 2 2 13 2132 2436 2322
+3798 2 2 2 13 2133 2437 2323
+3799 2 2 2 13 2127 2321 2426
+3800 2 2 2 13 2126 2320 2427
+3801 2 2 2 13 2130 2435 2325
+3802 2 2 2 13 2131 2434 2324
+3803 2 2 2 13 2129 2328 2430
+3804 2 2 2 13 2128 2329 2431
+3805 2 2 2 13 2123 2428 2326
+3806 2 2 2 13 2122 2429 2327
+3807 2 2 2 13 2121 2433 2337
+3808 2 2 2 13 2120 2432 2336
+3809 2 2 2 13 2139 2333 2442
+3810 2 2 2 13 2138 2332 2443
+3811 2 2 2 13 2134 2440 2334
+3812 2 2 2 13 2135 2441 2335
+3813 2 2 2 13 2136 2339 2445
+3814 2 2 2 13 2137 2338 2444
+3815 2 2 2 13 138 2241 2588
+3816 2 2 2 13 217 2240 2589
+3817 2 2 2 13 182 2608 2257
+3818 2 2 2 13 261 2609 2256
+3819 2 2 2 13 157 2593 2245
+3820 2 2 2 13 236 2592 2244
+3821 2 2 2 13 193 2253 2602
+3822 2 2 2 13 272 2252 2603
+3823 2 2 2 13 162 2597 2249
+3824 2 2 2 13 241 2596 2248
+3825 2 2 2 13 256 2607 2262
+3826 2 2 2 13 177 2606 2263
+3827 2 2 2 13 198 2255 2598
+3828 2 2 2 13 277 2254 2599
+3829 2 2 2 13 133 2243 2590
+3830 2 2 2 13 212 2242 2591
+3831 2 2 2 13 282 2258 2600
+3832 2 2 2 13 203 2259 2601
+3833 2 2 2 13 167 2594 2251
+3834 2 2 2 13 246 2595 2250
+3835 2 2 2 13 287 2261 2604
+3836 2 2 2 13 208 2260 2605
+3837 2 2 2 13 172 2611 2264
+3838 2 2 2 13 251 2610 2265
+3839 2 2 2 13 2195 2620 2634
+3840 2 2 2 13 2194 2621 2635
+3841 2 2 2 13 2193 2636 2622
+3842 2 2 2 13 2192 2637 2623
+3843 2 2 2 13 1986 2399 2147
+3844 2 2 2 13 1987 2398 2146
+3845 2 2 2 13 1980 2620 2195
+3846 2 2 2 13 1981 2621 2194
+3847 2 2 2 13 1966 2193 2622
+3848 2 2 2 13 1967 2192 2623
+3849 2 2 2 13 1971 2190 2615
+3850 2 2 2 13 1970 2191 2613
+3851 2 2 2 13 1983 2614 2203
+3852 2 2 2 13 1982 2612 2202
+3853 2 2 2 13 1977 2199 2616
+3854 2 2 2 13 1976 2198 2617
+3855 2 2 2 13 1965 2619 2187
+3856 2 2 2 13 1964 2618 2186
+3857 2 2 2 13 138 2588 139
+3858 2 2 2 13 217 2589 218
+3859 2 2 2 13 182 181 2608
+3860 2 2 2 13 261 260 2609
+3861 2 2 2 13 156 2593 157
+3862 2 2 2 13 235 2592 236
+3863 2 2 2 13 194 193 2602
+3864 2 2 2 13 273 272 2603
+3865 2 2 2 13 255 2607 256
+3866 2 2 2 13 176 2606 177
+3867 2 2 2 13 198 2598 199
+3868 2 2 2 13 277 2599 278
+3869 2 2 2 13 162 161 2597
+3870 2 2 2 13 241 240 2596
+3871 2 2 2 13 134 133 2590
+3872 2 2 2 13 213 212 2591
+3873 2 2 2 13 283 282 2600
+3874 2 2 2 13 204 203 2601
+3875 2 2 2 13 166 2594 167
+3876 2 2 2 13 245 2595 246
+3877 2 2 2 13 287 2604 288
+3878 2 2 2 13 208 2605 209
+3879 2 2 2 13 172 171 2611
+3880 2 2 2 13 251 250 2610
+3881 2 2 2 13 1960 2218 2646
+3882 2 2 2 13 1961 2219 2647
+3883 2 2 2 13 1958 2651 2205
+3884 2 2 2 13 1959 2650 2204
+3885 2 2 2 13 1978 2225 2652
+3886 2 2 2 13 1979 2224 2653
+3887 2 2 2 13 1968 2649 2228
+3888 2 2 2 13 1969 2648 2229
+3889 2 2 2 13 1962 2216 2654
+3890 2 2 2 13 1963 2217 2655
+3891 2 2 2 13 1956 2206 2656
+3892 2 2 2 13 1957 2207 2657
+3893 2 2 2 13 1974 2658 2231
+3894 2 2 2 13 1975 2659 2230
+3895 2 2 2 13 1972 2660 2223
+3896 2 2 2 13 1973 2661 2222
+3897 2 2 2 13 2169 2737 2277
+3898 2 2 2 13 2168 2736 2276
+3899 2 2 2 13 2160 2733 2278
+3900 2 2 2 13 2161 2732 2279
+3901 2 2 2 13 2173 2282 2735
+3902 2 2 2 13 2172 2283 2734
+3903 2 2 2 13 2149 2727 2280
+3904 2 2 2 13 2148 2726 2281
+3905 2 2 2 13 2154 2284 2729
+3906 2 2 2 13 2155 2285 2728
+3907 2 2 2 13 2164 2287 2730
+3908 2 2 2 13 2165 2286 2731
+3909 2 2 2 13 2151 2288 2715
+3910 2 2 2 13 2150 2289 2714
+3911 2 2 2 13 2153 2723 2291
+3912 2 2 2 13 2152 2722 2290
+3913 2 2 2 13 2162 2721 2293
+3914 2 2 2 13 2163 2720 2292
+3915 2 2 2 13 2171 2717 2294
+3916 2 2 2 13 2170 2716 2295
+3917 2 2 2 13 2167 2719 2296
+3918 2 2 2 13 2166 2718 2297
+3919 2 2 2 13 2156 2298 2724
+3920 2 2 2 13 2157 2299 2725
+3921 2 2 2 13 2174 2300 2713
+3922 2 2 2 13 2175 2301 2712
+3923 2 2 2 13 2159 2302 2711
+3924 2 2 2 13 2158 2303 2710
+3925 2 2 2 13 2019 2414 2305
+3926 2 2 2 13 2018 2415 2304
+3927 2 2 2 13 2017 2307 2413
+3928 2 2 2 13 2016 2306 2412
+3929 2 2 2 13 2109 2305 2414
+3930 2 2 2 13 2108 2304 2415
+3931 2 2 2 13 2110 2412 2306
+3932 2 2 2 13 2111 2413 2307
+3933 2 2 2 13 1948 2150 2421
+3934 2 2 2 13 1949 2151 2420
+3935 2 2 2 13 1947 2419 2148
+3936 2 2 2 13 1946 2418 2149
+3937 2 2 2 13 34 35 2204
+3938 2 2 2 13 97 98 2205
+3939 2 2 2 13 85 86 2209
+3940 2 2 2 13 22 23 2208
+3941 2 2 2 13 6 2213 5
+3942 2 2 2 13 69 2212 68
+3943 2 2 2 13 26 27 2220
+3944 2 2 2 13 89 90 2221
+3945 2 2 2 13 54 2218 53
+3946 2 2 2 13 117 2219 116
+3947 2 2 2 13 62 2217 61
+3948 2 2 2 13 125 2216 124
+3949 2 2 2 13 77 2227 76
+3950 2 2 2 13 14 2226 13
+3951 2 2 2 13 30 31 2214
+3952 2 2 2 13 10 2224 9
+3953 2 2 2 13 93 94 2215
+3954 2 2 2 13 73 2225 72
+3955 2 2 2 13 66 2206 65
+3956 2 2 2 13 129 2207 128
+3957 2 2 2 13 58 2210 57
+3958 2 2 2 13 121 2211 120
+3959 2 2 2 13 46 47 2229
+3960 2 2 2 13 109 110 2228
+3961 2 2 2 13 101 102 2222
+3962 2 2 2 13 38 39 2223
+3963 2 2 2 13 105 106 2230
+3964 2 2 2 13 42 43 2231
+3965 2 2 2 13 2036 2420 2151
+3966 2 2 2 13 2024 2149 2418
+3967 2 2 2 13 2025 2148 2419
+3968 2 2 2 13 2037 2421 2150
+3969 2 2 2 13 1972 2276 2178
+3970 2 2 2 13 1973 2277 2179
+3971 2 2 2 13 1974 2278 2181
+3972 2 2 2 13 1975 2279 2180
+3973 2 2 2 13 1956 2183 2282
+3974 2 2 2 13 1957 2182 2283
+3975 2 2 2 13 1968 2280 2176
+3976 2 2 2 13 1969 2281 2177
+3977 2 2 2 13 1962 2188 2286
+3978 2 2 2 13 1963 2189 2287
+3979 2 2 2 13 1964 2186 2285
+3980 2 2 2 13 1965 2187 2284
+3981 2 2 2 13 1960 2184 2288
+3982 2 2 2 13 1961 2185 2289
+3983 2 2 2 13 1958 2290 2196
+3984 2 2 2 13 1959 2291 2197
+3985 2 2 2 13 1970 2296 2191
+3986 2 2 2 13 1976 2292 2198
+3987 2 2 2 13 1977 2293 2199
+3988 2 2 2 13 1971 2297 2190
+3989 2 2 2 13 1967 2294 2192
+3990 2 2 2 13 1966 2295 2193
+3991 2 2 2 13 1983 2203 2299
+3992 2 2 2 13 1982 2202 2298
+3993 2 2 2 13 1979 2201 2301
+3994 2 2 2 13 1978 2200 2300
+3995 2 2 2 13 1981 2194 2303
+3996 2 2 2 13 1980 2195 2302
+3997 2 2 2 13 2190 2740 2615
+3998 2 2 2 13 2191 2741 2613
+3999 2 2 2 13 2202 2612 2738
+4000 2 2 2 13 2203 2614 2739
+4001 2 2 2 13 2199 2742 2616
+4002 2 2 2 13 2198 2743 2617
+4003 2 2 2 13 2187 2619 2744
+4004 2 2 2 13 2186 2618 2745
+4005 2 2 2 13 2005 2179 2277
+4006 2 2 2 13 2004 2178 2276
+4007 2 2 2 13 1994 2180 2279
+4008 2 2 2 13 1995 2181 2278
+4009 2 2 2 13 2013 2282 2183
+4010 2 2 2 13 2012 2283 2182
+4011 2 2 2 13 1988 2176 2280
+4012 2 2 2 13 1989 2177 2281
+4013 2 2 2 13 2006 2286 2188
+4014 2 2 2 13 2007 2287 2189
+4015 2 2 2 13 1997 2285 2186
+4016 2 2 2 13 1996 2284 2187
+4017 2 2 2 13 1990 2288 2184
+4018 2 2 2 13 1991 2289 2185
+4019 2 2 2 13 2011 2196 2290
+4020 2 2 2 13 2010 2197 2291
+4021 2 2 2 13 2001 2191 2296
+4022 2 2 2 13 2000 2190 2297
+4023 2 2 2 13 2009 2198 2292
+4024 2 2 2 13 2008 2199 2293
+4025 2 2 2 13 1998 2192 2294
+4026 2 2 2 13 1999 2193 2295
+4027 2 2 2 13 2014 2298 2202
+4028 2 2 2 13 2015 2299 2203
+4029 2 2 2 13 2003 2301 2201
+4030 2 2 2 13 2002 2300 2200
+4031 2 2 2 13 1992 2303 2194
+4032 2 2 2 13 1993 2302 2195
+4033 2 2 2 13 1986 2417 2145
+4034 2 2 2 13 1987 2416 2144
+4035 2 2 2 13 1987 2408 2270
+4036 2 2 2 13 1986 2409 2271
+4037 2 2 2 13 1986 2147 2409
+4038 2 2 2 13 1987 2146 2408
+4039 2 2 2 13 1985 2237 2271
+4040 2 2 2 13 1984 2236 2270
+4041 2 2 2 13 1968 2149 2280
+4042 2 2 2 13 1969 2148 2281
+4043 2 2 2 13 1974 2160 2278
+4044 2 2 2 13 1975 2161 2279
+4045 2 2 2 13 1972 2168 2276
+4046 2 2 2 13 1973 2169 2277
+4047 2 2 2 13 1956 2282 2173
+4048 2 2 2 13 1957 2283 2172
+4049 2 2 2 13 1965 2284 2154
+4050 2 2 2 13 1964 2285 2155
+4051 2 2 2 13 1960 2288 2151
+4052 2 2 2 13 1961 2289 2150
+4053 2 2 2 13 1962 2286 2165
+4054 2 2 2 13 1963 2287 2164
+4055 2 2 2 13 1959 2153 2291
+4056 2 2 2 13 1958 2152 2290
+4057 2 2 2 13 1977 2162 2293
+4058 2 2 2 13 1976 2163 2292
+4059 2 2 2 13 1967 2171 2294
+4060 2 2 2 13 1966 2170 2295
+4061 2 2 2 13 1971 2166 2297
+4062 2 2 2 13 1970 2167 2296
+4063 2 2 2 13 1983 2299 2157
+4064 2 2 2 13 1982 2298 2156
+4065 2 2 2 13 1980 2302 2159
+4066 2 2 2 13 1981 2303 2158
+4067 2 2 2 13 1979 2301 2175
+4068 2 2 2 13 1978 2300 2174
+4069 2 2 2 13 2235 2645 2415
+4070 2 2 2 13 2234 2644 2414
+4071 2 2 2 13 2233 2412 2642
+4072 2 2 2 13 2232 2413 2643
+4073 2 2 2 13 1931 2481 2152
+4074 2 2 2 13 1930 2480 2153
+4075 2 2 2 13 1926 2156 2485
+4076 2 2 2 13 1927 2157 2484
+4077 2 2 2 13 1928 2155 2476
+4078 2 2 2 13 1929 2154 2477
+4079 2 2 2 13 1942 2173 2474
+4080 2 2 2 13 1943 2172 2475
+4081 2 2 2 13 1950 2472 2160
+4082 2 2 2 13 1952 2470 2168
+4083 2 2 2 13 1953 2471 2169
+4084 2 2 2 13 1951 2473 2161
+4085 2 2 2 13 1923 2486 2166
+4086 2 2 2 13 1922 2487 2167
+4087 2 2 2 13 1937 2158 2492
+4088 2 2 2 13 1936 2159 2493
+4089 2 2 2 13 142 141 2337
+4090 2 2 2 13 221 220 2336
+4091 2 2 2 13 154 153 2330
+4092 2 2 2 13 233 232 2331
+4093 2 2 2 13 136 2327 137
+4094 2 2 2 13 215 2326 216
+4095 2 2 2 13 178 2339 179
+4096 2 2 2 13 257 2338 258
+4097 2 2 2 13 237 2329 238
+4098 2 2 2 13 158 2328 159
+4099 2 2 2 13 196 2335 197
+4100 2 2 2 13 275 2334 276
+4101 2 2 2 13 202 201 2325
+4102 2 2 2 13 281 280 2324
+4103 2 2 2 13 164 163 2321
+4104 2 2 2 13 243 242 2320
+4105 2 2 2 13 253 252 2333
+4106 2 2 2 13 174 173 2332
+4107 2 2 2 13 285 2323 286
+4108 2 2 2 13 206 2322 207
+4109 2 2 2 13 132 131 2316
+4110 2 2 2 13 211 210 2317
+4111 2 2 2 13 168 2319 169
+4112 2 2 2 13 247 2318 248
+4113 2 2 2 13 1987 2144 2398
+4114 2 2 2 13 1986 2145 2399
+4115 2 2 2 13 2041 2153 2480
+4116 2 2 2 13 2040 2152 2481
+4117 2 2 2 13 2031 2477 2154
+4118 2 2 2 13 2030 2476 2155
+4119 2 2 2 13 2033 2475 2172
+4120 2 2 2 13 2032 2474 2173
+4121 2 2 2 13 2028 2168 2470
+4122 2 2 2 13 2029 2169 2471
+4123 2 2 2 13 2027 2161 2473
+4124 2 2 2 13 2026 2160 2472
+4125 2 2 2 13 2050 2485 2156
+4126 2 2 2 13 2051 2484 2157
+4127 2 2 2 13 2035 2479 2164
+4128 2 2 2 13 2034 2478 2165
+4129 2 2 2 13 2038 2162 2482
+4130 2 2 2 13 2039 2163 2483
+4131 2 2 2 13 2044 2167 2487
+4132 2 2 2 13 2045 2166 2486
+4133 2 2 2 13 2043 2170 2488
+4134 2 2 2 13 2042 2171 2489
+4135 2 2 2 13 2049 2491 2174
+4136 2 2 2 13 2048 2490 2175
+4137 2 2 2 13 2046 2492 2158
+4138 2 2 2 13 2047 2493 2159
+4139 2 2 2 13 1934 2413 2344
+4140 2 2 2 13 1935 2412 2345
+4141 2 2 2 13 1941 2346 2414
+4142 2 2 2 13 1940 2347 2415
+4143 2 2 2 13 2111 2344 2413
+4144 2 2 2 13 2110 2345 2412
+4145 2 2 2 13 2109 2414 2346
+4146 2 2 2 13 2108 2415 2347
+4147 2 2 2 13 81 82 2401
+4148 2 2 2 13 18 19 2400
+4149 2 2 2 13 2079 2407 2266
+4150 2 2 2 13 2078 2406 2267
+4151 2 2 2 13 2077 2268 2405
+4152 2 2 2 13 2076 2269 2404
+4153 2 2 2 13 1941 2193 2346
+4154 2 2 2 13 1940 2192 2347
+4155 2 2 2 13 1934 2344 2195
+4156 2 2 2 13 1935 2345 2194
+4157 2 2 2 13 141 2765 2337
+4158 2 2 2 13 220 2764 2336
+4159 2 2 2 13 154 2330 2760
+4160 2 2 2 13 233 2331 2761
+4161 2 2 2 13 136 2753 2327
+4162 2 2 2 13 215 2752 2326
+4163 2 2 2 13 159 2328 2757
+4164 2 2 2 13 238 2329 2756
+4165 2 2 2 13 179 2339 2769
+4166 2 2 2 13 258 2338 2768
+4167 2 2 2 13 196 2767 2335
+4168 2 2 2 13 275 2766 2334
+4169 2 2 2 13 164 2321 2750
+4170 2 2 2 13 243 2320 2751
+4171 2 2 2 13 201 2759 2325
+4172 2 2 2 13 280 2758 2324
+4173 2 2 2 13 253 2333 2762
+4174 2 2 2 13 174 2332 2763
+4175 2 2 2 13 285 2755 2323
+4176 2 2 2 13 206 2754 2322
+4177 2 2 2 13 210 2747 2317
+4178 2 2 2 13 131 2746 2316
+4179 2 2 2 13 169 2319 2748
+4180 2 2 2 13 248 2318 2749
+4181 2 2 2 13 263 262 2274
+4182 2 2 2 13 184 183 2275
+4183 2 2 2 13 271 270 2273
+4184 2 2 2 13 192 191 2272
+4185 2 2 2 13 1999 2346 2193
+4186 2 2 2 13 1998 2347 2192
+4187 2 2 2 13 1992 2194 2345
+4188 2 2 2 13 1993 2195 2344
+4189 2 2 2 13 1998 2273 2347
+4190 2 2 2 13 1999 2272 2346
+4191 2 2 2 13 1992 2345 2275
+4192 2 2 2 13 1993 2344 2274
+4193 2 2 2 13 2108 2347 2273
+4194 2 2 2 13 2109 2346 2272
+4195 2 2 2 13 2110 2275 2345
+4196 2 2 2 13 2111 2274 2344
+4197 2 2 2 13 1954 2373 2232
+4198 2 2 2 13 1955 2372 2233
+4199 2 2 2 13 2016 2233 2372
+4200 2 2 2 13 2017 2232 2373
+4201 2 2 2 13 2165 2478 2809
+4202 2 2 2 13 2164 2479 2808
+4203 2 2 2 13 2162 2813 2482
+4204 2 2 2 13 2163 2812 2483
+4205 2 2 2 13 2170 2810 2488
+4206 2 2 2 13 2171 2811 2489
+4207 2 2 2 13 2175 2490 2814
+4208 2 2 2 13 2174 2491 2815
+4209 2 2 2 13 2012 2664 2250
+4210 2 2 2 13 2013 2665 2251
+4211 2 2 2 13 2004 2243 2667
+4212 2 2 2 13 2005 2242 2666
+4213 2 2 2 13 2011 2260 2670
+4214 2 2 2 13 2010 2261 2671
+4215 2 2 2 13 2007 2669 2249
+4216 2 2 2 13 2006 2668 2248
+4217 2 2 2 13 2014 2677 2265
+4218 2 2 2 13 2015 2676 2264
+4219 2 2 2 13 2001 2258 2678
+4220 2 2 2 13 2000 2259 2679
+4221 2 2 2 13 1997 2674 2245
+4222 2 2 2 13 1996 2675 2244
+4223 2 2 2 13 2009 2254 2680
+4224 2 2 2 13 2008 2255 2681
+4225 2 2 2 13 1994 2240 2672
+4226 2 2 2 13 1995 2241 2673
+4227 2 2 2 13 2002 2685 2263
+4228 2 2 2 13 2003 2684 2262
+4229 2 2 2 13 1990 2683 2247
+4230 2 2 2 13 1991 2682 2246
+4231 2 2 2 13 1988 2238 2686
+4232 2 2 2 13 1989 2239 2687
+4233 2 2 2 13 1985 2819 2237
+4234 2 2 2 13 1984 2818 2236
+4235 2 2 2 13 81 2401 2820
+4236 2 2 2 13 18 2400 2821
+4237 2 2 2 13 35 2500 2204
+4238 2 2 2 13 98 2501 2205
+4239 2 2 2 13 65 2206 2521
+4240 2 2 2 13 128 2207 2520
+4241 2 2 2 13 57 2210 2517
+4242 2 2 2 13 120 2211 2516
+4243 2 2 2 13 31 2506 2214
+4244 2 2 2 13 94 2507 2215
+4245 2 2 2 13 68 2212 2499
+4246 2 2 2 13 5 2213 2498
+4247 2 2 2 13 22 2208 2515
+4248 2 2 2 13 85 2209 2514
+4249 2 2 2 13 69 2504 2212
+4250 2 2 2 13 6 2505 2213
+4251 2 2 2 13 30 2214 2510
+4252 2 2 2 13 26 2220 2512
+4253 2 2 2 13 89 2221 2513
+4254 2 2 2 13 93 2215 2511
+4255 2 2 2 13 58 2522 2210
+4256 2 2 2 13 121 2523 2211
+4257 2 2 2 13 116 2219 2518
+4258 2 2 2 13 53 2218 2519
+4259 2 2 2 13 14 2508 2226
+4260 2 2 2 13 77 2509 2227
+4261 2 2 2 13 102 2528 2222
+4262 2 2 2 13 39 2529 2223
+4263 2 2 2 13 13 2226 2502
+4264 2 2 2 13 76 2227 2503
+4265 2 2 2 13 47 2527 2229
+4266 2 2 2 13 110 2526 2228
+4267 2 2 2 13 106 2524 2230
+4268 2 2 2 13 43 2525 2231
+4269 2 2 2 13 2023 2233 2642
+4270 2 2 2 13 2022 2232 2643
+4271 2 2 2 13 2021 2645 2235
+4272 2 2 2 13 2020 2644 2234
+4273 2 2 2 13 66 2554 2206
+4274 2 2 2 13 129 2555 2207
+4275 2 2 2 13 97 2205 2548
+4276 2 2 2 13 61 2217 2544
+4277 2 2 2 13 124 2216 2545
+4278 2 2 2 13 34 2204 2549
+4279 2 2 2 13 54 2542 2218
+4280 2 2 2 13 117 2543 2219
+4281 2 2 2 13 101 2222 2551
+4282 2 2 2 13 38 2223 2550
+4283 2 2 2 13 125 2541 2216
+4284 2 2 2 13 62 2540 2217
+4285 2 2 2 13 86 2547 2209
+4286 2 2 2 13 23 2546 2208
+4287 2 2 2 13 46 2229 2537
+4288 2 2 2 13 109 2228 2536
+4289 2 2 2 13 27 2552 2220
+4290 2 2 2 13 90 2553 2221
+4291 2 2 2 13 105 2230 2539
+4292 2 2 2 13 42 2231 2538
+4293 2 2 2 13 10 2559 2224
+4294 2 2 2 13 73 2558 2225
+4295 2 2 2 13 9 2224 2557
+4296 2 2 2 13 72 2225 2556
+4297 2 2 2 13 1937 2694 2158
+4298 2 2 2 13 1936 2695 2159
+4299 2 2 2 13 1931 2152 2698
+4300 2 2 2 13 1930 2153 2699
+4301 2 2 2 13 1927 2696 2157
+4302 2 2 2 13 1926 2697 2156
+4303 2 2 2 13 1923 2166 2700
+4304 2 2 2 13 1922 2167 2701
+4305 2 2 2 13 1928 2703 2155
+4306 2 2 2 13 1929 2702 2154
+4307 2 2 2 13 1950 2160 2704
+4308 2 2 2 13 1951 2161 2705
+4309 2 2 2 13 1943 2706 2172
+4310 2 2 2 13 1942 2707 2173
+4311 2 2 2 13 1952 2168 2708
+4312 2 2 2 13 1953 2169 2709
+4313 2 2 2 13 1986 2237 2417
+4314 2 2 2 13 1987 2236 2416
+4315 2 2 2 13 2237 2819 2534
+4316 2 2 2 13 2236 2818 2535
+4317 2 2 2 13 1989 2433 2177
+4318 2 2 2 13 1988 2432 2176
+4319 2 2 2 13 1991 2185 2438
+4320 2 2 2 13 1990 2184 2439
+4321 2 2 2 13 1994 2428 2180
+4322 2 2 2 13 1995 2429 2181
+4323 2 2 2 13 2004 2422 2178
+4324 2 2 2 13 2005 2423 2179
+4325 2 2 2 13 1997 2186 2430
+4326 2 2 2 13 1996 2187 2431
+4327 2 2 2 13 2007 2189 2426
+4328 2 2 2 13 2006 2188 2427
+4329 2 2 2 13 2012 2182 2424
+4330 2 2 2 13 2013 2183 2425
+4331 2 2 2 13 2001 2434 2191
+4332 2 2 2 13 2000 2435 2190
+4333 2 2 2 13 2009 2440 2198
+4334 2 2 2 13 2008 2441 2199
+4335 2 2 2 13 2010 2437 2197
+4336 2 2 2 13 2011 2436 2196
+4337 2 2 2 13 2003 2201 2444
+4338 2 2 2 13 2002 2200 2445
+4339 2 2 2 13 2014 2202 2442
+4340 2 2 2 13 2015 2203 2443
+4341 2 2 2 13 1944 2809 2478
+4342 2 2 2 13 1945 2808 2479
+4343 2 2 2 13 1924 2482 2813
+4344 2 2 2 13 1925 2483 2812
+4345 2 2 2 13 1938 2488 2810
+4346 2 2 2 13 1939 2489 2811
+4347 2 2 2 13 1933 2814 2490
+4348 2 2 2 13 1932 2815 2491
+4349 2 2 2 13 3 2604 2384
+4350 2 2 2 13 4 2605 2385
+4351 2 2 2 13 249 2386 2610
+4352 2 2 2 13 170 2387 2611
+4353 2 2 2 13 165 2376 2594
+4354 2 2 2 13 244 2377 2595
+4355 2 2 2 13 135 2590 2374
+4356 2 2 2 13 214 2591 2375
+4357 2 2 2 13 205 2601 2391
+4358 2 2 2 13 284 2600 2390
+4359 2 2 2 13 239 2380 2596
+4360 2 2 2 13 160 2383 2597
+4361 2 2 2 13 279 2599 2389
+4362 2 2 2 13 200 2598 2388
+4363 2 2 2 13 175 2395 2606
+4364 2 2 2 13 254 2394 2607
+4365 2 2 2 13 234 2381 2592
+4366 2 2 2 13 155 2382 2593
+4367 2 2 2 13 274 2603 2393
+4368 2 2 2 13 195 2602 2392
+4369 2 2 2 13 140 2588 2378
+4370 2 2 2 13 219 2589 2379
+4371 2 2 2 13 259 2397 2609
+4372 2 2 2 13 180 2396 2608
+4373 2 2 2 13 263 2274 2689
+4374 2 2 2 13 184 2275 2688
+4375 2 2 2 13 270 2690 2273
+4376 2 2 2 13 191 2691 2272
+4377 2 2 2 13 150 2342 2532
+4378 2 2 2 13 229 2343 2533
+4379 2 2 2 13 224 2530 2340
+4380 2 2 2 13 145 2531 2341
+4381 2 2 2 13 2143 2497 2410
+4382 2 2 2 13 2142 2496 2411
+4383 2 2 2 13 2079 2623 2637
+4384 2 2 2 13 2078 2622 2636
+4385 2 2 2 13 2077 2635 2621
+4386 2 2 2 13 2076 2634 2620
+4387 2 2 2 13 3 288 2604
+4388 2 2 2 13 4 209 2605
+4389 2 2 2 13 249 2610 250
+4390 2 2 2 13 170 2611 171
+4391 2 2 2 13 166 165 2594
+4392 2 2 2 13 245 244 2595
+4393 2 2 2 13 134 2590 135
+4394 2 2 2 13 213 2591 214
+4395 2 2 2 13 204 2601 205
+4396 2 2 2 13 283 2600 284
+4397 2 2 2 13 239 2596 240
+4398 2 2 2 13 160 2597 161
+4399 2 2 2 13 279 278 2599
+4400 2 2 2 13 200 199 2598
+4401 2 2 2 13 176 175 2606
+4402 2 2 2 13 255 254 2607
+4403 2 2 2 13 156 155 2593
+4404 2 2 2 13 235 234 2592
+4405 2 2 2 13 273 2603 274
+4406 2 2 2 13 194 2602 195
+4407 2 2 2 13 140 139 2588
+4408 2 2 2 13 219 218 2589
+4409 2 2 2 13 259 2609 260
+4410 2 2 2 13 180 2608 181
+4411 2 2 2 13 1954 2235 2402
+4412 2 2 2 13 1955 2234 2403
+4413 2 2 2 13 2023 2410 2497
+4414 2 2 2 13 2022 2411 2496
+4415 2 2 2 13 2095 2366 2447
+4416 2 2 2 13 2094 2367 2446
+4417 2 2 2 13 2091 2448 2364
+4418 2 2 2 13 2090 2449 2365
+4419 2 2 2 13 2104 2454 2369
+4420 2 2 2 13 2107 2370 2457
+4421 2 2 2 13 2105 2455 2368
+4422 2 2 2 13 2106 2371 2456
+4423 2 2 2 13 2101 2451 2358
+4424 2 2 2 13 2100 2450 2359
+4425 2 2 2 13 2098 2360 2453
+4426 2 2 2 13 2099 2361 2452
+4427 2 2 2 13 2103 2363 2458
+4428 2 2 2 13 2102 2362 2459
+4429 2 2 2 13 2092 2462 2356
+4430 2 2 2 13 2093 2463 2357
+4431 2 2 2 13 2097 2349 2460
+4432 2 2 2 13 2096 2348 2461
+4433 2 2 2 13 2089 2350 2465
+4434 2 2 2 13 2088 2351 2464
+4435 2 2 2 13 2086 2467 2352
+4436 2 2 2 13 2087 2466 2353
+4437 2 2 2 13 2085 2468 2354
+4438 2 2 2 13 2084 2469 2355
+4439 2 2 2 13 2018 2402 2235
+4440 2 2 2 13 2019 2403 2234
+4441 2 2 2 13 186 2306 2309
+4442 2 2 2 13 265 2307 2308
+4443 2 2 2 13 268 2310 2304
+4444 2 2 2 13 189 2311 2305
+4445 2 2 2 13 1977 2627 2162
+4446 2 2 2 13 1976 2626 2163
+4447 2 2 2 13 1966 2628 2170
+4448 2 2 2 13 1967 2629 2171
+4449 2 2 2 13 1979 2175 2624
+4450 2 2 2 13 1978 2174 2625
+4451 2 2 2 13 1962 2165 2630
+4452 2 2 2 13 1963 2164 2631
+4453 2 2 2 13 150 2532 151
+4454 2 2 2 13 229 2533 230
+4455 2 2 2 13 223 2530 224
+4456 2 2 2 13 144 2531 145
+4457 2 2 2 13 1961 2150 2576
+4458 2 2 2 13 1960 2151 2577
+4459 2 2 2 13 1958 2570 2152
+4460 2 2 2 13 1959 2571 2153
+4461 2 2 2 13 1968 2581 2149
+4462 2 2 2 13 1969 2580 2148
+4463 2 2 2 13 1980 2159 2569
+4464 2 2 2 13 1981 2158 2568
+4465 2 2 2 13 1983 2157 2572
+4466 2 2 2 13 1982 2156 2573
+4467 2 2 2 13 1965 2154 2579
+4468 2 2 2 13 1964 2155 2578
+4469 2 2 2 13 1974 2584 2160
+4470 2 2 2 13 1975 2585 2161
+4471 2 2 2 13 1971 2574 2166
+4472 2 2 2 13 1970 2575 2167
+4473 2 2 2 13 1957 2172 2582
+4474 2 2 2 13 1956 2173 2583
+4475 2 2 2 13 1972 2586 2168
+4476 2 2 2 13 1973 2587 2169
+4477 2 2 2 13 2058 2358 2451
+4478 2 2 2 13 2059 2359 2450
+4479 2 2 2 13 2055 2447 2366
+4480 2 2 2 13 2054 2446 2367
+4481 2 2 2 13 2066 2369 2454
+4482 2 2 2 13 2067 2368 2455
+4483 2 2 2 13 2068 2457 2370
+4484 2 2 2 13 2069 2456 2371
+4485 2 2 2 13 2052 2364 2448
+4486 2 2 2 13 2053 2365 2449
+4487 2 2 2 13 2062 2453 2360
+4488 2 2 2 13 2063 2452 2361
+4489 2 2 2 13 2070 2458 2363
+4490 2 2 2 13 2071 2459 2362
+4491 2 2 2 13 2056 2460 2349
+4492 2 2 2 13 2057 2461 2348
+4493 2 2 2 13 2065 2356 2462
+4494 2 2 2 13 2064 2357 2463
+4495 2 2 2 13 2060 2465 2350
+4496 2 2 2 13 2061 2464 2351
+4497 2 2 2 13 2073 2352 2467
+4498 2 2 2 13 2072 2353 2466
+4499 2 2 2 13 2075 2354 2468
+4500 2 2 2 13 2074 2355 2469
+4501 2 2 2 13 2012 2318 2664
+4502 2 2 2 13 2013 2319 2665
+4503 2 2 2 13 2010 2671 2323
+4504 2 2 2 13 2011 2670 2322
+4505 2 2 2 13 2004 2667 2316
+4506 2 2 2 13 2005 2666 2317
+4507 2 2 2 13 2015 2332 2676
+4508 2 2 2 13 2014 2333 2677
+4509 2 2 2 13 2007 2321 2669
+4510 2 2 2 13 2006 2320 2668
+4511 2 2 2 13 2001 2678 2324
+4512 2 2 2 13 2000 2679 2325
+4513 2 2 2 13 2009 2680 2334
+4514 2 2 2 13 2008 2681 2335
+4515 2 2 2 13 1997 2328 2674
+4516 2 2 2 13 1996 2329 2675
+4517 2 2 2 13 2002 2339 2685
+4518 2 2 2 13 2003 2338 2684
+4519 2 2 2 13 1994 2672 2326
+4520 2 2 2 13 1995 2673 2327
+4521 2 2 2 13 1990 2330 2683
+4522 2 2 2 13 1991 2331 2682
+4523 2 2 2 13 1988 2686 2336
+4524 2 2 2 13 1989 2687 2337
+4525 2 2 2 13 1947 2148 2639
+4526 2 2 2 13 1946 2149 2638
+4527 2 2 2 13 1948 2640 2150
+4528 2 2 2 13 1949 2641 2151
+4529 2 2 2 13 2021 2235 2494
+4530 2 2 2 13 2020 2234 2495
+4531 2 2 2 13 1992 2560 2257
+4532 2 2 2 13 1993 2561 2256
+4533 2 2 2 13 1998 2252 2563
+4534 2 2 2 13 1999 2253 2562
+4535 2 2 2 13 1954 2494 2235
+4536 2 2 2 13 1955 2495 2234
+4537 2 2 2 13 1930 2178 2422
+4538 2 2 2 13 1931 2179 2423
+4539 2 2 2 13 1926 2424 2182
+4540 2 2 2 13 1927 2425 2183
+4541 2 2 2 13 1950 2177 2433
+4542 2 2 2 13 1951 2176 2432
+4543 2 2 2 13 1952 2181 2429
+4544 2 2 2 13 1953 2180 2428
+4545 2 2 2 13 1943 2427 2188
+4546 2 2 2 13 1942 2426 2189
+4547 2 2 2 13 1945 2430 2186
+4548 2 2 2 13 1944 2431 2187
+4549 2 2 2 13 1928 2439 2184
+4550 2 2 2 13 1929 2438 2185
+4551 2 2 2 13 1925 2191 2434
+4552 2 2 2 13 1924 2190 2435
+4553 2 2 2 13 1923 2196 2436
+4554 2 2 2 13 1922 2197 2437
+4555 2 2 2 13 1938 2199 2441
+4556 2 2 2 13 1939 2198 2440
+4557 2 2 2 13 1937 2445 2200
+4558 2 2 2 13 1936 2444 2201
+4559 2 2 2 13 1933 2442 2202
+4560 2 2 2 13 1932 2443 2203
+4561 2 2 2 13 2022 2496 2232
+4562 2 2 2 13 2023 2497 2233
+4563 2 2 2 13 2143 2401 2495
+4564 2 2 2 13 2142 2400 2494
+4565 2 2 2 13 1956 2793 2206
+4566 2 2 2 13 1957 2792 2207
+4567 2 2 2 13 1972 2223 2799
+4568 2 2 2 13 1973 2222 2798
+4569 2 2 2 13 1974 2231 2796
+4570 2 2 2 13 1975 2230 2797
+4571 2 2 2 13 1965 2790 2211
+4572 2 2 2 13 1964 2791 2210
+4573 2 2 2 13 1959 2204 2785
+4574 2 2 2 13 1958 2205 2784
+4575 2 2 2 13 1968 2228 2794
+4576 2 2 2 13 1969 2229 2795
+4577 2 2 2 13 1982 2783 2213
+4578 2 2 2 13 1983 2782 2212
+4579 2 2 2 13 1970 2214 2787
+4580 2 2 2 13 1971 2215 2786
+4581 2 2 2 13 1960 2789 2218
+4582 2 2 2 13 1961 2788 2219
+4583 2 2 2 13 1980 2781 2226
+4584 2 2 2 13 1981 2780 2227
+4585 2 2 2 13 2020 2495 2401
+4586 2 2 2 13 2021 2494 2400
+4587 2 2 2 13 1968 2176 2649
+4588 2 2 2 13 1969 2177 2648
+4589 2 2 2 13 1972 2178 2660
+4590 2 2 2 13 1973 2179 2661
+4591 2 2 2 13 1974 2181 2658
+4592 2 2 2 13 1975 2180 2659
+4593 2 2 2 13 1956 2656 2183
+4594 2 2 2 13 1957 2657 2182
+4595 2 2 2 13 1960 2646 2184
+4596 2 2 2 13 1961 2647 2185
+4597 2 2 2 13 1962 2654 2188
+4598 2 2 2 13 1963 2655 2189
+4599 2 2 2 13 1959 2197 2650
+4600 2 2 2 13 1958 2196 2651
+4601 2 2 2 13 1979 2653 2201
+4602 2 2 2 13 1978 2652 2200
+4603 2 2 2 13 2041 2480 2384
+4604 2 2 2 13 2040 2481 2385
+4605 2 2 2 13 2027 2473 2379
+4606 2 2 2 13 2026 2472 2378
+4607 2 2 2 13 2030 2382 2476
+4608 2 2 2 13 2031 2381 2477
+4609 2 2 2 13 2029 2471 2375
+4610 2 2 2 13 2028 2470 2374
+4611 2 2 2 13 2050 2386 2485
+4612 2 2 2 13 2051 2387 2484
+4613 2 2 2 13 2035 2383 2479
+4614 2 2 2 13 2034 2380 2478
+4615 2 2 2 13 2033 2377 2475
+4616 2 2 2 13 2032 2376 2474
+4617 2 2 2 13 2039 2483 2389
+4618 2 2 2 13 2038 2482 2388
+4619 2 2 2 13 2044 2487 2390
+4620 2 2 2 13 2045 2486 2391
+4621 2 2 2 13 2042 2489 2393
+4622 2 2 2 13 2043 2488 2392
+4623 2 2 2 13 2047 2397 2493
+4624 2 2 2 13 2046 2396 2492
+4625 2 2 2 13 2049 2395 2491
+4626 2 2 2 13 2048 2394 2490
+4627 2 2 2 13 1954 2232 2496
+4628 2 2 2 13 1955 2233 2497
+4629 2 2 2 13 2116 2384 2480
+4630 2 2 2 13 2117 2385 2481
+4631 2 2 2 13 2118 2485 2386
+4632 2 2 2 13 2119 2484 2387
+4633 2 2 2 13 2120 2379 2473
+4634 2 2 2 13 2121 2378 2472
+4635 2 2 2 13 2124 2476 2382
+4636 2 2 2 13 2125 2477 2381
+4637 2 2 2 13 2123 2375 2471
+4638 2 2 2 13 2122 2374 2470
+4639 2 2 2 13 2129 2479 2383
+4640 2 2 2 13 2128 2478 2380
+4641 2 2 2 13 2126 2475 2377
+4642 2 2 2 13 2127 2474 2376
+4643 2 2 2 13 2131 2389 2483
+4644 2 2 2 13 2130 2388 2482
+4645 2 2 2 13 2133 2390 2487
+4646 2 2 2 13 2132 2391 2486
+4647 2 2 2 13 2134 2393 2489
+4648 2 2 2 13 2135 2392 2488
+4649 2 2 2 13 2137 2493 2397
+4650 2 2 2 13 2136 2492 2396
+4651 2 2 2 13 2138 2491 2395
+4652 2 2 2 13 2139 2490 2394
+4653 2 2 2 13 1993 2274 2561
+4654 2 2 2 13 1992 2275 2560
+4655 2 2 2 13 1999 2562 2272
+4656 2 2 2 13 1998 2563 2273
+4657 2 2 2 13 186 185 2306
+4658 2 2 2 13 265 264 2307
+4659 2 2 2 13 190 189 2305
+4660 2 2 2 13 269 268 2304
+4661 2 2 2 13 1940 2637 2192
+4662 2 2 2 13 1941 2636 2193
+4663 2 2 2 13 1934 2195 2634
+4664 2 2 2 13 1935 2194 2635
+4665 2 2 2 13 1985 2315 2312
+4666 2 2 2 13 1984 2314 2313
+4667 2 2 2 13 2146 2398 2777
+4668 2 2 2 13 2147 2399 2776
+4669 2 2 2 13 1950 2832 2177
+4670 2 2 2 13 1951 2833 2176
+4671 2 2 2 13 1928 2184 2836
+4672 2 2 2 13 1929 2185 2837
+4673 2 2 2 13 1930 2841 2178
+4674 2 2 2 13 1931 2840 2179
+4675 2 2 2 13 1952 2834 2181
+4676 2 2 2 13 1927 2183 2842
+4677 2 2 2 13 1953 2835 2180
+4678 2 2 2 13 1926 2182 2843
+4679 2 2 2 13 1943 2188 2839
+4680 2 2 2 13 1942 2189 2838
+4681 2 2 2 13 1937 2200 2846
+4682 2 2 2 13 1936 2201 2847
+4683 2 2 2 13 1923 2844 2196
+4684 2 2 2 13 1922 2845 2197
+4685 2 2 2 13 2016 2309 2306
+4686 2 2 2 13 2017 2308 2307
+4687 2 2 2 13 2018 2304 2310
+4688 2 2 2 13 2019 2305 2311
+4689 2 2 2 13 2023 2268 2692
+4690 2 2 2 13 2022 2269 2693
+4691 2 2 2 13 2020 2663 2267
+4692 2 2 2 13 2021 2662 2266
+4693 2 2 2 13 1945 2186 2745
+4694 2 2 2 13 1944 2187 2744
+4695 2 2 2 13 1924 2740 2190
+4696 2 2 2 13 1925 2741 2191
+4697 2 2 2 13 1938 2742 2199
+4698 2 2 2 13 1939 2743 2198
+4699 2 2 2 13 1933 2202 2738
+4700 2 2 2 13 1932 2203 2739
+4701 2 2 2 13 2111 2689 2274
+4702 2 2 2 13 2110 2688 2275
+4703 2 2 2 13 2109 2272 2691
+4704 2 2 2 13 2108 2273 2690
+4705 2 2 2 13 1947 2416 2236
+4706 2 2 2 13 1946 2417 2237
+4707 2 2 2 13 2112 2313 2775
+4708 2 2 2 13 2113 2312 2774
+4709 2 2 2 13 2114 2772 2314
+4710 2 2 2 13 2115 2773 2315
+4711 2 2 2 13 2020 2267 2406
+4712 2 2 2 13 2021 2266 2407
+4713 2 2 2 13 2022 2404 2269
+4714 2 2 2 13 2023 2405 2268
+4715 2 2 2 13 1962 2830 2216
+4716 2 2 2 13 1963 2831 2217
+4717 2 2 2 13 1977 2221 2826
+4718 2 2 2 13 1976 2220 2827
+4719 2 2 2 13 1967 2208 2824
+4720 2 2 2 13 1966 2209 2825
+4721 2 2 2 13 1979 2829 2224
+4722 2 2 2 13 1978 2828 2225
+4723 2 2 2 13 1964 2210 2618
+4724 2 2 2 13 1965 2211 2619
+4725 2 2 2 13 1970 2613 2214
+4726 2 2 2 13 1971 2615 2215
+4727 2 2 2 13 1977 2616 2221
+4728 2 2 2 13 1976 2617 2220
+4729 2 2 2 13 1967 2623 2208
+4730 2 2 2 13 1966 2622 2209
+4731 2 2 2 13 1982 2213 2612
+4732 2 2 2 13 1983 2212 2614
+4733 2 2 2 13 1981 2227 2621
+4734 2 2 2 13 1980 2226 2620
+4735 2 2 2 13 2079 2637 2407
+4736 2 2 2 13 2078 2636 2406
+4737 2 2 2 13 2077 2405 2635
+4738 2 2 2 13 2076 2404 2634
+4739 2 2 2 13 267 2310 268
+4740 2 2 2 13 188 2311 189
+4741 2 2 2 13 186 2309 187
+4742 2 2 2 13 265 2308 266
+4743 2 2 2 13 2143 2495 2497
+4744 2 2 2 13 2142 2494 2496
+4745 2 2 2 13 1948 2409 2779
+4746 2 2 2 13 1949 2408 2778
+4747 2 2 2 13 2025 2419 2341
+4748 2 2 2 13 2024 2418 2340
+4749 2 2 2 13 2036 2342 2420
+4750 2 2 2 13 2037 2343 2421
+4751 2 2 2 13 1954 2496 2494
+4752 2 2 2 13 1955 2497 2495
+4753 2 2 2 13 2112 2341 2419
+4754 2 2 2 13 2113 2340 2418
+4755 2 2 2 13 2114 2420 2342
+4756 2 2 2 13 2115 2421 2343
+4757 2 2 2 13 1948 2779 2640
+4758 2 2 2 13 1949 2778 2641
+4759 2 2 2 13 1949 2270 2408
+4760 2 2 2 13 1948 2271 2409
+4761 2 2 2 13 1985 2271 2801
+4762 2 2 2 13 1984 2270 2800
+4763 2 2 2 13 2023 2642 2405
+4764 2 2 2 13 2022 2643 2404
+4765 2 2 2 13 2021 2407 2645
+4766 2 2 2 13 2020 2406 2644
+4767 2 2 2 13 83 2805 2267
+4768 2 2 2 13 20 2804 2266
+4769 2 2 2 13 79 2268 2802
+4770 2 2 2 13 16 2269 2803
+4771 2 2 2 13 114 2565 2776
+4772 2 2 2 13 51 2564 2777
+4773 2 2 2 13 1947 2236 2535
+4774 2 2 2 13 1946 2237 2534
+4775 2 2 2 13 1952 2429 2470
+4776 2 2 2 13 1953 2428 2471
+4777 2 2 2 13 1942 2474 2426
+4778 2 2 2 13 1943 2475 2427
+4779 2 2 2 13 1950 2433 2472
+4780 2 2 2 13 1951 2432 2473
+4781 2 2 2 13 1931 2423 2481
+4782 2 2 2 13 1930 2422 2480
+4783 2 2 2 13 1945 2479 2430
+4784 2 2 2 13 1944 2478 2431
+4785 2 2 2 13 1928 2476 2439
+4786 2 2 2 13 1929 2477 2438
+4787 2 2 2 13 1927 2484 2425
+4788 2 2 2 13 1926 2485 2424
+4789 2 2 2 13 1925 2434 2483
+4790 2 2 2 13 1924 2435 2482
+4791 2 2 2 13 1923 2436 2486
+4792 2 2 2 13 1922 2437 2487
+4793 2 2 2 13 1939 2440 2489
+4794 2 2 2 13 1938 2441 2488
+4795 2 2 2 13 1933 2490 2442
+4796 2 2 2 13 1932 2491 2443
+4797 2 2 2 13 1937 2492 2445
+4798 2 2 2 13 1936 2493 2444
+4799 2 2 2 13 2210 2522 2618
+4800 2 2 2 13 2211 2523 2619
+4801 2 2 2 13 2208 2623 2515
+4802 2 2 2 13 2209 2622 2514
+4803 2 2 2 13 2220 2617 2512
+4804 2 2 2 13 2221 2616 2513
+4805 2 2 2 13 2214 2613 2510
+4806 2 2 2 13 2215 2615 2511
+4807 2 2 2 13 2213 2505 2612
+4808 2 2 2 13 2212 2504 2614
+4809 2 2 2 13 2227 2509 2621
+4810 2 2 2 13 2226 2508 2620
+4811 2 2 2 13 2123 2471 2428
+4812 2 2 2 13 2122 2470 2429
+4813 2 2 2 13 2121 2472 2433
+4814 2 2 2 13 2120 2473 2432
+4815 2 2 2 13 2127 2426 2474
+4816 2 2 2 13 2126 2427 2475
+4817 2 2 2 13 2117 2481 2423
+4818 2 2 2 13 2116 2480 2422
+4819 2 2 2 13 2128 2431 2478
+4820 2 2 2 13 2129 2430 2479
+4821 2 2 2 13 2124 2439 2476
+4822 2 2 2 13 2125 2438 2477
+4823 2 2 2 13 2119 2425 2484
+4824 2 2 2 13 2118 2424 2485
+4825 2 2 2 13 2131 2483 2434
+4826 2 2 2 13 2130 2482 2435
+4827 2 2 2 13 2132 2486 2436
+4828 2 2 2 13 2133 2487 2437
+4829 2 2 2 13 2134 2489 2440
+4830 2 2 2 13 2135 2488 2441
+4831 2 2 2 13 2139 2442 2490
+4832 2 2 2 13 2138 2443 2491
+4833 2 2 2 13 2136 2445 2492
+4834 2 2 2 13 2137 2444 2493
+4835 2 2 2 13 2141 2372 2403
+4836 2 2 2 13 2140 2373 2402
+4837 2 2 2 13 56 2348 55
+4838 2 2 2 13 119 2349 118
+4839 2 2 2 13 64 2350 63
+4840 2 2 2 13 127 2351 126
+4841 2 2 2 13 107 108 2352
+4842 2 2 2 13 44 45 2353
+4843 2 2 2 13 40 41 2355
+4844 2 2 2 13 103 104 2354
+4845 2 2 2 13 60 2357 59
+4846 2 2 2 13 123 2356 122
+4847 2 2 2 13 95 96 2359
+4848 2 2 2 13 32 33 2358
+4849 2 2 2 13 28 29 2360
+4850 2 2 2 13 91 92 2361
+4851 2 2 2 13 36 37 2364
+4852 2 2 2 13 99 100 2365
+4853 2 2 2 13 24 25 2362
+4854 2 2 2 13 87 88 2363
+4855 2 2 2 13 1 2366 130
+4856 2 2 2 13 2 2367 67
+4857 2 2 2 13 71 2368 70
+4858 2 2 2 13 8 2369 7
+4859 2 2 2 13 12 2370 11
+4860 2 2 2 13 75 2371 74
+4861 2 2 2 13 1946 2638 2417
+4862 2 2 2 13 1947 2639 2416
+4863 2 2 2 13 1988 2727 2238
+4864 2 2 2 13 1989 2726 2239
+4865 2 2 2 13 1994 2732 2240
+4866 2 2 2 13 1995 2733 2241
+4867 2 2 2 13 2004 2736 2243
+4868 2 2 2 13 2005 2737 2242
+4869 2 2 2 13 1997 2245 2728
+4870 2 2 2 13 1996 2244 2729
+4871 2 2 2 13 1991 2246 2714
+4872 2 2 2 13 1990 2247 2715
+4873 2 2 2 13 2012 2250 2734
+4874 2 2 2 13 2013 2251 2735
+4875 2 2 2 13 2006 2248 2731
+4876 2 2 2 13 2007 2249 2730
+4877 2 2 2 13 1999 2716 2253
+4878 2 2 2 13 1998 2717 2252
+4879 2 2 2 13 2009 2720 2254
+4880 2 2 2 13 2008 2721 2255
+4881 2 2 2 13 2001 2719 2258
+4882 2 2 2 13 2000 2718 2259
+4883 2 2 2 13 2011 2722 2260
+4884 2 2 2 13 2010 2723 2261
+4885 2 2 2 13 1992 2257 2710
+4886 2 2 2 13 1993 2256 2711
+4887 2 2 2 13 2003 2262 2712
+4888 2 2 2 13 2002 2263 2713
+4889 2 2 2 13 2015 2264 2725
+4890 2 2 2 13 2014 2265 2724
+4891 2 2 2 13 2127 2750 2321
+4892 2 2 2 13 2126 2751 2320
+4893 2 2 2 13 2122 2327 2753
+4894 2 2 2 13 2123 2326 2752
+4895 2 2 2 13 2116 2316 2746
+4896 2 2 2 13 2117 2317 2747
+4897 2 2 2 13 2119 2748 2319
+4898 2 2 2 13 2118 2749 2318
+4899 2 2 2 13 2129 2757 2328
+4900 2 2 2 13 2128 2756 2329
+4901 2 2 2 13 2121 2337 2765
+4902 2 2 2 13 2125 2761 2331
+4903 2 2 2 13 2124 2760 2330
+4904 2 2 2 13 2120 2336 2764
+4905 2 2 2 13 2132 2322 2754
+4906 2 2 2 13 2133 2323 2755
+4907 2 2 2 13 2130 2325 2759
+4908 2 2 2 13 2131 2324 2758
+4909 2 2 2 13 2134 2334 2766
+4910 2 2 2 13 2135 2335 2767
+4911 2 2 2 13 2139 2762 2333
+4912 2 2 2 13 2138 2763 2332
+4913 2 2 2 13 2136 2769 2339
+4914 2 2 2 13 2137 2768 2338
+4915 2 2 2 13 2020 2401 2663
+4916 2 2 2 13 2021 2400 2662
+4917 2 2 2 13 2023 2692 2410
+4918 2 2 2 13 2022 2693 2411
+4919 2 2 2 13 2027 2589 2240
+4920 2 2 2 13 2026 2588 2241
+4921 2 2 2 13 2028 2590 2243
+4922 2 2 2 13 2029 2591 2242
+4923 2 2 2 13 2031 2244 2592
+4924 2 2 2 13 2030 2245 2593
+4925 2 2 2 13 2032 2251 2594
+4926 2 2 2 13 2033 2250 2595
+4927 2 2 2 13 2035 2249 2597
+4928 2 2 2 13 2034 2248 2596
+4929 2 2 2 13 2038 2598 2255
+4930 2 2 2 13 2039 2599 2254
+4931 2 2 2 13 2041 2604 2261
+4932 2 2 2 13 2040 2605 2260
+4933 2 2 2 13 2042 2603 2252
+4934 2 2 2 13 2043 2602 2253
+4935 2 2 2 13 2044 2600 2258
+4936 2 2 2 13 2045 2601 2259
+4937 2 2 2 13 2047 2256 2609
+4938 2 2 2 13 2046 2257 2608
+4939 2 2 2 13 2049 2263 2606
+4940 2 2 2 13 2048 2262 2607
+4941 2 2 2 13 2050 2265 2610
+4942 2 2 2 13 2051 2264 2611
+4943 2 2 2 13 193 2562 2253
+4944 2 2 2 13 272 2563 2252
+4945 2 2 2 13 261 2256 2561
+4946 2 2 2 13 182 2257 2560
+4947 2 2 2 13 2024 2530 2238
+4948 2 2 2 13 2025 2531 2239
+4949 2 2 2 13 2036 2247 2532
+4950 2 2 2 13 2037 2246 2533
+4951 2 2 2 13 2063 2615 2740
+4952 2 2 2 13 2062 2613 2741
+4953 2 2 2 13 2066 2738 2612
+4954 2 2 2 13 2067 2739 2614
+4955 2 2 2 13 2070 2616 2742
+4956 2 2 2 13 2071 2617 2743
+4957 2 2 2 13 2064 2745 2618
+4958 2 2 2 13 2065 2744 2619
+4959 2 2 2 13 2079 2266 2804
+4960 2 2 2 13 2078 2267 2805
+4961 2 2 2 13 2077 2802 2268
+4962 2 2 2 13 2076 2803 2269
+4963 2 2 2 13 2417 2638 2807
+4964 2 2 2 13 2416 2639 2806
+4965 2 2 2 13 119 2516 2349
+4966 2 2 2 13 56 2517 2348
+4967 2 2 2 13 36 2364 2500
+4968 2 2 2 13 99 2365 2501
+4969 2 2 2 13 64 2521 2350
+4970 2 2 2 13 127 2520 2351
+4971 2 2 2 13 1 2498 2366
+4972 2 2 2 13 2 2499 2367
+4973 2 2 2 13 107 2352 2524
+4974 2 2 2 13 44 2353 2525
+4975 2 2 2 13 32 2358 2506
+4976 2 2 2 13 95 2359 2507
+4977 2 2 2 13 40 2355 2529
+4978 2 2 2 13 103 2354 2528
+4979 2 2 2 13 59 2357 2522
+4980 2 2 2 13 122 2356 2523
+4981 2 2 2 13 29 2510 2360
+4982 2 2 2 13 92 2511 2361
+4983 2 2 2 13 25 2512 2362
+4984 2 2 2 13 88 2513 2363
+4985 2 2 2 13 12 2502 2370
+4986 2 2 2 13 75 2503 2371
+4987 2 2 2 13 70 2368 2504
+4988 2 2 2 13 7 2369 2505
+4989 2 2 2 13 2056 2349 2516
+4990 2 2 2 13 2057 2348 2517
+4991 2 2 2 13 2060 2350 2521
+4992 2 2 2 13 2061 2351 2520
+4993 2 2 2 13 2052 2500 2364
+4994 2 2 2 13 2053 2501 2365
+4995 2 2 2 13 2073 2524 2352
+4996 2 2 2 13 2072 2525 2353
+4997 2 2 2 13 2075 2528 2354
+4998 2 2 2 13 2074 2529 2355
+4999 2 2 2 13 2055 2366 2498
+5000 2 2 2 13 2054 2367 2499
+5001 2 2 2 13 2064 2522 2357
+5002 2 2 2 13 2065 2523 2356
+5003 2 2 2 13 2058 2506 2358
+5004 2 2 2 13 2059 2507 2359
+5005 2 2 2 13 2063 2361 2511
+5006 2 2 2 13 2062 2360 2510
+5007 2 2 2 13 2070 2363 2513
+5008 2 2 2 13 2071 2362 2512
+5009 2 2 2 13 2068 2370 2502
+5010 2 2 2 13 2069 2371 2503
+5011 2 2 2 13 2066 2505 2369
+5012 2 2 2 13 2067 2504 2368
+5013 2 2 2 13 2024 2238 2727
+5014 2 2 2 13 2025 2239 2726
+5015 2 2 2 13 2026 2241 2733
+5016 2 2 2 13 2027 2240 2732
+5017 2 2 2 13 2028 2243 2736
+5018 2 2 2 13 2029 2242 2737
+5019 2 2 2 13 2030 2728 2245
+5020 2 2 2 13 2031 2729 2244
+5021 2 2 2 13 2032 2735 2251
+5022 2 2 2 13 2033 2734 2250
+5023 2 2 2 13 2036 2715 2247
+5024 2 2 2 13 2037 2714 2246
+5025 2 2 2 13 2035 2730 2249
+5026 2 2 2 13 2034 2731 2248
+5027 2 2 2 13 2042 2252 2717
+5028 2 2 2 13 2043 2253 2716
+5029 2 2 2 13 2038 2255 2721
+5030 2 2 2 13 2039 2254 2720
+5031 2 2 2 13 2044 2258 2719
+5032 2 2 2 13 2045 2259 2718
+5033 2 2 2 13 2041 2261 2723
+5034 2 2 2 13 2040 2260 2722
+5035 2 2 2 13 2047 2711 2256
+5036 2 2 2 13 2046 2710 2257
+5037 2 2 2 13 2049 2713 2263
+5038 2 2 2 13 2048 2712 2262
+5039 2 2 2 13 2050 2724 2265
+5040 2 2 2 13 2051 2725 2264
+5041 2 2 2 13 2091 2364 2550
+5042 2 2 2 13 2090 2365 2551
+5043 2 2 2 13 2094 2554 2367
+5044 2 2 2 13 2095 2555 2366
+5045 2 2 2 13 2085 2354 2539
+5046 2 2 2 13 2084 2355 2538
+5047 2 2 2 13 2092 2356 2545
+5048 2 2 2 13 2093 2357 2544
+5049 2 2 2 13 2086 2352 2536
+5050 2 2 2 13 2087 2353 2537
+5051 2 2 2 13 2089 2540 2350
+5052 2 2 2 13 2088 2541 2351
+5053 2 2 2 13 2099 2553 2361
+5054 2 2 2 13 2098 2552 2360
+5055 2 2 2 13 2101 2358 2549
+5056 2 2 2 13 2100 2359 2548
+5057 2 2 2 13 2103 2547 2363
+5058 2 2 2 13 2102 2546 2362
+5059 2 2 2 13 2107 2559 2370
+5060 2 2 2 13 2106 2558 2371
+5061 2 2 2 13 2096 2542 2348
+5062 2 2 2 13 2097 2543 2349
+5063 2 2 2 13 2104 2369 2557
+5064 2 2 2 13 2105 2368 2556
+5065 2 2 2 13 20 2266 2662
+5066 2 2 2 13 83 2267 2663
+5067 2 2 2 13 79 2692 2268
+5068 2 2 2 13 16 2693 2269
+5069 2 2 2 13 1954 2402 2373
+5070 2 2 2 13 1955 2403 2372
+5071 2 2 2 13 2147 2776 2565
+5072 2 2 2 13 2146 2777 2564
+5073 2 2 2 13 55 2348 2542
+5074 2 2 2 13 118 2349 2543
+5075 2 2 2 13 108 2536 2352
+5076 2 2 2 13 45 2537 2353
+5077 2 2 2 13 63 2350 2540
+5078 2 2 2 13 41 2538 2355
+5079 2 2 2 13 126 2351 2541
+5080 2 2 2 13 104 2539 2354
+5081 2 2 2 13 60 2544 2357
+5082 2 2 2 13 123 2545 2356
+5083 2 2 2 13 96 2548 2359
+5084 2 2 2 13 33 2549 2358
+5085 2 2 2 13 24 2362 2546
+5086 2 2 2 13 87 2363 2547
+5087 2 2 2 13 28 2360 2552
+5088 2 2 2 13 91 2361 2553
+5089 2 2 2 13 67 2367 2554
+5090 2 2 2 13 130 2366 2555
+5091 2 2 2 13 100 2551 2365
+5092 2 2 2 13 37 2550 2364
+5093 2 2 2 13 71 2556 2368
+5094 2 2 2 13 8 2557 2369
+5095 2 2 2 13 11 2370 2559
+5096 2 2 2 13 74 2371 2558
+5097 2 2 2 13 143 2687 2239
+5098 2 2 2 13 222 2686 2238
+5099 2 2 2 13 217 2672 2240
+5100 2 2 2 13 138 2673 2241
+5101 2 2 2 13 212 2666 2242
+5102 2 2 2 13 133 2667 2243
+5103 2 2 2 13 236 2244 2675
+5104 2 2 2 13 157 2245 2674
+5105 2 2 2 13 231 2246 2682
+5106 2 2 2 13 152 2247 2683
+5107 2 2 2 13 241 2248 2668
+5108 2 2 2 13 162 2249 2669
+5109 2 2 2 13 167 2251 2665
+5110 2 2 2 13 246 2250 2664
+5111 2 2 2 13 198 2681 2255
+5112 2 2 2 13 277 2680 2254
+5113 2 2 2 13 203 2679 2259
+5114 2 2 2 13 282 2678 2258
+5115 2 2 2 13 208 2670 2260
+5116 2 2 2 13 287 2671 2261
+5117 2 2 2 13 177 2263 2685
+5118 2 2 2 13 256 2262 2684
+5119 2 2 2 13 172 2264 2676
+5120 2 2 2 13 251 2265 2677
+5121 2 2 2 13 81 2820 80
+5122 2 2 2 13 18 2821 17
+5123 2 2 2 13 48 49 2566
+5124 2 2 2 13 111 112 2567
+5125 2 2 2 13 52 2564 51
+5126 2 2 2 13 115 2565 114
+5127 2 2 2 13 224 2340 2774
+5128 2 2 2 13 145 2341 2775
+5129 2 2 2 13 150 2772 2342
+5130 2 2 2 13 229 2773 2343
+5131 2 2 2 13 2271 2632 2801
+5132 2 2 2 13 2270 2633 2800
+5133 2 2 2 13 2105 2625 2815
+5134 2 2 2 13 2104 2624 2814
+5135 2 2 2 13 2099 2813 2627
+5136 2 2 2 13 2098 2812 2626
+5137 2 2 2 13 2103 2810 2628
+5138 2 2 2 13 2102 2811 2629
+5139 2 2 2 13 2092 2630 2809
+5140 2 2 2 13 2093 2631 2808
+5141 2 2 2 13 1949 2633 2270
+5142 2 2 2 13 1948 2632 2271
+5143 2 2 2 13 2105 2815 2455
+5144 2 2 2 13 2104 2814 2454
+5145 2 2 2 13 2099 2452 2813
+5146 2 2 2 13 2098 2453 2812
+5147 2 2 2 13 2102 2459 2811
+5148 2 2 2 13 2103 2458 2810
+5149 2 2 2 13 2092 2809 2462
+5150 2 2 2 13 2093 2808 2463
+5151 2 2 2 13 192 2272 2562
+5152 2 2 2 13 271 2273 2563
+5153 2 2 2 13 262 2561 2274
+5154 2 2 2 13 183 2560 2275
+5155 2 2 2 13 80 2820 2410
+5156 2 2 2 13 17 2821 2411
+5157 2 2 2 13 2224 2829 2557
+5158 2 2 2 13 2225 2828 2556
+5159 2 2 2 13 2220 2552 2827
+5160 2 2 2 13 2221 2553 2826
+5161 2 2 2 13 2209 2547 2825
+5162 2 2 2 13 2208 2546 2824
+5163 2 2 2 13 2217 2831 2544
+5164 2 2 2 13 2216 2830 2545
+5165 2 2 2 13 146 145 2775
+5166 2 2 2 13 225 224 2774
+5167 2 2 2 13 150 149 2772
+5168 2 2 2 13 229 228 2773
+5169 2 2 2 13 2140 2770 2308
+5170 2 2 2 13 2141 2771 2309
+5171 2 2 2 13 2141 2311 2771
+5172 2 2 2 13 2140 2310 2770
+5173 2 2 2 13 83 84 2805
+5174 2 2 2 13 20 21 2804
+5175 2 2 2 13 79 2802 78
+5176 2 2 2 13 16 2803 15
+5177 2 2 2 13 1946 2534 2418
+5178 2 2 2 13 1947 2535 2419
+5179 2 2 2 13 266 2308 2770
+5180 2 2 2 13 187 2309 2771
+5181 2 2 2 13 188 2771 2311
+5182 2 2 2 13 267 2770 2310
+5183 2 2 2 13 2005 2277 2737
+5184 2 2 2 13 2004 2276 2736
+5185 2 2 2 13 1994 2279 2732
+5186 2 2 2 13 1995 2278 2733
+5187 2 2 2 13 1988 2280 2727
+5188 2 2 2 13 1989 2281 2726
+5189 2 2 2 13 2013 2735 2282
+5190 2 2 2 13 2012 2734 2283
+5191 2 2 2 13 1997 2728 2285
+5192 2 2 2 13 1996 2729 2284
+5193 2 2 2 13 2006 2731 2286
+5194 2 2 2 13 2007 2730 2287
+5195 2 2 2 13 1991 2714 2289
+5196 2 2 2 13 1990 2715 2288
+5197 2 2 2 13 2011 2290 2722
+5198 2 2 2 13 2010 2291 2723
+5199 2 2 2 13 2009 2292 2720
+5200 2 2 2 13 2008 2293 2721
+5201 2 2 2 13 2001 2296 2719
+5202 2 2 2 13 2000 2297 2718
+5203 2 2 2 13 1998 2294 2717
+5204 2 2 2 13 1999 2295 2716
+5205 2 2 2 13 2015 2725 2299
+5206 2 2 2 13 2014 2724 2298
+5207 2 2 2 13 2003 2712 2301
+5208 2 2 2 13 2002 2713 2300
+5209 2 2 2 13 1992 2710 2303
+5210 2 2 2 13 1993 2711 2302
+5211 2 2 2 13 2109 2691 2305
+5212 2 2 2 13 2108 2690 2304
+5213 2 2 2 13 2111 2307 2689
+5214 2 2 2 13 2110 2306 2688
+5215 2 2 2 13 2113 2418 2534
+5216 2 2 2 13 2112 2419 2535
+5217 2 2 2 13 190 2305 2691
+5218 2 2 2 13 269 2304 2690
+5219 2 2 2 13 185 2688 2306
+5220 2 2 2 13 264 2689 2307
+5221 2 2 2 13 2065 2619 2523
+5222 2 2 2 13 2064 2618 2522
+5223 2 2 2 13 2062 2510 2613
+5224 2 2 2 13 2063 2511 2615
+5225 2 2 2 13 2079 2515 2623
+5226 2 2 2 13 2078 2514 2622
+5227 2 2 2 13 2070 2513 2616
+5228 2 2 2 13 2071 2512 2617
+5229 2 2 2 13 2066 2612 2505
+5230 2 2 2 13 2067 2614 2504
+5231 2 2 2 13 2077 2621 2509
+5232 2 2 2 13 2076 2620 2508
+5233 2 2 2 13 49 2848 2566
+5234 2 2 2 13 112 2849 2567
+5235 2 2 2 13 2206 2793 2521
+5236 2 2 2 13 2207 2792 2520
+5237 2 2 2 13 2222 2528 2798
+5238 2 2 2 13 2223 2529 2799
+5239 2 2 2 13 2230 2524 2797
+5240 2 2 2 13 2231 2525 2796
+5241 2 2 2 13 2210 2791 2517
+5242 2 2 2 13 2211 2790 2516
+5243 2 2 2 13 2229 2527 2795
+5244 2 2 2 13 2228 2526 2794
+5245 2 2 2 13 2218 2789 2519
+5246 2 2 2 13 2219 2788 2518
+5247 2 2 2 13 2214 2506 2787
+5248 2 2 2 13 2215 2507 2786
+5249 2 2 2 13 2204 2500 2785
+5250 2 2 2 13 2205 2501 2784
+5251 2 2 2 13 2213 2783 2498
+5252 2 2 2 13 2212 2782 2499
+5253 2 2 2 13 2227 2780 2503
+5254 2 2 2 13 2226 2781 2502
+5255 2 2 2 13 1972 2799 2586
+5256 2 2 2 13 1973 2798 2587
+5257 2 2 2 13 1956 2583 2793
+5258 2 2 2 13 1957 2582 2792
+5259 2 2 2 13 1975 2797 2585
+5260 2 2 2 13 1974 2796 2584
+5261 2 2 2 13 1965 2579 2790
+5262 2 2 2 13 1964 2578 2791
+5263 2 2 2 13 1959 2785 2571
+5264 2 2 2 13 1958 2784 2570
+5265 2 2 2 13 1982 2573 2783
+5266 2 2 2 13 1983 2572 2782
+5267 2 2 2 13 1968 2794 2581
+5268 2 2 2 13 1969 2795 2580
+5269 2 2 2 13 1970 2787 2575
+5270 2 2 2 13 1971 2786 2574
+5271 2 2 2 13 1961 2576 2788
+5272 2 2 2 13 1960 2577 2789
+5273 2 2 2 13 1980 2569 2781
+5274 2 2 2 13 1981 2568 2780
+5275 2 2 2 13 36 2500 35
+5276 2 2 2 13 99 2501 98
+5277 2 2 2 13 1 5 2498
+5278 2 2 2 13 2 68 2499
+5279 2 2 2 13 32 2506 31
+5280 2 2 2 13 95 2507 94
+5281 2 2 2 13 12 13 2502
+5282 2 2 2 13 75 76 2503
+5283 2 2 2 13 69 70 2504
+5284 2 2 2 13 6 7 2505
+5285 2 2 2 13 14 15 2508
+5286 2 2 2 13 77 78 2509
+5287 2 2 2 13 93 2511 92
+5288 2 2 2 13 30 2510 29
+5289 2 2 2 13 56 57 2517
+5290 2 2 2 13 119 120 2516
+5291 2 2 2 13 85 2514 84
+5292 2 2 2 13 22 2515 21
+5293 2 2 2 13 26 2512 25
+5294 2 2 2 13 89 2513 88
+5295 2 2 2 13 64 65 2521
+5296 2 2 2 13 127 128 2520
+5297 2 2 2 13 115 116 2518
+5298 2 2 2 13 52 53 2519
+5299 2 2 2 13 58 59 2522
+5300 2 2 2 13 121 122 2523
+5301 2 2 2 13 107 2524 106
+5302 2 2 2 13 44 2525 43
+5303 2 2 2 13 48 2527 47
+5304 2 2 2 13 111 2526 110
+5305 2 2 2 13 40 2529 39
+5306 2 2 2 13 103 2528 102
+5307 2 2 2 13 2080 2779 2565
+5308 2 2 2 13 2081 2778 2564
+5309 2 2 2 13 2024 2340 2530
+5310 2 2 2 13 2025 2341 2531
+5311 2 2 2 13 2036 2532 2342
+5312 2 2 2 13 2037 2533 2343
+5313 2 2 2 13 2142 2821 2400
+5314 2 2 2 13 2143 2820 2401
+5315 2 2 2 13 2312 2315 2816
+5316 2 2 2 13 2313 2314 2817
+5317 2 2 2 13 219 2764 220
+5318 2 2 2 13 140 2765 141
+5319 2 2 2 13 154 2760 155
+5320 2 2 2 13 233 2761 234
+5321 2 2 2 13 259 258 2768
+5322 2 2 2 13 180 179 2769
+5323 2 2 2 13 196 195 2767
+5324 2 2 2 13 275 274 2766
+5325 2 2 2 13 215 214 2752
+5326 2 2 2 13 136 135 2753
+5327 2 2 2 13 239 238 2756
+5328 2 2 2 13 160 159 2757
+5329 2 2 2 13 200 2759 201
+5330 2 2 2 13 279 2758 280
+5331 2 2 2 13 174 2763 175
+5332 2 2 2 13 253 2762 254
+5333 2 2 2 13 243 2751 244
+5334 2 2 2 13 164 2750 165
+5335 2 2 2 13 285 284 2755
+5336 2 2 2 13 206 205 2754
+5337 2 2 2 13 4 2747 210
+5338 2 2 2 13 3 2746 131
+5339 2 2 2 13 249 248 2749
+5340 2 2 2 13 170 169 2748
+5341 2 2 2 13 192 2562 193
+5342 2 2 2 13 271 2563 272
+5343 2 2 2 13 261 2561 262
+5344 2 2 2 13 182 2560 183
+5345 2 2 2 13 1935 2635 2405
+5346 2 2 2 13 1934 2634 2404
+5347 2 2 2 13 1941 2406 2636
+5348 2 2 2 13 1940 2407 2637
+5349 2 2 2 13 219 2379 2764
+5350 2 2 2 13 140 2378 2765
+5351 2 2 2 13 234 2761 2381
+5352 2 2 2 13 155 2760 2382
+5353 2 2 2 13 214 2375 2752
+5354 2 2 2 13 135 2374 2753
+5355 2 2 2 13 239 2756 2380
+5356 2 2 2 13 160 2757 2383
+5357 2 2 2 13 259 2768 2397
+5358 2 2 2 13 180 2769 2396
+5359 2 2 2 13 195 2392 2767
+5360 2 2 2 13 274 2393 2766
+5361 2 2 2 13 200 2388 2759
+5362 2 2 2 13 279 2389 2758
+5363 2 2 2 13 244 2751 2377
+5364 2 2 2 13 165 2750 2376
+5365 2 2 2 13 175 2763 2395
+5366 2 2 2 13 254 2762 2394
+5367 2 2 2 13 284 2390 2755
+5368 2 2 2 13 205 2391 2754
+5369 2 2 2 13 4 2385 2747
+5370 2 2 2 13 3 2384 2746
+5371 2 2 2 13 249 2749 2386
+5372 2 2 2 13 170 2748 2387
+5373 2 2 2 13 2029 2375 2591
+5374 2 2 2 13 2028 2374 2590
+5375 2 2 2 13 2027 2379 2589
+5376 2 2 2 13 2026 2378 2588
+5377 2 2 2 13 2033 2595 2377
+5378 2 2 2 13 2032 2594 2376
+5379 2 2 2 13 2030 2593 2382
+5380 2 2 2 13 2031 2592 2381
+5381 2 2 2 13 2034 2596 2380
+5382 2 2 2 13 2035 2597 2383
+5383 2 2 2 13 2041 2384 2604
+5384 2 2 2 13 2040 2385 2605
+5385 2 2 2 13 2038 2388 2598
+5386 2 2 2 13 2039 2389 2599
+5387 2 2 2 13 2044 2390 2600
+5388 2 2 2 13 2045 2391 2601
+5389 2 2 2 13 2050 2610 2386
+5390 2 2 2 13 2051 2611 2387
+5391 2 2 2 13 2043 2392 2602
+5392 2 2 2 13 2042 2393 2603
+5393 2 2 2 13 2049 2606 2395
+5394 2 2 2 13 2048 2607 2394
+5395 2 2 2 13 2047 2609 2397
+5396 2 2 2 13 2046 2608 2396
+5397 2 2 2 13 2083 2566 2806
+5398 2 2 2 13 2082 2567 2807
+5399 2 2 2 13 1941 2414 2644
+5400 2 2 2 13 1940 2415 2645
+5401 2 2 2 13 1934 2643 2413
+5402 2 2 2 13 1935 2642 2412
+5403 2 2 2 13 2147 2565 2779
+5404 2 2 2 13 2146 2564 2778
+5405 2 2 2 13 1948 2421 2632
+5406 2 2 2 13 1949 2420 2633
+5407 2 2 2 13 142 2337 2687
+5408 2 2 2 13 221 2336 2686
+5409 2 2 2 13 137 2327 2673
+5410 2 2 2 13 216 2326 2672
+5411 2 2 2 13 153 2683 2330
+5412 2 2 2 13 232 2682 2331
+5413 2 2 2 13 158 2674 2328
+5414 2 2 2 13 237 2675 2329
+5415 2 2 2 13 211 2317 2666
+5416 2 2 2 13 132 2316 2667
+5417 2 2 2 13 163 2669 2321
+5418 2 2 2 13 242 2668 2320
+5419 2 2 2 13 247 2664 2318
+5420 2 2 2 13 168 2665 2319
+5421 2 2 2 13 197 2335 2681
+5422 2 2 2 13 276 2334 2680
+5423 2 2 2 13 281 2324 2678
+5424 2 2 2 13 202 2325 2679
+5425 2 2 2 13 257 2684 2338
+5426 2 2 2 13 178 2685 2339
+5427 2 2 2 13 286 2323 2671
+5428 2 2 2 13 207 2322 2670
+5429 2 2 2 13 173 2676 2332
+5430 2 2 2 13 252 2677 2333
+5431 2 2 2 13 46 2537 45
+5432 2 2 2 13 109 2536 108
+5433 2 2 2 13 42 2538 41
+5434 2 2 2 13 105 2539 104
+5435 2 2 2 13 125 126 2541
+5436 2 2 2 13 62 63 2540
+5437 2 2 2 13 117 118 2543
+5438 2 2 2 13 54 55 2542
+5439 2 2 2 13 60 61 2544
+5440 2 2 2 13 123 124 2545
+5441 2 2 2 13 24 2546 23
+5442 2 2 2 13 87 2547 86
+5443 2 2 2 13 97 2548 96
+5444 2 2 2 13 34 2549 33
+5445 2 2 2 13 129 130 2555
+5446 2 2 2 13 66 67 2554
+5447 2 2 2 13 28 2552 27
+5448 2 2 2 13 91 2553 90
+5449 2 2 2 13 101 2551 100
+5450 2 2 2 13 38 2550 37
+5451 2 2 2 13 8 9 2557
+5452 2 2 2 13 71 72 2556
+5453 2 2 2 13 73 74 2558
+5454 2 2 2 13 10 11 2559
+5455 2 2 2 13 2115 2632 2421
+5456 2 2 2 13 2114 2633 2420
+5457 2 2 2 13 2081 2564 2519
+5458 2 2 2 13 2080 2565 2518
+5459 2 2 2 13 2082 2526 2567
+5460 2 2 2 13 2083 2527 2566
+5461 2 2 2 13 113 2849 112
+5462 2 2 2 13 50 2848 49
+5463 2 2 2 13 2141 2403 2822
+5464 2 2 2 13 2140 2402 2823
+5465 2 2 2 13 113 2399 2849
+5466 2 2 2 13 50 2398 2848
+5467 2 2 2 13 2140 2823 2310
+5468 2 2 2 13 2141 2822 2311
+5469 2 2 2 13 2018 2310 2823
+5470 2 2 2 13 2019 2311 2822
+5471 2 2 2 13 20 2662 19
+5472 2 2 2 13 83 2663 82
+5473 2 2 2 13 16 17 2693
+5474 2 2 2 13 79 80 2692
+5475 2 2 2 13 1985 2801 2315
+5476 2 2 2 13 1984 2800 2314
+5477 2 2 2 13 1985 2312 2819
+5478 2 2 2 13 1984 2313 2818
+5479 2 2 2 13 2114 2314 2800
+5480 2 2 2 13 2115 2315 2801
+5481 2 2 2 13 2112 2818 2313
+5482 2 2 2 13 2113 2819 2312
+5483 2 2 2 13 142 2687 143
+5484 2 2 2 13 221 2686 222
+5485 2 2 2 13 138 137 2673
+5486 2 2 2 13 217 216 2672
+5487 2 2 2 13 231 2682 232
+5488 2 2 2 13 152 2683 153
+5489 2 2 2 13 237 236 2675
+5490 2 2 2 13 158 157 2674
+5491 2 2 2 13 257 256 2684
+5492 2 2 2 13 178 177 2685
+5493 2 2 2 13 162 2669 163
+5494 2 2 2 13 241 2668 242
+5495 2 2 2 13 198 197 2681
+5496 2 2 2 13 277 276 2680
+5497 2 2 2 13 202 2679 203
+5498 2 2 2 13 281 2678 282
+5499 2 2 2 13 211 2666 212
+5500 2 2 2 13 132 2667 133
+5501 2 2 2 13 247 246 2664
+5502 2 2 2 13 168 167 2665
+5503 2 2 2 13 208 207 2670
+5504 2 2 2 13 287 286 2671
+5505 2 2 2 13 172 2676 173
+5506 2 2 2 13 251 2677 252
+5507 2 2 2 13 82 2663 2401
+5508 2 2 2 13 19 2662 2400
+5509 2 2 2 13 2113 2774 2340
+5510 2 2 2 13 2112 2775 2341
+5511 2 2 2 13 2114 2342 2772
+5512 2 2 2 13 2115 2343 2773
+5513 2 2 2 13 50 51 2777
+5514 2 2 2 13 113 114 2776
+5515 2 2 2 13 148 2817 2314
+5516 2 2 2 13 227 2816 2315
+5517 2 2 2 13 147 2313 2817
+5518 2 2 2 13 226 2312 2816
+5519 2 2 2 13 2144 2806 2566
+5520 2 2 2 13 2145 2807 2567
+5521 2 2 2 13 113 2776 2399
+5522 2 2 2 13 50 2777 2398
+5523 2 2 2 13 80 2410 2692
+5524 2 2 2 13 17 2411 2693
+5525 2 2 2 13 2076 2508 2803
+5526 2 2 2 13 2077 2509 2802
+5527 2 2 2 13 2079 2804 2515
+5528 2 2 2 13 2078 2805 2514
+5529 2 2 2 13 184 2688 185
+5530 2 2 2 13 263 2689 264
+5531 2 2 2 13 269 2690 270
+5532 2 2 2 13 190 2691 191
+5533 2 2 2 13 2144 2566 2848
+5534 2 2 2 13 2145 2567 2849
+5535 2 2 2 13 1934 2404 2643
+5536 2 2 2 13 1935 2405 2642
+5537 2 2 2 13 1941 2644 2406
+5538 2 2 2 13 1940 2645 2407
+5539 2 2 2 13 2069 2694 2456
+5540 2 2 2 13 2068 2695 2457
+5541 2 2 2 13 2059 2450 2700
+5542 2 2 2 13 2058 2451 2701
+5543 2 2 2 13 2054 2696 2446
+5544 2 2 2 13 2055 2697 2447
+5545 2 2 2 13 2053 2449 2698
+5546 2 2 2 13 2052 2448 2699
+5547 2 2 2 13 2057 2703 2461
+5548 2 2 2 13 2056 2702 2460
+5549 2 2 2 13 2073 2467 2705
+5550 2 2 2 13 2072 2466 2704
+5551 2 2 2 13 2061 2706 2464
+5552 2 2 2 13 2060 2707 2465
+5553 2 2 2 13 2075 2468 2709
+5554 2 2 2 13 2074 2469 2708
+5555 2 2 2 13 1924 2452 2740
+5556 2 2 2 13 1925 2453 2741
+5557 2 2 2 13 1945 2745 2463
+5558 2 2 2 13 1944 2744 2462
+5559 2 2 2 13 1938 2458 2742
+5560 2 2 2 13 1939 2459 2743
+5561 2 2 2 13 1932 2739 2455
+5562 2 2 2 13 1933 2738 2454
+5563 2 2 2 13 267 266 2770
+5564 2 2 2 13 188 187 2771
+5565 2 2 2 13 2122 2753 2374
+5566 2 2 2 13 2123 2752 2375
+5567 2 2 2 13 2127 2376 2750
+5568 2 2 2 13 2126 2377 2751
+5569 2 2 2 13 2117 2747 2385
+5570 2 2 2 13 2116 2746 2384
+5571 2 2 2 13 2128 2380 2756
+5572 2 2 2 13 2129 2383 2757
+5573 2 2 2 13 2119 2387 2748
+5574 2 2 2 13 2118 2386 2749
+5575 2 2 2 13 2121 2765 2378
+5576 2 2 2 13 2120 2764 2379
+5577 2 2 2 13 2125 2381 2761
+5578 2 2 2 13 2124 2382 2760
+5579 2 2 2 13 2132 2754 2391
+5580 2 2 2 13 2133 2755 2390
+5581 2 2 2 13 2130 2759 2388
+5582 2 2 2 13 2131 2758 2389
+5583 2 2 2 13 2134 2766 2393
+5584 2 2 2 13 2135 2767 2392
+5585 2 2 2 13 2139 2394 2762
+5586 2 2 2 13 2138 2395 2763
+5587 2 2 2 13 2136 2396 2769
+5588 2 2 2 13 2137 2397 2768
+5589 2 2 2 13 1930 2448 2841
+5590 2 2 2 13 1931 2449 2840
+5591 2 2 2 13 1926 2843 2447
+5592 2 2 2 13 1927 2842 2446
+5593 2 2 2 13 1953 2468 2835
+5594 2 2 2 13 1952 2469 2834
+5595 2 2 2 13 1942 2838 2465
+5596 2 2 2 13 1943 2839 2464
+5597 2 2 2 13 1950 2466 2832
+5598 2 2 2 13 1951 2467 2833
+5599 2 2 2 13 1923 2450 2844
+5600 2 2 2 13 1922 2451 2845
+5601 2 2 2 13 1929 2837 2460
+5602 2 2 2 13 1928 2836 2461
+5603 2 2 2 13 1936 2847 2457
+5604 2 2 2 13 1937 2846 2456
+5605 2 2 2 13 115 2518 2565
+5606 2 2 2 13 52 2519 2564
+5607 2 2 2 13 111 2567 2526
+5608 2 2 2 13 48 2566 2527
+5609 2 2 2 13 1962 2630 2830
+5610 2 2 2 13 1963 2631 2831
+5611 2 2 2 13 1976 2827 2626
+5612 2 2 2 13 1977 2826 2627
+5613 2 2 2 13 1967 2824 2629
+5614 2 2 2 13 1966 2825 2628
+5615 2 2 2 13 1978 2625 2828
+5616 2 2 2 13 1979 2624 2829
+5617 2 2 2 13 227 226 2816
+5618 2 2 2 13 148 147 2817
+5619 2 2 2 13 2107 2457 2847
+5620 2 2 2 13 2106 2456 2846
+5621 2 2 2 13 2101 2845 2451
+5622 2 2 2 13 2100 2844 2450
+5623 2 2 2 13 2096 2461 2836
+5624 2 2 2 13 2097 2460 2837
+5625 2 2 2 13 2086 2833 2467
+5626 2 2 2 13 2087 2832 2466
+5627 2 2 2 13 2094 2446 2842
+5628 2 2 2 13 2095 2447 2843
+5629 2 2 2 13 2088 2464 2839
+5630 2 2 2 13 2089 2465 2838
+5631 2 2 2 13 2091 2841 2448
+5632 2 2 2 13 2090 2840 2449
+5633 2 2 2 13 2084 2834 2469
+5634 2 2 2 13 2085 2835 2468
+5635 2 2 2 13 2144 2848 2398
+5636 2 2 2 13 2145 2849 2399
+5637 2 2 2 13 2147 2779 2409
+5638 2 2 2 13 2146 2778 2408
+5639 2 2 2 13 1942 2465 2707
+5640 2 2 2 13 1953 2709 2468
+5641 2 2 2 13 1943 2464 2706
+5642 2 2 2 13 1952 2708 2469
+5643 2 2 2 13 1950 2704 2466
+5644 2 2 2 13 1951 2705 2467
+5645 2 2 2 13 1930 2699 2448
+5646 2 2 2 13 1931 2698 2449
+5647 2 2 2 13 1929 2460 2702
+5648 2 2 2 13 1928 2461 2703
+5649 2 2 2 13 1926 2447 2697
+5650 2 2 2 13 1927 2446 2696
+5651 2 2 2 13 1923 2700 2450
+5652 2 2 2 13 1922 2701 2451
+5653 2 2 2 13 1936 2457 2695
+5654 2 2 2 13 1937 2456 2694
+5655 2 2 2 13 2150 2640 2576
+5656 2 2 2 13 2151 2641 2577
+5657 2 2 2 13 2148 2580 2639
+5658 2 2 2 13 2149 2581 2638
+5659 2 2 2 13 2018 2823 2402
+5660 2 2 2 13 2019 2822 2403
+5661 2 2 2 13 2104 2557 2829
+5662 2 2 2 13 2105 2556 2828
+5663 2 2 2 13 2098 2827 2552
+5664 2 2 2 13 2099 2826 2553
+5665 2 2 2 13 2103 2825 2547
+5666 2 2 2 13 2102 2824 2546
+5667 2 2 2 13 2092 2545 2830
+5668 2 2 2 13 2093 2544 2831
+5669 2 2 2 13 2069 2568 2694
+5670 2 2 2 13 2068 2569 2695
+5671 2 2 2 13 2059 2700 2574
+5672 2 2 2 13 2058 2701 2575
+5673 2 2 2 13 2054 2572 2696
+5674 2 2 2 13 2055 2573 2697
+5675 2 2 2 13 2053 2698 2570
+5676 2 2 2 13 2052 2699 2571
+5677 2 2 2 13 2057 2578 2703
+5678 2 2 2 13 2056 2579 2702
+5679 2 2 2 13 2073 2705 2585
+5680 2 2 2 13 2072 2704 2584
+5681 2 2 2 13 2061 2582 2706
+5682 2 2 2 13 2060 2583 2707
+5683 2 2 2 13 2074 2708 2586
+5684 2 2 2 13 2075 2709 2587
+5685 2 2 2 13 2066 2454 2738
+5686 2 2 2 13 2063 2740 2452
+5687 2 2 2 13 2062 2741 2453
+5688 2 2 2 13 2067 2455 2739
+5689 2 2 2 13 2070 2742 2458
+5690 2 2 2 13 2071 2743 2459
+5691 2 2 2 13 2065 2462 2744
+5692 2 2 2 13 2064 2463 2745
+5693 2 2 2 13 2144 2416 2806
+5694 2 2 2 13 2145 2417 2807
+5695 2 2 2 13 2143 2410 2820
+5696 2 2 2 13 2142 2411 2821
+5697 2 2 2 13 2082 2638 2581
+5698 2 2 2 13 2083 2639 2580
+5699 2 2 2 13 2080 2576 2640
+5700 2 2 2 13 2081 2577 2641
+5701 2 2 2 13 2069 2503 2780
+5702 2 2 2 13 2068 2502 2781
+5703 2 2 2 13 2058 2787 2506
+5704 2 2 2 13 2059 2786 2507
+5705 2 2 2 13 2054 2499 2782
+5706 2 2 2 13 2055 2498 2783
+5707 2 2 2 13 2053 2784 2501
+5708 2 2 2 13 2052 2785 2500
+5709 2 2 2 13 2056 2516 2790
+5710 2 2 2 13 2057 2517 2791
+5711 2 2 2 13 2081 2519 2789
+5712 2 2 2 13 2080 2518 2788
+5713 2 2 2 13 2083 2795 2527
+5714 2 2 2 13 2082 2794 2526
+5715 2 2 2 13 2061 2520 2792
+5716 2 2 2 13 2060 2521 2793
+5717 2 2 2 13 2072 2796 2525
+5718 2 2 2 13 2073 2797 2524
+5719 2 2 2 13 2075 2798 2528
+5720 2 2 2 13 2074 2799 2529
+5721 2 2 2 13 2106 2846 2652
+5722 2 2 2 13 2107 2847 2653
+5723 2 2 2 13 2101 2650 2845
+5724 2 2 2 13 2100 2651 2844
+5725 2 2 2 13 2096 2836 2646
+5726 2 2 2 13 2097 2837 2647
+5727 2 2 2 13 2086 2649 2833
+5728 2 2 2 13 2087 2648 2832
+5729 2 2 2 13 2088 2839 2654
+5730 2 2 2 13 2089 2838 2655
+5731 2 2 2 13 2094 2842 2656
+5732 2 2 2 13 2095 2843 2657
+5733 2 2 2 13 2091 2660 2841
+5734 2 2 2 13 2090 2661 2840
+5735 2 2 2 13 2084 2658 2834
+5736 2 2 2 13 2085 2659 2835
+5737 2 2 2 13 1925 2812 2453
+5738 2 2 2 13 1924 2813 2452
+5739 2 2 2 13 1945 2463 2808
+5740 2 2 2 13 1944 2462 2809
+5741 2 2 2 13 1938 2810 2458
+5742 2 2 2 13 1939 2811 2459
+5743 2 2 2 13 1933 2454 2814
+5744 2 2 2 13 1932 2455 2815
+5745 2 2 2 13 2164 2808 2631
+5746 2 2 2 13 2165 2809 2630
+5747 2 2 2 13 2162 2627 2813
+5748 2 2 2 13 2163 2626 2812
+5749 2 2 2 13 2170 2628 2810
+5750 2 2 2 13 2171 2629 2811
+5751 2 2 2 13 2174 2815 2625
+5752 2 2 2 13 2175 2814 2624
+5753 2 2 2 13 2158 2694 2568
+5754 2 2 2 13 2159 2695 2569
+5755 2 2 2 13 2156 2697 2573
+5756 2 2 2 13 2157 2696 2572
+5757 2 2 2 13 2152 2570 2698
+5758 2 2 2 13 2153 2571 2699
+5759 2 2 2 13 2166 2574 2700
+5760 2 2 2 13 2167 2575 2701
+5761 2 2 2 13 2155 2703 2578
+5762 2 2 2 13 2154 2702 2579
+5763 2 2 2 13 2160 2584 2704
+5764 2 2 2 13 2161 2585 2705
+5765 2 2 2 13 2172 2706 2582
+5766 2 2 2 13 2173 2707 2583
+5767 2 2 2 13 2168 2586 2708
+5768 2 2 2 13 2169 2587 2709
+5769 2 2 2 13 15 2803 2508
+5770 2 2 2 13 78 2802 2509
+5771 2 2 2 13 21 2515 2804
+5772 2 2 2 13 84 2514 2805
+5773 2 2 2 13 2112 2535 2818
+5774 2 2 2 13 2113 2534 2819
+5775 2 2 2 13 2082 2807 2638
+5776 2 2 2 13 2083 2806 2639
+5777 2 2 2 13 2081 2641 2778
+5778 2 2 2 13 2080 2640 2779
+5779 2 2 2 13 2069 2780 2568
+5780 2 2 2 13 2068 2781 2569
+5781 2 2 2 13 2054 2782 2572
+5782 2 2 2 13 2055 2783 2573
+5783 2 2 2 13 2053 2570 2784
+5784 2 2 2 13 2052 2571 2785
+5785 2 2 2 13 2059 2574 2786
+5786 2 2 2 13 2058 2575 2787
+5787 2 2 2 13 2081 2789 2577
+5788 2 2 2 13 2080 2788 2576
+5789 2 2 2 13 2057 2791 2578
+5790 2 2 2 13 2056 2790 2579
+5791 2 2 2 13 2083 2580 2795
+5792 2 2 2 13 2082 2581 2794
+5793 2 2 2 13 2060 2793 2583
+5794 2 2 2 13 2061 2792 2582
+5795 2 2 2 13 2073 2585 2797
+5796 2 2 2 13 2072 2584 2796
+5797 2 2 2 13 2074 2586 2799
+5798 2 2 2 13 2075 2587 2798
+5799 2 2 2 13 2114 2800 2633
+5800 2 2 2 13 2115 2801 2632
+5801 2 2 2 13 2105 2828 2625
+5802 2 2 2 13 2104 2829 2624
+5803 2 2 2 13 2103 2628 2825
+5804 2 2 2 13 2102 2629 2824
+5805 2 2 2 13 2098 2626 2827
+5806 2 2 2 13 2099 2627 2826
+5807 2 2 2 13 2092 2830 2630
+5808 2 2 2 13 2093 2831 2631
+5809 2 2 2 13 2177 2832 2648
+5810 2 2 2 13 2176 2833 2649
+5811 2 2 2 13 2181 2834 2658
+5812 2 2 2 13 2180 2835 2659
+5813 2 2 2 13 2184 2646 2836
+5814 2 2 2 13 2185 2647 2837
+5815 2 2 2 13 2188 2654 2839
+5816 2 2 2 13 2189 2655 2838
+5817 2 2 2 13 2179 2840 2661
+5818 2 2 2 13 2178 2841 2660
+5819 2 2 2 13 2183 2656 2842
+5820 2 2 2 13 2182 2657 2843
+5821 2 2 2 13 2197 2845 2650
+5822 2 2 2 13 2196 2844 2651
+5823 2 2 2 13 2200 2652 2846
+5824 2 2 2 13 2201 2653 2847
+$EndElements
Index: ../Rates2D/ASSEMBLY_nonreg.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\"\"\"\nCreated on Mon Feb 25 13:31:10 2019\n\n@author: vollmann\n\"\"\"\n\nimport sys\nimport matplotlib.pyplot as plt\n# sys.path.append(\"/home/vollmann/Dropbox/JOB/PYTHON/BIB\")\n# sys.path.append(\"/media/vollmann/1470789c-8ccb-4f32-9a95-12d258c8d70c/Dropbox/JOB/PYTHON/BIB\")\nimport warnings\nimport assemble\nimport nlocal\n\n\nimport conf, conf2\n\nwarnings.filterwarnings('ignore', 'The iteration is not making good progress')\nimport numpy as np\nimport examples.Rates2D.bib3 as bib\nfrom time import time\nfrom time import strftime\nimport scipy.sparse as sparse\nimport os\nimport MESH_nonreg\n\n\ndef main():\n    os.system('mkdir ' + conf2.folder)\n\n\n    # ------------------------------------------------------------------------------\n    print('\\nconf2.Norm  = ', conf2.Norm, '\\n\\n')\n    ass_time, gridsizes = [], []\n    for k in range(conf2.num_grids):\n        output_mesh_data = conf2.folder    + 'mesh_data_' + str(k)\n        output_A = conf2.folder            + 'A_' + str(k)\n        output_A_omom = conf2.folder       + 'A_omom_' + str(k)\n        output_A_omomi = conf2.folder      + 'A_omomi_' + str(k)\n        output_M = conf2.folder            + 'M_' + str(k)\n        output_M_full = conf2.folder       + 'M_full_' + str(k)\n        output_M_omom = conf2.folder       + 'M_omom_' + str(k)\n        output_ass_time = conf2.folder     + 'ass_time'\n        output_gridsizes = conf2.folder    + 'gridsizes'\n\n        print('-------------------------------------------------')\n        print('h1 =', conf2.H1[k], 'h2 =', conf2.H2[k],'\\n')\n\n        #  MESH\n\n\n        if conf2.depricated_mesh:\n            mesh, mesh_data = MESH_nonreg.prepare_mesh_nonreg_depricated([conf2.H1[k], conf2.H2[k]], conf.delta, bib.norm_dict[conf2.Norm], conf2.num_cores, conf2.transform_switch, conf2.transform)\n        elif conf2.gmsh:\n            mesh, mesh_data = MESH_nonreg.prepare_mesh_gmsh(conf2.H1[k], geofile = conf2.geofile)\n        else:\n            mesh, mesh_data = MESH_nonreg.prepare_mesh_nonreg(conf2.H1[k], conf2.H2[k], conf.delta, conf2.transform_switch, conf2.transform)\n\n\n        if conf2.plot_mesh:\n\n            def plot_tri(liste, closed, fill, color):\n                for i in liste:\n                    plt.gca().add_patch(plt.Polygon(mesh.verts[i], closed=closed, fill=fill, color=color, alpha=1))\n            color = ['black', 'red']\n            labels_domain = np.sort(np.unique(mesh.triangles[:, 0])).tolist()\n            for label in labels_domain:\n                omega = mesh.triangles[np.where(mesh.triangles[:, 0] == label)[0]]\n                plot_tri(omega[:, 1:], closed=True, fill=False, color=color[label - 1])\n            nodes_inner = range(len(mesh.nodes) - len(mesh.boundary))\n            # plt.plot(mesh.verts[nodes_inner][:, 0], mesh.verts[nodes_inner][:, 1], 'ro')\n            # plt.plot(mesh.verts[nodes_rest][:, 0], mesh.verts[nodes_rest][:, 1], 'go')\n            # plt.plot(mesh.verts[mesh.boundary][:, 0], mesh.verts[mesh.boundary][:, 1], 'yo')\n            # plt.plot(mesh.bary[:, 0], mesh.bary[:, 1], 'rx')\n            plt.axis('equal')\n            plt.show()\n\n\n\n        print('\\n mesh prepared and carefully saved \\n')\n        print('\\n Len(nodes): ', len(mesh.nodes))\n        print(' Len(verts): ', len(mesh.verts))\n        print(' Maximal diameter:', np.max(mesh.diam) )\n        print(' Minimal diameter:', np.min(mesh.diam), '\\n')\n\n\n\n        # ==============================================================================\n        #              ASSEMBLY AND SAVE\n        # ==============================================================================\n        t1 = time()\n        # if conf2.approx:\n        #     A = bib.assembly_coupling_approx_full(mesh, gam, conf2.Norm,\n        #                                           num_cores)  # bib.assembly_coupling_full_approx(mesh, gam, bib.retriangulate_dict[conf2.Ball], conf2.Norm, num_cores, hash_onthefly = hash_onthefly)\n        # else:\n\n        if conf2.Ball == 'exactcaps':\n            A = bib.assembly_coupling_full_exactcaps(mesh, conf2.gam, bib.retriangulate_dict[conf2.ball], bib.norm_dict[conf2.Norm], conf2.num_cores, hash_onthefly = 1)\n        else:\n            A, f = assemble.assemble(nlocal.Mesh(mesh, conf.ansatz, conf.boundaryConditionType), conf.py_Px,\n                                     conf.py_Py,\n                                     conf.dx, conf.dy, conf.delta,\n                                     model_f=conf.model_f,\n                                     model_kernel=conf.model_kernel,\n                                     integration_method=conf2.integration_method,\n                                     is_PlacePointOnCap = conf2.is_PlacePointOnCap)\n\n            # A = bib.assembly_coupling_full_standard(mesh, conf2.gam, bib.retriangulate_dict[conf2.ball], bib.norm_dict[conf2.Norm], conf2.num_cores, hash_onthefly = 1)\n            # A = bib.assembly_coupling_full_bary(mesh, conf2.gam, bib.retriangulate_dict[conf2.ball], bib.norm_dict[conf2.Norm], conf2.num_cores, hash_onthefly = 1)\n            # A = bib.assembly_coupling_full_shifted(mesh, gam, bib.retriangulate_dict[conf2.Ball], conf2.Norm, num_cores, hash_onthefly = 1)\n\n        ass_time += [time() - t1 ]\n        gridsizes += [np.min(mesh.diam)]\n        print('\\n time for A:', time() - t1 ,'\\n')\n        print('-------------------------------------------------')\n\n        A = sparse.lil_matrix(A)\n        nodes_inner = range(len(mesh.nodes) - len(mesh.boundary))\n        A_omom = A[nodes_inner[0]:nodes_inner[-1] + 1, nodes_inner[0]:nodes_inner[-1] + 1]\n        A_omomi = A[nodes_inner[0]:nodes_inner[-1] + 1, nodes_inner[-1] + 1:]\n\n        # assembly mass matrix\n        M = bib.mass_matrix2(mesh)# omega\n        M_full = bib.mass_matrix_full(mesh)# full\n        M.tolil()\n        M_omom = M[nodes_inner[0]:nodes_inner[-1] + 1, nodes_inner[0]:nodes_inner[-1] + 1]# omom\n\n        # SAVE\n        np.save(output_mesh_data, mesh_data)\n        bib.save_sparse_csr(output_A,       A.tocsr()) # A\n        bib.save_sparse_csr(output_A_omom,  A_omom.tocsr())\n        bib.save_sparse_csr(output_A_omomi, A_omomi.tocsr())\n        bib.save_sparse_csr(output_M,       M.tocsr()) # M\n        bib.save_sparse_csr(output_M_full,  M_full.tocsr())\n        bib.save_sparse_csr(output_M_omom,  M_omom.tocsr())\n        np.save(output_ass_time, ass_time)\n        np.save(output_gridsizes, gridsizes)\n\n\n\n    # ==============================================================================\n    #              PRINT INPUT - PARAMETERS INTO TEXT-FILE\n    # ==============================================================================\n    timestr = strftime('%d-%m-%Y')\n    config1 = open('conf.py', 'r')\n    config2 = open('conf2.py', 'r')\n    textfile = open(conf2.folder + 'parameters.txt', 'w')\n    textfile.write(\"\\n----------------------\\n  DATE: \"+timestr+\"\\n----------------------\\n\")\n    textfile.write(\"\\n\\nCONF 2: \\n----------------------\\n\")\n    for line in config2:\n        textfile.write(line)\n    textfile.write(\"\\n\\nCONF John: \\n----------------------\\n\")\n    for line in config1:\n        textfile.write(line)\n\n    config1.close()\n    config2.close()\n    textfile.close()\n\nif __name__ == \"__main__\":\n    main()
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- ../Rates2D/ASSEMBLY_nonreg.py	(revision b58f426ba4ba71178accbbade003703e84c118d6)
+++ ../Rates2D/ASSEMBLY_nonreg.py	(date 1586367197509)
@@ -157,5 +157,9 @@
     config2.close()
     textfile.close()
 
+    if conf2.gmsh:
+        os.system("cp mesh/" + conf2.geofile + ".geo " + conf2.folder + conf2.geofile + ".geo")
+
+
 if __name__ == "__main__":
     main()
\ No newline at end of file
Index: mesh/DD_simple.geo
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- mesh/DD_simple.geo	(date 1595931395509)
+++ mesh/DD_simple.geo	(date 1595931395509)
@@ -0,0 +1,78 @@
+delta = 0.1;
+cl__1 = 1;
+lc = 1;
+lc2 = 1;
+lc3 = 1;
+lc_fine = lc/3;
+lc_point= lc/(9);
+//------------------------------------------------------------------------------
+// Interface
+Point(12) = {0.5, 1.0, 0, lc};
+Point(13) = {0.35, 0.75, 0, lc};
+Point(15) = {0.65, 0.25, 0, lc};
+Point(16) = {0.5, 0.0, 0, lc};
+
+//------------------------------------------------------------------------------
+// OMEGA
+Point(1) = {0, 0, 0,  lc};
+Point(2) = {0, 1, 0,  lc};
+Point(3) = {1, 1, 0,  lc};
+Point(4) = {1, 0, 0,  lc};
+
+// OMEGA_I
+Point(8) = {1 + delta, -delta, -0, lc3};
+Point(9) = {-delta, -delta, -0, lc3};
+Point(10) = {1 + delta, 1 + delta, -0, lc3};
+Point(11) = {-delta, 1 + delta, -0, lc3};
+
+//------------------------------------------------------------------------------
+Line(1) = {1,2};
+Line(2) = {2,12};
+Line(3) = {12,3};
+Line(4) = {3, 4};
+Line(5) = {4,16};
+Line(6) = {16, 1};
+Line(7) = {11, 9};
+Line(8) = {9, 8};
+Line(9) = {8, 10};
+Line(10) = {10, 11};
+
+//================ Interface ================//
+Spline(11) = {12, 13, 15, 16};
+
+//================ Add Surfaces ================//
+// Omega_1
+Line Loop(12) = {1, 2, 11, 6};
+Plane Surface(13) = {12};
+// Omega_2
+Line Loop(14) = {11, -5, -4, -3};
+Plane Surface(15) = {14};
+
+// Omega_I
+Line Loop(16) = {2, 3, 4, 5, 6, 1};
+Line Loop(17) = {10, 7, 8, 9};
+Plane Surface(18) = {16, 17};
+
+//=============== LABELING ===============//
+// boundary of Omega
+Physical Line(1122) = {1, 6, 5, 4, 3, 2};
+
+// Interface
+Physical Line(12) = {11};
+
+// boundary of Omega_1
+Physical Line(11) = {1, 2,6, 11};
+
+// boundary of Omega_2
+Physical Line(22) = {5, 3, 4, 11};
+
+// Omega_1
+Physical Surface(1) = {13};
+
+// Omega_2
+Physical Surface(2) = {15};
+
+// Omega_I
+Physical Surface(3) = {18};
+
+
Index: mesh/target_shape.msh
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- mesh/target_shape.msh	(date 1569921424000)
+++ mesh/target_shape.msh	(date 1569921424000)
@@ -0,0 +1,1273 @@
+$MeshFormat
+2.2 0 8
+$EndMeshFormat
+$Nodes
+398
+1 0 0 0
+2 0 1 0
+3 1 1 0
+4 1 0 0
+5 0.25 0.5 0
+6 1.1 -0.1 -0
+7 -0.1 -0.1 -0
+8 1.1 1.1 -0
+9 -0.1 1.1 -0
+10 0.5 0.5 0
+11 0 0.8999999999995836 0
+12 0 0.7999999999999998 0
+13 0 0.7000000000006934 0
+14 0 0.6000000000013869 0
+15 0 0.5000000000020587 0
+16 0 0.4000000000016644 0
+17 0 0.3000000000012483 0
+18 0 0.2000000000008322 0
+19 0 0.100000000000416 0
+20 0.09999999999981467 0 0
+21 0.1999999999995579 0 0
+22 0.2999999999992664 0 0
+23 0.3999999999989749 0 0
+24 0.4999999999986943 0 0
+25 0.5999999999989468 0 0
+26 0.69999999999921 0 0
+27 0.7999999999994734 0 0
+28 0.8999999999997368 0 0
+29 1 0.09999999999981467 0
+30 1 0.1999999999995579 0
+31 1 0.2999999999992664 0
+32 1 0.3999999999989749 0
+33 1 0.4999999999986943 0
+34 1 0.5999999999989468 0
+35 1 0.69999999999921 0
+36 1 0.7999999999994734 0
+37 1 0.8999999999997368 0
+38 0.8999999999995836 1 0
+39 0.7999999999999998 1 0
+40 0.7000000000006934 1 0
+41 0.6000000000013869 1 0
+42 0.5000000000020587 1 0
+43 0.4000000000016644 1 0
+44 0.3000000000012483 1 0
+45 0.2000000000008322 1 0
+46 0.100000000000416 1 0
+47 0.2548036798986262 0.4512274194988145 0
+48 0.2690301168710973 0.4043291419113373 0
+49 0.2921325969228582 0.3611074417473525 0
+50 0.3232233047014971 0.3232233047052292 0
+51 0.3611074417429609 0.2921325969257926 0
+52 0.4043291419063995 0.2690301168731426 0
+53 0.4512274194935425 0.2548036798996748 0
+54 0.4999999999975849 0.25 0
+55 0.5487725805017546 0.2548036798987394 0
+56 0.5956708580891923 0.2690301168713167 0
+57 0.6388925582530427 0.2921325969231223 0
+58 0.67677669529511 0.3232233047018362 0
+59 0.7078674030744746 0.3611074417433608 0
+60 0.7309698831270466 0.4043291419068564 0
+61 0.7451963201004244 0.4512274194940415 0
+62 0.75 0.4999999999980919 0
+63 0.7451963201011254 0.5487725805024345 0
+64 0.7309698831283424 0.5956708580900151 0
+65 0.7078674030762422 0.6388925582539938 0
+66 0.6767766952972154 0.6767766952960583 0
+67 0.6388925582553355 0.7078674030753457 0
+68 0.5956708580914067 0.730969883127766 0
+69 0.5487725805038619 0.7451963201008415 0
+70 0.4999999999995404 0.75 0
+71 0.4512274194952218 0.7451963201006592 0
+72 0.4043291419077237 0.7309698831274059 0
+73 0.3611074417439407 0.7078674030748621 0
+74 0.3232233047021691 0.6767766952954428 0
+75 0.292132596923267 0.6388925582532592 0
+76 0.2690301168712851 0.5956708580891159 0
+77 0.2548036798986729 0.5487725805014205 0
+78 -0.1 1.000000000000079 0
+79 -0.1 0.9000000000003032 0
+80 -0.1 0.8000000000005848 0
+81 -0.1 0.7000000000008665 0
+82 -0.1 0.6000000000012352 0
+83 -0.1 0.500000000001539 0
+84 -0.1 0.4000000000013 0
+85 -0.1 0.3000000000010178 0
+86 -0.1 0.2000000000007579 0
+87 -0.1 0.1000000000005272 0
+88 -0.1 2.671196597248127e-13 0
+89 -1.730560139634463e-13 -0.1 0
+90 0.09999999999961506 -0.1 0
+91 0.199999999999302 -0.1 0
+92 0.2999999999990088 -0.1 0
+93 0.3999999999986936 -0.1 0
+94 0.4999999999984002 -0.1 0
+95 0.5999999999986493 -0.1 0
+96 0.6999999999989417 -0.1 0
+97 0.7999999999992116 -0.1 0
+98 0.8999999999994526 -0.1 0
+99 0.9999999999997226 -0.1 0
+100 1.1 -1.730560139634463e-13 0
+101 1.1 0.09999999999961506 0
+102 1.1 0.199999999999302 0
+103 1.1 0.2999999999990088 0
+104 1.1 0.3999999999986936 0
+105 1.1 0.4999999999984002 0
+106 1.1 0.5999999999986493 0
+107 1.1 0.6999999999989417 0
+108 1.1 0.7999999999992116 0
+109 1.1 0.8999999999994526 0
+110 1.1 0.9999999999997226 0
+111 1.000000000000079 1.1 0
+112 0.9000000000003032 1.1 0
+113 0.8000000000005848 1.1 0
+114 0.7000000000008665 1.1 0
+115 0.6000000000012352 1.1 0
+116 0.500000000001539 1.1 0
+117 0.4000000000013 1.1 0
+118 0.3000000000010178 1.1 0
+119 0.2000000000007579 1.1 0
+120 0.1000000000005272 1.1 0
+121 2.671196597248127e-13 1.1 0
+122 0.6500000000010417 1.049999999999973 0
+123 -0.04999999999997291 0.6500000000010419 0
+124 0.4500000000016405 1.05 0
+125 -0.05 0.4500000000016405 0
+126 1.049999999999931 -0.05000000000004327 0
+127 -0.05000000000004327 -0.04999999999993322 0
+128 1.05 0.5499999999986727 0
+129 0.5499999999986727 -0.05 0
+130 0.5500000000017229 1.049999999999924 0
+131 -0.04999999999992404 0.5500000000017229 0
+132 0.1500000000006333 1.05 0
+133 -0.05000000000000002 0.1500000000006333 0
+134 0.7500000000004963 1.049999999999947 0
+135 -0.0499999999999468 0.7500000000004963 0
+136 -0.05 0.05000000000030258 0
+137 1.05000000000002 1.049999999999931 0
+138 -0.04999999999993322 1.05000000000002 0
+139 -0.05 0.250000000000964 0
+140 0.2500000000009641 1.05 0
+141 -0.05000000000000002 0.9499999999999916 0
+142 0.9499999999999915 1.05 0
+143 0.05000000000030258 1.05 0
+144 0.04999999999990735 -0.0499999999999002 0
+145 1.0499999999999 0.04999999999990723 0
+146 0.949999999999728 -0.05 0
+147 1.050000000000004 0.1499999999995587 0
+148 0.1499999999995587 -0.05000000000000469 0
+149 1.050000000000128 0.2499999999991555 0
+150 0.2499999999991555 -0.0500000000001279 0
+151 0.3500000000013076 1.05 0
+152 -0.05000000000000002 0.3500000000013077 0
+153 1.050000000000129 0.3499999999988512 0
+154 0.3499999999988512 -0.05000000000012877 0
+155 1.05000000000014 0.4499999999985468 0
+156 0.4499999999985469 -0.0500000000001407 0
+157 0.7499999999992092 -0.05 0
+158 1.05 0.7499999999992092 0
+159 1.05 0.649999999998937 0
+160 0.649999999998937 -0.05 0
+161 1.050000000000142 0.9499999999995875 0
+162 0.8499999999994685 -0.05 0
+163 1.049999999999858 0.8499999999996052 0
+164 -0.04999999999970785 0.8499999999997919 0
+165 0.8499999999997918 1.049999999999708 0
+166 0.2416655552388178 0.1714409665495018 0
+167 0.8285590334508902 0.2416655552395023 0
+168 0.7583344447582652 0.828559033452145 0
+169 0.2416655552404846 0.8285590334514068 0
+170 0.1463792391969355 0.691302117356634 0
+171 0.688657467613686 0.1456123807878578 0
+172 0.8543876192116934 0.6886574676153261 0
+173 0.1456123807878003 0.3113425323871695 0
+174 0.3800379860580285 0.1413924610156534 0
+175 0.8586075389845295 0.3800379860587481 0
+176 0.6252303489155696 0.864581376553782 0
+177 0.3747702518215973 0.8645965594920509 0
+178 0.1267939423514252 0.4566051891967673 0
+179 0.8662908712415216 0.5391436241523372 0
+180 0.5391436241513506 0.1337091287585876 0
+181 0.1454363597773689 0.5714980992786431 0
+182 0.5000747204989561 0.861212645411027 0
+183 0.2374882868025355 0.7159417973050376 0
+184 0.7152356271648088 0.2384978698932375 0
+185 0.761502130105941 0.7152356271663415 0
+186 0.2384978698929481 0.28476437283578 0
+187 0.3433328127705966 0.2016963076522458 0
+188 0.7983036923480112 0.3433328127712101 0
+189 0.6575824344931042 0.7994219356805422 0
+190 0.3424176656288241 0.7994244661698608 0
+191 0.1757994516722415 0.4058633215860707 0
+192 0.8375918196261705 0.4653304079425793 0
+193 0.5934281473055603 0.1769519827392745 0
+194 0.4653304079418415 0.1624081803740293 0
+195 0.8230480172606864 0.5934281473066472 0
+196 0.8876255582304642 0.7945793187890199 0
+197 0.1123744417690986 0.7945793187874124 0
+198 0.7945793187866307 0.1123744417686602 0
+199 0.1123744417683844 0.2054206812143597 0
+200 0.1901213219709243 0.4576651843961266 0
+201 0.7779536752007853 0.6479125301516523 0
+202 0.8094320019332866 0.5299361142476302 0
+203 0.7988901832332755 0.407688543649522 0
+204 0.6479125301504283 0.2220463247988143 0
+205 0.5299361142468096 0.1905679980667428 0
+206 0.4076885436489108 0.2011098167669242 0
+207 0.2218816775033835 0.3519862511203976 0
+208 0.7468010200404206 0.2958327240231685 0
+209 0.3954359299509361 0.7967437623559461 0
+210 0.2955577625617655 0.7470620120354005 0
+211 0.2958327240227167 0.2531989799599914 0
+212 0.704298025584834 0.7469607690890742 0
+213 0.6046178865043232 0.7966808137187554 0
+214 0.2239028170183297 0.6563074700310619 0
+215 0.2163846276389752 0.594680030492854 0
+216 0.1430502997167218 0.08299694500833878 0
+217 0.9170030549920807 0.1430502997173068 0
+218 0.1430502997181266 0.9170030549925797 0
+219 0.8569497002809598 0.917003054993262 0
+220 0.4832873143842819 0.809289728483493 0
+221 0.5225848564846041 0.8082459173459595 0
+222 0.1945738075559447 0.5460066590623519 0
+223 0.9196561846860141 0.4587782349662877 0
+224 0.4587782349656576 0.08034381531397917 0
+225 0.6994919962589998 0.8982118177018795 0
+226 0.3009559914056128 0.1022961616835529 0
+227 0.8977038383165492 0.3009559914063952 0
+228 0.30050805482291 0.8982131087679959 0
+229 0.8750350934205771 0.6156063634774691 0
+230 0.6156063634760468 0.1249649065790847 0
+231 0.1236202870002226 0.3835670168974215 0
+232 0.08765294865028733 0.6357664776248989 0
+233 0.5521375495845466 0.9202862372082856 0
+234 0.4477873470779008 0.9191415376347779 0
+235 0.08027330088890228 0.531100552055558 0
+236 0.81465538408635 0.7618751800641883 0
+237 0.7618751800623161 0.1853446159127154 0
+238 0.1851807036238348 0.7638392504515077 0
+239 0.1853446159124465 0.2381248199383494 0
+240 0.9222032740816963 0.7276071806119306 0
+241 0.07779672591859602 0.7276071806103788 0
+242 0.7276071806095959 0.07779672591829721 0
+243 0.07779672591824609 0.2723928193914111 0
+244 0.1690018713394729 0.6371396517824067 0
+245 0.2874989400051248 0.2025326310176557 0
+246 0.7974673689827231 0.2874989400056855 0
+247 0.7127102593675571 0.7977229674597082 0
+248 0.2872609182854859 0.7977437221463958 0
+249 0.752578697256557 0.3649938736097533 0
+250 0.3649938736092448 0.2474213027436768 0
+251 0.3540973354934298 0.7490681230710257 0
+252 0.6458876152934777 0.7490403360591265 0
+253 0.2282952149226189 0.4069653008109174 0
+254 0.7838205782131793 0.472046112947923 0
+255 0.5816972468759746 0.2283725616139702 0
+256 0.7716274383858341 0.5816972468768774 0
+257 0.4720461129473542 0.2161794217869581 0
+258 0.683308692606716 0.2766280176371582 0
+259 0.7233768445328936 0.6833146331775783 0
+260 0.2792097842806573 0.6825019825204397 0
+261 0.2770057032622399 0.3170062133764727 0
+262 0.9201089560232234 0.8656403318785559 0
+263 0.07989104397634364 0.8656403318772483 0
+264 0.8656403318764923 0.07989104397599892 0
+265 0.07989104397573447 0.1343596681243678 0
+266 0.3650219346285539 0.06483730000598183 0
+267 0.9351626999939318 0.3650219346291964 0
+268 0.3642495078944356 0.9360344672226378 0
+269 0.6357398561747241 0.9361956423035995 0
+270 0.2261955633253951 0.0883971705852143 0
+271 0.9116028294150792 0.2261955633258373 0
+272 0.7738791012840411 0.911687492646828 0
+273 0.2261209072295388 0.9116877078240251 0
+274 0.5634124174488035 0.06157770366768456 0
+275 0.06004196938226178 0.4364048241519358 0
+276 0.9384222963319846 0.563412417449927 0
+277 0.3127516773804351 0.1611768192655954 0
+278 0.8388231807346392 0.3127516773811222 0
+279 0.6906698967586992 0.8376994261696113 0
+280 0.3093244891598603 0.837707378005542 0
+281 0.1585758694913832 0.5100881658158456 0
+282 0.4405452922669905 0.8385211520777327 0
+283 0.5605078608042812 0.838482661916661 0
+284 0.7556493898336507 0.7691116887198122 0
+285 0.2442132091881833 0.769396610980271 0
+286 0.7690693063177869 0.2443852988368346 0
+287 0.2443852988364432 0.2309306936827886 0
+288 0.8258551676812058 0.6462337899109362 0
+289 0.1736124727301457 0.3534389361979678 0
+290 0.6462337899095387 0.1741448323184934 0
+291 0.835258857443884 0.8465574019706665 0
+292 0.1647138252595711 0.8468847828973632 0
+293 0.8465432914305815 0.1647535866566702 0
+294 0.16475358665625 0.1534567085700219 0
+295 0.2563506874815023 0.6310819828147658 0
+296 0.06464145560003887 0.3464898111808423 0
+297 0.6533900247694423 0.06498435486956665 0
+298 0.9350156451299949 0.6533900247709029 0
+299 0.05881957723879366 0.05881957723904128 0
+300 0.05881957723736108 0.9411804227626388 0
+301 0.9411804227618288 0.05881957723798648 0
+302 0.94118042276404 0.9411804227641033 0
+303 0.443899859833838 0.7792808399403451 0
+304 0.558401802837688 0.7798889812621563 0
+305 0.1990247736524766 0.3127424684888759 0
+306 0.8017739413097023 0.6879035364766555 0
+307 0.6879035364750712 0.1982260586899094 0
+308 0.3235239673023915 0.7125655199032183 0
+309 0.6778463477927512 0.7127919673394366 0
+310 0.3248050270959604 0.2868999963410575 0
+311 0.7131449902282423 0.3247510720070237 0
+312 0.2157309276344437 0.500020670075763 0
+313 0.1980500811189723 0.6882198364527529 0
+314 0.1304327776271162 0.7443319668014832 0
+315 0.869717958902551 0.7431797867701162 0
+316 0.7431797867680572 0.1302820410968827 0
+317 0.1302820410967193 0.2568202132328224 0
+318 0.7418649583800097 0.6292795136488654 0
+319 0.7720152677266849 0.5264904109145915 0
+320 0.7622911323860966 0.4200570183216192 0
+321 0.5264904109138956 0.2279847322732821 0
+322 0.6292795136478366 0.2581350416195477 0
+323 0.4200570183210903 0.2377088676140753 0
+324 0.2581350416194405 0.3707204863527582 0
+325 0.3900937677397832 0.488013312694102 0
+326 0.4479019276702627 0.3992740270451838 0
+327 0.5615121936666505 0.3851865057023036 0
+328 0.6288416372744959 0.4873102063329931 0
+329 0.5828245344364053 0.6008513808369375 0
+330 0.454816351810621 0.633732499204454 0
+331 0.3701368003558749 0.5890198467772259 0
+332 0.640944566193496 0.4070029832906917 0
+333 0.5319319623765135 0.6658147529099719 0
+334 0.6564237701369243 0.5636729274852825 0
+335 0.4992679929725946 0.3311434959310126 0
+336 0.3622608486770554 0.3933400305483444 0
+337 0.3316759061761409 0.543323037399191 0
+338 0.439142967169265 0.5534701638881362 0
+339 0.3987143601263474 0.6481666520756146 0
+340 0.5027809444419368 0.4441131610221609 0
+341 0.563561518197341 0.45783899652342 0
+342 0.567144243018823 0.5249555932299449 0
+343 0.5110424463209479 0.5697971081067276 0
+344 0.5890975116104167 0.3333709000900343 0
+345 0.6199053173003489 0.6461005520350478 0
+346 0.6876436435092561 0.4815083425380127 0
+347 0.319090831035427 0.4561567555366495 0
+348 0.4074081313835324 0.3234909669516676 0
+349 0.4432485665827407 0.6870844036981961 0
+350 0.4356540789639542 0.4541558629448753 0
+351 0.3202315789596318 0.5949248915904168 0
+352 0.3640040731308789 0.3447798951842002 0
+353 0.4523838920808599 0.3029037688025793 0
+354 0.4913537084001641 0.7019809612801062 0
+355 0.6887778825941651 0.4308070013362031 0
+356 0.6986702277546135 0.5310096109245124 0
+357 0.5814508073631144 0.6829629935762199 0
+358 0.6635578751739648 0.6155944609768553 0
+359 0.6378291560390823 0.3547093365341805 0
+360 0.5443057102914037 0.3046706826030743 0
+361 0.3492172537354497 0.6357206379404956 0
+362 0.2937092767680701 0.498532786958976 0
+363 0.3163215322317546 0.407021488661187 0
+364 0.3874640669504866 0.5398551985874642 0
+365 0.4186076964233171 0.5997710883926985 0
+366 0.5072111677306332 0.3828004277257001 0
+367 0.5176351949171533 0.616869684328615 0
+368 0.607522636064215 0.5435638808742295 0
+369 0.5971655275579696 0.4358046850606759 0
+370 0.4399956597271856 0.5129009791798377 0
+371 0.3972849887712258 0.690043840157904 0
+372 0.401375838441226 0.4130961577802579 0
+373 0.2938901117347602 0.5562448309078241 0
+374 0.4934218690868136 0.2908135163458153 0
+375 0.5342326193242853 0.7064672822837207 0
+376 0.6957962565532609 0.5739223143895834 0
+377 0.6775747347419283 0.3892734038766632 0
+378 0.6053097910135231 0.3832148821355773 0
+379 0.5402789152543397 0.347434402410425 0
+380 0.5667495632787071 0.6425198727373584 0
+381 0.6260468266223717 0.5939566404416705 0
+382 0.366067232965341 0.6702184647671122 0
+383 0.4877971568174386 0.6610964602842687 0
+384 0.655820382947901 0.521412993631006 0
+385 0.4555566397786022 0.3498880450466773 0
+386 0.6486746514258765 0.4484866437117154 0
+387 0.364117064032853 0.4455512737275198 0
+388 0.2891618637620609 0.4385855955231572 0
+389 0.4714772890301548 0.5859253134808466 0
+390 0.3315884711328089 0.3658944321692626 0
+391 0.4064179098469263 0.3706448537593885 0
+392 0.342147564801327 0.4964006823632573 0
+393 0.5526169308027682 0.5652648994503893 0
+394 0.5271393567346765 0.5329483424231886 0
+395 0.4814662864970383 0.5425069845131227 0
+396 0.5444134427258952 0.4957611167876212 0
+397 0.5861950389033407 0.4911615137963386 0
+398 0.540762868233061 0.4228825810835497 0
+$EndNodes
+$Elements
+866
+1 1 2 9 1 2 11
+2 1 2 9 1 11 12
+3 1 2 9 1 12 13
+4 1 2 9 1 13 14
+5 1 2 9 1 14 15
+6 1 2 9 1 15 16
+7 1 2 9 1 16 17
+8 1 2 9 1 17 18
+9 1 2 9 1 18 19
+10 1 2 9 1 19 1
+11 1 2 9 2 1 20
+12 1 2 9 2 20 21
+13 1 2 9 2 21 22
+14 1 2 9 2 22 23
+15 1 2 9 2 23 24
+16 1 2 9 2 24 25
+17 1 2 9 2 25 26
+18 1 2 9 2 26 27
+19 1 2 9 2 27 28
+20 1 2 9 2 28 4
+21 1 2 9 3 4 29
+22 1 2 9 3 29 30
+23 1 2 9 3 30 31
+24 1 2 9 3 31 32
+25 1 2 9 3 32 33
+26 1 2 9 3 33 34
+27 1 2 9 3 34 35
+28 1 2 9 3 35 36
+29 1 2 9 3 36 37
+30 1 2 9 3 37 3
+31 1 2 9 4 3 38
+32 1 2 9 4 38 39
+33 1 2 9 4 39 40
+34 1 2 9 4 40 41
+35 1 2 9 4 41 42
+36 1 2 9 4 42 43
+37 1 2 9 4 43 44
+38 1 2 9 4 44 45
+39 1 2 9 4 45 46
+40 1 2 9 4 46 2
+41 1 2 12 5 5 47
+42 1 2 12 5 47 48
+43 1 2 12 5 48 49
+44 1 2 12 5 49 50
+45 1 2 12 5 50 51
+46 1 2 12 5 51 52
+47 1 2 12 5 52 53
+48 1 2 12 5 53 54
+49 1 2 12 5 54 55
+50 1 2 12 5 55 56
+51 1 2 12 5 56 57
+52 1 2 12 5 57 58
+53 1 2 12 5 58 59
+54 1 2 12 5 59 60
+55 1 2 12 5 60 61
+56 1 2 12 5 61 62
+57 1 2 12 5 62 63
+58 1 2 12 5 63 64
+59 1 2 12 5 64 65
+60 1 2 12 5 65 66
+61 1 2 12 5 66 67
+62 1 2 12 5 67 68
+63 1 2 12 5 68 69
+64 1 2 12 5 69 70
+65 1 2 12 5 70 71
+66 1 2 12 5 71 72
+67 1 2 12 5 72 73
+68 1 2 12 5 73 74
+69 1 2 12 5 74 75
+70 1 2 12 5 75 76
+71 1 2 12 5 76 77
+72 1 2 12 5 77 5
+73 1 2 13 6 9 78
+74 1 2 13 6 78 79
+75 1 2 13 6 79 80
+76 1 2 13 6 80 81
+77 1 2 13 6 81 82
+78 1 2 13 6 82 83
+79 1 2 13 6 83 84
+80 1 2 13 6 84 85
+81 1 2 13 6 85 86
+82 1 2 13 6 86 87
+83 1 2 13 6 87 88
+84 1 2 13 6 88 7
+85 1 2 13 7 7 89
+86 1 2 13 7 89 90
+87 1 2 13 7 90 91
+88 1 2 13 7 91 92
+89 1 2 13 7 92 93
+90 1 2 13 7 93 94
+91 1 2 13 7 94 95
+92 1 2 13 7 95 96
+93 1 2 13 7 96 97
+94 1 2 13 7 97 98
+95 1 2 13 7 98 99
+96 1 2 13 7 99 6
+97 1 2 13 8 6 100
+98 1 2 13 8 100 101
+99 1 2 13 8 101 102
+100 1 2 13 8 102 103
+101 1 2 13 8 103 104
+102 1 2 13 8 104 105
+103 1 2 13 8 105 106
+104 1 2 13 8 106 107
+105 1 2 13 8 107 108
+106 1 2 13 8 108 109
+107 1 2 13 8 109 110
+108 1 2 13 8 110 8
+109 1 2 13 9 8 111
+110 1 2 13 9 111 112
+111 1 2 13 9 112 113
+112 1 2 13 9 113 114
+113 1 2 13 9 114 115
+114 1 2 13 9 115 116
+115 1 2 13 9 116 117
+116 1 2 13 9 117 118
+117 1 2 13 9 118 119
+118 1 2 13 9 119 120
+119 1 2 13 9 120 121
+120 1 2 13 9 121 9
+121 2 2 3 15 130 116 42
+122 2 2 3 15 131 83 15
+123 2 2 3 15 116 124 42
+124 2 2 3 15 83 125 15
+125 2 2 3 15 164 11 79
+126 2 2 3 15 165 38 112
+127 2 2 3 15 155 105 33
+128 2 2 3 15 156 94 24
+129 2 2 3 15 112 38 142
+130 2 2 3 15 79 11 141
+131 2 2 3 15 33 105 128
+132 2 2 3 15 24 94 129
+133 2 2 3 15 145 4 100
+134 2 2 3 15 144 1 89
+135 2 2 3 15 4 126 100
+136 2 2 3 15 1 127 89
+137 2 2 3 15 15 125 16
+138 2 2 3 15 42 124 43
+139 2 2 3 15 2 141 11
+140 2 2 3 15 3 142 38
+141 2 2 3 15 1 19 136
+142 2 2 3 15 18 133 19
+143 2 2 3 15 45 132 46
+144 2 2 3 15 16 152 17
+145 2 2 3 15 17 139 18
+146 2 2 3 15 43 151 44
+147 2 2 3 15 44 140 45
+148 2 2 3 15 2 46 143
+149 2 2 3 15 6 126 99
+150 2 2 3 15 94 95 129
+151 2 2 3 15 105 106 128
+152 2 2 3 15 24 129 25
+153 2 2 3 15 33 128 34
+154 2 2 3 15 83 84 125
+155 2 2 3 15 116 117 124
+156 2 2 3 15 7 127 88
+157 2 2 3 15 4 28 146
+158 2 2 3 15 8 137 110
+159 2 2 3 15 9 138 121
+160 2 2 3 15 95 96 160
+161 2 2 3 15 106 107 159
+162 2 2 3 15 84 85 152
+163 2 2 3 15 117 118 151
+164 2 2 3 15 96 97 157
+165 2 2 3 15 98 99 146
+166 2 2 3 15 107 108 158
+167 2 2 3 15 109 110 161
+168 2 2 3 15 27 162 28
+169 2 2 3 15 36 163 37
+170 2 2 3 15 25 160 26
+171 2 2 3 15 26 157 27
+172 2 2 3 15 3 37 161
+173 2 2 3 15 34 159 35
+174 2 2 3 15 35 158 36
+175 2 2 3 15 87 88 136
+176 2 2 3 15 120 121 143
+177 2 2 3 15 85 86 139
+178 2 2 3 15 118 119 140
+179 2 2 3 15 97 98 162
+180 2 2 3 15 108 109 163
+181 2 2 3 15 86 87 133
+182 2 2 3 15 119 120 132
+183 2 2 3 15 3 111 142
+184 2 2 3 15 2 78 141
+185 2 2 3 15 4 99 126
+186 2 2 3 15 1 88 127
+187 2 2 3 15 80 81 135
+188 2 2 3 15 113 114 134
+189 2 2 3 15 82 83 131
+190 2 2 3 15 115 116 130
+191 2 2 3 15 3 137 111
+192 2 2 3 15 2 138 78
+193 2 2 3 15 11 164 12
+194 2 2 3 15 38 165 39
+195 2 2 3 15 1 136 88
+196 2 2 3 15 4 146 99
+197 2 2 3 15 81 82 123
+198 2 2 3 15 114 115 122
+199 2 2 3 15 16 125 84
+200 2 2 3 15 43 124 117
+201 2 2 3 15 34 128 106
+202 2 2 3 15 25 129 95
+203 2 2 3 15 89 90 144
+204 2 2 3 15 100 101 145
+205 2 2 3 15 1 144 20
+206 2 2 3 15 4 145 29
+207 2 2 3 15 8 111 137
+208 2 2 3 15 9 78 138
+209 2 2 3 15 79 80 164
+210 2 2 3 15 112 113 165
+211 2 2 3 15 20 148 21
+212 2 2 3 15 29 147 30
+213 2 2 3 15 91 92 150
+214 2 2 3 15 102 103 149
+215 2 2 3 15 7 89 127
+216 2 2 3 15 6 100 126
+217 2 2 3 15 2 121 138
+218 2 2 3 15 3 110 137
+219 2 2 3 15 23 156 24
+220 2 2 3 15 32 155 33
+221 2 2 3 15 93 94 156
+222 2 2 3 15 104 105 155
+223 2 2 3 15 22 154 23
+224 2 2 3 15 21 150 22
+225 2 2 3 15 30 149 31
+226 2 2 3 15 31 153 32
+227 2 2 3 15 92 154 150
+228 2 2 3 15 103 153 149
+229 2 2 3 15 2 143 121
+230 2 2 3 15 3 161 110
+231 2 2 3 15 34 106 159
+232 2 2 3 15 35 107 158
+233 2 2 3 15 35 159 107
+234 2 2 3 15 36 158 108
+235 2 2 3 15 36 108 163
+236 2 2 3 15 43 117 151
+237 2 2 3 15 44 118 140
+238 2 2 3 15 44 151 118
+239 2 2 3 15 45 119 132
+240 2 2 3 15 45 140 119
+241 2 2 3 15 46 132 120
+242 2 2 3 15 46 120 143
+243 2 2 3 15 16 84 152
+244 2 2 3 15 17 85 139
+245 2 2 3 15 18 139 86
+246 2 2 3 15 25 95 160
+247 2 2 3 15 27 157 97
+248 2 2 3 15 27 97 162
+249 2 2 3 15 28 162 98
+250 2 2 3 15 17 152 85
+251 2 2 3 15 18 86 133
+252 2 2 3 15 19 133 87
+253 2 2 3 15 19 87 136
+254 2 2 3 15 26 96 157
+255 2 2 3 15 26 160 96
+256 2 2 3 15 28 98 146
+257 2 2 3 15 93 156 154
+258 2 2 3 15 104 155 153
+259 2 2 3 15 91 150 148
+260 2 2 3 15 102 149 147
+261 2 2 3 15 92 93 154
+262 2 2 3 15 103 104 153
+263 2 2 3 15 22 150 154
+264 2 2 3 15 31 149 153
+265 2 2 3 15 23 154 156
+266 2 2 3 15 78 79 141
+267 2 2 3 15 111 112 142
+268 2 2 3 15 32 153 155
+269 2 2 3 15 90 91 148
+270 2 2 3 15 101 102 147
+271 2 2 3 15 21 148 150
+272 2 2 3 15 30 147 149
+273 2 2 3 15 109 161 163
+274 2 2 3 15 37 163 161
+275 2 2 3 15 12 164 135
+276 2 2 3 15 39 165 134
+277 2 2 3 15 14 131 15
+278 2 2 3 15 41 130 42
+279 2 2 3 15 40 122 41
+280 2 2 3 15 12 135 13
+281 2 2 3 15 39 134 40
+282 2 2 3 15 13 123 14
+283 2 2 3 15 41 122 130
+284 2 2 3 15 14 123 131
+285 2 2 3 15 13 135 123
+286 2 2 3 15 40 134 122
+287 2 2 3 15 90 148 144
+288 2 2 3 15 101 147 145
+289 2 2 3 15 80 135 164
+290 2 2 3 15 113 134 165
+291 2 2 3 15 20 144 148
+292 2 2 3 15 29 145 147
+293 2 2 3 15 115 130 122
+294 2 2 3 15 82 131 123
+295 2 2 3 15 81 123 135
+296 2 2 3 15 114 122 134
+297 2 2 2 17 77 215 222
+298 2 2 2 17 70 221 220
+299 2 2 2 17 72 209 251
+300 2 2 2 17 68 252 213
+301 2 2 2 17 22 226 270
+302 2 2 2 17 31 227 271
+303 2 2 2 17 44 273 228
+304 2 2 2 17 40 225 272
+305 2 2 2 17 47 200 253
+306 2 2 2 17 195 201 256
+307 2 2 2 17 195 256 202
+308 2 2 2 17 192 202 254
+309 2 2 2 17 192 254 203
+310 2 2 2 17 193 255 205
+311 2 2 2 17 194 205 257
+312 2 2 2 17 194 257 206
+313 2 2 2 17 193 204 255
+314 2 2 2 17 191 207 253
+315 2 2 2 17 191 253 200
+316 2 2 2 17 188 249 208
+317 2 2 2 17 190 251 209
+318 2 2 2 17 190 210 251
+319 2 2 2 17 187 250 211
+320 2 2 2 17 189 213 252
+321 2 2 2 17 189 252 212
+322 2 2 2 17 72 303 209
+323 2 2 2 17 188 203 249
+324 2 2 2 17 187 206 250
+325 2 2 2 17 76 215 77
+326 2 2 2 17 68 213 304
+327 2 2 2 17 69 304 70
+328 2 2 2 17 21 22 270
+329 2 2 2 17 30 31 271
+330 2 2 2 17 44 45 273
+331 2 2 2 17 39 40 272
+332 2 2 2 17 303 71 70
+333 2 2 2 17 47 312 200
+334 2 2 2 17 5 77 312
+335 2 2 2 17 304 221 70
+336 2 2 2 17 174 194 206
+337 2 2 2 17 175 192 203
+338 2 2 2 17 220 303 70
+339 2 2 2 17 312 77 222
+340 2 2 2 17 175 223 192
+341 2 2 2 17 174 224 194
+342 2 2 2 17 182 233 234
+343 2 2 2 17 76 295 215
+344 2 2 2 17 176 213 189
+345 2 2 2 17 177 190 209
+346 2 2 2 17 12 241 197
+347 2 2 2 17 36 196 240
+348 2 2 2 17 27 198 242
+349 2 2 2 17 18 199 243
+350 2 2 2 17 181 232 235
+351 2 2 2 17 174 206 187
+352 2 2 2 17 175 203 188
+353 2 2 2 17 179 192 223
+354 2 2 2 17 180 194 224
+355 2 2 2 17 214 215 295
+356 2 2 2 17 179 223 276
+357 2 2 2 17 180 224 274
+358 2 2 2 17 179 229 195
+359 2 2 2 17 180 230 193
+360 2 2 2 17 178 231 191
+361 2 2 2 17 36 262 196
+362 2 2 2 17 12 197 263
+363 2 2 2 17 27 264 198
+364 2 2 2 17 18 265 199
+365 2 2 2 17 179 195 202
+366 2 2 2 17 179 202 192
+367 2 2 2 17 180 193 205
+368 2 2 2 17 180 205 194
+369 2 2 2 17 178 191 200
+370 2 2 2 17 214 295 260
+371 2 2 2 17 212 252 309
+372 2 2 2 17 210 308 251
+373 2 2 2 17 208 249 311
+374 2 2 2 17 211 250 310
+375 2 2 2 17 201 318 256
+376 2 2 2 17 202 256 319
+377 2 2 2 17 202 319 254
+378 2 2 2 17 205 255 321
+379 2 2 2 17 205 321 257
+380 2 2 2 17 207 324 253
+381 2 2 2 17 203 254 320
+382 2 2 2 17 206 257 323
+383 2 2 2 17 204 322 255
+384 2 2 2 17 168 225 279
+385 2 2 2 17 166 226 277
+386 2 2 2 17 167 227 278
+387 2 2 2 17 169 280 228
+388 2 2 2 17 14 235 232
+389 2 2 2 17 176 279 225
+390 2 2 2 17 174 277 226
+391 2 2 2 17 175 278 227
+392 2 2 2 17 177 228 280
+393 2 2 2 17 203 320 249
+394 2 2 2 17 206 323 250
+395 2 2 2 17 210 260 308
+396 2 2 2 17 212 309 259
+397 2 2 2 17 211 310 261
+398 2 2 2 17 208 311 258
+399 2 2 2 17 38 39 219
+400 2 2 2 17 29 30 217
+401 2 2 2 17 20 21 216
+402 2 2 2 17 45 46 218
+403 2 2 2 17 201 259 318
+404 2 2 2 17 204 258 322
+405 2 2 2 17 207 261 324
+406 2 2 2 17 71 303 72
+407 2 2 2 17 186 261 207
+408 2 2 2 17 185 259 201
+409 2 2 2 17 184 258 204
+410 2 2 2 17 183 260 210
+411 2 2 2 17 186 211 261
+412 2 2 2 17 185 212 259
+413 2 2 2 17 184 208 258
+414 2 2 2 17 183 214 260
+415 2 2 2 17 5 312 47
+416 2 2 2 17 33 276 223
+417 2 2 2 17 24 274 224
+418 2 2 2 17 68 304 69
+419 2 2 2 17 174 266 224
+420 2 2 2 17 175 267 223
+421 2 2 2 17 23 24 224
+422 2 2 2 17 32 33 223
+423 2 2 2 17 173 239 305
+424 2 2 2 17 172 236 306
+425 2 2 2 17 171 237 307
+426 2 2 2 17 176 189 279
+427 2 2 2 17 174 187 277
+428 2 2 2 17 175 188 278
+429 2 2 2 17 177 280 190
+430 2 2 2 17 23 224 266
+431 2 2 2 17 32 223 267
+432 2 2 2 17 170 241 232
+433 2 2 2 17 222 281 312
+434 2 2 2 17 42 234 233
+435 2 2 2 17 170 313 238
+436 2 2 2 17 181 244 232
+437 2 2 2 17 186 305 239
+438 2 2 2 17 184 307 237
+439 2 2 2 17 185 306 236
+440 2 2 2 17 168 279 247
+441 2 2 2 17 166 277 245
+442 2 2 2 17 167 278 246
+443 2 2 2 17 169 248 280
+444 2 2 2 17 21 270 216
+445 2 2 2 17 30 271 217
+446 2 2 2 17 39 272 219
+447 2 2 2 17 45 218 273
+448 2 2 2 17 176 225 269
+449 2 2 2 17 174 226 266
+450 2 2 2 17 175 227 267
+451 2 2 2 17 177 268 228
+452 2 2 2 17 170 232 244
+453 2 2 2 17 13 232 241
+454 2 2 2 17 173 231 296
+455 2 2 2 17 171 230 297
+456 2 2 2 17 172 229 298
+457 2 2 2 17 168 272 225
+458 2 2 2 17 166 270 226
+459 2 2 2 17 167 271 227
+460 2 2 2 17 169 228 273
+461 2 2 2 17 196 262 291
+462 2 2 2 17 197 292 263
+463 2 2 2 17 198 264 293
+464 2 2 2 17 199 265 294
+465 2 2 2 17 13 14 232
+466 2 2 2 17 281 200 312
+467 2 2 2 17 183 238 313
+468 2 2 2 17 195 229 288
+469 2 2 2 17 193 230 290
+470 2 2 2 17 191 231 289
+471 2 2 2 17 38 219 302
+472 2 2 2 17 46 300 218
+473 2 2 2 17 29 217 301
+474 2 2 2 17 20 216 299
+475 2 2 2 17 14 15 235
+476 2 2 2 17 12 13 241
+477 2 2 2 17 17 18 243
+478 2 2 2 17 26 27 242
+479 2 2 2 17 35 36 240
+480 2 2 2 17 178 235 275
+481 2 2 2 17 217 293 264
+482 2 2 2 17 216 294 265
+483 2 2 2 17 219 291 262
+484 2 2 2 17 218 263 292
+485 2 2 2 17 221 304 283
+486 2 2 2 17 220 282 303
+487 2 2 2 17 65 318 259
+488 2 2 2 17 49 324 261
+489 2 2 2 17 57 322 258
+490 2 2 2 17 229 276 298
+491 2 2 2 17 230 274 297
+492 2 2 2 17 231 275 296
+493 2 2 2 17 66 259 309
+494 2 2 2 17 74 308 260
+495 2 2 2 17 58 258 311
+496 2 2 2 17 50 261 310
+497 2 2 2 17 75 260 295
+498 2 2 2 17 181 222 215
+499 2 2 2 17 173 296 243
+500 2 2 2 17 171 297 242
+501 2 2 2 17 172 298 240
+502 2 2 2 17 185 284 212
+503 2 2 2 17 184 286 208
+504 2 2 2 17 183 210 285
+505 2 2 2 17 186 287 211
+506 2 2 2 17 283 304 213
+507 2 2 2 17 282 209 303
+508 2 2 2 17 314 170 238
+509 2 2 2 17 173 317 239
+510 2 2 2 17 172 315 236
+511 2 2 2 17 171 316 237
+512 2 2 2 17 36 37 262
+513 2 2 2 17 11 12 263
+514 2 2 2 17 27 28 264
+515 2 2 2 17 18 19 265
+516 2 2 2 17 52 250 323
+517 2 2 2 17 60 249 320
+518 2 2 2 17 65 259 66
+519 2 2 2 17 74 260 75
+520 2 2 2 17 57 258 58
+521 2 2 2 17 49 261 50
+522 2 2 2 17 40 269 225
+523 2 2 2 17 31 267 227
+524 2 2 2 17 22 266 226
+525 2 2 2 17 44 228 268
+526 2 2 2 17 67 309 252
+527 2 2 2 17 73 251 308
+528 2 2 2 17 51 310 250
+529 2 2 2 17 59 311 249
+530 2 2 2 17 176 269 233
+531 2 2 2 17 177 234 268
+532 2 2 2 17 63 319 256
+533 2 2 2 17 64 256 318
+534 2 2 2 17 62 254 319
+535 2 2 2 17 61 320 254
+536 2 2 2 17 55 321 255
+537 2 2 2 17 54 257 321
+538 2 2 2 17 56 255 322
+539 2 2 2 17 53 323 257
+540 2 2 2 17 48 253 324
+541 2 2 2 17 182 283 233
+542 2 2 2 17 182 234 282
+543 2 2 2 17 172 288 229
+544 2 2 2 17 171 290 230
+545 2 2 2 17 173 289 231
+546 2 2 2 17 182 220 221
+547 2 2 2 17 176 233 283
+548 2 2 2 17 177 282 234
+549 2 2 2 17 15 275 235
+550 2 2 2 17 42 43 234
+551 2 2 2 17 41 42 233
+552 2 2 2 17 187 211 245
+553 2 2 2 17 188 208 246
+554 2 2 2 17 189 212 247
+555 2 2 2 17 190 248 210
+556 2 2 2 17 34 298 276
+557 2 2 2 17 25 297 274
+558 2 2 2 17 16 296 275
+559 2 2 2 17 166 294 270
+560 2 2 2 17 167 293 271
+561 2 2 2 17 168 291 272
+562 2 2 2 17 169 273 292
+563 2 2 2 17 51 250 52
+564 2 2 2 17 59 249 60
+565 2 2 2 17 72 251 73
+566 2 2 2 17 67 252 68
+567 2 2 2 17 177 209 282
+568 2 2 2 17 176 283 213
+569 2 2 2 17 40 41 269
+570 2 2 2 17 31 32 267
+571 2 2 2 17 22 23 266
+572 2 2 2 17 43 44 268
+573 2 2 2 17 219 262 302
+574 2 2 2 17 218 300 263
+575 2 2 2 17 217 264 301
+576 2 2 2 17 216 265 299
+577 2 2 2 17 212 284 247
+578 2 2 2 17 208 286 246
+579 2 2 2 17 211 287 245
+580 2 2 2 17 210 248 285
+581 2 2 2 17 214 244 215
+582 2 2 2 17 178 200 281
+583 2 2 2 17 186 207 305
+584 2 2 2 17 185 201 306
+585 2 2 2 17 184 204 307
+586 2 2 2 17 47 253 48
+587 2 2 2 17 61 254 62
+588 2 2 2 17 63 256 64
+589 2 2 2 17 55 255 56
+590 2 2 2 17 53 257 54
+591 2 2 2 17 179 276 229
+592 2 2 2 17 180 274 230
+593 2 2 2 17 178 275 231
+594 2 2 2 17 15 16 275
+595 2 2 2 17 33 34 276
+596 2 2 2 17 24 25 274
+597 2 2 2 17 181 235 281
+598 2 2 2 17 185 236 284
+599 2 2 2 17 184 237 286
+600 2 2 2 17 183 285 238
+601 2 2 2 17 186 239 287
+602 2 2 2 17 183 313 214
+603 2 2 2 17 178 281 235
+604 2 2 2 17 216 270 294
+605 2 2 2 17 217 271 293
+606 2 2 2 17 218 292 273
+607 2 2 2 17 219 272 291
+608 2 2 2 17 34 35 298
+609 2 2 2 17 16 17 296
+610 2 2 2 17 25 26 297
+611 2 2 2 17 181 215 244
+612 2 2 2 17 181 281 222
+613 2 2 2 17 41 233 269
+614 2 2 2 17 43 268 234
+615 2 2 2 17 1 299 19
+616 2 2 2 17 1 20 299
+617 2 2 2 17 4 301 28
+618 2 2 2 17 2 11 300
+619 2 2 2 17 4 29 301
+620 2 2 2 17 2 300 46
+621 2 2 2 17 3 38 302
+622 2 2 2 17 3 302 37
+623 2 2 2 17 214 313 244
+624 2 2 2 17 168 284 236
+625 2 2 2 17 167 286 237
+626 2 2 2 17 166 287 239
+627 2 2 2 17 169 238 285
+628 2 2 2 17 191 289 207
+629 2 2 2 17 195 288 201
+630 2 2 2 17 193 290 204
+631 2 2 2 17 172 240 315
+632 2 2 2 17 170 314 241
+633 2 2 2 17 171 242 316
+634 2 2 2 17 173 243 317
+635 2 2 2 17 182 221 283
+636 2 2 2 17 75 295 76
+637 2 2 2 17 182 282 220
+638 2 2 2 17 66 309 67
+639 2 2 2 17 73 308 74
+640 2 2 2 17 50 310 51
+641 2 2 2 17 58 311 59
+642 2 2 2 17 62 319 63
+643 2 2 2 17 64 318 65
+644 2 2 2 17 48 324 49
+645 2 2 2 17 54 321 55
+646 2 2 2 17 60 320 61
+647 2 2 2 17 52 323 53
+648 2 2 2 17 56 322 57
+649 2 2 2 17 187 245 277
+650 2 2 2 17 188 246 278
+651 2 2 2 17 189 247 279
+652 2 2 2 17 190 280 248
+653 2 2 2 17 168 236 291
+654 2 2 2 17 169 292 238
+655 2 2 2 17 167 237 293
+656 2 2 2 17 166 239 294
+657 2 2 2 17 196 315 240
+658 2 2 2 17 197 241 314
+659 2 2 2 17 198 316 242
+660 2 2 2 17 199 317 243
+661 2 2 2 17 170 244 313
+662 2 2 2 17 196 291 236
+663 2 2 2 17 197 238 292
+664 2 2 2 17 198 293 237
+665 2 2 2 17 199 294 239
+666 2 2 2 17 197 314 238
+667 2 2 2 17 196 236 315
+668 2 2 2 17 198 237 316
+669 2 2 2 17 199 239 317
+670 2 2 2 17 166 245 287
+671 2 2 2 17 167 246 286
+672 2 2 2 17 168 247 284
+673 2 2 2 17 169 285 248
+674 2 2 2 17 17 243 296
+675 2 2 2 17 35 240 298
+676 2 2 2 17 26 242 297
+677 2 2 2 17 11 263 300
+678 2 2 2 17 19 299 265
+679 2 2 2 17 28 301 264
+680 2 2 2 17 37 302 262
+681 2 2 2 17 207 289 305
+682 2 2 2 17 201 288 306
+683 2 2 2 17 204 290 307
+684 2 2 2 17 173 305 289
+685 2 2 2 17 171 307 290
+686 2 2 2 17 172 306 288
+687 2 2 1 18 326 340 350
+688 2 2 1 18 77 362 373
+689 2 2 1 18 330 349 339
+690 2 2 1 18 51 348 352
+691 2 2 1 18 340 341 396
+692 2 2 1 18 57 359 344
+693 2 2 1 18 67 357 345
+694 2 2 1 18 61 346 355
+695 2 2 1 18 10 350 340
+696 2 2 1 18 66 345 358
+697 2 2 1 18 56 344 360
+698 2 2 1 18 62 356 346
+699 2 2 1 18 52 353 348
+700 2 2 1 18 56 57 344
+701 2 2 1 18 66 67 345
+702 2 2 1 18 61 62 346
+703 2 2 1 18 340 398 341
+704 2 2 1 18 68 375 357
+705 2 2 1 18 65 358 376
+706 2 2 1 18 51 52 348
+707 2 2 1 18 58 377 359
+708 2 2 1 18 55 360 374
+709 2 2 1 18 331 351 337
+710 2 2 1 18 71 349 354
+711 2 2 1 18 331 337 364
+712 2 2 1 18 329 393 368
+713 2 2 1 18 329 368 381
+714 2 2 1 18 350 387 372
+715 2 2 1 18 68 69 375
+716 2 2 1 18 64 65 376
+717 2 2 1 18 58 59 377
+718 2 2 1 18 329 367 393
+719 2 2 1 18 54 55 374
+720 2 2 1 18 329 380 367
+721 2 2 1 18 5 362 77
+722 2 2 1 18 327 378 369
+723 2 2 1 18 325 387 350
+724 2 2 1 18 327 369 398
+725 2 2 1 18 10 340 396
+726 2 2 1 18 331 339 361
+727 2 2 1 18 327 366 379
+728 2 2 1 18 50 51 352
+729 2 2 1 18 47 388 362
+730 2 2 1 18 10 370 350
+731 2 2 1 18 337 373 362
+732 2 2 1 18 331 364 365
+733 2 2 1 18 52 53 353
+734 2 2 1 18 71 72 349
+735 2 2 1 18 60 61 355
+736 2 2 1 18 327 398 366
+737 2 2 1 18 62 63 356
+738 2 2 1 18 67 68 357
+739 2 2 1 18 70 71 354
+740 2 2 1 18 65 66 358
+741 2 2 1 18 57 58 359
+742 2 2 1 18 55 56 360
+743 2 2 1 18 337 392 364
+744 2 2 1 18 342 368 393
+745 2 2 1 18 341 398 369
+746 2 2 1 18 338 365 364
+747 2 2 1 18 5 47 362
+748 2 2 1 18 343 393 367
+749 2 2 1 18 326 366 340
+750 2 2 1 18 331 365 339
+751 2 2 1 18 75 351 361
+752 2 2 1 18 330 339 365
+753 2 2 1 18 347 362 388
+754 2 2 1 18 347 363 387
+755 2 2 1 18 74 75 361
+756 2 2 1 18 387 363 336
+757 2 2 1 18 330 383 349
+758 2 2 1 18 10 395 370
+759 2 2 1 18 326 350 372
+760 2 2 1 18 75 76 351
+761 2 2 1 18 337 351 373
+762 2 2 1 18 338 370 395
+763 2 2 1 18 325 364 392
+764 2 2 1 18 340 366 398
+765 2 2 1 18 325 350 370
+766 2 2 1 18 72 371 349
+767 2 2 1 18 339 349 371
+768 2 2 1 18 53 374 353
+769 2 2 1 18 60 355 377
+770 2 2 1 18 63 376 356
+771 2 2 1 18 70 354 375
+772 2 2 1 18 59 60 377
+773 2 2 1 18 53 54 374
+774 2 2 1 18 63 64 376
+775 2 2 1 18 69 70 375
+776 2 2 1 18 331 361 351
+777 2 2 1 18 327 344 378
+778 2 2 1 18 327 379 344
+779 2 2 1 18 329 345 380
+780 2 2 1 18 329 381 345
+781 2 2 1 18 348 385 391
+782 2 2 1 18 328 346 384
+783 2 2 1 18 328 386 346
+784 2 2 1 18 347 388 363
+785 2 2 1 18 335 374 360
+786 2 2 1 18 333 357 375
+787 2 2 1 18 334 376 358
+788 2 2 1 18 332 359 377
+789 2 2 1 18 326 391 385
+790 2 2 1 18 334 381 368
+791 2 2 1 18 333 367 380
+792 2 2 1 18 332 369 378
+793 2 2 1 18 335 379 366
+794 2 2 1 18 338 389 365
+795 2 2 1 18 48 49 363
+796 2 2 1 18 336 352 391
+797 2 2 1 18 345 357 380
+798 2 2 1 18 345 381 358
+799 2 2 1 18 344 359 378
+800 2 2 1 18 76 373 351
+801 2 2 1 18 344 379 360
+802 2 2 1 18 349 383 354
+803 2 2 1 18 336 391 372
+804 2 2 1 18 336 390 352
+805 2 2 1 18 348 353 385
+806 2 2 1 18 50 352 390
+807 2 2 1 18 330 365 389
+808 2 2 1 18 346 386 355
+809 2 2 1 18 346 356 384
+810 2 2 1 18 72 73 371
+811 2 2 1 18 76 77 373
+812 2 2 1 18 73 74 382
+813 2 2 1 18 74 361 382
+814 2 2 1 18 325 370 364
+815 2 2 1 18 49 50 390
+816 2 2 1 18 335 353 374
+817 2 2 1 18 333 375 354
+818 2 2 1 18 334 356 376
+819 2 2 1 18 332 377 355
+820 2 2 1 18 336 372 387
+821 2 2 1 18 336 363 390
+822 2 2 1 18 330 389 367
+823 2 2 1 18 333 354 383
+824 2 2 1 18 334 384 356
+825 2 2 1 18 332 355 386
+826 2 2 1 18 347 387 392
+827 2 2 1 18 343 367 389
+828 2 2 1 18 335 385 353
+829 2 2 1 18 332 378 359
+830 2 2 1 18 333 380 357
+831 2 2 1 18 334 358 381
+832 2 2 1 18 335 360 379
+833 2 2 1 18 339 382 361
+834 2 2 1 18 47 48 388
+835 2 2 1 18 348 391 352
+836 2 2 1 18 48 363 388
+837 2 2 1 18 338 364 370
+838 2 2 1 18 325 392 387
+839 2 2 1 18 328 397 369
+840 2 2 1 18 328 368 397
+841 2 2 1 18 342 397 368
+842 2 2 1 18 341 369 397
+843 2 2 1 18 333 383 367
+844 2 2 1 18 334 368 384
+845 2 2 1 18 332 386 369
+846 2 2 1 18 335 366 385
+847 2 2 1 18 347 392 362
+848 2 2 1 18 49 390 363
+849 2 2 1 18 326 372 391
+850 2 2 1 18 337 362 392
+851 2 2 1 18 326 385 366
+852 2 2 1 18 330 367 383
+853 2 2 1 18 328 384 368
+854 2 2 1 18 328 369 386
+855 2 2 1 18 73 382 371
+856 2 2 1 18 339 371 382
+857 2 2 1 18 338 395 389
+858 2 2 1 18 342 396 397
+859 2 2 1 18 341 397 396
+860 2 2 1 18 343 389 395
+861 2 2 1 18 10 396 394
+862 2 2 1 18 343 394 393
+863 2 2 1 18 342 394 396
+864 2 2 1 18 342 393 394
+865 2 2 1 18 10 394 395
+866 2 2 1 18 343 395 394
+$EndElements
Index: mesh/DD_simple.msh
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- mesh/DD_simple.msh	(date 1595931395917)
+++ mesh/DD_simple.msh	(date 1595931395917)
@@ -0,0 +1,2390 @@
+$MeshFormat
+2.2 0 8
+$EndMeshFormat
+$Nodes
+749
+1 0 0 0
+2 0 1 0
+3 1 1 0
+4 1 0 0
+5 1.1 -0.1 -0
+6 -0.1 -0.1 -0
+7 1.1 1.1 -0
+8 -0.1 1.1 -0
+9 0.5 1 0
+10 0.5 0 0
+11 0 0.04999999999989965 0
+12 0 0.09999999999981467 0
+13 0 0.1499999999997036 0
+14 0 0.1999999999995579 0
+15 0 0.2499999999994121 0
+16 0 0.2999999999992664 0
+17 0 0.3499999999991206 0
+18 0 0.3999999999989749 0
+19 0 0.4499999999988292 0
+20 0 0.4999999999986943 0
+21 0 0.5499999999988151 0
+22 0 0.5999999999989468 0
+23 0 0.6499999999990784 0
+24 0 0.69999999999921 0
+25 0 0.7499999999993417 0
+26 0 0.7999999999994734 0
+27 0 0.8499999999996051 0
+28 0 0.8999999999997368 0
+29 0 0.9499999999998684 0
+30 0.04999999999990733 1 0
+31 0.09999999999977893 1 0
+32 0.1499999999996332 1 0
+33 0.1999999999994874 1 0
+34 0.2499999999993471 1 0
+35 0.2999999999994734 1 0
+36 0.349999999999605 1 0
+37 0.3999999999997367 1 0
+38 0.4499999999998684 1 0
+39 0.5499999999999999 1 0
+40 0.5999999999999998 1 0
+41 0.6499999999999998 1 0
+42 0.6999999999999998 1 0
+43 0.7499999999999999 1 0
+44 0.7999999999999998 1 0
+45 0.8499999999999999 1 0
+46 0.8999999999999999 1 0
+47 0.95 1 0
+48 1 0.9499999999997918 0
+49 1 0.8999999999995836 0
+50 1 0.8499999999996529 0
+51 1 0.7999999999999998 0
+52 1 0.7500000000003466 0
+53 1 0.7000000000006934 0
+54 1 0.6500000000010401 0
+55 1 0.6000000000013869 0
+56 1 0.5500000000017335 0
+57 1 0.5000000000020587 0
+58 1 0.4500000000018723 0
+59 1 0.4000000000016644 0
+60 1 0.3500000000014564 0
+61 1 0.3000000000012483 0
+62 1 0.2500000000010403 0
+63 1 0.2000000000008322 0
+64 1 0.1500000000006241 0
+65 1 0.100000000000416 0
+66 1 0.05000000000020799 0
+67 0.9500000000000001 0 0
+68 0.9000000000000002 0 0
+69 0.8500000000000002 0 0
+70 0.8000000000000002 0 0
+71 0.7500000000000001 0 0
+72 0.7000000000000002 0 0
+73 0.6500000000000001 0 0
+74 0.6000000000000001 0 0
+75 0.55 0 0
+76 0.4499999999997918 0 0
+77 0.3999999999999999 0 0
+78 0.3500000000003467 0 0
+79 0.3000000000006934 0 0
+80 0.2500000000010293 0 0
+81 0.2000000000008322 0 0
+82 0.1500000000006241 0 0
+83 0.1000000000004161 0 0
+84 0.05000000000020799 0 0
+85 -0.1 1.05000000000004 0
+86 -0.1 1.000000000000079 0
+87 -0.1 0.9500000000001624 0
+88 -0.1 0.9000000000003032 0
+89 -0.1 0.850000000000444 0
+90 -0.1 0.8000000000005848 0
+91 -0.1 0.7500000000007256 0
+92 -0.1 0.7000000000008665 0
+93 -0.1 0.6500000000010508 0
+94 -0.1 0.6000000000012352 0
+95 -0.1 0.5500000000014196 0
+96 -0.1 0.500000000001539 0
+97 -0.1 0.4500000000014195 0
+98 -0.1 0.4000000000013 0
+99 -0.1 0.3500000000011588 0
+100 -0.1 0.3000000000010178 0
+101 -0.1 0.2500000000008986 0
+102 -0.1 0.2000000000007579 0
+103 -0.1 0.1500000000006174 0
+104 -0.1 0.1000000000005272 0
+105 -0.1 0.05000000000040083 0
+106 -0.1 2.671196597248127e-13 0
+107 -0.1 -0.0499999999998666 0
+108 -0.0500000000000906 -0.1 0
+109 -1.730560139634463e-13 -0.1 0
+110 0.04999999999975802 -0.1 0
+111 0.09999999999961506 -0.1 0
+112 0.1499999999994613 -0.1 0
+113 0.199999999999302 -0.1 0
+114 0.2499999999991446 -0.1 0
+115 0.2999999999990088 -0.1 0
+116 0.3499999999988296 -0.1 0
+117 0.3999999999986936 -0.1 0
+118 0.4499999999985143 -0.1 0
+119 0.4999999999984002 -0.1 0
+120 0.5499999999985247 -0.1 0
+121 0.5999999999986493 -0.1 0
+122 0.6499999999987955 -0.1 0
+123 0.6999999999989417 -0.1 0
+124 0.7499999999990659 -0.1 0
+125 0.7999999999992116 -0.1 0
+126 0.8499999999993573 -0.1 0
+127 0.8999999999994526 -0.1 0
+128 0.949999999999584 -0.1 0
+129 0.9999999999997226 -0.1 0
+130 1.049999999999861 -0.1 0
+131 1.1 -0.0500000000000906 0
+132 1.1 -1.730560139634463e-13 0
+133 1.1 0.04999999999975802 0
+134 1.1 0.09999999999961506 0
+135 1.1 0.1499999999994613 0
+136 1.1 0.199999999999302 0
+137 1.1 0.2499999999991446 0
+138 1.1 0.2999999999990088 0
+139 1.1 0.3499999999988296 0
+140 1.1 0.3999999999986936 0
+141 1.1 0.4499999999985143 0
+142 1.1 0.4999999999984002 0
+143 1.1 0.5499999999985247 0
+144 1.1 0.5999999999986493 0
+145 1.1 0.6499999999987955 0
+146 1.1 0.6999999999989417 0
+147 1.1 0.7499999999990659 0
+148 1.1 0.7999999999992116 0
+149 1.1 0.8499999999993573 0
+150 1.1 0.8999999999994526 0
+151 1.1 0.949999999999584 0
+152 1.1 0.9999999999997226 0
+153 1.1 1.049999999999861 0
+154 1.05000000000004 1.1 0
+155 1.000000000000079 1.1 0
+156 0.9500000000001624 1.1 0
+157 0.9000000000003032 1.1 0
+158 0.850000000000444 1.1 0
+159 0.8000000000005848 1.1 0
+160 0.7500000000007256 1.1 0
+161 0.7000000000008665 1.1 0
+162 0.6500000000010508 1.1 0
+163 0.6000000000012352 1.1 0
+164 0.5500000000014196 1.1 0
+165 0.500000000001539 1.1 0
+166 0.4500000000014195 1.1 0
+167 0.4000000000013 1.1 0
+168 0.3500000000011588 1.1 0
+169 0.3000000000010178 1.1 0
+170 0.2500000000008986 1.1 0
+171 0.2000000000007579 1.1 0
+172 0.1500000000006174 1.1 0
+173 0.1000000000005272 1.1 0
+174 0.05000000000040083 1.1 0
+175 2.671196597248127e-13 1.1 0
+176 -0.0499999999998666 1.1 0
+177 0.4693312973433616 0.9607394810010568 0
+178 0.4334578745565599 0.9260412419298869 0
+179 0.3975688119485261 0.8913588249229992 0
+180 0.3668416158791286 0.8521427568679426 0
+181 0.3489063004355797 0.805853091618691 0
+182 0.3488734306385872 0.7561843501144674 0
+183 0.3639162270550225 0.708738586603318 0
+184 0.3869494591516083 0.6644791706987609 0
+185 0.4133576694654411 0.6221257662813265 0
+186 0.4414932896004929 0.5808944202255235 0
+187 0.4705444832693557 0.5403012759126518 0
+188 0.499999999999145 0.5000000000011658 0
+189 0.5294555167291027 0.4596987240894718 0
+190 0.5585067103981642 0.419105579776388 0
+191 0.5866423305334253 0.3778742337203952 0
+192 0.6130505408474902 0.3355208293027874 0
+193 0.6360837729443576 0.2912614133980744 0
+194 0.6511265693612094 0.2438156498867733 0
+195 0.6510936995646145 0.1941469083823652 0
+196 0.6331583841212974 0.147857243132764 0
+197 0.6024311880518497 0.1086411750773971 0
+198 0.5665421254436502 0.07395875807030773 0
+199 0.5306687026567138 0.03926051899902296 0
+200 0.2927631972058812 0.2853624600547224 0
+201 0.2234463909435766 0.5043099294520063 0
+202 0.46595874597081 0.2334044245071712 0
+203 0.1883973309129055 0.6806762099050234 0
+204 0.1683654124091412 0.1673755135068842 0
+205 0.1663083186021391 0.8380398907731047 0
+206 0.3617862908660521 0.4316616490330457 0
+207 0.1539786805487362 0.3622225782937497 0
+208 0.3342938271262237 0.1480845967118102 0
+209 0.1222404840974541 0.573919765157063 0
+210 0.4495988814698152 0.3501841504938509 0
+211 0.2790126621225014 0.6111248435871734 0
+212 0.4402624870938654 0.1284395233358044 0
+213 0.1113060785551305 0.2651617655876194 0
+214 0.1113161022124909 0.462234792177432 0
+215 0.2563502845137923 0.4014062769404728 0
+216 0.09862114604968304 0.7528689215989505 0
+217 0.2693137063102279 0.8988681971940422 0
+218 0.2450832141082803 0.7649548182535308 0
+219 0.3504515941198212 0.5335283774585723 0
+220 0.2453408696417696 0.1029462939795795 0
+221 0.09637684637009455 0.09322005039926071 0
+222 0.08803049911048616 0.9114082546480016 0
+223 0.55904662796243 0.2128926624684151 0
+224 0.3880584690743146 0.2864296955291434 0
+225 0.2609454741136795 0.2094314431644283 0
+226 0.09354970168991941 0.6576897261089282 0
+227 0.2034732709450299 0.288750420027563 0
+228 0.5362310084510226 0.2981369794729498 0
+229 0.08315035432302451 0.1829539586491593 0
+230 0.4491167755600385 0.4365957531425946 0
+231 0.5236541733808301 0.144422222379725 0
+232 0.2813728768165392 0.6942256555378006 0
+233 0.1912310940592985 0.5996350503850539 0
+234 0.3749317626593949 0.07721520736974226 0
+235 0.1798268638836957 0.9195092975986232 0
+236 0.07883678361257206 0.3350515278779723 0
+237 0.3405252630584808 0.3534651077415821 0
+238 0.2963571230187773 0.4758129325049472 0
+239 0.1834242340857434 0.4388443255375524 0
+240 0.3932962924292855 0.2134248291445068 0
+241 0.1734609787554858 0.07437284529018257 0
+242 0.07412353987879833 0.8288158346075798 0
+243 0.3338407986448184 0.9281900034574109 0
+244 0.06809723626363223 0.5249875251366236 0
+245 0.4056915957513774 0.4977541025383963 0
+246 0.2836646840744699 0.8265518215700368 0
+247 0.07884061333368086 0.4050692580516548 0
+248 0.1769018384100224 0.7564901791028109 0
+249 0.3159329877442415 0.2247619621726857 0
+250 0.3053211713424362 0.06690270973953572 0
+251 0.347317097470856 0.6028019763216744 0
+252 0.2784320324672528 0.5441486709262918 0
+253 0.1558754930244934 0.5105657827553296 0
+254 0.2334324368311607 0.3417445409037682 0
+255 0.5190614407450671 0.3588253881926931 0
+256 0.0641872258468721 0.6036619740753491 0
+257 0.3979767916668442 0.3701393380987671 0
+258 0.06067380061988854 0.7164722301502144 0
+259 0.1578972424763748 0.2273841374736286 0
+260 0.4432208273783099 0.2919671095435152 0
+261 0.4691544274647523 0.06379481960718017 0
+262 0.2387901015925687 0.6549697325047502 0
+263 0.1465130340609557 0.6318851019072826 0
+264 0.2251311644847246 0.9471995159569081 0
+265 0.4443750091155725 0.171235752719292 0
+266 0.05682112937140531 0.2338483644386708 0
+267 0.5835340141609309 0.2726801575590173 0
+268 0.0557774238936115 0.05932617582307448 0
+269 0.5778307089646861 0.1644881852736208 0
+270 0.3323781165162458 0.6592010797332605 0
+271 0.1291062660053443 0.7057438062724196 0
+272 0.1485022505266044 0.3083527303201545 0
+273 0.05763839174797823 0.9449718571123664 0
+274 0.3832609894696751 0.1325611031243555 0
+275 0.05320764551630688 0.7827660797308972 0
+276 0.2768809062746413 0.151107910153776 0
+277 0.2183328431403353 0.8477818663389317 0
+278 0.06125084538862761 0.1404183763919247 0
+279 0.3157488025734976 0.4009528536107743 0
+280 0.04232494831181356 0.4810054658521558 0
+281 0.2247608792156028 0.7036100754657114 0
+282 0.1198378472768448 0.8098489761220169 0
+283 0.2257618890227707 0.1586583056618325 0
+284 0.2249425132291304 0.05073999375100591 0
+285 0.2493961396672739 0.259925758192213 0
+286 0.1271540389218869 0.9493581491882053 0
+287 0.1275208588668646 0.4149853644762187 0
+288 0.1293411929784703 0.04711602603858288 0
+289 0.5158160942105723 0.2481233825570636 0
+290 0.5078576966819581 0.1966065477447905 0
+291 0.2394926085057157 0.4577674156292001 0
+292 0.2953402590534048 0.7445046872716755 0
+293 0.5004460270739786 0.4127550495695802 0
+294 0.04923959806771157 0.8741384956641181 0
+295 0.2073412474494305 0.3780287224233443 0
+296 0.5221495880646948 0.09196820259247496 0
+297 0.3136120794687272 0.8669897808173135 0
+298 0.3781779390429766 0.9464593874672383 0
+299 0.05527950767350673 0.2880414673367602 0
+300 0.2286173561525161 0.5551247196790345 0
+301 0.3820142110671062 0.5756609934456655 0
+302 0.148416188774898 0.1214941017513184 0
+303 0.285180418267349 0.9491373863604129 0
+304 0.2037074683010736 0.7940346248279906 0
+305 0.4172701830407574 0.0466396104038268 0
+306 0.3566768577702424 0.4846391901430556 0
+307 0.2845768219586431 0.352789930178954 0
+308 0.2043906730503311 0.2016531204038889 0
+309 0.4089058479622294 0.3294810922186527 0
+310 0.1432336948089996 0.889218627617965 0
+311 0.3400076117051732 0.3026514546449696 0
+312 0.6046744972446658 0.2273807749884694 0
+313 0.4179765990779469 0.2469895859254413 0
+314 0.1691135370033076 0.5623663237283861 0
+315 0.1230827865940694 0.1892824171403352 0
+316 0.04620913730557168 0.6743431122398815 0
+317 0.1893455772601923 0.3358197983937159 0
+318 0.2216474363508678 0.8934456626999501 0
+319 0.5658782255410014 0.343733065956473 0
+320 0.4504764383955679 0.4874191703442123 0
+321 0.1959166641631055 0.1183106297015479 0
+322 0.4030417809908635 0.4555851446241128 0
+323 0.046052646499833 0.3711535773770318 0
+324 0.3077124659604242 0.1845138174477924 0
+325 0.4782772955791251 0.1554399736333699 0
+326 0.4859966416184316 0.3237599036797283 0
+327 0.1099867435653496 0.1459092338915994 0
+328 0.3373411651023088 0.1012411489798519 0
+329 0.2702334590123302 0.03884960116233582 0
+330 0.3165348217868813 0.5726676072789696 0
+331 0.04085604419804648 0.5609192121677753 0
+332 0.1130505657897749 0.5297971640313973 0
+333 0.04024446581661149 0.1814441398958032 0
+334 0.3611896230300825 0.2473777377346688 0
+335 0.2978516907704239 0.7905999525174416 0
+336 0.3443358670210996 0.04446154397913196 0
+337 0.1057583270159524 0.3702680191625456 0
+338 0.1067955829574966 0.8585783465721308 0
+339 0.5585215567811422 0.1166957086787051 0
+340 0.1880735761689603 0.4830916336665165 0
+341 0.4227922426695443 0.5415010849928297 0
+342 0.2853970188795394 0.4337472111029329 0
+343 0.10767206690032 0.6110180844582476 0
+344 0.4261934221885006 0.9666480220796365 0
+345 0.4484211179103569 0.3945520795510769 0
+346 0.1760160096126498 0.9638548878419197 0
+347 0.3215717828789361 0.7119542742816651 0
+348 0.293191955947303 0.1076486462321275 0
+349 0.3568923182430171 0.1892365938551072 0
+350 0.3540185087133217 0.8939720663577773 0
+351 0.3106099581089155 0.5190721179902855 0
+352 0.2500919250308485 0.811688233038856 0
+353 0.2643394594476152 0.5057265642510204 0
+354 0.104025358827868 0.3060565509868995 0
+355 0.2353470692041695 0.604378447039619 0
+356 0.2885152989299561 0.6515576471324295 0
+357 0.09963012150880161 0.2228287367206203 0
+358 0.2204966194673155 0.4222568431876691 0
+359 0.03603378755718235 0.3288493145180302 0
+360 0.1750000000007282 0.03300054397403495 0
+361 0.1909396673082591 0.6404804199187448 0
+362 0.03415328992569765 0.8260939193876999 0
+363 0.4141921640363005 0.08992909857562885 0
+364 0.03821783914341566 0.4304617482268974 0
+365 0.15096858580552 0.7824421474559469 0
+366 0.4866606649572696 0.4587260254134083 0
+367 0.04075345419300327 0.09531099168495695 0
+368 0.3595189204266089 0.389892819912971 0
+369 0.2881171153297016 0.2507049951690958 0
+370 0.1493118364431802 0.4638597067130747 0
+371 0.3294398311908445 0.9647573554570124 0
+372 0.2089833472296891 0.2454162022126707 0
+373 0.2591837096656359 0.3051965556469873 0
+374 0.3231932186216218 0.4453627672789511 0
+375 0.1929335790481392 0.5265326427488243 0
+376 0.04078921296847265 0.6371389624844368 0
+377 0.08526725322096669 0.5658073312073866 0
+378 0.1741164019193335 0.3993975734008359 0
+379 0.379899943620946 0.03446089015608773 0
+380 0.1637899212430505 0.2701160242823404 0
+381 0.4809440122308822 0.3716065927003636 0
+382 0.4872330966575619 0.2785411942564465 0
+383 0.6073613163046223 0.1868764966531801 0
+384 0.08656593424990482 0.7920720474729489 0
+385 0.5420973017474761 0.1796024044666379 0
+386 0.09063373598434428 0.9623769410319455 0
+387 0.3196021070030159 0.2621717219552285 0
+388 0.617745180932373 0.2582360728186072 0
+389 0.02945959309443278 0.5249999999987544 0
+390 0.3858636267385723 0.5280414641884461 0
+391 0.3738256886392427 0.3276294849430144 0
+392 0.1858698313572075 0.8775990690057149 0
+393 0.3206702565090872 0.8289597808031597 0
+394 0.3757636759853109 0.628094876344153 0
+395 0.1522989711833009 0.6720737584750196 0
+396 0.4057491263478629 0.4142089211747423 0
+397 0.3138961081899828 0.6210761916277625 0
+398 0.3050265823850997 0.90376647195174 0
+399 0.1368988017197372 0.08405075586983612 0
+400 0.4866995943166535 0.1168129483097109 0
+401 0.2128382188552393 0.744410855690621 0
+402 0.1521430344411266 0.596105212996115 0
+403 0.08575572386017062 0.03670717528130536 0
+404 0.1749626286822531 0.7151964538889162 0
+405 0.4318964814999576 0.2070110827210513 0
+406 0.03631665073488952 0.9167953954328592 0
+407 0.07834262631052027 0.4433665021913882 0
+408 0.2588388470204169 0.7311304187813447 0
+409 0.467228916303716 0.1926368468906622 0
+410 0.1404348961933571 0.7433702923108082 0
+411 0.09103250542727519 0.6993534668076955 0
+412 0.08786023158192149 0.4901281431589098 0
+413 0.03216301161155425 0.03216301161144425 0
+414 0.03133314351233468 0.9686668564875814 0
+415 0.2099152564473728 0.08659244068057896 0
+416 0.1198229930587497 0.3362992118244236 0
+417 0.2594437790625794 0.8575542602765216 0
+418 0.5474731798625319 0.3828110131773256 0
+419 0.03541709869764641 0.7503512052463478 0
+420 0.5525106334231968 0.253452853197807 0
+421 0.2683384681208871 0.5765987418007233 0
+422 0.5887601812947634 0.3083275790991751 0
+423 0.4025600419411871 0.173932110649931 0
+424 0.3075392491729582 0.3212920896929954 0
+425 0.1240388509398658 0.4927922907525952 0
+426 0.2678059938345939 0.0734174489729169 0
+427 0.7072368027941114 0.7146375399452698 0
+428 0.7765536090564166 0.4956900705479413 0
+429 0.5340412540291377 0.7665955754927544 0
+430 0.811602669087132 0.3193237900950953 0
+431 0.8316345875907715 0.832624486493156 0
+432 0.8336916813976694 0.1619601092268326 0
+433 0.6382137091341534 0.5683383509668801 0
+434 0.8460213194512989 0.6377774217062636 0
+435 0.6657061728736808 0.8519154032881451 0
+436 0.8777595159026641 0.4260802348430713 0
+437 0.5504011185302085 0.6498158495060762 0
+438 0.7209873378774326 0.3888751564127646 0
+439 0.5597375129060432 0.87156047666411 0
+440 0.8886939214448268 0.7348382344124 0
+441 0.8886838977876059 0.5377652078226174 0
+442 0.7436497154863821 0.5985937230593962 0
+443 0.9013788539503466 0.2471310784010838 0
+444 0.7306862936896401 0.1011318028058699 0
+445 0.7549167858914969 0.2350451817467929 0
+446 0.6495484058799894 0.4664716225413544 0
+447 0.7546591303581272 0.8970537060203857 0
+448 0.9036231536298995 0.9067799496007694 0
+449 0.9119695008894592 0.08859174535198655 0
+450 0.4409533720375809 0.7871073375319892 0
+451 0.6119415309256688 0.7135703044707818 0
+452 0.7390545258862722 0.7905685568355649 0
+453 0.9064502983101627 0.3423102738911995 0
+454 0.7965267290549649 0.7112495799723855 0
+455 0.4637689915486526 0.7018630205274923 0
+456 0.9168496456770553 0.817046041350839 0
+457 0.5508832244400058 0.5634042468574205 0
+458 0.4763458266191168 0.8555777776205167 0
+459 0.7186271231830443 0.3057743444622597 0
+460 0.8087689059407257 0.4003649496150987 0
+461 0.6250682373405063 0.9227847926303078 0
+462 0.8201731361160687 0.08049070240133653 0
+463 0.9211632163874264 0.6649484721220773 0
+464 0.6594747369415578 0.6465348922584679 0
+465 0.7036428769811646 0.5241870674947349 0
+466 0.8165757659142396 0.5611556744623323 0
+467 0.6067037075706496 0.7865751708554125 0
+468 0.826539021244439 0.9256271547099284 0
+469 0.9258764601212361 0.1711841653924112 0
+470 0.6661592013551564 0.07180999654243352 0
+471 0.9319027637365732 0.475012474863464 0
+472 0.5943084042487495 0.5022458974617579 0
+473 0.7163353159255359 0.1734481784300381 0
+474 0.9211593866663442 0.594930741948421 0
+475 0.8230981615898632 0.2435098208972582 0
+476 0.6840670122557136 0.7752380378272816 0
+477 0.6946788286575251 0.9330972902605033 0
+478 0.6526829025288298 0.3971980236780128 0
+479 0.7215679675327337 0.4558513290735459 0
+480 0.8441245069755636 0.4894342172447236 0
+481 0.7665675631688817 0.6582554590962288 0
+482 0.4809385592547478 0.641174611807998 0
+483 0.9358127741531941 0.3963380259247716 0
+484 0.6020232083332766 0.6298606619011829 0
+485 0.9393261993801163 0.2835277698497559 0
+486 0.8421027575235724 0.7726158625264041 0
+487 0.5567791726216464 0.7080328904563959 0
+488 0.5308455725351742 0.9362051803928323 0
+489 0.7612098984072568 0.3450302674951466 0
+490 0.8534869659391118 0.3681148980929038 0
+491 0.7748688355149478 0.052800484043021 0
+492 0.5556249908843676 0.8287642472805893 0
+493 0.9431788706286132 0.7661516355612548 0
+494 0.4164659858388511 0.727319842441462 0
+495 0.9442225761063689 0.9406738241769246 0
+496 0.4221692910354314 0.8355118147266473 0
+497 0.6676218834830592 0.3407989202667897 0
+498 0.8708937339948004 0.2942561937275844 0
+499 0.8514977494734044 0.6916472696798339 0
+500 0.9423616082519448 0.05502814288770305 0
+501 0.6167390105302276 0.8674388968755948 0
+502 0.9467923544837556 0.2172339202693421 0
+503 0.7231190937252554 0.8488920898462031 0
+504 0.7816671568594042 0.1522181336610478 0
+505 0.9387491546114092 0.8595816236079747 0
+506 0.6842511974266132 0.5990471463892262 0
+507 0.9576750516882594 0.518994534148185 0
+508 0.7752391207842624 0.2963899245344332 0
+509 0.880162152723116 0.1901510238778846 0
+510 0.7742381109771388 0.8413416943381901 0
+511 0.7750574867715767 0.9492600062488085 0
+512 0.7506038603327236 0.7400742418077718 0
+513 0.8728459610780476 0.05064185081177177 0
+514 0.872479141133195 0.5850146355237977 0
+515 0.8706588070217018 0.9528839739614693 0
+516 0.4841839057892884 0.7518766174431197 0
+517 0.492142303318119 0.8033934522554075 0
+518 0.7605073914942937 0.5422325843706345 0
+519 0.704659740946443 0.2554953127285222 0
+520 0.4995539729257476 0.5872449504312104 0
+521 0.9507604019322493 0.1258615043358763 0
+522 0.7926587525506026 0.621971277576706 0
+523 0.4778504119353422 0.9080317974076548 0
+524 0.6863879205313779 0.1330102191828187 0
+525 0.621822060957064 0.05354061253286543 0
+526 0.9447204923264891 0.7119585326632119 0
+527 0.7713826438475364 0.4448752803210015 0
+528 0.6179857889324291 0.4243390065550041 0
+529 0.8515838112250295 0.8785058982487689 0
+530 0.7148195817325548 0.05086261363940447 0
+531 0.7962925316986919 0.2059653751721562 0
+532 0.5827298169591703 0.9533603895962082 0
+533 0.6433231422297923 0.5153608098568984 0
+534 0.7154231780414126 0.647210069821039 0
+535 0.7956093269496251 0.7983468795961305 0
+536 0.591094152037792 0.6705189077812597 0
+537 0.8567663051908417 0.1107813723820262 0
+538 0.6599923882948262 0.6973485453550439 0
+539 0.3953255027552897 0.7726192250122564 0
+540 0.5820234009220109 0.7530104140744625 0
+541 0.8308864629968069 0.4376336762717183 0
+542 0.8769172134059039 0.8107175828596778 0
+543 0.9537908626944727 0.3256568877602707 0
+544 0.8106544227398307 0.6641802016062835 0
+545 0.7783525636488886 0.1065543372999709 0
+546 0.4341217744582695 0.6562669340447644 0
+547 0.5495235616039905 0.5125808296562691 0
+548 0.8040833358367762 0.881689370298433 0
+549 0.5969582190094065 0.5444148553757948 0
+550 0.9539473535001738 0.6288464226230825 0
+551 0.6922875340395008 0.8154861825521774 0
+552 0.5217227044208192 0.8445600263665878 0
+553 0.5140033583814427 0.6762400963203905 0
+554 0.8900132564345824 0.8540907661083682 0
+555 0.6626588348976055 0.898758851020145 0
+556 0.7297665409881198 0.9611503988376138 0
+557 0.6834651782129483 0.4273323927209211 0
+558 0.9591439558020467 0.439080787832609 0
+559 0.8869494342103587 0.4702028359687931 0
+560 0.9597555341834156 0.8185558601039443 0
+561 0.6388103769698833 0.7526222622652826 0
+562 0.702148309229454 0.20940004748307 0
+563 0.6556641329788034 0.9555384560208565 0
+564 0.8942416729840625 0.629731980837507 0
+565 0.8932044170424286 0.1414216534278362 0
+566 0.4414784432189953 0.883304291321541 0
+567 0.8119264238310238 0.5169083663334386 0
+568 0.5772077573310529 0.4584989150075087 0
+569 0.7146029811204772 0.5662527888968809 0
+570 0.8923279330997715 0.3889819155418951 0
+571 0.5738065778114856 0.03335197792043922 0
+572 0.551578882089701 0.6054479204490845 0
+573 0.8239839903870092 0.03614511215804948 0
+574 0.6784282171204805 0.2880457257183143 0
+575 0.7068080440525784 0.8923513537678496 0
+576 0.6431076817569112 0.8107634061448388 0
+577 0.6459814912871658 0.1060279336426549 0
+578 0.6893900418910242 0.4809278820095718 0
+579 0.7499080749689387 0.1883117669613775 0
+580 0.7356605405524026 0.4942734357488372 0
+581 0.8959746411721314 0.6939434490131269 0
+582 0.7646529307957616 0.3956215529604026 0
+583 0.7114847010692725 0.3484423528676387 0
+584 0.9003698784912078 0.7771712632794092 0
+585 0.7795033805326789 0.577743156811986 0
+586 0.963966212442818 0.6711506854820211 0
+587 0.8250000000000005 0.9669994560260083 0
+588 0.8090603326917576 0.3595195800813411 0
+589 0.965846710074317 0.1739060806125082 0
+590 0.5858078359635633 0.9100709014243684 0
+591 0.9617821608565262 0.5695382517732401 0
+592 0.8490314141943813 0.2175578525440531 0
+593 0.5133393350418767 0.5412739745873724 0
+594 0.9592465458070671 0.9046890083151253 0
+595 0.6404810795734763 0.6101071800870571 0
+596 0.7118828846702805 0.749295004830888 0
+597 0.8506881635568724 0.5361402932868189 0
+598 0.6705601688089552 0.03524264454294068 0
+599 0.7910166527703703 0.754583797787337 0
+600 0.7408162903343726 0.6948034443530013 0
+601 0.6768067813784401 0.5546372327209241 0
+602 0.8070664209519189 0.4734673572512167 0
+603 0.9592107870315658 0.3628610375158726 0
+604 0.9147327467791631 0.4341926687927624 0
+605 0.8258835980806533 0.6006024265991182 0
+606 0.6201000563790322 0.9655391098439224 0
+607 0.8362100787569388 0.7298839757176607 0
+608 0.5190559877690007 0.6283934073000133 0
+609 0.5127669033422921 0.7214588057435609 0
+610 0.3926386836955043 0.8131235033474626 0
+611 0.9134340657503249 0.2079279525270879 0
+612 0.457902698252562 0.8203975955336401 0
+613 0.9093662640156114 0.03762305896803119 0
+614 0.680397892996963 0.7378282780447531 0
+615 0.3822548190673755 0.7417639271822595 0
+616 0.9705404069056957 0.4750000000019655 0
+617 0.6141363732615657 0.4719585358120409 0
+618 0.6261743113607825 0.6723705150569662 0
+619 0.8141301686425746 0.1224009309942428 0
+620 0.6793297434908805 0.1710402191972231 0
+621 0.6242363240132162 0.3719051236572699 0
+622 0.8477010288167695 0.3279262415250755 0
+623 0.5942508736523991 0.5857910788252024 0
+624 0.6861038918097363 0.3789238083719954 0
+625 0.6949734176147314 0.09623352804828138 0
+626 0.8631011982802674 0.9159492441302339 0
+627 0.5133004056832992 0.8831870516903403 0
+628 0.7871617811446227 0.255589144309563 0
+629 0.8478569655590208 0.4038947870040711 0
+630 0.9142442761398615 0.9632928247186603 0
+631 0.8250373713177217 0.284803546111159 0
+632 0.5681035184999921 0.792988917278842 0
+633 0.9636833492651274 0.08320460456716076 0
+634 0.9216573736895916 0.5566334978086944 0
+635 0.7411611529793833 0.2688695812189775 0
+636 0.532771083696276 0.8073631531092657 0
+637 0.8595651038066018 0.2566297076891034 0
+638 0.9089674945728231 0.3006465331924363 0
+639 0.9121397684181995 0.5098718568412199 0
+640 0.9678369883885466 0.967836988388473 0
+641 0.9686668564876134 0.03133314351246515 0
+642 0.7900847435527297 0.9134075593193889 0
+643 0.8801770069412749 0.6637007881756083 0
+644 0.7405562209372976 0.1424457397235205 0
+645 0.4525268201366962 0.6171889868241608 0
+646 0.9645829013023697 0.2496487947538837 0
+647 0.4474893665766302 0.7465471468025866 0
+648 0.7316615318790008 0.4234012581991233 0
+649 0.4112398187043823 0.6916724209018271 0
+650 0.5974399580587239 0.826067889349978 0
+651 0.6924607508270193 0.6787079103070581 0
+652 0.8759611490602062 0.5072077092474896 0
+653 0.7321940061655854 0.9265825510270322 0
+654 -0.03543198529417105 -0.03543198529413424 0
+655 -0.03543198529413083 1.035431985294158 -0
+656 1.035431985294127 -0.03543198529416665 0
+657 1.035872194272444 1.036048277863727 0
+658 -0.05328839869283267 0.9725898692811168 -0
+659 1.049999999999926 0.8249999999998265 0
+660 0.02741013071884353 -0.0532883986928367 0
+661 0.9725898692811349 1.053288398692837 0
+662 1.053288398692845 0.02741013071884891 0
+663 0.8750000000003737 1.050000000000076 0
+664 0.3750000000001733 -0.04999999999967346 0
+665 0.02741013071901913 1.051205065359465 0
+666 -0.05120506535947002 0.02741013071901922 -0
+667 0.7750000000006557 1.050000000000147 0
+668 1.04895833333329 0.9256944444440516 0
+669 0.6750000000009586 1.050000000000217 0
+670 -0.05000000000014183 0.8750000000003736 -0
+671 0.9725898692809309 -0.05120506535948072 0
+672 -0.04999999999982187 0.1249999999997591 -0
+673 0.4749999999984572 -0.05000000000031941 0
+674 0.1249999999997062 1.049999999999813 0
+675 0.2743055555557283 -0.04895833333333523 0
+676 1.04999999999968 0.7250000000005199 0
+677 0.8749999999999996 -0.04999999999986331 0
+678 1.0500000000002 0.1249999999995379 0
+679 0.1249999999995382 -0.05000000000020027 0
+680 0.5750000000013274 1.050000000000309 0
+681 -0.05000000000027809 0.7750000000006556 -0
+682 0.7749999999999995 -0.04999999999980275 0
+683 -0.04999999999969997 0.2249999999994849 -0
+684 0.2249999999994174 1.049999999999682 0
+685 0.6750000000000006 -0.04999999999973517 0
+686 0.4743055555564753 1.051041666666639 0
+687 -0.05000000000041412 0.6750000000009585 -0
+688 1.050000000000382 0.2249999999992235 0
+689 0.5750000000000001 -0.04999999999966225 0
+690 -0.04999999999956217 0.3249999999991934 -0
+691 1.049999999999438 0.6250000000012137 0
+692 0.3249999999995394 1.049999999999614 0
+693 -0.05104166666660286 0.5743055555559806 -0
+694 1.05000000000056 0.324999999998919 0
+695 -0.04999999999941874 0.4249999999989021 -0
+696 1.049999999999504 0.5250000000004372 0
+697 1.050000000000743 0.424999999998604 0
+698 -0.04895833333338996 0.5245370370371767 -0
+699 0.2245370370371306 -0.05104166666663253 0
+700 0.4245370370376411 1.048958333333394 0
+701 1.052366593567226 0.9731164717346392 0
+702 1.050000000000041 0.474999999999981 0
+703 0.5249999999992303 -0.04999999999999694 0
+704 1.049826388888869 0.8751157407403207 0
+705 0.9245983115469958 1.050548066448819 0
+706 0.825000000000343 1.050000000000037 0
+707 -0.04835774587607787 0.07528692032369974 -0
+708 0.7250000000005343 1.05000000000006 0
+709 0.9247130796761867 -0.0483577458761078 0
+710 0.2749999999999489 1.049999999999883 0
+711 0.32488425925913 -0.04982638888883478 0
+712 0.5248842592601267 1.050173611111158 0
+713 -0.05054806644882907 0.9245983115469267 -0
+714 0.07528692032368609 1.048357745876068 0
+715 0.6250000000007618 1.050000000000087 0
+716 0.8249999999997614 -0.04999999999994435 0
+717 0.07540168845306314 -0.0505480664488395 0
+718 0.7249999999996679 -0.04999999999992297 0
+719 0.6249999999995742 -0.04999999999989957 0
+720 -0.05000000000006999 0.8250000000001894 -0
+721 1.050548066448841 0.07540168845306397 0
+722 -0.04999999999992031 0.1749999999999801 -0
+723 0.1749999999999366 1.049999999999916 0
+724 -0.05000000000011537 0.7250000000002929 -0
+725 1.049999999999934 0.7749999999998283 0
+726 -0.04999999999987702 0.2749999999998788 -0
+727 1.050000000000097 0.1749999999998302 0
+728 -0.04999999999983015 0.374999999999775 -0
+729 1.050000000000157 0.2749999999997642 0
+730 -0.0501736111111695 0.6248842592595417 -0
+731 1.050000000000217 0.3749999999996945 0
+732 1.049999999999853 0.6750000000002007 0
+733 1.049999999999824 0.5750000000003241 0
+734 0.4249999999992716 -0.04999999999999881 0
+735 -0.04982638888880145 0.4749228395060935 -0
+736 0.3749228395064968 1.049826388888834 0
+737 0.1749228395061481 -0.0501736111111388 0
+738 -0.06348039215690642 1.010539215686336 -0
+739 -0.06348039215691924 -0.01053921568630947 0
+740 -0.01053921568630364 1.06348039215692 -0
+741 1.01053921568628 -0.06348039215690034 0
+742 1.010539215686336 1.063480392156907 0
+743 -0.0105392156863872 -0.06348039215692911 0
+744 1.063480392156929 -0.01053921568638601 0
+745 1.065241228070063 1.013004385964685 0
+746 -0.06213709442115176 -0.06213709442108994 0
+747 -0.0621370944210904 1.062137094421137 -0
+748 1.062137094421085 -0.06213709442114954 0
+749 1.06239912357488 1.062503935236325 0
+$EndNodes
+$Elements
+1632
+1 1 2 11 1 1 11
+2 1 2 1122 1 1 11
+3 1 2 11 1 11 12
+4 1 2 1122 1 11 12
+5 1 2 11 1 12 13
+6 1 2 1122 1 12 13
+7 1 2 11 1 13 14
+8 1 2 1122 1 13 14
+9 1 2 11 1 14 15
+10 1 2 1122 1 14 15
+11 1 2 11 1 15 16
+12 1 2 1122 1 15 16
+13 1 2 11 1 16 17
+14 1 2 1122 1 16 17
+15 1 2 11 1 17 18
+16 1 2 1122 1 17 18
+17 1 2 11 1 18 19
+18 1 2 1122 1 18 19
+19 1 2 11 1 19 20
+20 1 2 1122 1 19 20
+21 1 2 11 1 20 21
+22 1 2 1122 1 20 21
+23 1 2 11 1 21 22
+24 1 2 1122 1 21 22
+25 1 2 11 1 22 23
+26 1 2 1122 1 22 23
+27 1 2 11 1 23 24
+28 1 2 1122 1 23 24
+29 1 2 11 1 24 25
+30 1 2 1122 1 24 25
+31 1 2 11 1 25 26
+32 1 2 1122 1 25 26
+33 1 2 11 1 26 27
+34 1 2 1122 1 26 27
+35 1 2 11 1 27 28
+36 1 2 1122 1 27 28
+37 1 2 11 1 28 29
+38 1 2 1122 1 28 29
+39 1 2 11 1 29 2
+40 1 2 1122 1 29 2
+41 1 2 11 2 2 30
+42 1 2 1122 2 2 30
+43 1 2 11 2 30 31
+44 1 2 1122 2 30 31
+45 1 2 11 2 31 32
+46 1 2 1122 2 31 32
+47 1 2 11 2 32 33
+48 1 2 1122 2 32 33
+49 1 2 11 2 33 34
+50 1 2 1122 2 33 34
+51 1 2 11 2 34 35
+52 1 2 1122 2 34 35
+53 1 2 11 2 35 36
+54 1 2 1122 2 35 36
+55 1 2 11 2 36 37
+56 1 2 1122 2 36 37
+57 1 2 11 2 37 38
+58 1 2 1122 2 37 38
+59 1 2 11 2 38 9
+60 1 2 1122 2 38 9
+61 1 2 22 3 9 39
+62 1 2 1122 3 9 39
+63 1 2 22 3 39 40
+64 1 2 1122 3 39 40
+65 1 2 22 3 40 41
+66 1 2 1122 3 40 41
+67 1 2 22 3 41 42
+68 1 2 1122 3 41 42
+69 1 2 22 3 42 43
+70 1 2 1122 3 42 43
+71 1 2 22 3 43 44
+72 1 2 1122 3 43 44
+73 1 2 22 3 44 45
+74 1 2 1122 3 44 45
+75 1 2 22 3 45 46
+76 1 2 1122 3 45 46
+77 1 2 22 3 46 47
+78 1 2 1122 3 46 47
+79 1 2 22 3 47 3
+80 1 2 1122 3 47 3
+81 1 2 22 4 3 48
+82 1 2 1122 4 3 48
+83 1 2 22 4 48 49
+84 1 2 1122 4 48 49
+85 1 2 22 4 49 50
+86 1 2 1122 4 49 50
+87 1 2 22 4 50 51
+88 1 2 1122 4 50 51
+89 1 2 22 4 51 52
+90 1 2 1122 4 51 52
+91 1 2 22 4 52 53
+92 1 2 1122 4 52 53
+93 1 2 22 4 53 54
+94 1 2 1122 4 53 54
+95 1 2 22 4 54 55
+96 1 2 1122 4 54 55
+97 1 2 22 4 55 56
+98 1 2 1122 4 55 56
+99 1 2 22 4 56 57
+100 1 2 1122 4 56 57
+101 1 2 22 4 57 58
+102 1 2 1122 4 57 58
+103 1 2 22 4 58 59
+104 1 2 1122 4 58 59
+105 1 2 22 4 59 60
+106 1 2 1122 4 59 60
+107 1 2 22 4 60 61
+108 1 2 1122 4 60 61
+109 1 2 22 4 61 62
+110 1 2 1122 4 61 62
+111 1 2 22 4 62 63
+112 1 2 1122 4 62 63
+113 1 2 22 4 63 64
+114 1 2 1122 4 63 64
+115 1 2 22 4 64 65
+116 1 2 1122 4 64 65
+117 1 2 22 4 65 66
+118 1 2 1122 4 65 66
+119 1 2 22 4 66 4
+120 1 2 1122 4 66 4
+121 1 2 22 5 4 67
+122 1 2 1122 5 4 67
+123 1 2 22 5 67 68
+124 1 2 1122 5 67 68
+125 1 2 22 5 68 69
+126 1 2 1122 5 68 69
+127 1 2 22 5 69 70
+128 1 2 1122 5 69 70
+129 1 2 22 5 70 71
+130 1 2 1122 5 70 71
+131 1 2 22 5 71 72
+132 1 2 1122 5 71 72
+133 1 2 22 5 72 73
+134 1 2 1122 5 72 73
+135 1 2 22 5 73 74
+136 1 2 1122 5 73 74
+137 1 2 22 5 74 75
+138 1 2 1122 5 74 75
+139 1 2 22 5 75 10
+140 1 2 1122 5 75 10
+141 1 2 11 6 10 76
+142 1 2 1122 6 10 76
+143 1 2 11 6 76 77
+144 1 2 1122 6 76 77
+145 1 2 11 6 77 78
+146 1 2 1122 6 77 78
+147 1 2 11 6 78 79
+148 1 2 1122 6 78 79
+149 1 2 11 6 79 80
+150 1 2 1122 6 79 80
+151 1 2 11 6 80 81
+152 1 2 1122 6 80 81
+153 1 2 11 6 81 82
+154 1 2 1122 6 81 82
+155 1 2 11 6 82 83
+156 1 2 1122 6 82 83
+157 1 2 11 6 83 84
+158 1 2 1122 6 83 84
+159 1 2 11 6 84 1
+160 1 2 1122 6 84 1
+161 1 2 11 11 9 177
+162 1 2 12 11 9 177
+163 1 2 22 11 9 177
+164 1 2 11 11 177 178
+165 1 2 12 11 177 178
+166 1 2 22 11 177 178
+167 1 2 11 11 178 179
+168 1 2 12 11 178 179
+169 1 2 22 11 178 179
+170 1 2 11 11 179 180
+171 1 2 12 11 179 180
+172 1 2 22 11 179 180
+173 1 2 11 11 180 181
+174 1 2 12 11 180 181
+175 1 2 22 11 180 181
+176 1 2 11 11 181 182
+177 1 2 12 11 181 182
+178 1 2 22 11 181 182
+179 1 2 11 11 182 183
+180 1 2 12 11 182 183
+181 1 2 22 11 182 183
+182 1 2 11 11 183 184
+183 1 2 12 11 183 184
+184 1 2 22 11 183 184
+185 1 2 11 11 184 185
+186 1 2 12 11 184 185
+187 1 2 22 11 184 185
+188 1 2 11 11 185 186
+189 1 2 12 11 185 186
+190 1 2 22 11 185 186
+191 1 2 11 11 186 187
+192 1 2 12 11 186 187
+193 1 2 22 11 186 187
+194 1 2 11 11 187 188
+195 1 2 12 11 187 188
+196 1 2 22 11 187 188
+197 1 2 11 11 188 189
+198 1 2 12 11 188 189
+199 1 2 22 11 188 189
+200 1 2 11 11 189 190
+201 1 2 12 11 189 190
+202 1 2 22 11 189 190
+203 1 2 11 11 190 191
+204 1 2 12 11 190 191
+205 1 2 22 11 190 191
+206 1 2 11 11 191 192
+207 1 2 12 11 191 192
+208 1 2 22 11 191 192
+209 1 2 11 11 192 193
+210 1 2 12 11 192 193
+211 1 2 22 11 192 193
+212 1 2 11 11 193 194
+213 1 2 12 11 193 194
+214 1 2 22 11 193 194
+215 1 2 11 11 194 195
+216 1 2 12 11 194 195
+217 1 2 22 11 194 195
+218 1 2 11 11 195 196
+219 1 2 12 11 195 196
+220 1 2 22 11 195 196
+221 1 2 11 11 196 197
+222 1 2 12 11 196 197
+223 1 2 22 11 196 197
+224 1 2 11 11 197 198
+225 1 2 12 11 197 198
+226 1 2 22 11 197 198
+227 1 2 11 11 198 199
+228 1 2 12 11 198 199
+229 1 2 22 11 198 199
+230 1 2 11 11 199 10
+231 1 2 12 11 199 10
+232 1 2 22 11 199 10
+233 2 2 1 13 275 216 419
+234 2 2 1 13 274 423 212
+235 2 2 1 13 419 216 258
+236 2 2 1 13 423 265 212
+237 2 2 1 13 251 301 330
+238 2 2 1 13 330 301 219
+239 2 2 1 13 420 312 223
+240 2 2 1 13 79 250 336
+241 2 2 1 13 239 340 291
+242 2 2 1 13 234 328 274
+243 2 2 1 13 218 352 335
+244 2 2 1 13 14 266 333
+245 2 2 1 13 15 299 266
+246 2 2 1 13 14 15 266
+247 2 2 1 13 215 307 254
+248 2 2 1 13 187 320 341
+249 2 2 1 13 235 310 286
+250 2 2 1 13 222 286 310
+251 2 2 1 13 10 261 199
+252 2 2 1 13 10 76 261
+253 2 2 1 13 225 249 324
+254 2 2 1 13 225 369 249
+255 2 2 1 13 213 259 357
+256 2 2 1 13 307 424 373
+257 2 2 1 13 200 373 424
+258 2 2 1 13 33 34 264
+259 2 2 1 13 25 26 419
+260 2 2 1 13 79 329 250
+261 2 2 1 13 215 254 295
+262 2 2 1 13 239 291 358
+263 2 2 1 13 254 307 373
+264 2 2 1 13 267 312 420
+265 2 2 1 13 12 13 367
+266 2 2 1 13 259 315 357
+267 2 2 1 13 245 341 320
+268 2 2 1 13 367 13 278
+269 2 2 1 13 204 327 315
+270 2 2 1 13 208 274 328
+271 2 2 1 13 213 266 299
+272 2 2 1 13 222 338 294
+273 2 2 1 13 33 264 346
+274 2 2 1 13 228 326 255
+275 2 2 1 13 15 16 299
+276 2 2 1 13 34 303 264
+277 2 2 1 13 212 261 363
+278 2 2 1 13 419 26 275
+279 2 2 1 13 247 337 323
+280 2 2 1 13 218 335 292
+281 2 2 1 13 226 256 376
+282 2 2 1 13 228 255 319
+283 2 2 1 13 232 262 281
+284 2 2 1 13 203 281 262
+285 2 2 1 13 227 317 254
+286 2 2 1 13 312 383 223
+287 2 2 1 13 242 294 338
+288 2 2 1 13 76 305 261
+289 2 2 1 13 225 276 283
+290 2 2 1 13 201 291 340
+291 2 2 1 13 246 335 352
+292 2 2 1 13 238 351 306
+293 2 2 1 13 208 349 274
+294 2 2 1 13 383 269 223
+295 2 2 1 13 204 302 327
+296 2 2 1 13 236 323 337
+297 2 2 1 13 210 260 309
+298 2 2 1 13 224 309 260
+299 2 2 1 13 227 254 373
+300 2 2 1 13 199 261 296
+301 2 2 1 13 190 418 293
+302 2 2 1 13 18 364 323
+303 2 2 1 13 274 349 423
+304 2 2 1 13 225 372 285
+305 2 2 1 13 205 277 304
+306 2 2 1 13 237 257 391
+307 2 2 1 13 22 256 331
+308 2 2 1 13 225 308 372
+309 2 2 1 13 183 184 270
+310 2 2 1 13 229 333 266
+311 2 2 1 13 196 197 269
+312 2 2 1 13 217 264 303
+313 2 2 1 13 238 306 374
+314 2 2 1 13 36 298 371
+315 2 2 1 13 205 282 338
+316 2 2 1 13 252 353 300
+317 2 2 1 13 201 300 353
+318 2 2 1 13 203 404 281
+319 2 2 1 13 281 404 401
+320 2 2 1 13 208 348 276
+321 2 2 1 13 216 411 258
+322 2 2 1 13 221 403 268
+323 2 2 1 13 189 190 293
+324 2 2 1 13 255 326 381
+325 2 2 1 13 220 283 276
+326 2 2 1 13 261 305 363
+327 2 2 1 13 215 279 307
+328 2 2 1 13 235 346 264
+329 2 2 1 13 216 282 365
+330 2 2 1 13 209 314 332
+331 2 2 1 13 253 332 314
+332 2 2 1 13 210 309 257
+333 2 2 1 13 179 350 298
+334 2 2 1 13 234 274 363
+335 2 2 1 13 247 323 364
+336 2 2 1 13 36 37 298
+337 2 2 1 13 204 259 308
+338 2 2 1 13 221 288 403
+339 2 2 1 13 19 20 280
+340 2 2 1 13 202 313 260
+341 2 2 1 13 205 338 310
+342 2 2 1 13 224 260 313
+343 2 2 1 13 24 258 316
+344 2 2 1 13 255 293 418
+345 2 2 1 13 22 376 256
+346 2 2 1 13 34 35 303
+347 2 2 1 13 226 343 256
+348 2 2 1 13 216 365 410
+349 2 2 1 13 237 368 257
+350 2 2 1 13 225 283 308
+351 2 2 1 13 208 328 348
+352 2 2 1 13 239 287 370
+353 2 2 1 13 222 406 273
+354 2 2 1 13 277 318 417
+355 2 2 1 13 262 355 361
+356 2 2 1 13 267 388 312
+357 2 2 1 13 210 381 326
+358 2 2 1 13 204 315 259
+359 2 2 1 13 223 290 289
+360 2 2 1 13 11 367 268
+361 2 2 1 13 226 376 316
+362 2 2 1 13 213 299 354
+363 2 2 1 13 243 298 350
+364 2 2 1 13 417 318 217
+365 2 2 1 13 233 300 314
+366 2 2 1 13 204 283 321
+367 2 2 1 13 222 294 406
+368 2 2 1 13 216 271 411
+369 2 2 1 13 202 260 382
+370 2 2 1 13 78 79 336
+371 2 2 1 13 202 289 290
+372 2 2 1 13 210 257 345
+373 2 2 1 13 24 419 258
+374 2 2 1 13 212 400 261
+375 2 2 1 13 183 270 347
+376 2 2 1 13 243 371 298
+377 2 2 1 13 211 355 262
+378 2 2 1 13 233 361 355
+379 2 2 1 13 20 389 280
+380 2 2 1 13 178 179 298
+381 2 2 1 13 224 334 311
+382 2 2 1 13 213 380 259
+383 2 2 1 13 31 32 286
+384 2 2 1 13 239 378 287
+385 2 2 1 13 210 326 260
+386 2 2 1 13 221 268 367
+387 2 2 1 13 185 301 394
+388 2 2 1 13 222 273 386
+389 2 2 1 13 185 186 301
+390 2 2 1 13 257 309 391
+391 2 2 1 13 80 81 284
+392 2 2 1 13 217 318 264
+393 2 2 1 13 204 321 302
+394 2 2 1 13 311 334 387
+395 2 2 1 13 82 83 288
+396 2 2 1 13 245 320 322
+397 2 2 1 13 230 322 320
+398 2 2 1 13 228 422 267
+399 2 2 1 13 197 339 269
+400 2 2 1 13 204 308 283
+401 2 2 1 13 230 293 345
+402 2 2 1 13 27 28 294
+403 2 2 1 13 76 77 305
+404 2 2 1 13 232 356 262
+405 2 2 1 13 222 386 286
+406 2 2 1 13 211 262 356
+407 2 2 1 13 221 367 278
+408 2 2 1 13 187 188 320
+409 2 2 1 13 237 307 279
+410 2 2 1 13 226 395 263
+411 2 2 1 13 233 263 361
+412 2 2 1 13 226 263 343
+413 2 2 1 13 235 264 318
+414 2 2 1 13 229 327 278
+415 2 2 1 13 221 278 327
+416 2 2 1 13 244 280 389
+417 2 2 1 13 203 262 361
+418 2 2 1 13 11 12 367
+419 2 2 1 13 198 199 296
+420 2 2 1 13 251 394 301
+421 2 2 1 13 277 352 304
+422 2 2 1 13 11 268 413
+423 2 2 1 13 232 347 270
+424 2 2 1 13 233 402 263
+425 2 2 1 13 231 325 290
+426 2 2 1 13 219 306 351
+427 2 2 1 13 227 272 317
+428 2 2 1 13 207 317 272
+429 2 2 1 13 225 324 276
+430 2 2 1 13 206 396 368
+431 2 2 1 13 38 9 177
+432 2 2 1 13 220 321 283
+433 2 2 1 13 211 397 330
+434 2 2 1 13 212 265 325
+435 2 2 1 13 242 275 362
+436 2 2 1 13 247 287 337
+437 2 2 1 13 293 381 345
+438 2 2 1 13 30 386 273
+439 2 2 1 13 225 285 369
+440 2 2 1 13 184 394 270
+441 2 2 1 13 231 269 339
+442 2 2 1 13 251 270 394
+443 2 2 1 13 214 370 287
+444 2 2 1 13 27 294 362
+445 2 2 1 13 26 362 275
+446 2 2 1 13 212 363 274
+447 2 2 1 13 249 334 349
+448 2 2 1 13 226 271 395
+449 2 2 1 13 205 392 277
+450 2 2 1 13 300 375 314
+451 2 2 1 13 228 319 422
+452 2 2 1 13 234 336 328
+453 2 2 1 13 250 328 336
+454 2 2 1 13 228 267 420
+455 2 2 1 13 254 317 295
+456 2 2 1 13 229 315 327
+457 2 2 1 13 82 288 360
+458 2 2 1 13 213 272 380
+459 2 2 1 13 21 22 331
+460 2 2 1 13 241 284 360
+461 2 2 1 13 257 368 396
+462 2 2 1 13 30 273 414
+463 2 2 1 13 226 411 271
+464 2 2 1 13 214 287 407
+465 2 2 1 13 247 407 287
+466 2 2 1 13 263 395 361
+467 2 2 1 13 182 292 335
+468 2 2 1 13 229 266 357
+469 2 2 1 13 213 357 266
+470 2 2 1 13 208 276 324
+471 2 2 1 13 205 365 282
+472 2 2 1 13 267 193 388
+473 2 2 1 13 242 362 294
+474 2 2 1 13 241 360 288
+475 2 2 1 13 81 360 284
+476 2 2 1 13 422 193 267
+477 2 2 1 13 211 330 421
+478 2 2 1 13 242 384 275
+479 2 2 1 13 202 382 289
+480 2 2 1 13 227 373 285
+481 2 2 1 13 240 349 334
+482 2 2 1 13 198 296 339
+483 2 2 1 13 251 397 270
+484 2 2 1 13 236 354 299
+485 2 2 1 13 256 343 377
+486 2 2 1 13 207 295 317
+487 2 2 1 13 196 269 383
+488 2 2 1 13 261 400 296
+489 2 2 1 13 231 339 296
+490 2 2 1 13 223 269 385
+491 2 2 1 13 216 410 271
+492 2 2 1 13 84 413 403
+493 2 2 1 13 17 18 323
+494 2 2 1 13 13 333 278
+495 2 2 1 13 37 344 298
+496 2 2 1 13 203 361 395
+497 2 2 1 13 23 24 316
+498 2 2 1 13 182 347 292
+499 2 2 1 13 235 286 346
+500 2 2 1 13 32 346 286
+501 2 2 1 13 238 291 353
+502 2 2 1 13 201 353 291
+503 2 2 1 13 217 303 398
+504 2 2 1 13 229 278 333
+505 2 2 1 13 231 385 269
+506 2 2 1 13 29 414 406
+507 2 2 1 13 255 418 319
+508 2 2 1 13 232 270 356
+509 2 2 1 13 80 284 329
+510 2 2 1 13 227 380 272
+511 2 2 1 13 209 377 343
+512 2 2 1 13 220 426 284
+513 2 2 1 13 207 272 416
+514 2 2 1 13 216 275 384
+515 2 2 1 13 31 286 386
+516 2 2 1 13 213 354 272
+517 2 2 1 13 220 276 348
+518 2 2 1 13 206 368 279
+519 2 2 1 13 237 279 368
+520 2 2 1 13 245 322 306
+521 2 2 1 13 228 420 289
+522 2 2 1 13 206 306 322
+523 2 2 1 13 194 195 312
+524 2 2 1 13 242 338 282
+525 2 2 1 13 207 287 378
+526 2 2 1 13 273 406 414
+527 2 2 1 13 180 393 297
+528 2 2 1 13 244 412 280
+529 2 2 1 13 206 279 374
+530 2 2 1 13 205 304 365
+531 2 2 1 13 268 403 413
+532 2 2 1 13 181 182 335
+533 2 2 1 13 218 401 304
+534 2 2 1 13 215 342 279
+535 2 2 1 13 248 304 401
+536 2 2 1 13 206 374 306
+537 2 2 1 13 241 302 321
+538 2 2 1 13 220 284 415
+539 2 2 1 13 224 313 334
+540 2 2 1 13 240 334 313
+541 2 2 1 13 226 316 411
+542 2 2 1 13 30 31 386
+543 2 2 1 13 258 411 316
+544 2 2 1 13 228 289 382
+545 2 2 1 13 207 337 287
+546 2 2 1 13 241 415 284
+547 2 2 1 13 178 298 344
+548 2 2 1 13 277 417 352
+549 2 2 1 13 216 384 282
+550 2 2 1 13 242 282 384
+551 2 2 1 13 79 80 329
+552 2 2 1 13 222 310 338
+553 2 2 1 13 246 352 417
+554 2 2 1 13 19 280 364
+555 2 2 1 13 24 25 419
+556 2 2 1 13 277 392 318
+557 2 2 1 13 230 366 293
+558 2 2 1 13 231 296 400
+559 2 2 1 13 232 281 408
+560 2 2 1 13 180 297 350
+561 2 2 1 13 221 327 302
+562 2 2 1 13 248 401 404
+563 2 2 1 13 182 183 347
+564 2 2 1 13 245 306 390
+565 2 2 1 13 219 390 306
+566 2 2 1 13 191 192 319
+567 2 2 1 13 238 342 291
+568 2 2 1 13 215 291 342
+569 2 2 1 13 223 385 290
+570 2 2 1 13 215 295 358
+571 2 2 1 13 223 289 420
+572 2 2 1 13 200 369 285
+573 2 2 1 13 290 325 409
+574 2 2 1 13 37 38 344
+575 2 2 1 13 246 417 297
+576 2 2 1 13 227 285 372
+577 2 2 1 13 200 285 373
+578 2 2 1 13 217 297 417
+579 2 2 1 13 180 181 393
+580 2 2 1 13 251 330 397
+581 2 2 1 13 236 299 359
+582 2 2 1 13 83 403 288
+583 2 2 1 13 241 288 399
+584 2 2 1 13 83 84 403
+585 2 2 1 13 243 398 303
+586 2 2 1 13 186 341 301
+587 2 2 1 13 232 292 347
+588 2 2 1 13 219 351 330
+589 2 2 1 13 252 330 351
+590 2 2 1 13 221 399 288
+591 2 2 1 13 16 359 299
+592 2 2 1 13 201 375 300
+593 2 2 1 13 231 290 385
+594 2 2 1 13 215 358 291
+595 2 2 1 13 232 408 292
+596 2 2 1 13 259 380 372
+597 2 2 1 13 202 290 409
+598 2 2 1 13 28 29 406
+599 2 2 1 13 189 293 366
+600 2 2 1 13 206 322 396
+601 2 2 1 13 233 355 300
+602 2 2 1 13 13 14 333
+603 2 2 1 13 186 187 341
+604 2 2 1 13 18 19 364
+605 2 2 1 13 218 292 408
+606 2 2 1 13 28 406 294
+607 2 2 1 13 255 381 293
+608 2 2 1 13 207 378 295
+609 2 2 1 13 243 303 371
+610 2 2 1 13 240 423 349
+611 2 2 1 13 35 371 303
+612 2 2 1 13 297 398 350
+613 2 2 1 13 253 340 370
+614 2 2 1 13 252 300 421
+615 2 2 1 13 246 297 393
+616 2 2 1 13 217 398 297
+617 2 2 1 13 218 304 352
+618 2 2 1 13 177 178 344
+619 2 2 1 13 219 301 390
+620 2 2 1 13 295 378 358
+621 2 2 1 13 259 372 308
+622 2 2 1 13 197 198 339
+623 2 2 1 13 227 372 380
+624 2 2 1 13 248 365 304
+625 2 2 1 13 284 426 329
+626 2 2 1 13 234 363 305
+627 2 2 1 13 22 23 376
+628 2 2 1 13 192 193 422
+629 2 2 1 13 234 305 379
+630 2 2 1 13 77 78 379
+631 2 2 1 13 221 302 399
+632 2 2 1 13 241 399 302
+633 2 2 1 13 230 320 366
+634 2 2 1 13 249 349 324
+635 2 2 1 13 220 415 321
+636 2 2 1 13 231 400 325
+637 2 2 1 13 191 319 418
+638 2 2 1 13 77 379 305
+639 2 2 1 13 253 370 425
+640 2 2 1 13 237 424 307
+641 2 2 1 13 228 382 326
+642 2 2 1 13 250 348 328
+643 2 2 1 13 16 17 359
+644 2 2 1 13 243 350 398
+645 2 2 1 13 188 189 366
+646 2 2 1 13 38 177 344
+647 2 2 1 13 248 410 365
+648 2 2 1 13 239 358 378
+649 2 2 1 13 32 33 346
+650 2 2 1 13 224 391 309
+651 2 2 1 13 235 392 310
+652 2 2 1 13 252 421 330
+653 2 2 1 13 179 180 350
+654 2 2 1 13 233 314 402
+655 2 2 1 13 229 357 315
+656 2 2 1 13 1 413 84
+657 2 2 1 13 1 11 413
+658 2 2 1 13 81 82 360
+659 2 2 1 13 26 27 362
+660 2 2 1 13 236 359 323
+661 2 2 1 13 224 311 391
+662 2 2 1 13 237 311 424
+663 2 2 1 13 201 340 375
+664 2 2 1 13 253 375 340
+665 2 2 1 13 35 36 371
+666 2 2 1 13 2 414 29
+667 2 2 1 13 2 30 414
+668 2 2 1 13 263 402 343
+669 2 2 1 13 209 343 402
+670 2 2 1 13 188 366 320
+671 2 2 1 13 249 387 334
+672 2 2 1 13 78 336 379
+673 2 2 1 13 244 332 412
+674 2 2 1 13 205 310 392
+675 2 2 1 13 195 196 383
+676 2 2 1 13 193 194 388
+677 2 2 1 13 195 383 312
+678 2 2 1 13 252 351 353
+679 2 2 1 13 238 353 351
+680 2 2 1 13 256 377 331
+681 2 2 1 13 279 342 374
+682 2 2 1 13 253 314 375
+683 2 2 1 13 235 318 392
+684 2 2 1 13 240 313 405
+685 2 2 1 13 208 324 349
+686 2 2 1 13 20 21 389
+687 2 2 1 13 200 311 387
+688 2 2 1 13 194 312 388
+689 2 2 1 13 237 391 311
+690 2 2 1 13 184 185 394
+691 2 2 1 13 23 316 376
+692 2 2 1 13 17 323 359
+693 2 2 1 13 218 408 401
+694 2 2 1 13 281 401 408
+695 2 2 1 13 332 425 412
+696 2 2 1 13 190 191 418
+697 2 2 1 13 200 424 311
+698 2 2 1 13 202 405 313
+699 2 2 1 13 209 402 314
+700 2 2 1 13 209 332 377
+701 2 2 1 13 244 377 332
+702 2 2 1 13 203 395 404
+703 2 2 1 13 271 404 395
+704 2 2 1 13 265 409 325
+705 2 2 1 13 241 321 415
+706 2 2 1 13 234 379 336
+707 2 2 1 13 236 337 416
+708 2 2 1 13 214 407 412
+709 2 2 1 13 280 412 407
+710 2 2 1 13 181 335 393
+711 2 2 1 13 240 405 423
+712 2 2 1 13 246 393 335
+713 2 2 1 13 244 331 377
+714 2 2 1 13 239 370 340
+715 2 2 1 13 260 326 382
+716 2 2 1 13 244 389 331
+717 2 2 1 13 21 331 389
+718 2 2 1 13 230 396 322
+719 2 2 1 13 192 422 319
+720 2 2 1 13 210 345 381
+721 2 2 1 13 207 416 337
+722 2 2 1 13 212 325 400
+723 2 2 1 13 238 374 342
+724 2 2 1 13 236 416 354
+725 2 2 1 13 265 423 405
+726 2 2 1 13 301 341 390
+727 2 2 1 13 300 355 421
+728 2 2 1 13 202 409 405
+729 2 2 1 13 265 405 409
+730 2 2 1 13 280 407 364
+731 2 2 1 13 247 364 407
+732 2 2 1 13 245 390 341
+733 2 2 1 13 250 329 426
+734 2 2 1 13 230 345 396
+735 2 2 1 13 257 396 345
+736 2 2 1 13 253 425 332
+737 2 2 1 13 270 397 356
+738 2 2 1 13 211 356 397
+739 2 2 1 13 214 425 370
+740 2 2 1 13 200 387 369
+741 2 2 1 13 249 369 387
+742 2 2 1 13 214 412 425
+743 2 2 1 13 250 426 348
+744 2 2 1 13 272 354 416
+745 2 2 1 13 220 348 426
+746 2 2 1 13 211 421 355
+747 2 2 1 13 271 410 404
+748 2 2 1 13 248 404 410
+749 2 2 2 15 502 646 443
+750 2 2 2 15 501 439 650
+751 2 2 2 15 646 485 443
+752 2 2 2 15 650 439 492
+753 2 2 2 15 478 557 528
+754 2 2 2 15 557 446 528
+755 2 2 2 15 647 450 539
+756 2 2 2 15 42 563 477
+757 2 2 2 15 466 518 567
+758 2 2 2 15 461 501 555
+759 2 2 2 15 445 562 579
+760 2 2 2 15 51 560 493
+761 2 2 2 15 52 493 526
+762 2 2 2 15 51 493 52
+763 2 2 2 15 442 481 534
+764 2 2 2 15 189 568 547
+765 2 2 2 15 462 513 537
+766 2 2 2 15 449 537 513
+767 2 2 2 15 9 177 488
+768 2 2 2 15 9 488 39
+769 2 2 2 15 452 551 476
+770 2 2 2 15 452 476 596
+771 2 2 2 15 440 584 486
+772 2 2 2 15 534 600 651
+773 2 2 2 15 427 651 600
+774 2 2 2 15 70 491 71
+775 2 2 2 15 62 646 63
+776 2 2 2 15 42 477 556
+777 2 2 2 15 442 522 481
+778 2 2 2 15 466 585 518
+779 2 2 2 15 481 600 534
+780 2 2 2 15 494 647 539
+781 2 2 2 15 49 594 50
+782 2 2 2 15 486 584 542
+783 2 2 2 15 472 547 568
+784 2 2 2 15 594 505 50
+785 2 2 2 15 431 542 554
+786 2 2 2 15 435 555 501
+787 2 2 2 15 440 526 493
+788 2 2 2 15 449 521 565
+789 2 2 2 15 70 573 491
+790 2 2 2 15 455 482 553
+791 2 2 2 15 52 526 53
+792 2 2 2 15 71 491 530
+793 2 2 2 15 439 590 488
+794 2 2 2 15 646 502 63
+795 2 2 2 15 474 550 564
+796 2 2 2 15 445 519 562
+797 2 2 2 15 453 603 483
+798 2 2 2 15 455 546 482
+799 2 2 2 15 459 508 489
+800 2 2 2 15 430 489 508
+801 2 2 2 15 454 481 544
+802 2 2 2 15 539 450 610
+803 2 2 2 15 469 565 521
+804 2 2 2 15 39 488 532
+805 2 2 2 15 452 510 503
+806 2 2 2 15 428 567 518
+807 2 2 2 15 473 579 562
+808 2 2 2 15 465 533 578
+809 2 2 2 15 435 501 576
+810 2 2 2 15 610 450 496
+811 2 2 2 15 431 554 529
+812 2 2 2 15 463 564 550
+813 2 2 2 15 437 536 487
+814 2 2 2 15 451 487 536
+815 2 2 2 15 454 600 481
+816 2 2 2 15 177 523 488
+817 2 2 2 15 186 520 645
+818 2 2 2 15 55 550 591
+819 2 2 2 15 501 650 576
+820 2 2 2 15 452 512 599
+821 2 2 2 15 432 531 504
+822 2 2 2 15 464 618 484
+823 2 2 2 15 59 558 483
+824 2 2 2 15 452 599 535
+825 2 2 2 15 192 193 497
+826 2 2 2 15 456 493 560
+827 2 2 2 15 179 180 496
+828 2 2 2 15 444 530 491
+829 2 2 2 15 465 601 533
+830 2 2 2 15 73 598 525
+831 2 2 2 15 432 565 509
+832 2 2 2 15 479 527 580
+833 2 2 2 15 428 580 527
+834 2 2 2 15 430 508 631
+835 2 2 2 15 508 628 631
+836 2 2 2 15 435 503 575
+837 2 2 2 15 443 485 638
+838 2 2 2 15 448 495 630
+839 2 2 2 15 186 187 520
+840 2 2 2 15 482 608 553
+841 2 2 2 15 447 503 510
+842 2 2 2 15 488 590 532
+843 2 2 2 15 442 534 506
+844 2 2 2 15 462 491 573
+845 2 2 2 15 443 592 509
+846 2 2 2 15 436 559 541
+847 2 2 2 15 480 541 559
+848 2 2 2 15 437 484 536
+849 2 2 2 15 197 525 577
+850 2 2 2 15 461 590 501
+851 2 2 2 15 474 591 550
+852 2 2 2 15 73 525 74
+853 2 2 2 15 431 535 486
+854 2 2 2 15 448 630 515
+855 2 2 2 15 56 507 57
+856 2 2 2 15 429 487 540
+857 2 2 2 15 432 537 565
+858 2 2 2 15 451 540 487
+859 2 2 2 15 61 543 485
+860 2 2 2 15 482 645 520
+861 2 2 2 15 59 483 603
+862 2 2 2 15 71 530 72
+863 2 2 2 15 453 483 570
+864 2 2 2 15 443 637 592
+865 2 2 2 15 464 484 595
+866 2 2 2 15 452 535 510
+867 2 2 2 15 435 575 555
+868 2 2 2 15 466 597 514
+869 2 2 2 15 449 500 633
+870 2 2 2 15 504 644 545
+871 2 2 2 15 489 588 582
+872 2 2 2 15 494 539 615
+873 2 2 2 15 437 553 608
+874 2 2 2 15 431 486 542
+875 2 2 2 15 450 516 517
+876 2 2 2 15 48 495 594
+877 2 2 2 15 453 543 603
+878 2 2 2 15 440 581 526
+879 2 2 2 15 470 577 525
+880 2 2 2 15 644 444 545
+881 2 2 2 15 460 541 527
+882 2 2 2 15 431 548 510
+883 2 2 2 15 449 633 521
+884 2 2 2 15 443 638 498
+885 2 2 2 15 429 609 487
+886 2 2 2 15 41 563 42
+887 2 2 2 15 429 517 516
+888 2 2 2 15 437 572 484
+889 2 2 2 15 61 485 646
+890 2 2 2 15 439 488 627
+891 2 2 2 15 193 574 497
+892 2 2 2 15 470 525 598
+893 2 2 2 15 438 489 582
+894 2 2 2 15 460 582 588
+895 2 2 2 15 57 507 616
+896 2 2 2 15 197 198 525
+897 2 2 2 15 451 538 561
+898 2 2 2 15 440 486 607
+899 2 2 2 15 68 513 69
+900 2 2 2 15 466 514 605
+901 2 2 2 15 437 487 553
+902 2 2 2 15 448 594 495
+903 2 2 2 15 191 621 528
+904 2 2 2 15 449 613 500
+905 2 2 2 15 190 191 528
+906 2 2 2 15 484 618 536
+907 2 2 2 15 43 511 44
+908 2 2 2 15 444 491 545
+909 2 2 2 15 431 529 548
+910 2 2 2 15 538 614 561
+911 2 2 2 15 45 515 46
+912 2 2 2 15 472 549 547
+913 2 2 2 15 457 547 549
+914 2 2 2 15 455 494 649
+915 2 2 2 15 179 496 566
+916 2 2 2 15 431 510 535
+917 2 2 2 15 457 572 520
+918 2 2 2 15 64 521 65
+919 2 2 2 15 39 532 40
+920 2 2 2 15 459 489 583
+921 2 2 2 15 449 513 613
+922 2 2 2 15 438 583 489
+923 2 2 2 15 448 505 594
+924 2 2 2 15 188 189 547
+925 2 2 2 15 464 506 534
+926 2 2 2 15 453 490 622
+927 2 2 2 15 460 588 490
+928 2 2 2 15 453 570 490
+929 2 2 2 15 462 545 491
+930 2 2 2 15 456 505 554
+931 2 2 2 15 448 554 505
+932 2 2 2 15 471 616 507
+933 2 2 2 15 430 588 489
+934 2 2 2 15 48 594 49
+935 2 2 2 15 177 178 523
+936 2 2 2 15 478 528 621
+937 2 2 2 15 504 531 579
+938 2 2 2 15 48 640 495
+939 2 2 2 15 459 497 574
+940 2 2 2 15 460 490 629
+941 2 2 2 15 458 517 552
+942 2 2 2 15 446 578 533
+943 2 2 2 15 454 544 499
+944 2 2 2 15 434 499 544
+945 2 2 2 15 452 503 551
+946 2 2 2 15 433 595 623
+947 2 2 2 15 10 75 199
+948 2 2 2 15 447 510 548
+949 2 2 2 15 438 557 624
+950 2 2 2 15 439 552 492
+951 2 2 2 15 469 589 502
+952 2 2 2 15 474 564 514
+953 2 2 2 15 520 572 608
+954 2 2 2 15 67 500 613
+955 2 2 2 15 452 596 512
+956 2 2 2 15 192 497 621
+957 2 2 2 15 458 566 496
+958 2 2 2 15 478 621 497
+959 2 2 2 15 441 514 597
+960 2 2 2 15 64 589 521
+961 2 2 2 15 63 502 589
+962 2 2 2 15 439 501 590
+963 2 2 2 15 476 576 561
+964 2 2 2 15 453 622 498
+965 2 2 2 15 432 504 619
+966 2 2 2 15 527 541 602
+967 2 2 2 15 455 649 546
+968 2 2 2 15 461 555 563
+969 2 2 2 15 477 563 555
+970 2 2 2 15 455 647 494
+971 2 2 2 15 481 522 544
+972 2 2 2 15 456 554 542
+973 2 2 2 15 45 587 515
+974 2 2 2 15 440 607 499
+975 2 2 2 15 58 558 59
+976 2 2 2 15 468 587 511
+977 2 2 2 15 484 623 595
+978 2 2 2 15 67 641 500
+979 2 2 2 15 453 498 638
+980 2 2 2 15 441 634 514
+981 2 2 2 15 474 514 634
+982 2 2 2 15 490 588 622
+983 2 2 2 15 194 562 519
+984 2 2 2 15 456 584 493
+985 2 2 2 15 440 493 584
+986 2 2 2 15 435 551 503
+987 2 2 2 15 432 509 592
+988 2 2 2 15 494 615 183
+989 2 2 2 15 469 521 589
+990 2 2 2 15 468 515 587
+991 2 2 2 15 44 511 587
+992 2 2 2 15 649 494 183
+993 2 2 2 15 438 648 557
+994 2 2 2 15 469 502 611
+995 2 2 2 15 429 516 609
+996 2 2 2 15 454 512 600
+997 2 2 2 15 467 561 576
+998 2 2 2 15 178 566 523
+999 2 2 2 15 478 497 624
+1000 2 2 2 15 463 526 581
+1001 2 2 2 15 483 604 570
+1002 2 2 2 15 434 544 522
+1003 2 2 2 15 180 610 496
+1004 2 2 2 15 488 523 627
+1005 2 2 2 15 458 523 566
+1006 2 2 2 15 450 612 496
+1007 2 2 2 15 443 498 637
+1008 2 2 2 15 47 630 640
+1009 2 2 2 15 54 550 55
+1010 2 2 2 15 50 505 560
+1011 2 2 2 15 74 525 571
+1012 2 2 2 15 430 622 588
+1013 2 2 2 15 60 543 61
+1014 2 2 2 15 194 519 574
+1015 2 2 2 15 462 573 513
+1016 2 2 2 15 69 513 573
+1017 2 2 2 15 465 580 518
+1018 2 2 2 15 428 518 580
+1019 2 2 2 15 444 625 530
+1020 2 2 2 15 456 560 505
+1021 2 2 2 15 458 496 612
+1022 2 2 2 15 66 633 641
+1023 2 2 2 15 482 546 645
+1024 2 2 2 15 459 583 497
+1025 2 2 2 15 43 556 511
+1026 2 2 2 15 454 499 607
+1027 2 2 2 15 436 570 604
+1028 2 2 2 15 447 511 653
+1029 2 2 2 15 434 643 499
+1030 2 2 2 15 443 611 502
+1031 2 2 2 15 68 613 513
+1032 2 2 2 15 440 499 581
+1033 2 2 2 15 447 575 503
+1034 2 2 2 15 433 506 595
+1035 2 2 2 15 464 595 506
+1036 2 2 2 15 472 533 549
+1037 2 2 2 15 455 516 647
+1038 2 2 2 15 433 549 533
+1039 2 2 2 15 181 182 539
+1040 2 2 2 15 469 509 565
+1041 2 2 2 15 434 605 514
+1042 2 2 2 15 500 641 633
+1043 2 2 2 15 196 524 620
+1044 2 2 2 15 471 507 639
+1045 2 2 2 15 433 601 506
+1046 2 2 2 15 432 592 531
+1047 2 2 2 15 495 640 630
+1048 2 2 2 15 194 195 562
+1049 2 2 2 15 445 531 628
+1050 2 2 2 15 442 506 569
+1051 2 2 2 15 475 628 531
+1052 2 2 2 15 433 533 601
+1053 2 2 2 15 468 548 529
+1054 2 2 2 15 447 642 511
+1055 2 2 2 15 451 561 540
+1056 2 2 2 15 467 540 561
+1057 2 2 2 15 453 638 543
+1058 2 2 2 15 67 613 68
+1059 2 2 2 15 485 543 638
+1060 2 2 2 15 455 609 516
+1061 2 2 2 15 434 514 564
+1062 2 2 2 15 468 511 642
+1063 2 2 2 15 198 571 525
+1064 2 2 2 15 504 579 644
+1065 2 2 2 15 443 509 611
+1066 2 2 2 15 469 611 509
+1067 2 2 2 15 42 556 43
+1068 2 2 2 15 449 565 537
+1069 2 2 2 15 473 644 579
+1070 2 2 2 15 56 591 507
+1071 2 2 2 15 61 646 62
+1072 2 2 2 15 504 545 619
+1073 2 2 2 15 457 520 593
+1074 2 2 2 15 458 627 523
+1075 2 2 2 15 459 635 508
+1076 2 2 2 15 196 577 524
+1077 2 2 2 15 448 529 554
+1078 2 2 2 15 475 631 628
+1079 2 2 2 15 193 194 574
+1080 2 2 2 15 472 617 533
+1081 2 2 2 15 446 533 617
+1082 2 2 2 15 184 185 546
+1083 2 2 2 15 465 518 569
+1084 2 2 2 15 442 569 518
+1085 2 2 2 15 450 517 612
+1086 2 2 2 15 442 585 522
+1087 2 2 2 15 450 647 516
+1088 2 2 2 15 427 512 596
+1089 2 2 2 15 517 636 552
+1090 2 2 2 15 74 571 75
+1091 2 2 2 15 473 524 644
+1092 2 2 2 15 454 599 512
+1093 2 2 2 15 427 600 512
+1094 2 2 2 15 444 644 524
+1095 2 2 2 15 195 196 620
+1096 2 2 2 15 478 624 557
+1097 2 2 2 15 463 586 526
+1098 2 2 2 15 46 515 630
+1099 2 2 2 15 468 626 515
+1100 2 2 2 15 46 630 47
+1101 2 2 2 15 470 530 625
+1102 2 2 2 15 190 528 568
+1103 2 2 2 15 459 574 519
+1104 2 2 2 15 446 557 578
+1105 2 2 2 15 479 578 557
+1106 2 2 2 15 448 515 626
+1107 2 2 2 15 53 526 586
+1108 2 2 2 15 428 527 602
+1109 2 2 2 15 458 612 517
+1110 2 2 2 15 442 518 585
+1111 2 2 2 15 459 519 635
+1112 2 2 2 15 486 599 607
+1113 2 2 2 15 429 636 517
+1114 2 2 2 15 65 633 66
+1115 2 2 2 15 187 593 520
+1116 2 2 2 15 433 623 549
+1117 2 2 2 15 460 527 582
+1118 2 2 2 15 50 560 51
+1119 2 2 2 15 189 190 568
+1120 2 2 2 15 55 591 56
+1121 2 2 2 15 445 635 519
+1122 2 2 2 15 65 521 633
+1123 2 2 2 15 482 520 608
+1124 2 2 2 15 434 522 605
+1125 2 2 2 15 470 598 530
+1126 2 2 2 15 467 576 650
+1127 2 2 2 15 72 530 598
+1128 2 2 2 15 524 577 625
+1129 2 2 2 15 480 597 567
+1130 2 2 2 15 479 648 527
+1131 2 2 2 15 473 620 524
+1132 2 2 2 15 444 524 625
+1133 2 2 2 15 445 579 531
+1134 2 2 2 15 198 199 571
+1135 2 2 2 15 446 617 528
+1136 2 2 2 15 522 585 605
+1137 2 2 2 15 486 535 599
+1138 2 2 2 15 178 179 566
+1139 2 2 2 15 454 607 599
+1140 2 2 2 15 475 531 592
+1141 2 2 2 15 511 556 653
+1142 2 2 2 15 461 532 590
+1143 2 2 2 15 59 603 60
+1144 2 2 2 15 183 184 649
+1145 2 2 2 15 461 606 532
+1146 2 2 2 15 40 606 41
+1147 2 2 2 15 448 626 529
+1148 2 2 2 15 468 529 626
+1149 2 2 2 15 457 593 547
+1150 2 2 2 15 476 551 576
+1151 2 2 2 15 447 548 642
+1152 2 2 2 15 458 552 627
+1153 2 2 2 15 185 645 546
+1154 2 2 2 15 40 532 606
+1155 2 2 2 15 480 652 597
+1156 2 2 2 15 464 534 651
+1157 2 2 2 15 455 553 609
+1158 2 2 2 15 477 555 575
+1159 2 2 2 15 53 586 54
+1160 2 2 2 15 470 625 577
+1161 2 2 2 15 187 188 593
+1162 2 2 2 15 75 571 199
+1163 2 2 2 15 475 592 637
+1164 2 2 2 15 466 605 585
+1165 2 2 2 15 69 573 70
+1166 2 2 2 15 451 536 618
+1167 2 2 2 15 462 537 619
+1168 2 2 2 15 479 557 648
+1169 2 2 2 15 196 197 577
+1170 2 2 2 15 460 629 541
+1171 2 2 2 15 456 542 584
+1172 2 2 2 15 3 640 48
+1173 2 2 2 15 3 47 640
+1174 2 2 2 15 44 587 45
+1175 2 2 2 15 63 589 64
+1176 2 2 2 15 463 550 586
+1177 2 2 2 15 451 618 538
+1178 2 2 2 15 464 651 538
+1179 2 2 2 15 428 602 567
+1180 2 2 2 15 480 567 602
+1181 2 2 2 15 72 598 73
+1182 2 2 2 15 4 66 641
+1183 2 2 2 15 4 641 67
+1184 2 2 2 15 490 570 629
+1185 2 2 2 15 436 629 570
+1186 2 2 2 15 188 547 593
+1187 2 2 2 15 476 561 614
+1188 2 2 2 15 41 606 563
+1189 2 2 2 15 471 639 559
+1190 2 2 2 15 432 619 537
+1191 2 2 2 15 180 181 610
+1192 2 2 2 15 182 183 615
+1193 2 2 2 15 181 539 610
+1194 2 2 2 15 479 580 578
+1195 2 2 2 15 465 578 580
+1196 2 2 2 15 483 558 604
+1197 2 2 2 15 506 601 569
+1198 2 2 2 15 480 602 541
+1199 2 2 2 15 462 619 545
+1200 2 2 2 15 467 632 540
+1201 2 2 2 15 435 576 551
+1202 2 2 2 15 57 616 58
+1203 2 2 2 15 427 614 538
+1204 2 2 2 15 182 615 539
+1205 2 2 2 15 464 538 618
+1206 2 2 2 15 191 192 621
+1207 2 2 2 15 60 603 543
+1208 2 2 2 15 54 586 550
+1209 2 2 2 15 445 628 635
+1210 2 2 2 15 508 635 628
+1211 2 2 2 15 559 639 652
+1212 2 2 2 15 185 186 645
+1213 2 2 2 15 427 538 651
+1214 2 2 2 15 429 540 632
+1215 2 2 2 15 436 541 629
+1216 2 2 2 15 436 604 559
+1217 2 2 2 15 471 559 604
+1218 2 2 2 15 430 631 622
+1219 2 2 2 15 498 622 631
+1220 2 2 2 15 492 552 636
+1221 2 2 2 15 468 642 548
+1222 2 2 2 15 461 563 606
+1223 2 2 2 15 463 643 564
+1224 2 2 2 15 441 639 634
+1225 2 2 2 15 507 634 639
+1226 2 2 2 15 195 620 562
+1227 2 2 2 15 467 650 632
+1228 2 2 2 15 473 562 620
+1229 2 2 2 15 471 604 558
+1230 2 2 2 15 466 567 597
+1231 2 2 2 15 487 609 553
+1232 2 2 2 15 471 558 616
+1233 2 2 2 15 58 616 558
+1234 2 2 2 15 457 549 623
+1235 2 2 2 15 184 546 649
+1236 2 2 2 15 437 608 572
+1237 2 2 2 15 434 564 643
+1238 2 2 2 15 439 627 552
+1239 2 2 2 15 465 569 601
+1240 2 2 2 15 463 581 643
+1241 2 2 2 15 492 632 650
+1242 2 2 2 15 528 617 568
+1243 2 2 2 15 527 648 582
+1244 2 2 2 15 429 632 636
+1245 2 2 2 15 492 636 632
+1246 2 2 2 15 507 591 634
+1247 2 2 2 15 474 634 591
+1248 2 2 2 15 472 568 617
+1249 2 2 2 15 477 653 556
+1250 2 2 2 15 457 623 572
+1251 2 2 2 15 484 572 623
+1252 2 2 2 15 480 559 652
+1253 2 2 2 15 497 583 624
+1254 2 2 2 15 438 624 583
+1255 2 2 2 15 441 597 652
+1256 2 2 2 15 427 596 614
+1257 2 2 2 15 476 614 596
+1258 2 2 2 15 441 652 639
+1259 2 2 2 15 477 575 653
+1260 2 2 2 15 499 643 581
+1261 2 2 2 15 447 653 575
+1262 2 2 2 15 438 582 648
+1263 2 2 2 15 498 631 637
+1264 2 2 2 15 475 637 631
+1265 2 2 3 18 96 735 97
+1266 2 2 3 18 81 737 82
+1267 2 2 3 18 167 736 168
+1268 2 2 3 18 117 734 118
+1269 2 2 3 18 115 711 116
+1270 2 2 3 18 143 733 144
+1271 2 2 3 18 145 732 146
+1272 2 2 3 18 147 725 148
+1273 2 2 3 18 40 715 41
+1274 2 2 3 18 42 708 43
+1275 2 2 3 18 9 712 39
+1276 2 2 3 18 149 704 150
+1277 2 2 3 18 44 706 45
+1278 2 2 3 18 22 730 23
+1279 2 2 3 18 46 705 47
+1280 2 2 3 18 98 728 99
+1281 2 2 3 18 24 724 25
+1282 2 2 3 18 102 722 103
+1283 2 2 3 18 171 723 172
+1284 2 2 3 18 100 726 101
+1285 2 2 3 18 59 731 60
+1286 2 2 3 18 173 714 174
+1287 2 2 3 18 26 720 27
+1288 2 2 3 18 61 729 62
+1289 2 2 3 18 104 707 105
+1290 2 2 3 18 28 713 29
+1291 2 2 3 18 63 727 64
+1292 2 2 3 18 65 721 66
+1293 2 2 3 18 83 717 84
+1294 2 2 3 18 169 710 170
+1295 2 2 3 18 121 719 122
+1296 2 2 3 18 125 716 126
+1297 2 2 3 18 127 709 128
+1298 2 2 3 18 123 718 124
+1299 2 2 3 18 119 703 120
+1300 2 2 3 18 57 702 58
+1301 2 2 3 18 3 657 745
+1302 2 2 3 18 3 745 701
+1303 2 2 3 18 1 743 654
+1304 2 2 3 18 2 738 655
+1305 2 2 3 18 1 654 739
+1306 2 2 3 18 2 655 740
+1307 2 2 3 18 4 744 656
+1308 2 2 3 18 3 742 657
+1309 2 2 3 18 4 656 741
+1310 2 2 3 18 96 698 735
+1311 2 2 3 18 81 699 737
+1312 2 2 3 18 167 700 736
+1313 2 2 3 18 115 675 711
+1314 2 2 3 18 143 696 733
+1315 2 2 3 18 117 664 734
+1316 2 2 3 18 145 691 732
+1317 2 2 3 18 59 697 731
+1318 2 2 3 18 116 711 664
+1319 2 2 3 18 98 695 728
+1320 2 2 3 18 22 693 730
+1321 2 2 3 18 9 686 712
+1322 2 2 3 18 40 680 715
+1323 2 2 3 18 61 694 729
+1324 2 2 3 18 147 676 725
+1325 2 2 3 18 100 690 726
+1326 2 2 3 18 24 687 724
+1327 2 2 3 18 42 669 708
+1328 2 2 3 18 169 692 710
+1329 2 2 3 18 44 667 706
+1330 2 2 3 18 171 684 723
+1331 2 2 3 18 102 683 722
+1332 2 2 3 18 63 688 727
+1333 2 2 3 18 26 681 720
+1334 2 2 3 18 46 663 705
+1335 2 2 3 18 121 689 719
+1336 2 2 3 18 149 659 704
+1337 2 2 3 18 41 715 669
+1338 2 2 3 18 173 674 714
+1339 2 2 3 18 104 672 707
+1340 2 2 3 18 43 708 667
+1341 2 2 3 18 47 705 661
+1342 2 2 3 18 39 712 680
+1343 2 2 3 18 45 706 663
+1344 2 2 3 18 144 733 691
+1345 2 2 3 18 123 685 718
+1346 2 2 3 18 146 732 676
+1347 2 2 3 18 28 670 713
+1348 2 2 3 18 148 725 659
+1349 2 2 3 18 65 678 721
+1350 2 2 3 18 83 679 717
+1351 2 2 3 18 150 704 668
+1352 2 2 3 18 118 734 673
+1353 2 2 3 18 125 682 716
+1354 2 2 3 18 127 677 709
+1355 2 2 3 18 103 722 672
+1356 2 2 3 18 29 713 658
+1357 2 2 3 18 23 730 687
+1358 2 2 3 18 172 723 674
+1359 2 2 3 18 99 728 690
+1360 2 2 3 18 25 724 681
+1361 2 2 3 18 101 726 683
+1362 2 2 3 18 66 721 662
+1363 2 2 3 18 174 714 665
+1364 2 2 3 18 84 717 660
+1365 2 2 3 18 170 710 684
+1366 2 2 3 18 27 720 670
+1367 2 2 3 18 105 707 666
+1368 2 2 3 18 60 731 694
+1369 2 2 3 18 126 716 677
+1370 2 2 3 18 62 729 688
+1371 2 2 3 18 122 719 685
+1372 2 2 3 18 124 718 682
+1373 2 2 3 18 64 727 678
+1374 2 2 3 18 128 709 671
+1375 2 2 3 18 119 673 703
+1376 2 2 3 18 120 703 689
+1377 2 2 3 18 58 702 697
+1378 2 2 3 18 57 696 702
+1379 2 2 3 18 97 735 695
+1380 2 2 3 18 82 737 679
+1381 2 2 3 18 168 736 692
+1382 2 2 3 18 80 675 699
+1383 2 2 3 18 95 693 698
+1384 2 2 3 18 114 699 675
+1385 2 2 3 18 21 698 693
+1386 2 2 3 18 166 686 700
+1387 2 2 3 18 151 668 701
+1388 2 2 3 18 38 700 686
+1389 2 2 3 18 48 701 668
+1390 2 2 3 18 1 660 743
+1391 2 2 3 18 2 658 738
+1392 2 2 3 18 4 662 744
+1393 2 2 3 18 3 661 742
+1394 2 2 3 18 2 740 665
+1395 2 2 3 18 1 739 666
+1396 2 2 3 18 4 741 671
+1397 2 2 3 18 95 698 96
+1398 2 2 3 18 80 699 81
+1399 2 2 3 18 166 700 167
+1400 2 2 3 18 151 701 152
+1401 2 2 3 18 3 701 48
+1402 2 2 3 18 113 699 114
+1403 2 2 3 18 37 700 38
+1404 2 2 3 18 20 698 21
+1405 2 2 3 18 142 696 143
+1406 2 2 3 18 10 673 76
+1407 2 2 3 18 114 675 115
+1408 2 2 3 18 58 697 59
+1409 2 2 3 18 116 664 117
+1410 2 2 3 18 144 691 145
+1411 2 2 3 18 97 695 98
+1412 2 2 3 18 21 693 22
+1413 2 2 3 18 60 694 61
+1414 2 2 3 18 99 690 100
+1415 2 2 3 18 23 687 24
+1416 2 2 3 18 9 38 686
+1417 2 2 3 18 39 680 40
+1418 2 2 3 18 146 676 147
+1419 2 2 3 18 62 688 63
+1420 2 2 3 18 41 669 42
+1421 2 2 3 18 170 684 171
+1422 2 2 3 18 168 692 169
+1423 2 2 3 18 101 683 102
+1424 2 2 3 18 120 689 121
+1425 2 2 3 18 25 681 26
+1426 2 2 3 18 1 84 660
+1427 2 2 3 18 43 667 44
+1428 2 2 3 18 122 685 123
+1429 2 2 3 18 172 674 173
+1430 2 2 3 18 103 672 104
+1431 2 2 3 18 2 29 658
+1432 2 2 3 18 50 659 51
+1433 2 2 3 18 45 663 46
+1434 2 2 3 18 86 658 87
+1435 2 2 3 18 148 659 149
+1436 2 2 3 18 4 66 662
+1437 2 2 3 18 124 682 125
+1438 2 2 3 18 109 660 110
+1439 2 2 3 18 82 679 83
+1440 2 2 3 18 64 678 65
+1441 2 2 3 18 155 661 156
+1442 2 2 3 18 27 670 28
+1443 2 2 3 18 48 668 49
+1444 2 2 3 18 132 662 133
+1445 2 2 3 18 126 677 127
+1446 2 2 3 18 3 47 661
+1447 2 2 3 18 157 663 158
+1448 2 2 3 18 174 665 175
+1449 2 2 3 18 105 666 106
+1450 2 2 3 18 2 665 30
+1451 2 2 3 18 77 664 78
+1452 2 2 3 18 128 671 129
+1453 2 2 3 18 1 666 11
+1454 2 2 3 18 159 667 160
+1455 2 2 3 18 88 670 89
+1456 2 2 3 18 161 669 162
+1457 2 2 3 18 150 668 151
+1458 2 2 3 18 12 672 13
+1459 2 2 3 18 52 676 53
+1460 2 2 3 18 31 674 32
+1461 2 2 3 18 4 671 67
+1462 2 2 3 18 79 675 80
+1463 2 2 3 18 134 678 135
+1464 2 2 3 18 111 679 112
+1465 2 2 3 18 118 673 119
+1466 2 2 3 18 68 677 69
+1467 2 2 3 18 163 680 164
+1468 2 2 3 18 90 681 91
+1469 2 2 3 18 14 683 15
+1470 2 2 3 18 70 682 71
+1471 2 2 3 18 33 684 34
+1472 2 2 3 18 72 685 73
+1473 2 2 3 18 92 687 93
+1474 2 2 3 18 136 688 137
+1475 2 2 3 18 165 686 166
+1476 2 2 3 18 54 691 55
+1477 2 2 3 18 16 690 17
+1478 2 2 3 18 74 689 75
+1479 2 2 3 18 94 693 95
+1480 2 2 3 18 138 694 139
+1481 2 2 3 18 18 695 19
+1482 2 2 3 18 35 692 36
+1483 2 2 3 18 56 696 57
+1484 2 2 3 18 140 697 141
+1485 2 2 3 18 142 702 696
+1486 2 2 3 18 141 697 702
+1487 2 2 3 18 10 703 673
+1488 2 2 3 18 75 689 703
+1489 2 2 3 18 87 658 713
+1490 2 2 3 18 156 661 705
+1491 2 2 3 18 50 704 659
+1492 2 2 3 18 110 660 717
+1493 2 2 3 18 133 662 721
+1494 2 2 3 18 157 705 663
+1495 2 2 3 18 158 663 706
+1496 2 2 3 18 51 659 725
+1497 2 2 3 18 49 668 704
+1498 2 2 3 18 78 664 711
+1499 2 2 3 18 159 706 667
+1500 2 2 3 18 30 665 714
+1501 2 2 3 18 160 667 708
+1502 2 2 3 18 11 666 707
+1503 2 2 3 18 88 713 670
+1504 2 2 3 18 161 708 669
+1505 2 2 3 18 67 671 709
+1506 2 2 3 18 162 669 715
+1507 2 2 3 18 12 707 672
+1508 2 2 3 18 79 711 675
+1509 2 2 3 18 111 717 679
+1510 2 2 3 18 13 672 722
+1511 2 2 3 18 68 709 677
+1512 2 2 3 18 89 670 720
+1513 2 2 3 18 31 714 674
+1514 2 2 3 18 69 677 716
+1515 2 2 3 18 32 674 723
+1516 2 2 3 18 163 715 680
+1517 2 2 3 18 164 680 712
+1518 2 2 3 18 134 721 678
+1519 2 2 3 18 34 684 710
+1520 2 2 3 18 70 716 682
+1521 2 2 3 18 71 682 718
+1522 2 2 3 18 52 725 676
+1523 2 2 3 18 135 678 727
+1524 2 2 3 18 90 720 681
+1525 2 2 3 18 53 676 732
+1526 2 2 3 18 91 681 724
+1527 2 2 3 18 165 712 686
+1528 2 2 3 18 14 722 683
+1529 2 2 3 18 72 718 685
+1530 2 2 3 18 73 685 719
+1531 2 2 3 18 15 683 726
+1532 2 2 3 18 33 723 684
+1533 2 2 3 18 74 719 689
+1534 2 2 3 18 92 724 687
+1535 2 2 3 18 93 687 730
+1536 2 2 3 18 16 726 690
+1537 2 2 3 18 136 727 688
+1538 2 2 3 18 137 688 729
+1539 2 2 3 18 17 690 728
+1540 2 2 3 18 76 673 734
+1541 2 2 3 18 35 710 692
+1542 2 2 3 18 54 732 691
+1543 2 2 3 18 55 691 733
+1544 2 2 3 18 94 730 693
+1545 2 2 3 18 18 728 695
+1546 2 2 3 18 138 729 694
+1547 2 2 3 18 139 694 731
+1548 2 2 3 18 77 734 664
+1549 2 2 3 18 56 733 696
+1550 2 2 3 18 140 731 697
+1551 2 2 3 18 19 695 735
+1552 2 2 3 18 112 679 737
+1553 2 2 3 18 36 692 736
+1554 2 2 3 18 20 735 698
+1555 2 2 3 18 113 737 699
+1556 2 2 3 18 37 736 700
+1557 2 2 3 18 85 747 738
+1558 2 2 3 18 108 746 743
+1559 2 2 3 18 154 749 742
+1560 2 2 3 18 131 748 744
+1561 2 2 3 18 130 741 748
+1562 2 2 3 18 176 740 747
+1563 2 2 3 18 107 739 746
+1564 2 2 3 18 655 738 747
+1565 2 2 3 18 657 742 749
+1566 2 2 3 18 654 743 746
+1567 2 2 3 18 656 744 748
+1568 2 2 3 18 655 747 740
+1569 2 2 3 18 656 748 741
+1570 2 2 3 18 654 746 739
+1571 2 2 3 18 141 702 142
+1572 2 2 3 18 10 75 703
+1573 2 2 3 18 49 704 50
+1574 2 2 3 18 34 710 35
+1575 2 2 3 18 87 713 88
+1576 2 2 3 18 110 717 111
+1577 2 2 3 18 156 705 157
+1578 2 2 3 18 160 708 161
+1579 2 2 3 18 158 706 159
+1580 2 2 3 18 11 707 12
+1581 2 2 3 18 67 709 68
+1582 2 2 3 18 78 711 79
+1583 2 2 3 18 69 716 70
+1584 2 2 3 18 162 715 163
+1585 2 2 3 18 30 714 31
+1586 2 2 3 18 71 718 72
+1587 2 2 3 18 164 712 165
+1588 2 2 3 18 133 721 134
+1589 2 2 3 18 73 719 74
+1590 2 2 3 18 13 722 14
+1591 2 2 3 18 32 723 33
+1592 2 2 3 18 89 720 90
+1593 2 2 3 18 91 724 92
+1594 2 2 3 18 15 726 16
+1595 2 2 3 18 51 725 52
+1596 2 2 3 18 137 729 138
+1597 2 2 3 18 139 731 140
+1598 2 2 3 18 135 727 136
+1599 2 2 3 18 17 728 18
+1600 2 2 3 18 93 730 94
+1601 2 2 3 18 53 732 54
+1602 2 2 3 18 55 733 56
+1603 2 2 3 18 76 734 77
+1604 2 2 3 18 19 735 20
+1605 2 2 3 18 36 736 37
+1606 2 2 3 18 112 737 113
+1607 2 2 3 18 153 745 749
+1608 2 2 3 18 86 738 658
+1609 2 2 3 18 109 743 660
+1610 2 2 3 18 155 742 661
+1611 2 2 3 18 132 744 662
+1612 2 2 3 18 175 665 740
+1613 2 2 3 18 106 666 739
+1614 2 2 3 18 129 671 741
+1615 2 2 3 18 85 738 86
+1616 2 2 3 18 108 743 109
+1617 2 2 3 18 154 742 155
+1618 2 2 3 18 131 744 132
+1619 2 2 3 18 129 741 130
+1620 2 2 3 18 175 740 176
+1621 2 2 3 18 106 739 107
+1622 2 2 3 18 657 749 745
+1623 2 2 3 18 152 701 745
+1624 2 2 3 18 152 745 153
+1625 2 2 3 18 6 107 746
+1626 2 2 3 18 5 130 748
+1627 2 2 3 18 8 176 747
+1628 2 2 3 18 7 153 749
+1629 2 2 3 18 6 746 108
+1630 2 2 3 18 5 748 131
+1631 2 2 3 18 8 747 85
+1632 2 2 3 18 7 749 154
+$EndElements
Index: mesh/init_shape.msh
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- mesh/init_shape.msh	(date 1565344480000)
+++ mesh/init_shape.msh	(date 1565344480000)
@@ -0,0 +1,1218 @@
+$MeshFormat
+2.2 0 8
+$EndMeshFormat
+$Nodes
+381
+1 0 0 0
+2 0 1 0
+3 1 1 0
+4 1 0 0
+5 1.1 -0.1 -0
+6 -0.1 -0.1 -0
+7 1.1 1.1 -0
+8 -0.1 1.1 -0
+9 0.27 0.5 0
+10 0.5 0.5 0
+11 0 0.8999999999995836 0
+12 0 0.7999999999999998 0
+13 0 0.7000000000006934 0
+14 0 0.6000000000013869 0
+15 0 0.5000000000020587 0
+16 0 0.4000000000016644 0
+17 0 0.3000000000012483 0
+18 0 0.2000000000008322 0
+19 0 0.100000000000416 0
+20 0.09999999999981467 0 0
+21 0.1999999999995579 0 0
+22 0.2999999999992664 0 0
+23 0.3999999999989749 0 0
+24 0.4999999999986943 0 0
+25 0.5999999999989468 0 0
+26 0.69999999999921 0 0
+27 0.7999999999994734 0 0
+28 0.8999999999997368 0 0
+29 1 0.09999999999981467 0
+30 1 0.1999999999995579 0
+31 1 0.2999999999992664 0
+32 1 0.3999999999989749 0
+33 1 0.4999999999986943 0
+34 1 0.5999999999989468 0
+35 1 0.69999999999921 0
+36 1 0.7999999999994734 0
+37 1 0.8999999999997368 0
+38 0.8999999999995836 1 0
+39 0.7999999999999998 1 0
+40 0.7000000000006934 1 0
+41 0.6000000000013869 1 0
+42 0.5000000000020587 1 0
+43 0.4000000000016644 1 0
+44 0.3000000000012483 1 0
+45 0.2000000000008322 1 0
+46 0.100000000000416 1 0
+47 -0.1 1.000000000000079 0
+48 -0.1 0.9000000000003032 0
+49 -0.1 0.8000000000005848 0
+50 -0.1 0.7000000000008665 0
+51 -0.1 0.6000000000012352 0
+52 -0.1 0.500000000001539 0
+53 -0.1 0.4000000000013 0
+54 -0.1 0.3000000000010178 0
+55 -0.1 0.2000000000007579 0
+56 -0.1 0.1000000000005272 0
+57 -0.1 2.671196597248127e-13 0
+58 -1.730560139634463e-13 -0.1 0
+59 0.09999999999961506 -0.1 0
+60 0.199999999999302 -0.1 0
+61 0.2999999999990088 -0.1 0
+62 0.3999999999986936 -0.1 0
+63 0.4999999999984002 -0.1 0
+64 0.5999999999986493 -0.1 0
+65 0.6999999999989417 -0.1 0
+66 0.7999999999992116 -0.1 0
+67 0.8999999999994526 -0.1 0
+68 0.9999999999997226 -0.1 0
+69 1.1 -1.730560139634463e-13 0
+70 1.1 0.09999999999961506 0
+71 1.1 0.199999999999302 0
+72 1.1 0.2999999999990088 0
+73 1.1 0.3999999999986936 0
+74 1.1 0.4999999999984002 0
+75 1.1 0.5999999999986493 0
+76 1.1 0.6999999999989417 0
+77 1.1 0.7999999999992116 0
+78 1.1 0.8999999999994526 0
+79 1.1 0.9999999999997226 0
+80 1.000000000000079 1.1 0
+81 0.9000000000003032 1.1 0
+82 0.8000000000005848 1.1 0
+83 0.7000000000008665 1.1 0
+84 0.6000000000012352 1.1 0
+85 0.500000000001539 1.1 0
+86 0.4000000000013 1.1 0
+87 0.3000000000010178 1.1 0
+88 0.2000000000007579 1.1 0
+89 0.1000000000005272 1.1 0
+90 2.671196597248127e-13 1.1 0
+91 0.2831289700474363 0.4533740306527148 0
+92 0.3085689796855237 0.4117588978825775 0
+93 0.3394079700632019 0.3739257095761214 0
+94 0.3739257096830562 0.3394079699661768 0
+95 0.4117588979995224 0.3085689796009634 0
+96 0.4533740307824208 0.2831289699842421 0
+97 0.5000000000475329 0.27 0
+98 0.5466259693030425 0.2831289700258807 0
+99 0.5882411020774978 0.308568979656655 0
+100 0.6260742903873405 0.3394079700300499 0
+101 0.6605920300006461 0.3739257096464907 0
+102 0.6914310203701065 0.4117588979595129 0
+103 0.716871029994133 0.4533740307380354 0
+104 0.7299999999999998 0.4999999999981632 0
+105 0.7168710299956251 0.5466259692589013 0
+106 0.6914310203719475 0.5882411020379409 0
+107 0.6605920300025765 0.6260742903513818 0
+108 0.6260742903892682 0.660592029968201 0
+109 0.5882411020793871 0.6914310203419788 0
+110 0.5466259693048784 0.7168710299732247 0
+111 0.5000000000492759 0.73 0
+112 0.4533740307837499 0.7168710300164053 0
+113 0.4117588980004967 0.6914310203997409 0
+114 0.3739257096837441 0.6605920300344472 0
+115 0.3394079700636664 0.6260742904243906 0
+116 0.3085689796858087 0.5882411021178167 0
+117 0.2831289700475467 0.5466259693475117 0
+118 0.4993459944748763 0.3815991187906972 0
+119 0.6232031965027196 0.5039263462028541 0
+120 0.4996749409521055 0.6176328412410681 0
+121 0.3865523332899237 0.4999999999999907 0
+122 0.5831727793351871 0.416827220691612 0
+123 0.5868270256671937 0.5834853931860935 0
+124 0.4174958098316514 0.4122592496622731 0
+125 0.4171795909036831 0.585274437978759 0
+126 0.5438254167687191 0.3412930507090708 0
+127 0.5438802411828634 0.6585789426287867 0
+128 0.6595073351892625 0.4567199733710627 0
+129 0.660225188608397 0.543148919653482 0
+130 0.4589805882288734 0.3411680399109725 0
+131 0.456220832730419 0.6595678914195673 0
+132 0.3421185864822572 0.4560655822958685 0
+133 0.3421185864824255 0.543934417704375 0
+134 0.5316329936426547 0.5579224626450237 0
+135 0.5177496516445764 0.4398384107630118 0
+136 0.4354973809155234 0.5283089058490527 0
+137 0.4473795002712052 0.4659472838524866 0
+138 0.5834129662937624 0.3663638592545615 0
+139 0.5834129662952043 0.6336361407448277 0
+140 0.6336361407709858 0.4165870337353223 0
+141 0.6336361407734344 0.5834129662626394 0
+142 0.4165870337671695 0.3663638591876362 0
+143 0.416587033767959 0.6336361408132012 0
+144 0.3663638592683909 0.4165870336752332 0
+145 0.3663638592684826 0.5834129663250507 0
+146 0.3169841613629398 0.5000000000001519 0
+147 0.5000000000473543 0.6833174573866186 0
+148 0.5003586666009108 0.3167196915701439 0
+149 0.6844462967150229 0.5006325398704163 0
+150 0.5634147321805499 0.486849862911148 0
+151 0.4733191665408026 0.5672762510623788 0
+152 0.4671809937868904 0.4163005424531548 0
+153 0.5846667470858858 0.5356626219203423 0
+154 0.5490856335480043 0.6102511560891599 0
+155 0.5455013617034242 0.3891843320417907 0
+156 0.3895423501720077 0.5481861455714456 0
+157 0.3919820178286857 0.4501718298971705 0
+158 0.612586836795741 0.4561820873823998 0
+159 0.382692832737507 0.6177979731151697 0
+160 0.3816401881785304 0.3808921080732087 0
+161 0.6189773598032485 0.6184999837057795 0
+162 0.6173776413575844 0.3826223586716073 0
+163 0.4535488215080954 0.613203611405102 0
+164 0.4519180840178922 0.3835381620009468 0
+165 0.6179781712583596 0.5480669042425567 0
+166 0.7905668233514556 0.209433176694181 0
+167 0.7905668233530978 0.7905668233019938 0
+168 0.2094331767626987 0.2094331766184493 0
+169 0.2094331767638551 0.7905668233820133 0
+170 0.3512699469033577 0.8370791785088043 0
+171 0.3512699469016549 0.1629208214927078 0
+172 0.8370791784771691 0.6487300531654552 0
+173 0.827003383740876 0.3631693211957339 0
+174 0.6368306788634422 0.1729966162924162 0
+175 0.6368306788662548 0.827003383705874 0
+176 0.1629208215657979 0.3512699467112426 0
+177 0.1729966163191388 0.6368306789265878 0
+178 0.5159386090957884 0.8627224081237125 0
+179 0.5159386090925917 0.1372775918763099 0
+180 0.8627224081248136 0.4840613909832869 0
+181 0.1372775918111521 0.5159386090712986 0
+182 0.7159384412187642 0.2840615588200942 0
+183 0.7159384412205262 0.7159384411770104 0
+184 0.2840615588718167 0.2840615587489922 0
+185 0.2840615588726935 0.7159384412515092 0
+186 0.8207016821507453 0.5432273655762551 0
+187 0.1792983177437088 0.456772634368572 0
+188 0.4567726344935359 0.1792983178400286 0
+189 0.4567726344959795 0.8207016821607946 0
+190 0.2420325526867262 0.3928142866814322 0
+191 0.3928142868382092 0.7579674473859961 0
+192 0.3928142868369215 0.2420325526152229 0
+193 0.75796744735199 0.6071857132125668 0
+194 0.09221662779083781 0.733972253406356 0
+195 0.08891328921221241 0.2681695779025324 0
+196 0.7339722533472471 0.9077833722459382 0
+197 0.7339722533435973 0.092216627752239 0
+198 0.9035294299790353 0.2513105962574894 0
+199 0.8994364770733995 0.7443500902879781 0
+200 0.2556499097754071 0.1005635229198481 0
+201 0.2556499097765211 0.8994364770807759 0
+202 0.5427273428396566 0.7974971560537911 0
+203 0.608895659798834 0.7642856588962 0
+204 0.5427273428370265 0.2025028439456779 0
+205 0.6088956597965962 0.2357143411022388 0
+206 0.7974971560691737 0.4572726572241955 0
+207 0.7642856589316567 0.3911043402489408 0
+208 0.2025028439128072 0.5427273428396771 0
+209 0.2357143411147779 0.6088956598583308 0
+210 0.1075470394814377 0.8662020044063313 0
+211 0.1075470394807405 0.1337979955944326 0
+212 0.86620200437077 0.8924529605595695 0
+213 0.866202004368595 0.1075470394380596 0
+214 0.1170616038262759 0.4220577981087714 0
+215 0.8829383961936677 0.5779422018532619 0
+216 0.4220577982102012 0.8829383962151086 0
+217 0.4220577982076906 0.117061603785975 0
+218 0.2851354165554785 0.3634226328521181 0
+219 0.3634339540496222 0.7148532624811851 0
+220 0.3634226329881169 0.2851354164590995 0
+221 0.7148532624488635 0.6365660459939524 0
+222 0.284357049555186 0.6364878284662875 0
+223 0.7156429505109265 0.3635121716226258 0
+224 0.6364878284163785 0.2843570495223943 0
+225 0.6364878284183603 0.7156429504757531 0
+226 0.5915505373044553 0.898154189695529 0
+227 0.5915505373012885 0.1018458103036804 0
+228 0.8981541897067298 0.4084494627573755 0
+229 0.1018458103053704 0.5915505373441109 0
+230 0.3242770030630737 0.3242770029512834 0
+231 0.3290372484449824 0.6707891705315639 0
+232 0.670789170495919 0.6709627515932598 0
+233 0.6709471081068111 0.329052891928331 0
+234 0.287014086984514 0.793519351471311 0
+235 0.2870140869830347 0.206480648529504 0
+236 0.7935193514409372 0.7129859130812829 0
+237 0.79351935143888 0.2870140869145649 0
+238 0.7223423755078338 0.2048995405487122 0
+239 0.7223423755103769 0.795100459448519 0
+240 0.2048995406021629 0.722342375561551 0
+241 0.2035606651503967 0.27576569587705 0
+242 0.3380791211206685 0.9117230129907907 0
+243 0.3380791211187959 0.08827698700988802 0
+244 0.9117230129778398 0.6619208789237596 0
+245 0.08633528142406566 0.3401657323921687 0
+246 0.2121739839964222 0.4969808902004866 0
+247 0.7878260159628506 0.5030191098016374 0
+248 0.4969808902577902 0.7878260159620212 0
+249 0.4969808902555735 0.2121739840380775 0
+250 0.6608700228794662 0.2318448667511644 0
+251 0.6608700228815314 0.7681551332467498 0
+252 0.7703998358098663 0.3412645256034488 0
+253 0.231844866801092 0.6608700229422351 0
+254 0.9246912248026812 0.1524183103485733 0
+255 0.9240090659859109 0.8468584707411093 0
+256 0.1531415292855022 0.07599093400015083 0
+257 0.1531415292863284 0.9240090660002731 0
+258 0.7721025254415848 0.6567312591050617 0
+259 0.3432680533244689 0.2278967869015855 0
+260 0.3432687409509366 0.7721025254743437 0
+261 0.2277975391348438 0.3411493659347549 0
+262 0.236531745503062 0.444902571574187 0
+263 0.7634682544917175 0.5550974283523801 0
+264 0.4449025716997236 0.7634682545118987 0
+265 0.4449025716981229 0.2365317454889202 0
+266 0.9132618382579885 0.3370710753278463 0
+267 0.6604760663048783 0.9139708286236337 0
+268 0.6604760663020482 0.08602917137534438 0
+269 0.08602917139266077 0.6604760663420693 0
+270 0.8374200364285935 0.4243050188438686 0
+271 0.5756949812230069 0.8374200364111321 0
+272 0.5756949812200953 0.1625799635880978 0
+273 0.1625799635802199 0.5756949812496823 0
+274 0.9302235101578884 0.5155465959987279 0
+275 0.4844534040624958 0.06977648984856367 0
+276 0.4844534040658888 0.9302235101514648 0
+277 0.06977648985286061 0.4844534041558159 0
+278 0.7570313694293989 0.4385237945670746 0
+279 0.5614762054776343 0.2429686305944196 0
+280 0.5614762054797869 0.7570313694045733 0
+281 0.2429686305902268 0.5614762055292654 0
+282 0.9350136329073065 0.07225187837229594 0
+283 0.9349161816484801 0.9276448046405135 0
+284 0.07235519536225714 0.06508381833786685 0
+285 0.07235519536245275 0.9349161816624572 0
+286 0.1452917814000226 0.7810528984858888 0
+287 0.07107678414697685 0.8024690903726631 0
+288 0.1446286079664737 0.2189828019072283 0
+289 0.07107678414653781 0.1975309096289901 0
+290 0.781052898434731 0.8547082186489888 0
+291 0.8024690902726442 0.9289232158841328 0
+292 0.7810528984317876 0.1452917813482489 0
+293 0.8024690902668351 0.07107678411411349 0
+294 0.4018476631830679 0.8057095807094909 0
+295 0.4018475485770657 0.1942903046874066 0
+296 0.805709580684479 0.5981523368774967 0
+297 0.1942737634100691 0.4014944338964933 0
+298 0.8513148138783905 0.1827533269867067 0
+299 0.8504470443888921 0.8159569673628466 0
+300 0.1840027524938871 0.1495551239805468 0
+301 0.1840430327086423 0.8504470444112484 0
+302 0.2713009036831854 0.415432268482771 0
+303 0.4154334238375438 0.7286979411658125 0
+304 0.4154322686261368 0.2713009036248901 0
+305 0.72869794113606 0.5845665762057879 0
+306 0.1402867475009646 0.7069348545444906 0
+307 0.1406558018855945 0.2933354140064757 0
+308 0.7069348544926977 0.8597132525345907 0
+309 0.7069348544897418 0.1402867474633921 0
+310 0.8539297321156059 0.2970510637857048 0
+311 0.8536943899111537 0.7031860789567457 0
+312 0.2968139211055823 0.146305610068874 0
+313 0.2968139211069797 0.8536943899319855 0
+314 0.7560969143813369 0.2495916498536227 0
+315 0.7560969143838 0.7504083501422255 0
+316 0.2486962666163799 0.2399407258690762 0
+317 0.2495916499239632 0.7560969144216245 0
+318 0.7290524058472443 0.4116546470272379 0
+319 0.2709475941987092 0.5883453530638424 0
+320 0.5883453530142299 0.2709475941803176 0
+321 0.5883453530162494 0.729052405818346 0
+322 0.05235815261841106 0.5434728530266515 0
+323 0.5434728529532622 0.9476418473420346 0
+324 0.543472852949664 0.05235815265786077 0
+325 0.9476418473207583 0.4565271471163681 0
+326 0.2468946901056638 0.8280619580038671 0
+327 0.2468650819117233 0.1731756703246284 0
+328 0.8280619579771148 0.7531053099600222 0
+329 0.828503800203529 0.2464361971491255 0
+330 0.2033524791034341 0.5851249736807087 0
+331 0.7966475209199397 0.4148750264159627 0
+332 0.585124973638959 0.2033524791045701 0
+333 0.5851249736415077 0.796647520894314 0
+334 0.2421548857094006 0.5295620815833882 0
+335 0.7578451142911111 0.4704379184658212 0
+336 0.529562081584162 0.2421548857208112 0
+337 0.5295620815862776 0.757845114278722 0
+338 0.6500000000010417 1.049999999999973 0
+339 -0.04999999999997291 0.6500000000010419 0
+340 0.4500000000016405 1.05 0
+341 -0.05 0.4500000000016405 0
+342 1.049999999999931 -0.05000000000004327 0
+343 -0.05000000000004327 -0.04999999999993322 0
+344 1.05 0.5499999999986727 0
+345 0.5499999999986727 -0.05 0
+346 0.5500000000017229 1.049999999999924 0
+347 -0.04999999999992404 0.5500000000017229 0
+348 0.1500000000006333 1.05 0
+349 -0.05000000000000002 0.1500000000006333 0
+350 0.7500000000004963 1.049999999999947 0
+351 -0.04999999999994679 0.7500000000004963 0
+352 -0.05000000000000001 0.05000000000030258 0
+353 1.05000000000002 1.049999999999931 0
+354 -0.04999999999993322 1.05000000000002 0
+355 -0.05 0.250000000000964 0
+356 0.250000000000964 1.05 0
+357 -0.05000000000000002 0.9499999999999916 0
+358 0.9499999999999915 1.05 0
+359 0.05000000000030258 1.05 0
+360 1.0499999999999 0.04999999999990733 0
+361 0.04999999999990735 -0.0499999999999002 0
+362 0.949999999999728 -0.05 0
+363 1.050000000000005 0.1499999999995587 0
+364 0.1499999999995587 -0.05000000000000469 0
+365 1.050000000000128 0.2499999999991555 0
+366 0.2499999999991555 -0.05000000000012791 0
+367 -0.05000000000000002 0.3500000000013077 0
+368 0.3500000000013076 1.05 0
+369 1.050000000000129 0.3499999999988512 0
+370 0.3499999999988512 -0.05000000000012877 0
+371 1.05000000000014 0.4499999999985468 0
+372 0.4499999999985469 -0.0500000000001407 0
+373 1.05 0.7499999999992092 0
+374 0.7499999999992092 -0.05 0
+375 1.05 0.649999999998937 0
+376 0.649999999998937 -0.05 0
+377 1.050000000000142 0.9499999999995875 0
+378 0.8499999999994685 -0.05 0
+379 1.049999999999858 0.8499999999996052 0
+380 0.8499999999997918 1.049999999999708 0
+381 -0.04999999999970785 0.8499999999997919 0
+$EndNodes
+$Elements
+828
+1 1 2 9 1 2 11
+2 1 2 9 1 11 12
+3 1 2 9 1 12 13
+4 1 2 9 1 13 14
+5 1 2 9 1 14 15
+6 1 2 9 1 15 16
+7 1 2 9 1 16 17
+8 1 2 9 1 17 18
+9 1 2 9 1 18 19
+10 1 2 9 1 19 1
+11 1 2 9 2 1 20
+12 1 2 9 2 20 21
+13 1 2 9 2 21 22
+14 1 2 9 2 22 23
+15 1 2 9 2 23 24
+16 1 2 9 2 24 25
+17 1 2 9 2 25 26
+18 1 2 9 2 26 27
+19 1 2 9 2 27 28
+20 1 2 9 2 28 4
+21 1 2 9 3 4 29
+22 1 2 9 3 29 30
+23 1 2 9 3 30 31
+24 1 2 9 3 31 32
+25 1 2 9 3 32 33
+26 1 2 9 3 33 34
+27 1 2 9 3 34 35
+28 1 2 9 3 35 36
+29 1 2 9 3 36 37
+30 1 2 9 3 37 3
+31 1 2 9 4 3 38
+32 1 2 9 4 38 39
+33 1 2 9 4 39 40
+34 1 2 9 4 40 41
+35 1 2 9 4 41 42
+36 1 2 9 4 42 43
+37 1 2 9 4 43 44
+38 1 2 9 4 44 45
+39 1 2 9 4 45 46
+40 1 2 9 4 46 2
+41 1 2 13 6 8 47
+42 1 2 13 6 47 48
+43 1 2 13 6 48 49
+44 1 2 13 6 49 50
+45 1 2 13 6 50 51
+46 1 2 13 6 51 52
+47 1 2 13 6 52 53
+48 1 2 13 6 53 54
+49 1 2 13 6 54 55
+50 1 2 13 6 55 56
+51 1 2 13 6 56 57
+52 1 2 13 6 57 6
+53 1 2 13 7 6 58
+54 1 2 13 7 58 59
+55 1 2 13 7 59 60
+56 1 2 13 7 60 61
+57 1 2 13 7 61 62
+58 1 2 13 7 62 63
+59 1 2 13 7 63 64
+60 1 2 13 7 64 65
+61 1 2 13 7 65 66
+62 1 2 13 7 66 67
+63 1 2 13 7 67 68
+64 1 2 13 7 68 5
+65 1 2 13 8 5 69
+66 1 2 13 8 69 70
+67 1 2 13 8 70 71
+68 1 2 13 8 71 72
+69 1 2 13 8 72 73
+70 1 2 13 8 73 74
+71 1 2 13 8 74 75
+72 1 2 13 8 75 76
+73 1 2 13 8 76 77
+74 1 2 13 8 77 78
+75 1 2 13 8 78 79
+76 1 2 13 8 79 7
+77 1 2 13 9 7 80
+78 1 2 13 9 80 81
+79 1 2 13 9 81 82
+80 1 2 13 9 82 83
+81 1 2 13 9 83 84
+82 1 2 13 9 84 85
+83 1 2 13 9 85 86
+84 1 2 13 9 86 87
+85 1 2 13 9 87 88
+86 1 2 13 9 88 89
+87 1 2 13 9 89 90
+88 1 2 13 9 90 8
+89 1 2 12 10 9 91
+90 1 2 12 10 91 92
+91 1 2 12 10 92 93
+92 1 2 12 10 93 94
+93 1 2 12 10 94 95
+94 1 2 12 10 95 96
+95 1 2 12 10 96 97
+96 1 2 12 10 97 98
+97 1 2 12 10 98 99
+98 1 2 12 10 99 100
+99 1 2 12 10 100 101
+100 1 2 12 10 101 102
+101 1 2 12 10 102 103
+102 1 2 12 10 103 104
+103 1 2 12 10 104 105
+104 1 2 12 10 105 106
+105 1 2 12 10 106 107
+106 1 2 12 10 107 108
+107 1 2 12 10 108 109
+108 1 2 12 10 109 110
+109 1 2 12 10 110 111
+110 1 2 12 10 111 112
+111 1 2 12 10 112 113
+112 1 2 12 10 113 114
+113 1 2 12 10 114 115
+114 1 2 12 10 115 116
+115 1 2 12 10 116 117
+116 1 2 12 10 117 9
+117 2 2 1 15 122 158 150
+118 2 2 1 15 122 150 135
+119 2 2 1 15 135 137 152
+120 2 2 1 15 98 99 126
+121 2 2 1 15 109 110 127
+122 2 2 1 15 102 103 128
+123 2 2 1 15 105 106 129
+124 2 2 1 15 95 96 130
+125 2 2 1 15 112 113 131
+126 2 2 1 15 91 92 132
+127 2 2 1 15 116 117 133
+128 2 2 1 15 118 148 126
+129 2 2 1 15 120 127 147
+130 2 2 1 15 119 128 149
+131 2 2 1 15 119 149 129
+132 2 2 1 15 118 130 148
+133 2 2 1 15 120 147 131
+134 2 2 1 15 121 146 132
+135 2 2 1 15 121 133 146
+136 2 2 1 15 99 138 126
+137 2 2 1 15 109 127 139
+138 2 2 1 15 102 128 140
+139 2 2 1 15 106 141 129
+140 2 2 1 15 92 144 132
+141 2 2 1 15 116 133 145
+142 2 2 1 15 95 130 142
+143 2 2 1 15 113 143 131
+144 2 2 1 15 10 134 151
+145 2 2 1 15 10 137 135
+146 2 2 1 15 91 132 146
+147 2 2 1 15 117 146 133
+148 2 2 1 15 112 131 147
+149 2 2 1 15 96 148 130
+150 2 2 1 15 105 129 149
+151 2 2 1 15 103 149 128
+152 2 2 1 15 98 126 148
+153 2 2 1 15 110 147 127
+154 2 2 1 15 10 151 136
+155 2 2 1 15 121 137 136
+156 2 2 1 15 121 157 137
+157 2 2 1 15 99 100 138
+158 2 2 1 15 101 102 140
+159 2 2 1 15 108 109 139
+160 2 2 1 15 106 107 141
+161 2 2 1 15 92 93 144
+162 2 2 1 15 94 95 142
+163 2 2 1 15 115 116 145
+164 2 2 1 15 113 114 143
+165 2 2 1 15 111 112 147
+166 2 2 1 15 96 97 148
+167 2 2 1 15 9 91 146
+168 2 2 1 15 9 146 117
+169 2 2 1 15 104 105 149
+170 2 2 1 15 103 104 149
+171 2 2 1 15 97 98 148
+172 2 2 1 15 110 111 147
+173 2 2 1 15 134 150 153
+174 2 2 1 15 10 150 134
+175 2 2 1 15 118 135 152
+176 2 2 1 15 120 151 134
+177 2 2 1 15 123 134 153
+178 2 2 1 15 124 137 157
+179 2 2 1 15 119 150 158
+180 2 2 1 15 123 154 134
+181 2 2 1 15 122 135 155
+182 2 2 1 15 125 156 136
+183 2 2 1 15 10 136 137
+184 2 2 1 15 125 136 151
+185 2 2 1 15 120 134 154
+186 2 2 1 15 118 155 135
+187 2 2 1 15 121 136 156
+188 2 2 1 15 120 154 127
+189 2 2 1 15 118 126 155
+190 2 2 1 15 119 158 128
+191 2 2 1 15 121 156 133
+192 2 2 1 15 121 132 157
+193 2 2 1 15 10 135 150
+194 2 2 1 15 119 129 165
+195 2 2 1 15 118 164 130
+196 2 2 1 15 120 131 163
+197 2 2 1 15 124 152 137
+198 2 2 1 15 122 138 162
+199 2 2 1 15 122 162 140
+200 2 2 1 15 123 161 139
+201 2 2 1 15 123 141 161
+202 2 2 1 15 124 160 142
+203 2 2 1 15 125 143 159
+204 2 2 1 15 124 144 160
+205 2 2 1 15 125 159 145
+206 2 2 1 15 127 154 139
+207 2 2 1 15 126 138 155
+208 2 2 1 15 128 158 140
+209 2 2 1 15 133 156 145
+210 2 2 1 15 132 144 157
+211 2 2 1 15 100 162 138
+212 2 2 1 15 108 139 161
+213 2 2 1 15 101 140 162
+214 2 2 1 15 107 161 141
+215 2 2 1 15 115 145 159
+216 2 2 1 15 93 160 144
+217 2 2 1 15 94 142 160
+218 2 2 1 15 114 159 143
+219 2 2 1 15 125 163 143
+220 2 2 1 15 124 142 164
+221 2 2 1 15 123 165 141
+222 2 2 1 15 119 153 150
+223 2 2 1 15 114 115 159
+224 2 2 1 15 93 94 160
+225 2 2 1 15 107 108 161
+226 2 2 1 15 100 101 162
+227 2 2 1 15 123 139 154
+228 2 2 1 15 122 155 138
+229 2 2 1 15 122 140 158
+230 2 2 1 15 125 145 156
+231 2 2 1 15 124 157 144
+232 2 2 1 15 125 151 163
+233 2 2 1 15 131 143 163
+234 2 2 1 15 124 164 152
+235 2 2 1 15 123 153 165
+236 2 2 1 15 130 164 142
+237 2 2 1 15 129 141 165
+238 2 2 1 15 120 163 151
+239 2 2 1 15 118 152 164
+240 2 2 1 15 119 165 153
+241 2 2 2 17 181 187 214
+242 2 2 2 17 180 186 215
+243 2 2 2 17 178 189 216
+244 2 2 2 17 179 217 188
+245 2 2 2 17 183 225 251
+246 2 2 2 17 182 250 224
+247 2 2 2 17 182 223 252
+248 2 2 2 17 185 222 253
+249 2 2 2 17 180 247 186
+250 2 2 2 17 179 188 249
+251 2 2 2 17 178 248 189
+252 2 2 2 17 181 246 187
+253 2 2 2 17 169 240 286
+254 2 2 2 17 168 288 241
+255 2 2 2 17 167 239 290
+256 2 2 2 17 166 292 238
+257 2 2 2 17 240 306 286
+258 2 2 2 17 241 288 307
+259 2 2 2 17 239 308 290
+260 2 2 2 17 238 292 309
+261 2 2 2 17 21 200 22
+262 2 2 2 17 44 201 45
+263 2 2 2 17 30 198 31
+264 2 2 2 17 35 199 36
+265 2 2 2 17 9 262 246
+266 2 2 2 17 111 264 248
+267 2 2 2 17 97 249 265
+268 2 2 2 17 104 263 247
+269 2 2 2 17 13 287 194
+270 2 2 2 17 17 195 289
+271 2 2 2 17 40 291 196
+272 2 2 2 17 26 197 293
+273 2 2 2 17 183 258 221
+274 2 2 2 17 184 220 259
+275 2 2 2 17 185 260 219
+276 2 2 2 17 184 261 218
+277 2 2 2 17 180 206 247
+278 2 2 2 17 179 249 204
+279 2 2 2 17 178 202 248
+280 2 2 2 17 181 208 246
+281 2 2 2 17 28 293 213
+282 2 2 2 17 38 212 291
+283 2 2 2 17 11 210 287
+284 2 2 2 17 19 289 211
+285 2 2 2 17 14 269 229
+286 2 2 2 17 41 267 226
+287 2 2 2 17 25 227 268
+288 2 2 2 17 32 266 228
+289 2 2 2 17 111 112 264
+290 2 2 2 17 96 97 265
+291 2 2 2 17 9 91 262
+292 2 2 2 17 104 105 263
+293 2 2 2 17 13 269 14
+294 2 2 2 17 40 267 41
+295 2 2 2 17 25 268 26
+296 2 2 2 17 31 266 32
+297 2 2 2 17 23 217 275
+298 2 2 2 17 43 276 216
+299 2 2 2 17 34 274 215
+300 2 2 2 17 16 277 214
+301 2 2 2 17 34 215 244
+302 2 2 2 17 23 243 217
+303 2 2 2 17 43 216 242
+304 2 2 2 17 16 214 245
+305 2 2 2 17 92 93 218
+306 2 2 2 17 113 114 219
+307 2 2 2 17 94 95 220
+308 2 2 2 17 106 107 221
+309 2 2 2 17 174 332 205
+310 2 2 2 17 175 203 333
+311 2 2 2 17 173 207 331
+312 2 2 2 17 177 209 330
+313 2 2 2 17 21 256 200
+314 2 2 2 17 45 201 257
+315 2 2 2 17 36 199 255
+316 2 2 2 17 30 254 198
+317 2 2 2 17 93 230 218
+318 2 2 2 17 94 220 230
+319 2 2 2 17 114 231 219
+320 2 2 2 17 107 232 221
+321 2 2 2 17 115 116 222
+322 2 2 2 17 101 102 223
+323 2 2 2 17 99 100 224
+324 2 2 2 17 108 109 225
+325 2 2 2 17 115 222 231
+326 2 2 2 17 101 223 233
+327 2 2 2 17 108 225 232
+328 2 2 2 17 100 233 224
+329 2 2 2 17 174 205 250
+330 2 2 2 17 175 251 203
+331 2 2 2 17 173 252 207
+332 2 2 2 17 177 253 209
+333 2 2 2 17 187 297 214
+334 2 2 2 17 186 296 215
+335 2 2 2 17 189 294 216
+336 2 2 2 17 188 217 295
+337 2 2 2 17 182 224 233
+338 2 2 2 17 182 233 223
+339 2 2 2 17 12 287 13
+340 2 2 2 17 17 289 18
+341 2 2 2 17 39 291 40
+342 2 2 2 17 26 293 27
+343 2 2 2 17 183 232 225
+344 2 2 2 17 185 231 222
+345 2 2 2 17 13 194 269
+346 2 2 2 17 40 196 267
+347 2 2 2 17 26 268 197
+348 2 2 2 17 31 198 266
+349 2 2 2 17 11 285 210
+350 2 2 2 17 19 211 284
+351 2 2 2 17 38 283 212
+352 2 2 2 17 28 213 282
+353 2 2 2 17 183 221 232
+354 2 2 2 17 185 219 231
+355 2 2 2 17 184 230 220
+356 2 2 2 17 184 218 230
+357 2 2 2 17 182 252 237
+358 2 2 2 17 183 251 239
+359 2 2 2 17 182 238 250
+360 2 2 2 17 185 253 240
+361 2 2 2 17 17 245 195
+362 2 2 2 17 35 244 199
+363 2 2 2 17 22 200 243
+364 2 2 2 17 44 242 201
+365 2 2 2 17 170 242 216
+366 2 2 2 17 171 217 243
+367 2 2 2 17 172 244 215
+368 2 2 2 17 176 245 214
+369 2 2 2 17 92 218 302
+370 2 2 2 17 113 219 303
+371 2 2 2 17 95 304 220
+372 2 2 2 17 106 221 305
+373 2 2 2 17 185 234 260
+374 2 2 2 17 184 259 235
+375 2 2 2 17 183 236 258
+376 2 2 2 17 184 241 261
+377 2 2 2 17 102 318 223
+378 2 2 2 17 116 319 222
+379 2 2 2 17 109 321 225
+380 2 2 2 17 99 224 320
+381 2 2 2 17 190 302 218
+382 2 2 2 17 191 303 219
+383 2 2 2 17 192 220 304
+384 2 2 2 17 193 305 221
+385 2 2 2 17 27 293 28
+386 2 2 2 17 38 291 39
+387 2 2 2 17 11 287 12
+388 2 2 2 17 18 289 19
+389 2 2 2 17 207 223 318
+390 2 2 2 17 209 222 319
+391 2 2 2 17 203 225 321
+392 2 2 2 17 205 320 224
+393 2 2 2 17 93 94 230
+394 2 2 2 17 114 115 231
+395 2 2 2 17 107 108 232
+396 2 2 2 17 100 101 233
+397 2 2 2 17 176 214 297
+398 2 2 2 17 172 215 296
+399 2 2 2 17 171 295 217
+400 2 2 2 17 170 216 294
+401 2 2 2 17 46 257 285
+402 2 2 2 17 20 284 256
+403 2 2 2 17 37 255 283
+404 2 2 2 17 29 282 254
+405 2 2 2 17 20 256 21
+406 2 2 2 17 45 257 46
+407 2 2 2 17 36 255 37
+408 2 2 2 17 29 254 30
+409 2 2 2 17 197 309 292
+410 2 2 2 17 196 290 308
+411 2 2 2 17 194 286 306
+412 2 2 2 17 195 307 288
+413 2 2 2 17 178 226 271
+414 2 2 2 17 179 272 227
+415 2 2 2 17 180 228 270
+416 2 2 2 17 181 229 273
+417 2 2 2 17 187 246 262
+418 2 2 2 17 189 248 264
+419 2 2 2 17 188 265 249
+420 2 2 2 17 186 247 263
+421 2 2 2 17 181 322 229
+422 2 2 2 17 178 323 226
+423 2 2 2 17 179 227 324
+424 2 2 2 17 180 325 228
+425 2 2 2 17 175 271 226
+426 2 2 2 17 174 227 272
+427 2 2 2 17 173 270 228
+428 2 2 2 17 177 273 229
+429 2 2 2 17 16 245 17
+430 2 2 2 17 34 244 35
+431 2 2 2 17 22 243 23
+432 2 2 2 17 43 242 44
+433 2 2 2 17 178 271 202
+434 2 2 2 17 179 204 272
+435 2 2 2 17 180 270 206
+436 2 2 2 17 181 273 208
+437 2 2 2 17 15 277 16
+438 2 2 2 17 42 276 43
+439 2 2 2 17 23 275 24
+440 2 2 2 17 33 274 34
+441 2 2 2 17 175 333 271
+442 2 2 2 17 174 272 332
+443 2 2 2 17 173 331 270
+444 2 2 2 17 177 330 273
+445 2 2 2 17 175 226 267
+446 2 2 2 17 174 268 227
+447 2 2 2 17 173 228 266
+448 2 2 2 17 177 229 269
+449 2 2 2 17 181 214 277
+450 2 2 2 17 180 215 274
+451 2 2 2 17 178 216 276
+452 2 2 2 17 179 275 217
+453 2 2 2 17 210 285 257
+454 2 2 2 17 211 256 284
+455 2 2 2 17 212 283 255
+456 2 2 2 17 213 254 282
+457 2 2 2 17 191 260 294
+458 2 2 2 17 192 295 259
+459 2 2 2 17 190 261 297
+460 2 2 2 17 193 258 296
+461 2 2 2 17 185 317 234
+462 2 2 2 17 184 235 316
+463 2 2 2 17 183 315 236
+464 2 2 2 17 182 237 314
+465 2 2 2 17 182 314 238
+466 2 2 2 17 183 239 315
+467 2 2 2 17 185 240 317
+468 2 2 2 17 184 316 241
+469 2 2 2 17 4 282 29
+470 2 2 2 17 4 28 282
+471 2 2 2 17 3 283 38
+472 2 2 2 17 3 37 283
+473 2 2 2 17 1 284 20
+474 2 2 2 17 1 19 284
+475 2 2 2 17 2 285 11
+476 2 2 2 17 2 46 285
+477 2 2 2 17 181 277 322
+478 2 2 2 17 178 276 323
+479 2 2 2 17 179 324 275
+480 2 2 2 17 180 274 325
+481 2 2 2 17 170 313 242
+482 2 2 2 17 171 243 312
+483 2 2 2 17 172 311 244
+484 2 2 2 17 176 307 245
+485 2 2 2 17 205 224 250
+486 2 2 2 17 203 251 225
+487 2 2 2 17 207 252 223
+488 2 2 2 17 209 253 222
+489 2 2 2 17 173 237 252
+490 2 2 2 17 174 250 238
+491 2 2 2 17 175 239 251
+492 2 2 2 17 177 240 253
+493 2 2 2 17 171 235 259
+494 2 2 2 17 170 260 234
+495 2 2 2 17 172 258 236
+496 2 2 2 17 176 261 241
+497 2 2 2 17 193 221 258
+498 2 2 2 17 192 259 220
+499 2 2 2 17 191 219 260
+500 2 2 2 17 190 218 261
+501 2 2 2 17 170 294 260
+502 2 2 2 17 171 259 295
+503 2 2 2 17 176 297 261
+504 2 2 2 17 172 296 258
+505 2 2 2 17 192 265 295
+506 2 2 2 17 191 294 264
+507 2 2 2 17 193 296 263
+508 2 2 2 17 190 297 262
+509 2 2 2 17 198 254 298
+510 2 2 2 17 199 299 255
+511 2 2 2 17 200 256 300
+512 2 2 2 17 201 301 257
+513 2 2 2 17 167 315 239
+514 2 2 2 17 166 238 314
+515 2 2 2 17 169 317 240
+516 2 2 2 17 168 241 316
+517 2 2 2 17 201 242 313
+518 2 2 2 17 200 312 243
+519 2 2 2 17 199 244 311
+520 2 2 2 17 195 245 307
+521 2 2 2 17 9 334 117
+522 2 2 2 17 103 104 335
+523 2 2 2 17 110 111 337
+524 2 2 2 17 97 98 336
+525 2 2 2 17 24 324 25
+526 2 2 2 17 41 323 42
+527 2 2 2 17 14 322 15
+528 2 2 2 17 32 325 33
+529 2 2 2 17 189 264 294
+530 2 2 2 17 188 295 265
+531 2 2 2 17 186 263 296
+532 2 2 2 17 187 262 297
+533 2 2 2 17 175 308 239
+534 2 2 2 17 174 238 309
+535 2 2 2 17 173 310 237
+536 2 2 2 17 172 236 311
+537 2 2 2 17 171 312 235
+538 2 2 2 17 170 234 313
+539 2 2 2 17 177 306 240
+540 2 2 2 17 176 241 307
+541 2 2 2 17 198 298 329
+542 2 2 2 17 199 328 299
+543 2 2 2 17 200 300 327
+544 2 2 2 17 201 326 301
+545 2 2 2 17 237 329 314
+546 2 2 2 17 236 315 328
+547 2 2 2 17 235 327 316
+548 2 2 2 17 234 317 326
+549 2 2 2 17 112 113 303
+550 2 2 2 17 95 96 304
+551 2 2 2 17 105 106 305
+552 2 2 2 17 91 92 302
+553 2 2 2 17 208 334 246
+554 2 2 2 17 202 337 248
+555 2 2 2 17 204 249 336
+556 2 2 2 17 206 335 247
+557 2 2 2 17 32 228 325
+558 2 2 2 17 41 226 323
+559 2 2 2 17 25 324 227
+560 2 2 2 17 14 229 322
+561 2 2 2 17 102 103 318
+562 2 2 2 17 109 110 321
+563 2 2 2 17 98 99 320
+564 2 2 2 17 116 117 319
+565 2 2 2 17 166 314 329
+566 2 2 2 17 167 328 315
+567 2 2 2 17 168 316 327
+568 2 2 2 17 169 326 317
+569 2 2 2 17 9 246 334
+570 2 2 2 17 104 247 335
+571 2 2 2 17 111 248 337
+572 2 2 2 17 97 336 249
+573 2 2 2 17 213 298 254
+574 2 2 2 17 212 255 299
+575 2 2 2 17 211 300 256
+576 2 2 2 17 210 257 301
+577 2 2 2 17 208 273 330
+578 2 2 2 17 202 271 333
+579 2 2 2 17 204 332 272
+580 2 2 2 17 206 270 331
+581 2 2 2 17 117 334 281
+582 2 2 2 17 103 335 278
+583 2 2 2 17 110 337 280
+584 2 2 2 17 98 279 336
+585 2 2 2 17 91 302 262
+586 2 2 2 17 105 305 263
+587 2 2 2 17 112 303 264
+588 2 2 2 17 96 265 304
+589 2 2 2 17 190 262 302
+590 2 2 2 17 193 263 305
+591 2 2 2 17 191 264 303
+592 2 2 2 17 192 304 265
+593 2 2 2 17 173 266 310
+594 2 2 2 17 175 267 308
+595 2 2 2 17 174 309 268
+596 2 2 2 17 177 269 306
+597 2 2 2 17 167 290 299
+598 2 2 2 17 166 298 292
+599 2 2 2 17 169 286 301
+600 2 2 2 17 168 300 288
+601 2 2 2 17 202 280 337
+602 2 2 2 17 204 336 279
+603 2 2 2 17 206 278 335
+604 2 2 2 17 208 281 334
+605 2 2 2 17 194 287 286
+606 2 2 2 17 195 288 289
+607 2 2 2 17 196 291 290
+608 2 2 2 17 197 292 293
+609 2 2 2 17 210 301 286
+610 2 2 2 17 211 288 300
+611 2 2 2 17 212 299 290
+612 2 2 2 17 213 292 298
+613 2 2 2 17 210 286 287
+614 2 2 2 17 211 289 288
+615 2 2 2 17 212 290 291
+616 2 2 2 17 213 293 292
+617 2 2 2 17 166 329 298
+618 2 2 2 17 167 299 328
+619 2 2 2 17 168 327 300
+620 2 2 2 17 169 301 326
+621 2 2 2 17 98 320 279
+622 2 2 2 17 110 280 321
+623 2 2 2 17 103 278 318
+624 2 2 2 17 117 281 319
+625 2 2 2 17 198 310 266
+626 2 2 2 17 196 308 267
+627 2 2 2 17 197 268 309
+628 2 2 2 17 194 306 269
+629 2 2 2 17 209 319 281
+630 2 2 2 17 203 321 280
+631 2 2 2 17 205 279 320
+632 2 2 2 17 207 318 278
+633 2 2 2 17 208 330 281
+634 2 2 2 17 209 281 330
+635 2 2 2 17 207 278 331
+636 2 2 2 17 206 331 278
+637 2 2 2 17 205 332 279
+638 2 2 2 17 204 279 332
+639 2 2 2 17 203 280 333
+640 2 2 2 17 202 333 280
+641 2 2 2 17 15 322 277
+642 2 2 2 17 42 323 276
+643 2 2 2 17 24 275 324
+644 2 2 2 17 33 325 274
+645 2 2 2 17 237 310 329
+646 2 2 2 17 236 328 311
+647 2 2 2 17 235 312 327
+648 2 2 2 17 234 326 313
+649 2 2 2 17 198 329 310
+650 2 2 2 17 199 311 328
+651 2 2 2 17 200 327 312
+652 2 2 2 17 201 313 326
+653 2 2 3 19 346 42 85
+654 2 2 3 19 347 15 52
+655 2 2 3 19 85 42 340
+656 2 2 3 19 52 15 341
+657 2 2 3 19 381 48 11
+658 2 2 3 19 380 81 38
+659 2 2 3 19 371 33 74
+660 2 2 3 19 372 24 63
+661 2 2 3 19 81 358 38
+662 2 2 3 19 48 357 11
+663 2 2 3 19 33 344 74
+664 2 2 3 19 24 345 63
+665 2 2 3 19 360 69 4
+666 2 2 3 19 361 58 1
+667 2 2 3 19 4 69 342
+668 2 2 3 19 1 58 343
+669 2 2 3 19 15 16 341
+670 2 2 3 19 42 43 340
+671 2 2 3 19 2 11 357
+672 2 2 3 19 3 38 358
+673 2 2 3 19 1 352 19
+674 2 2 3 19 18 19 349
+675 2 2 3 19 45 46 348
+676 2 2 3 19 16 17 367
+677 2 2 3 19 17 18 355
+678 2 2 3 19 43 44 368
+679 2 2 3 19 44 45 356
+680 2 2 3 19 2 359 46
+681 2 2 3 19 5 68 342
+682 2 2 3 19 63 345 64
+683 2 2 3 19 74 344 75
+684 2 2 3 19 24 25 345
+685 2 2 3 19 33 34 344
+686 2 2 3 19 52 341 53
+687 2 2 3 19 85 340 86
+688 2 2 3 19 6 57 343
+689 2 2 3 19 4 362 28
+690 2 2 3 19 7 79 353
+691 2 2 3 19 8 90 354
+692 2 2 3 19 64 376 65
+693 2 2 3 19 75 375 76
+694 2 2 3 19 53 367 54
+695 2 2 3 19 86 368 87
+696 2 2 3 19 65 374 66
+697 2 2 3 19 67 362 68
+698 2 2 3 19 76 373 77
+699 2 2 3 19 78 377 79
+700 2 2 3 19 27 28 378
+701 2 2 3 19 36 37 379
+702 2 2 3 19 25 26 376
+703 2 2 3 19 26 27 374
+704 2 2 3 19 3 377 37
+705 2 2 3 19 34 35 375
+706 2 2 3 19 35 36 373
+707 2 2 3 19 56 352 57
+708 2 2 3 19 89 359 90
+709 2 2 3 19 54 355 55
+710 2 2 3 19 87 356 88
+711 2 2 3 19 66 378 67
+712 2 2 3 19 77 379 78
+713 2 2 3 19 55 349 56
+714 2 2 3 19 88 348 89
+715 2 2 3 19 3 358 80
+716 2 2 3 19 2 357 47
+717 2 2 3 19 4 342 68
+718 2 2 3 19 1 343 57
+719 2 2 3 19 49 351 50
+720 2 2 3 19 82 350 83
+721 2 2 3 19 51 347 52
+722 2 2 3 19 84 346 85
+723 2 2 3 19 3 80 353
+724 2 2 3 19 2 47 354
+725 2 2 3 19 11 12 381
+726 2 2 3 19 38 39 380
+727 2 2 3 19 1 57 352
+728 2 2 3 19 4 68 362
+729 2 2 3 19 50 339 51
+730 2 2 3 19 83 338 84
+731 2 2 3 19 16 53 341
+732 2 2 3 19 43 86 340
+733 2 2 3 19 34 75 344
+734 2 2 3 19 25 64 345
+735 2 2 3 19 58 361 59
+736 2 2 3 19 69 360 70
+737 2 2 3 19 1 20 361
+738 2 2 3 19 4 29 360
+739 2 2 3 19 7 353 80
+740 2 2 3 19 8 354 47
+741 2 2 3 19 48 381 49
+742 2 2 3 19 81 380 82
+743 2 2 3 19 20 21 364
+744 2 2 3 19 29 30 363
+745 2 2 3 19 60 366 61
+746 2 2 3 19 71 365 72
+747 2 2 3 19 6 343 58
+748 2 2 3 19 5 342 69
+749 2 2 3 19 2 354 90
+750 2 2 3 19 3 353 79
+751 2 2 3 19 23 24 372
+752 2 2 3 19 32 33 371
+753 2 2 3 19 62 372 63
+754 2 2 3 19 73 371 74
+755 2 2 3 19 22 23 370
+756 2 2 3 19 21 22 366
+757 2 2 3 19 30 31 365
+758 2 2 3 19 31 32 369
+759 2 2 3 19 61 366 370
+760 2 2 3 19 72 365 369
+761 2 2 3 19 2 90 359
+762 2 2 3 19 3 79 377
+763 2 2 3 19 34 375 75
+764 2 2 3 19 35 373 76
+765 2 2 3 19 35 76 375
+766 2 2 3 19 36 77 373
+767 2 2 3 19 36 379 77
+768 2 2 3 19 43 368 86
+769 2 2 3 19 44 356 87
+770 2 2 3 19 44 87 368
+771 2 2 3 19 45 348 88
+772 2 2 3 19 45 88 356
+773 2 2 3 19 46 89 348
+774 2 2 3 19 46 359 89
+775 2 2 3 19 16 367 53
+776 2 2 3 19 17 355 54
+777 2 2 3 19 18 55 355
+778 2 2 3 19 19 352 56
+779 2 2 3 19 25 376 64
+780 2 2 3 19 26 65 376
+781 2 2 3 19 27 66 374
+782 2 2 3 19 27 378 66
+783 2 2 3 19 28 67 378
+784 2 2 3 19 17 54 367
+785 2 2 3 19 18 349 55
+786 2 2 3 19 19 56 349
+787 2 2 3 19 26 374 65
+788 2 2 3 19 28 362 67
+789 2 2 3 19 62 370 372
+790 2 2 3 19 73 369 371
+791 2 2 3 19 71 363 365
+792 2 2 3 19 60 364 366
+793 2 2 3 19 61 370 62
+794 2 2 3 19 72 369 73
+795 2 2 3 19 22 370 366
+796 2 2 3 19 31 369 365
+797 2 2 3 19 23 372 370
+798 2 2 3 19 47 357 48
+799 2 2 3 19 80 358 81
+800 2 2 3 19 32 371 369
+801 2 2 3 19 59 364 60
+802 2 2 3 19 70 363 71
+803 2 2 3 19 21 366 364
+804 2 2 3 19 30 365 363
+805 2 2 3 19 37 377 379
+806 2 2 3 19 78 379 377
+807 2 2 3 19 12 351 381
+808 2 2 3 19 39 350 380
+809 2 2 3 19 14 15 347
+810 2 2 3 19 41 42 346
+811 2 2 3 19 40 41 338
+812 2 2 3 19 12 13 351
+813 2 2 3 19 39 40 350
+814 2 2 3 19 13 14 339
+815 2 2 3 19 41 346 338
+816 2 2 3 19 14 347 339
+817 2 2 3 19 13 339 351
+818 2 2 3 19 40 338 350
+819 2 2 3 19 59 361 364
+820 2 2 3 19 70 360 363
+821 2 2 3 19 49 381 351
+822 2 2 3 19 82 380 350
+823 2 2 3 19 20 364 361
+824 2 2 3 19 29 363 360
+825 2 2 3 19 84 338 346
+826 2 2 3 19 51 339 347
+827 2 2 3 19 50 351 339
+828 2 2 3 19 83 350 338
+$EndElements
Index: mesh/circle.msh
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- mesh/circle.msh	(date 1546605883000)
+++ mesh/circle.msh	(date 1546605883000)
@@ -0,0 +1,588 @@
+$MeshFormat
+2.2 0 8
+$EndMeshFormat
+$Nodes
+183
+1 -0 1 0
+2 0 -1 0
+3 -1.05 0 0
+4 1.05 0 0
+5 -0.195090322014414 0.9807852804035714 0
+6 -0.3826834323633073 0.923879532512025 0
+7 -0.5555702330176863 0.8314696123038254 0
+8 -0.7071067811846985 0.7071067811883965 0
+9 -0.8314696123008889 0.5555702330220811 0
+10 -0.9238795325100324 0.3826834323681179 0
+11 -0.9807852804025187 0.1950903220197066 0
+12 -1 3.95711813670894e-12 0
+13 -0.9807852804038799 -0.1950903220128633 0
+14 -0.9238795325122888 -0.3826834323626707 0
+15 -0.8314696123036199 -0.5555702330179939 0
+16 -0.7071067811874315 -0.7071067811856635 0
+17 -0.5555702330200581 -0.8314696123022406 0
+18 -0.3826834323649647 -0.9238795325113386 0
+19 -0.195090322015305 -0.9807852804033942 0
+20 0.195090322014414 -0.9807852804035714 0
+21 0.3826834323633073 -0.923879532512025 0
+22 0.5555702330176863 -0.8314696123038254 0
+23 0.7071067811846985 -0.7071067811883965 0
+24 0.8314696123008889 -0.5555702330220811 0
+25 0.9238795325100324 -0.3826834323681179 0
+26 0.9807852804025187 -0.1950903220197066 0
+27 1 -3.95711813670894e-12 0
+28 0.9807852804038799 0.1950903220128633 0
+29 0.9238795325122888 0.3826834323626707 0
+30 0.8314696123036199 0.5555702330179939 0
+31 0.7071067811874315 0.7071067811856635 0
+32 0.5555702330200581 0.8314696123022406 0
+33 0.3826834323649647 0.9238795325113386 0
+34 0.195090322015305 0.9807852804033942 0
+35 -1.032121754668428 -0.1929369937056265 0
+36 -0.9790958408752898 -0.3793037494946621 0
+37 -0.8927279925173329 -0.5527537710192241 0
+38 -0.7759593630834787 -0.7073804258269254 0
+39 -0.6327663682006347 -0.8379180886424274 0
+40 -0.4680252735683038 -0.9399214559213522 0
+41 -0.2873461395792126 -1.009916925330457 0
+42 -0.09688177744043645 -1.045520885109418 0
+43 0.09688177743265204 -1.04552088511014 0
+44 0.2873461395726027 -1.009916925332338 0
+45 0.4680252735630861 -0.9399214559239504 0
+46 0.6327663681968847 -0.8379180886452593 0
+47 0.7759593630809053 -0.7073804258297481 0
+48 0.8927279925159047 -0.5527537710215307 0
+49 0.9790958408746626 -0.379303749496281 0
+50 1.032121754668271 -0.1929369937064675 0
+51 1.032121754668428 0.1929369937056265 0
+52 0.9790958408752898 0.3793037494946621 0
+53 0.8927279925173329 0.5527537710192241 0
+54 0.7759593630834787 0.7073804258269254 0
+55 0.6327663682006347 0.8379180886424274 0
+56 0.4680252735683038 0.9399214559213522 0
+57 0.2873461395792126 1.009916925330457 0
+58 0.09688177744043645 1.045520885109418 0
+59 -0.09688177743265204 1.04552088511014 0
+60 -0.2873461395726027 1.009916925332338 0
+61 -0.4680252735630861 0.9399214559239504 0
+62 -0.6327663681968847 0.8379180886452593 0
+63 -0.7759593630809053 0.7073804258297481 0
+64 -0.8927279925159047 0.5527537710215307 0
+65 -0.9790958408746626 0.379303749496281 0
+66 -1.032121754668271 0.1929369937064675 0
+67 -4.533410683886056e-16 1.498801083243961e-15 0
+68 0.07075739312703015 -0.5028773339912622 0
+69 -0.07075739312703079 0.502877333991264 0
+70 0.471892294868368 -0.1794084026361136 0
+71 -0.4718922948683678 0.179408402636114 0
+72 0.4021450306184735 0.3216652295638255 0
+73 -0.4021450306184737 -0.3216652295638246 0
+74 0.425559411639781 -0.517197084928254 0
+75 -0.4255594116397811 0.5171970849282543 0
+76 -0.2336880834281134 -0.6169701151008357 0
+77 0.2336880834281133 0.6169701151008363 0
+78 0.6602998537774328 0.1279936378552513 0
+79 -0.6602998537774332 -0.1279936378552513 0
+80 0.1980498597709889 -0.2374123554804487 0
+81 -0.1980498597709894 0.2374123554804506 0
+82 -0.1207283834284401 -0.2643158470425732 0
+83 0.1207283834284399 0.2643158470425763 0
+84 0.2731239072033512 0.03497821675342264 0
+85 -0.2731239072033503 -0.03497821675341971 0
+86 0.229736476449995 -0.7011063244993793 0
+87 -0.2297364764499963 0.7011063244993793 0
+88 0.6428153998956199 -0.3621012130908127 0
+89 -0.6428153998956195 0.3621012130908132 0
+90 -0.03018656704765335 -0.7501793138975532 0
+91 0.0301865670476537 0.7501793138975541 0
+92 0.7360120718899237 -0.1173989666304203 0
+93 -0.7360120718899238 0.1173989666304205 0
+94 0.6621445776327304 0.3802056991577092 0
+95 -0.6621445776327305 -0.3802056991577089 0
+96 -0.4988266549079969 -0.5798252773223824 0
+97 0.4988266549079969 0.5798252773223826 0
+98 -0.4546067273012825 -0.1318735306597677 0
+99 0.4546067273012832 0.1318735306597693 0
+100 -0.1435267440787629 -0.4598921498894356 0
+101 0.1435267440787618 0.4598921498894378 0
+102 0.232330764413726 -0.4140197635163685 0
+103 -0.2323307644137261 0.4140197635163699 0
+104 0.3857649253243682 -0.7239674457105896 0
+105 -0.3857649253243687 0.7239674457105899 0
+106 0.6356118865210539 -0.5204863733202444 0
+107 -0.6356118865210537 0.5204863733202444 0
+108 -0.374146867051282 0.3107190834687044 0
+109 0.3741468670512829 -0.3107190834687041 0
+110 -0.7787321777426599 -0.2544902678161152 0
+111 0.7787321777426598 0.2544902678161153 0
+112 -0.3971679445010377 -0.7274134238911376 0
+113 0.3971679445010378 0.7274134238911378 0
+114 -0.1989862677229265 -0.7822397494366177 0
+115 0.1989862677229267 0.7822397494366182 0
+116 0.8045294223893675 0.04908386390525517 0
+117 -0.8045294223893676 -0.04908386390525502 0
+118 -0.04299821727576689 0.3253713971873942 0
+119 0.04299821727576607 -0.3253713971873922 0
+120 -0.2804477713091728 -0.205800301953545 0
+121 0.280447771309172 0.2058003019535473 0
+122 -0.09467377490143977 0.8287435889311011 0
+123 0.09467377490143983 -0.8287435889311006 0
+124 -0.7935435954577411 0.254627753262554 0
+125 0.7935435954577411 -0.2546277532625538 0
+126 -0.6526139207056403 -0.5379588989738783 0
+127 0.6526139207056402 0.5379588989738783 0
+128 0.5966298788168067 -0.02602701922420813 0
+129 -0.5966298788168073 0.02602701922420828 0
+130 -0.3530491634162058 -0.4922507851135399 0
+131 0.3530491634162058 0.4922507851135404 0
+132 0.03541757427332835 -0.1639583386419461 0
+133 -0.03541757427332968 0.1639583386419488 0
+134 0.3165436153065811 -0.1248106485390922 0
+135 -0.3165436153065817 0.1248106485390944 0
+136 0.1305014631580658 0.100343727088952 0
+137 -0.1305014631580657 -0.100343727088949 0
+138 -0.5456852224320405 -0.2614133512020199 0
+139 0.5456852224320399 0.2614133512020216 0
+140 -0.07137609054749335 -0.596430752245755 0
+141 0.0713760905474925 0.5964307522457564 0
+142 0.1652344900491779 -0.07161214939937877 0
+143 -0.1652344900491788 0.07161214939938179 0
+144 -0.09537171023023377 0.6571022508602771 0
+145 0.09537171023023312 -0.6571022508602762 0
+146 0.6220367830975346 -0.2190050437525734 0
+147 -0.6220367830975347 0.2190050437525736 0
+148 0.2599794185702106 0.3487848627125854 0
+149 -0.2599794185702111 -0.3487848627125836 0
+150 0.422559284699278 -0.03267886459724441 0
+151 -0.4225592846992779 0.03267886459724586 0
+152 0.5143647213331032 0.4289082494961816 0
+153 -0.5143647213331035 -0.4289082494961813 0
+154 0.2685500035257709 -0.5692031080691919 0
+155 -0.268550003525772 0.5692031080691927 0
+156 0.07414329243192445 0.8740860313366287 0
+157 -0.07414329243192373 -0.8740860313366279 0
+158 -0.8709443369178496 0.09721703179162292 0
+159 0.8709443369178498 -0.09721703179162268 0
+160 0.2610247225191039 -0.838348672137769 0
+161 -0.261024722519104 0.8383486721377693 0
+162 0.7713172449141614 -0.4196349316020794 0
+163 -0.771317244914161 0.4196349316020797 0
+164 -0.5092942825323103 0.3803519064970807 0
+165 0.5092942825323111 -0.3803519064970813 0
+166 0.5485691348728823 -0.6682268554935447 0
+167 -0.5485691348728825 0.668226855493545 0
+168 0.7869319347128115 0.420623882336996 0
+169 -0.7869319347128115 -0.420623882336996 0
+170 -0.5691116323692524 -0.693464530493791 0
+171 0.5691116323692524 0.693464530493791 0
+172 1.023078470007487 0.0818300874446686 0
+173 -1.023078470007487 -0.0818300874446686 0
+174 1.02307847001182 -0.08183008744664261 0
+175 -1.02307847001182 0.08183008744664261 0
+176 -1.008996376270652 0.1174643507941935 0
+177 1.008996376270652 -0.1174643507941935 0
+178 -1.008996376269949 -0.1174643507898003 0
+179 1.008996376269949 0.1174643507898003 0
+180 -1.024359490002495 -0.02727669581357049 0
+181 1.024359490002495 0.02727669581357049 0
+182 -1.02435949000394 0.02727669581686657 0
+183 1.02435949000394 -0.02727669581686657 0
+$EndNodes
+$Elements
+396
+1 1 2 9 1 1 5
+2 1 2 9 1 5 6
+3 1 2 9 1 6 7
+4 1 2 9 1 7 8
+5 1 2 9 1 8 9
+6 1 2 9 1 9 10
+7 1 2 9 1 10 11
+8 1 2 9 1 11 12
+9 1 2 9 1 12 13
+10 1 2 9 1 13 14
+11 1 2 9 1 14 15
+12 1 2 9 1 15 16
+13 1 2 9 1 16 17
+14 1 2 9 1 17 18
+15 1 2 9 1 18 19
+16 1 2 9 1 19 2
+17 1 2 9 2 2 20
+18 1 2 9 2 20 21
+19 1 2 9 2 21 22
+20 1 2 9 2 22 23
+21 1 2 9 2 23 24
+22 1 2 9 2 24 25
+23 1 2 9 2 25 26
+24 1 2 9 2 26 27
+25 1 2 9 2 27 28
+26 1 2 9 2 28 29
+27 1 2 9 2 29 30
+28 1 2 9 2 30 31
+29 1 2 9 2 31 32
+30 1 2 9 2 32 33
+31 1 2 9 2 33 34
+32 1 2 9 2 34 1
+33 1 2 99 5 3 35
+34 1 2 99 5 35 36
+35 1 2 99 5 36 37
+36 1 2 99 5 37 38
+37 1 2 99 5 38 39
+38 1 2 99 5 39 40
+39 1 2 99 5 40 41
+40 1 2 99 5 41 42
+41 1 2 99 5 42 43
+42 1 2 99 5 43 44
+43 1 2 99 5 44 45
+44 1 2 99 5 45 46
+45 1 2 99 5 46 47
+46 1 2 99 5 47 48
+47 1 2 99 5 48 49
+48 1 2 99 5 49 50
+49 1 2 99 5 50 4
+50 1 2 99 6 4 51
+51 1 2 99 6 51 52
+52 1 2 99 6 52 53
+53 1 2 99 6 53 54
+54 1 2 99 6 54 55
+55 1 2 99 6 55 56
+56 1 2 99 6 56 57
+57 1 2 99 6 57 58
+58 1 2 99 6 58 59
+59 1 2 99 6 59 60
+60 1 2 99 6 60 61
+61 1 2 99 6 61 62
+62 1 2 99 6 62 63
+63 1 2 99 6 63 64
+64 1 2 99 6 64 65
+65 1 2 99 6 65 66
+66 1 2 99 6 66 3
+67 2 2 1 4 139 78 111
+68 2 2 1 4 138 79 110
+69 2 2 1 4 94 139 111
+70 2 2 1 4 95 138 110
+71 2 2 1 4 130 112 76
+72 2 2 1 4 131 113 77
+73 2 2 1 4 96 112 130
+74 2 2 1 4 97 113 131
+75 2 2 1 4 70 165 146
+76 2 2 1 4 71 164 147
+77 2 2 1 4 70 109 165
+78 2 2 1 4 71 108 164
+79 2 2 1 4 6 7 105
+80 2 2 1 4 21 22 104
+81 2 2 1 4 23 24 106
+82 2 2 1 4 8 9 107
+83 2 2 1 4 167 75 105
+84 2 2 1 4 166 74 104
+85 2 2 1 4 107 75 167
+86 2 2 1 4 106 74 166
+87 2 2 1 4 77 115 141
+88 2 2 1 4 76 114 140
+89 2 2 1 4 91 141 115
+90 2 2 1 4 90 140 114
+91 2 2 1 4 69 144 155
+92 2 2 1 4 68 145 154
+93 2 2 1 4 6 105 161
+94 2 2 1 4 21 104 160
+95 2 2 1 4 24 162 106
+96 2 2 1 4 9 163 107
+97 2 2 1 4 69 155 103
+98 2 2 1 4 68 154 102
+99 2 2 1 4 92 116 128
+100 2 2 1 4 93 117 129
+101 2 2 1 4 78 128 116
+102 2 2 1 4 79 129 117
+103 2 2 1 4 68 119 100
+104 2 2 1 4 69 118 101
+105 2 2 1 4 82 100 119
+106 2 2 1 4 83 101 118
+107 2 2 1 4 13 110 117
+108 2 2 1 4 28 111 116
+109 2 2 1 4 18 114 112
+110 2 2 1 4 33 115 113
+111 2 2 1 4 18 19 114
+112 2 2 1 4 33 34 115
+113 2 2 1 4 12 13 117
+114 2 2 1 4 27 28 116
+115 2 2 1 4 80 102 109
+116 2 2 1 4 81 103 108
+117 2 2 1 4 79 98 129
+118 2 2 1 4 78 99 128
+119 2 2 1 4 68 102 119
+120 2 2 1 4 69 103 118
+121 2 2 1 4 80 119 102
+122 2 2 1 4 81 118 103
+123 2 2 1 4 77 101 131
+124 2 2 1 4 76 100 130
+125 2 2 1 4 1 5 122
+126 2 2 1 4 2 20 123
+127 2 2 1 4 10 11 124
+128 2 2 1 4 25 26 125
+129 2 2 1 4 75 108 103
+130 2 2 1 4 74 109 102
+131 2 2 1 4 87 161 105
+132 2 2 1 4 86 160 104
+133 2 2 1 4 88 106 162
+134 2 2 1 4 89 107 163
+135 2 2 1 4 80 109 134
+136 2 2 1 4 81 108 135
+137 2 2 1 4 1 122 156
+138 2 2 1 4 2 123 157
+139 2 2 1 4 26 159 125
+140 2 2 1 4 11 158 124
+141 2 2 1 4 84 99 121
+142 2 2 1 4 85 98 120
+143 2 2 1 4 72 121 99
+144 2 2 1 4 73 120 98
+145 2 2 1 4 78 116 111
+146 2 2 1 4 79 117 110
+147 2 2 1 4 76 112 114
+148 2 2 1 4 77 113 115
+149 2 2 1 4 13 14 110
+150 2 2 1 4 28 29 111
+151 2 2 1 4 17 18 112
+152 2 2 1 4 32 33 113
+153 2 2 1 4 98 151 129
+154 2 2 1 4 99 150 128
+155 2 2 1 4 70 134 109
+156 2 2 1 4 71 135 108
+157 2 2 1 4 101 148 131
+158 2 2 1 4 100 149 130
+159 2 2 1 4 79 138 98
+160 2 2 1 4 78 139 99
+161 2 2 1 4 88 146 165
+162 2 2 1 4 89 147 164
+163 2 2 1 4 91 156 122
+164 2 2 1 4 90 157 123
+165 2 2 1 4 92 125 159
+166 2 2 1 4 93 124 158
+167 2 2 1 4 76 140 100
+168 2 2 1 4 77 141 101
+169 2 2 1 4 94 111 168
+170 2 2 1 4 95 110 169
+171 2 2 1 4 86 104 154
+172 2 2 1 4 87 105 155
+173 2 2 1 4 74 154 104
+174 2 2 1 4 75 155 105
+175 2 2 1 4 87 155 144
+176 2 2 1 4 86 154 145
+177 2 2 1 4 73 98 138
+178 2 2 1 4 72 99 139
+179 2 2 1 4 67 143 137
+180 2 2 1 4 67 142 136
+181 2 2 1 4 83 133 136
+182 2 2 1 4 82 132 137
+183 2 2 1 4 83 118 133
+184 2 2 1 4 82 119 132
+185 2 2 1 4 15 16 126
+186 2 2 1 4 30 31 127
+187 2 2 1 4 85 151 98
+188 2 2 1 4 84 150 99
+189 2 2 1 4 75 107 164
+190 2 2 1 4 74 106 165
+191 2 2 1 4 89 164 107
+192 2 2 1 4 88 165 106
+193 2 2 1 4 82 137 120
+194 2 2 1 4 83 136 121
+195 2 2 1 4 85 120 137
+196 2 2 1 4 84 121 136
+197 2 2 1 4 96 170 112
+198 2 2 1 4 97 171 113
+199 2 2 1 4 82 149 100
+200 2 2 1 4 83 148 101
+201 2 2 1 4 68 100 140
+202 2 2 1 4 69 101 141
+203 2 2 1 4 20 21 160
+204 2 2 1 4 5 6 161
+205 2 2 1 4 9 10 163
+206 2 2 1 4 24 25 162
+207 2 2 1 4 67 133 143
+208 2 2 1 4 67 132 142
+209 2 2 1 4 2 157 19
+210 2 2 1 4 1 156 34
+211 2 2 1 4 11 12 158
+212 2 2 1 4 26 27 159
+213 2 2 1 4 97 152 127
+214 2 2 1 4 96 153 126
+215 2 2 1 4 94 127 152
+216 2 2 1 4 95 126 153
+217 2 2 1 4 70 146 128
+218 2 2 1 4 71 147 129
+219 2 2 1 4 92 128 146
+220 2 2 1 4 93 129 147
+221 2 2 1 4 90 123 145
+222 2 2 1 4 91 122 144
+223 2 2 1 4 86 145 123
+224 2 2 1 4 87 144 122
+225 2 2 1 4 88 125 146
+226 2 2 1 4 89 124 147
+227 2 2 1 4 92 146 125
+228 2 2 1 4 93 147 124
+229 2 2 1 4 29 168 111
+230 2 2 1 4 14 169 110
+231 2 2 1 4 17 112 170
+232 2 2 1 4 32 113 171
+233 2 2 1 4 74 102 154
+234 2 2 1 4 75 103 155
+235 2 2 1 4 7 8 167
+236 2 2 1 4 22 23 166
+237 2 2 1 4 14 15 169
+238 2 2 1 4 29 30 168
+239 2 2 1 4 16 17 170
+240 2 2 1 4 31 32 171
+241 2 2 1 4 67 136 133
+242 2 2 1 4 67 137 132
+243 2 2 1 4 85 137 143
+244 2 2 1 4 84 136 142
+245 2 2 1 4 80 132 119
+246 2 2 1 4 81 133 118
+247 2 2 1 4 71 129 151
+248 2 2 1 4 70 128 150
+249 2 2 1 4 22 166 104
+250 2 2 1 4 7 167 105
+251 2 2 1 4 23 106 166
+252 2 2 1 4 8 107 167
+253 2 2 1 4 75 164 108
+254 2 2 1 4 74 165 109
+255 2 2 1 4 30 127 168
+256 2 2 1 4 15 126 169
+257 2 2 1 4 95 169 126
+258 2 2 1 4 94 168 127
+259 2 2 1 4 19 157 114
+260 2 2 1 4 34 156 115
+261 2 2 1 4 12 117 158
+262 2 2 1 4 27 116 159
+263 2 2 1 4 82 120 149
+264 2 2 1 4 83 121 148
+265 2 2 1 4 73 130 149
+266 2 2 1 4 72 131 148
+267 2 2 1 4 90 114 157
+268 2 2 1 4 91 115 156
+269 2 2 1 4 92 159 116
+270 2 2 1 4 93 158 117
+271 2 2 1 4 96 126 170
+272 2 2 1 4 97 127 171
+273 2 2 1 4 31 171 127
+274 2 2 1 4 16 170 126
+275 2 2 1 4 73 153 130
+276 2 2 1 4 72 152 131
+277 2 2 1 4 96 130 153
+278 2 2 1 4 97 131 152
+279 2 2 1 4 73 149 120
+280 2 2 1 4 72 148 121
+281 2 2 1 4 73 138 153
+282 2 2 1 4 72 139 152
+283 2 2 1 4 95 153 138
+284 2 2 1 4 94 152 139
+285 2 2 1 4 80 142 132
+286 2 2 1 4 81 143 133
+287 2 2 1 4 80 134 142
+288 2 2 1 4 81 135 143
+289 2 2 1 4 90 145 140
+290 2 2 1 4 91 144 141
+291 2 2 1 4 68 140 145
+292 2 2 1 4 69 141 144
+293 2 2 1 4 5 161 122
+294 2 2 1 4 20 160 123
+295 2 2 1 4 10 124 163
+296 2 2 1 4 25 125 162
+297 2 2 1 4 84 142 134
+298 2 2 1 4 85 143 135
+299 2 2 1 4 84 134 150
+300 2 2 1 4 85 135 151
+301 2 2 1 4 70 150 134
+302 2 2 1 4 71 151 135
+303 2 2 1 4 87 122 161
+304 2 2 1 4 86 123 160
+305 2 2 1 4 89 163 124
+306 2 2 1 4 88 162 125
+307 2 2 2 13 11 176 66
+308 2 2 2 13 26 177 50
+309 2 2 2 13 13 35 178
+310 2 2 2 13 28 51 179
+311 2 2 2 13 3 12 180
+312 2 2 2 13 4 27 181
+313 2 2 2 13 3 182 12
+314 2 2 2 13 4 183 27
+315 2 2 2 13 5 59 1
+316 2 2 2 13 34 1 58
+317 2 2 2 13 1 59 58
+318 2 2 2 13 42 19 2
+319 2 2 2 13 43 2 20
+320 2 2 2 13 43 42 2
+321 2 2 2 13 3 173 35
+322 2 2 2 13 3 66 175
+323 2 2 2 13 3 180 173
+324 2 2 2 13 3 175 182
+325 2 2 2 13 4 50 174
+326 2 2 2 13 4 172 51
+327 2 2 2 13 4 181 172
+328 2 2 2 13 4 174 183
+329 2 2 2 13 6 60 5
+330 2 2 2 13 5 60 59
+331 2 2 2 13 7 61 6
+332 2 2 2 13 6 61 60
+333 2 2 2 13 8 62 7
+334 2 2 2 13 7 62 61
+335 2 2 2 13 9 63 8
+336 2 2 2 13 8 63 62
+337 2 2 2 13 10 64 9
+338 2 2 2 13 64 63 9
+339 2 2 2 13 11 65 10
+340 2 2 2 13 65 64 10
+341 2 2 2 13 11 12 176
+342 2 2 2 13 66 65 11
+343 2 2 2 13 12 13 178
+344 2 2 2 13 12 178 173
+345 2 2 2 13 12 173 180
+346 2 2 2 13 12 175 176
+347 2 2 2 13 12 182 175
+348 2 2 2 13 14 36 13
+349 2 2 2 13 36 35 13
+350 2 2 2 13 15 37 14
+351 2 2 2 13 37 36 14
+352 2 2 2 13 38 15 16
+353 2 2 2 13 38 37 15
+354 2 2 2 13 39 16 17
+355 2 2 2 13 39 38 16
+356 2 2 2 13 40 17 18
+357 2 2 2 13 40 39 17
+358 2 2 2 13 41 18 19
+359 2 2 2 13 41 40 18
+360 2 2 2 13 42 41 19
+361 2 2 2 13 44 20 21
+362 2 2 2 13 43 20 44
+363 2 2 2 13 45 21 22
+364 2 2 2 13 44 21 45
+365 2 2 2 13 46 22 23
+366 2 2 2 13 45 22 46
+367 2 2 2 13 47 23 24
+368 2 2 2 13 46 23 47
+369 2 2 2 13 24 25 48
+370 2 2 2 13 47 24 48
+371 2 2 2 13 25 26 49
+372 2 2 2 13 48 25 49
+373 2 2 2 13 26 27 177
+374 2 2 2 13 49 26 50
+375 2 2 2 13 27 28 179
+376 2 2 2 13 27 179 172
+377 2 2 2 13 27 172 181
+378 2 2 2 13 27 174 177
+379 2 2 2 13 27 183 174
+380 2 2 2 13 28 29 52
+381 2 2 2 13 51 28 52
+382 2 2 2 13 29 30 53
+383 2 2 2 13 52 29 53
+384 2 2 2 13 30 31 54
+385 2 2 2 13 53 30 54
+386 2 2 2 13 31 32 55
+387 2 2 2 13 31 55 54
+388 2 2 2 13 32 33 56
+389 2 2 2 13 32 56 55
+390 2 2 2 13 33 34 57
+391 2 2 2 13 33 57 56
+392 2 2 2 13 34 58 57
+393 2 2 2 13 35 173 178
+394 2 2 2 13 50 177 174
+395 2 2 2 13 51 172 179
+396 2 2 2 13 66 176 175
+$EndElements
Index: mesh/circle.geo
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- mesh/circle.geo	(date 1555323317000)
+++ mesh/circle.geo	(date 1555323317000)
@@ -0,0 +1,36 @@
+delta = 0.05;
+cl__1 = 1;
+
+Point(1) = {0, 0, 0, 1};
+
+// OMEGA CIRCLE --------------------------------
+Point(2) = {-0, 1, 0, 1};
+Point(3) = {0, -1, 0, 1};
+Circle(1) = {2, 1, 3};
+Circle(2) = {3, 1, 2};
+
+
+// OMEGA_I CIRCLE ------------------------------
+Point(4) = {-1.0 - delta, 0, 0, 1};
+Point(5) = {1.0 + delta, 0, 0, 1};
+Circle(5) = {4, 1, 5};
+Circle(6) = {5, 1, 4};
+
+
+// OMEGA ---------------------------------------
+Line Loop(4) = {1, 2};
+Plane Surface(4) = {4};
+Physical Surface(1) = {4};
+
+//boundary of omega
+Physical Line(9) = {1, 2};
+
+// OMEGA_I -------------------------------------
+Line Loop(13) = {1, 2, -5, -6};
+Plane Surface(13) = {13};
+Physical Surface(2) = {13};
+
+// boundary of omega_i
+Physical Line(99) = {5, 6};
+
+
Index: bib3.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- bib3.py	(date 1595919261899)
+++ bib3.py	(date 1595919261899)
@@ -0,0 +1,5914 @@
+# -*- coding: utf-8 -*-
+"""
+Created on Wed Aug 29 13:35:57 2018
+
+@author: vollmann
+"""
+import numpy as np
+Px = np.array([[0.33333333, 0.33333333],
+              [0.45929259, 0.45929259],
+              [0.45929259, 0.08141482],
+              [0.08141482, 0.45929259],
+              [0.17056931, 0.17056931],
+              [0.17056931, 0.65886138],
+              [0.65886138, 0.17056931],
+              [0.05054723, 0.05054723],
+              [0.05054723, 0.89890554],
+              [0.89890554, 0.05054723],
+              [0.26311283, 0.72849239],
+              [0.72849239, 0.00839478],
+              [0.00839478, 0.26311283],
+              [0.72849239, 0.26311283],
+              [0.26311283, 0.00839478],
+              [0.00839478, 0.72849239]])
+
+weightsxy = 0.5 * np.array([0.14431560767779
+                       , 0.09509163426728
+                       , 0.09509163426728
+                       , 0.09509163426728
+                       , 0.10321737053472
+                       , 0.10321737053472
+                       , 0.10321737053472
+                       , 0.03245849762320
+                       , 0.03245849762320
+                       , 0.03245849762320
+                       , 0.02723031417443
+                       , 0.02723031417443
+                       , 0.02723031417443
+                       , 0.02723031417443
+                       , 0.02723031417443
+                       , 0.02723031417443])
+
+#from assemble import assemble
+
+import scipy.sparse as ss
+import matplotlib
+import matplotlib.pyplot as plt
+from copy import copy
+import math
+import scipy.optimize as sc
+from pathos.multiprocessing import ProcessingPool as Pool
+import scipy.interpolate as si
+import random
+import scipy.sparse.linalg as ssl
+from scipy.integrate import quad#quadrature as 
+from scipy.optimize import minimize
+
+"""========================================================================="""
+""" PARAMETERS """
+#ball = 'exact'  # choose from ['exact', 'approx1', 'approx2', 'approx3']
+
+quad_order_outer = 'new'#'#8#'test'#'new'#8 # choose from [8, 5, 3, 2, 'new', 'GL-5-12']
+quad_order_inner = 1
+
+# for 1d
+n1_1d, n2_1d = 16,2
+
+# for tri_adapt
+tol1_Radon =  1e-10# difference between g_low and g_high
+tol2_Radon = 0.1 #for diameter
+
+
+test_assembly = 0
+P_test = np.array([ [0.0, 0.0]]).transpose()#np.array([ [ 1./3., 1./3.]]).transpose()
+"""========================================================================="""
+
+""" CONVENTIONS """
+# LABELS: 1 = shape; 2 = omega\shape; 3 = omega_i, 9 = boundary of omega
+
+
+"""-------------------------------------------------------------------------"""
+"""                 PREPARE MESH                                            """
+"""-------------------------------------------------------------------------"""
+class Mesh:
+
+    # object with all processed mesh data
+    def __init__(self, proc_mesh_data):
+
+        self.triangles = proc_mesh_data[0]
+        self.omega = proc_mesh_data[1]
+        self.verts = proc_mesh_data[2]
+        self.hash_table = proc_mesh_data[3]
+        self.boundary_verts = proc_mesh_data[4]
+        self.nodes = proc_mesh_data[5]
+        self.nhd = proc_mesh_data[6]
+        self.diam = proc_mesh_data[7]
+        self.support = proc_mesh_data[8]
+        self.hash_table_approx = proc_mesh_data[9]
+        self.bary = proc_mesh_data[10]
+        self.boundary = proc_mesh_data[11]
+        self.hash_table_bary = proc_mesh_data[12]
+        self.shape_interface = proc_mesh_data[13]
+        self.lines = proc_mesh_data[14]
+        self.nV = proc_mesh_data[15]
+        self.nE = proc_mesh_data[16]
+        self.nE_Omega = proc_mesh_data[17]
+        self.nV_Omega = proc_mesh_data[18]
+        self.vertices = proc_mesh_data[2]
+
+class Mesh_slim:
+    # object with all processed mesh data
+    def __init__(self, proc_mesh_data):
+
+        self.triangles = proc_mesh_data[0]
+        self.omega = proc_mesh_data[1]
+        self.verts = proc_mesh_data[2]
+        self.boundary_verts = proc_mesh_data[3]
+        self.nodes = proc_mesh_data[4]
+        self.boundary = proc_mesh_data[5]
+        self.shape_interface = proc_mesh_data[6]
+
+def prepare_mesh(verts, lines, triangles, eps, Norm):
+    verts = verts[:,0:2]
+    # note that eps is determined already in the mesh, however: for 
+    # homogeneous dirichtlet constraints it simply has to be smaller than
+    # the pre-determined epsilon
+    labels_domains = np.sort(np.unique(triangles[:,0]))
+
+    """ sort triangles """
+    # we sort by labels
+    # this is important such that omega[k,] = triangle[k,]
+    # As a consequence we can use omega for the list 'support'
+    triangles = triangles[triangles[:,0].argsort()]
+
+    norm = norm_dict[Norm]
+#    def norm(x):
+#        return np.max(np.abs(x), axis= 0)
+    #--------------------------------------------------------------------------
+    """ OMEGA """   
+    omega = triangles[np.where(triangles[:,0] != labels_domains[-1])[0]]    
+
+
+    #--------------------------------------------------------------------------
+    """ SHAPE INTERFACE (subset 0:len(verts) )"""      
+    interface = np.unique(lines[np.where(lines[:,0]==12)][:,1:]).tolist()   
+    
+    #--------------------------------------------------------------------------
+    """ NODES (subset of verts)"""   
+
+    omega1 = triangles[np.where(triangles[:,0] == labels_domains[0])] 
+    nodes1 = list(np.unique(omega1[:,1:4]))
+
+    if len(labels_domains) > 2:
+        omega2 = triangles[np.where(triangles[:,0] == labels_domains[1])] 
+        nodes2 = list(np.unique(omega2[:,1:4]))
+    else:
+        omega2 = []
+        nodes2 = []
+
+    G_N = []
+    for i in interface:
+        G_N += np.where(norm((verts-np.repeat(verts[i][:,np.newaxis], len(verts), axis = 1).transpose()).transpose())<=eps)[0].tolist()
+
+    G_N1 = list( (set(nodes1)&set(G_N)) )
+    G_N2 = list(  (set(nodes2)&set(G_N)) )
+    
+    nodes1 = list(set(nodes1) - set(G_N1) )
+    nodes2 = list(set(nodes2) - set(G_N2) )
+    G_N1 = list( (set(G_N1)-set(interface)) )
+    G_N2 = list(  (set(G_N2)-set(interface)) )
+    nodes = list(nodes1)  + list(G_N1)+ interface + list(G_N2) + list(nodes2) 
+    nodes = np.array(nodes)
+
+#    print len(nodes1), len(G_N1), len(interface), len(G_N2), len(nodes2)
+
+#    nodes =  np.unique(omega[:,1:4])
+
+    # test nodes
+#    plt.plot(verts[nodes1][:,0], verts[nodes1][:,1], 'bo')
+#    plt.plot(verts[nodes2][:,0], verts[nodes2][:,1], 'ro')
+#    plt.plot(verts[G_N1][:,0], verts[G_N1][:,1], 'gx')
+#    plt.plot(verts[G_N2][:,0], verts[G_N2][:,1], 'bx')
+#    plt.plot(verts[interface][:,0], verts[interface][:,1], 'yd')
+    
+    #--------------------------------------------------------------------------
+    """ BOUNDARY_verts (subset of verts); label = 9"""
+    boundary = np.unique(lines[lines[:,0] == 9][:,1:3])
+    # test nodes
+#    plt.plot(verts[boundary][:,0], verts[boundary][:,1], 'ro')
+    
+    
+    ##-----------------------------------------------------------------------------#
+    """ PERMUTE VERTS TO SORT OMEGA_I TO THE END and ADAPT TRIANGLES etc """ 
+    if True:
+        nodes_inner = list(set(nodes) - set(boundary))
+        nodes_rest = list(set(range(len(verts))) - set(nodes_inner) - set(boundary))
+    
+        verts = np.vstack((verts[nodes_inner], verts[boundary], verts[nodes_rest]))
+        
+        new_order = nodes_inner + list(boundary) + nodes_rest
+        
+        def permutation(i):
+            return new_order.index(i)
+        
+        triangles_old = triangles
+        
+        triangles = np.zeros(np.shape(triangles_old), dtype = int)
+        triangles[:,0] = triangles_old[:,0]
+        
+        for i in range(np.shape(triangles_old)[0]):
+            for j in range(1,4):
+                triangles[i,j] = int(permutation(triangles_old[i,j] ))
+        
+        lines_old = lines
+        
+        lines = np.zeros(np.shape(lines_old), dtype = int)
+        lines[:,0] = lines_old[:,0]
+        
+        for i in range(np.shape(lines_old)[0]):
+            for j in range(1,3):
+                lines[i,j] = int(permutation(lines_old[i,j] ))
+
+        interface_old= interface
+        interface = np.zeros(len(interface_old), dtype = int)
+        for i in range(len(interface_old)):
+            interface[i] = permutation(interface_old[i])
+
+
+
+        omega = triangles[np.where(triangles[:,0] != labels_domains[-1])[0]]    
+        
+        # plot omega
+    #    for i in range(len(omega)):
+    #        plt.gca().add_patch(plt.Polygon(verts[omega[i,1:]], closed=True, fill = True, color = 'blue', alpha = 0.2)) 
+        
+        boundary = np.array(range(len(nodes_inner), len(nodes_inner)+len(boundary)))
+        
+        nodes = np.array(range(len(nodes_inner)+len(boundary)))#+list(boundary)
+    
+#     PLOT verts
+#    plt.plot(verts[nodes][:,0], verts[nodes][:,1], 'bx')
+#    plt.plot(verts[interface][:,0], verts[interface][:,1], 'yd')
+#    plt.plot(verts[len(nodes):][:,0], verts[len(nodes):][:,1], 'ro')
+    
+    
+    
+    
+    #--------------------------------------------------------------------------
+    """ SUPPORT (subset omega)"""
+    support = []#[list(np.where(omega[:,1:4] == a)[0]) for a in nodes]
+    ##test support
+#    idx = 44#len(nodes)/2
+#    plt.plot(verts[nodes[idx]][0], verts[nodes[idx]][1], 'go')
+#    for i in support[idx]:
+#        plt.gca().add_patch(plt.Polygon([verts[triangles[i,1]], verts[triangles[i,2]],verts[triangles[i,3]]], closed=True, fill = True, color = 'blue')) 
+
+    #--------------------------------------------------------------------------
+    """ Neighboring nodes x_j of x_k for which j<=k (subset of nodes)"""
+    NHD = []
+    # for k in range(len(nodes)):
+    #     nhd = list(set(np.unique(triangles[support[k]][:,1:]))&set(omega[:,1:].reshape(3*len(omega)))) # subset of verts, intersect with omega, since nodes only are in omega
+    #     #convert nhd from subset of verts into subset of nodes and take only those<=k
+    #     aux = np.array([np.where(np.all(verts[nodes] == verts[j],axis=1))[0][0] for j in nhd]  )
+    #     NHD += [aux[aux<=k].tolist()]
+    ##test nhd
+#    idx = 44
+#    print verts[nodes[NHD[idx]]]
+#    for j in range(len(NHD[idx])):
+#        plt.plot(verts[nodes[NHD[idx]]][j][0], verts[nodes[NHD[idx]]][j][1], 'yo')
+#    plt.plot(verts[nodes[idx]][0], verts[nodes[idx]][1], 'ro')
+    #--------------------------------------------------------------------------
+    """Determine maximum diameter for hash_table """
+    def diam(T):
+        length_of_edges = np.array([np.linalg.norm(T[0]-T[1]),np.linalg.norm(T[0]-T[2]), np.linalg.norm(T[1]-T[2])] )   
+        return np.max(length_of_edges)
+    diameter = [diam(np.array([verts[triangles[i,][1]] , verts[triangles[i,][2]] , verts[triangles[i,][3]] ])) for i in range(len(triangles))]
+    diam = np.max(diameter)
+    #--------------------------------------------------------------------------
+    """ HASH TABLE (subset triangles)"""
+    bary = (verts[triangles[:,1]] + verts[triangles[:,2]] + verts[triangles[:,3]]) / 3.       
+    hash_table = []#[np.where(norm((bary-np.repeat(verts[nodes[i]][:,np.newaxis], len(bary), axis = 1).transpose()).transpose())<=(eps+diam))[0].tolist() for i in range(len(nodes))]
+#    idx = 38#int(num_nodes/2 * 1.5)
+#    plt.plot(verts[nodes[idx]][0], verts[nodes[idx]][1], 'ro')
+#    for i in hash_table[idx]:
+#        T_i = triangles[i,]
+#        barycenter_i = (verts[T_i[1]] + verts[T_i[2]] + verts[T_i[3]]) / 3.
+#        plt.plot(barycenter_i[0],barycenter_i[1], 'yo') 
+#        
+#        plt.gca().add_patch(plt.Polygon([verts[triangles[i,1]], verts[triangles[i,2]],verts[triangles[i,3]]], closed=True, fill = True)) 
+#    
+#    neighboring_nodes = list(np.unique(triangles[support[idx]][:,1:]))
+#    ngh_verts = verts[neighboring_nodes]
+#    for i in range(len(ngh_verts)):
+#        square = plt.Rectangle(tuple(ngh_verts[i]-(eps)*np.ones(2)), 2*(eps), 2*(eps), color='grey', fill= True)
+#        ax.add_artist(square)    
+    #--------------------------------------------------------------------------
+    """ HASH TABLE_nodes (subset nodes)"""      
+#    hash_table_nodes = [list(set(np.where(norm((verts[nodes]-np.repeat(verts[nodes[i]][:,np.newaxis], len(nodes), axis = 1).transpose()).transpose())<=(eps+diam))[0].tolist())&set(range(i+1))) for i in range(len(nodes))]
+    
+    """ HASH TABLE_approx (= hash table bary without puffer)"""      
+    hash_table_approx = []# [np.where(norm((bary-np.repeat(bary[i][:,np.newaxis], len(bary), axis = 1).transpose()).transpose())<=(eps))[0].tolist() for i in range(len(bary))]
+    #--------------------------------------------------------------------------
+    """ HASH TABLE (subset 0:len(bary))"""
+    hash_table_bary = []#[np.where(norm((bary-np.repeat(bary[i][:,np.newaxis], len(bary), axis = 1).transpose()).transpose())<=(eps+ diam))[0].tolist() for i in range(len(bary))]
+    
+    #--------------------------------------------------------------------------
+    """ BOUNDARY_nodes (subset 0:len(nodes) )"""      
+    bdry_nodes = [nodes.tolist().index(i) for i in boundary] 
+
+    #------------------------------------------------------------------------------  
+    """ BUILDING MESH CLASS """
+    proc_mesh_data = [triangles, omega, verts, hash_table, boundary, nodes, NHD, max(diameter), support, hash_table_approx, bary, bdry_nodes, hash_table_bary, interface, lines, len(verts), len(triangles), len(omega), len(nodes)]
+    mesh = Mesh(proc_mesh_data)
+    #------------------------------------------------------------------------------       
+    return mesh, proc_mesh_data
+
+
+def prepare_mesh_reg(h, eps, Norm, num_cores):
+    if not (1/h).is_integer() or not (eps/h).is_integer():
+        print('(1/h and delta/h have to be an integer !!!')
+        eps_i = h
+        
+    if eps < h:
+        eps_i = h
+    else:
+        eps_i = eps
+
+
+    norm = norm_dict[Norm]
+    a = [0.,0.]
+    b = [1.,1.]
+    gridsize = np.array([h,h])
+    
+    diam = np.sqrt(h**2 + h**2) # = longest edge of the triangle
+    
+    dim = 2 
+    def E(z, L):
+        p = [np.prod([L[k] for k in range(j+1,dim)]) for j in range(dim)] + [np.prod(L)]
+        summe = 0
+        for i in range(dim):
+            summe = summe + z[i] * p[i]  
+        return int(summe)
+    def iE(k, L):
+        p = [np.prod([L[l] for l in range(j+1,dim)]) for j in range(dim)] + [np.prod(L)]
+        x = np.zeros(dim)
+        for i in range(dim):
+            x[i] = k//(p[i]) - (k//(p[i-1])) * L[i]
+        return x
+
+    #==============================================================================
+    #                    COMPUTE ARRAYS
+    #==============================================================================
+    roundof = 6 # verts will not give precisely the value but rather 0.1000009 (in order to make 
+                # np.where () work we have to round of, roughly in the dimension of the gridsize)
+    N = [int((b[i]-a[i])/gridsize[i]) for i in range(dim)]
+#    L = [N[i]-1   for i in range(dim)]
+    def ha(x):
+        return np.array([gridsize[0]*x[0], gridsize[1]*x[1]])
+    
+    a_i = [a[0]-eps_i, a[1]-eps_i]
+    b_i = np.around([b[0]+eps_i, b[1]+eps_i], decimals = roundof)
+    N_i = [int(np.around((b_i[i]-a_i[i])/gridsize[i])) + 1 for i in range(dim)]
+    
+    #-----------------------------------------------------------------------------#
+    """ VERTS """
+    def fun(k):
+        return np.around(np.array(a_i) +  ha(iE(k,N_i)), decimals = roundof)
+    pool = Pool(processes=num_cores) 
+    verts = np.array(list(pool.map(fun,range(np.prod(N_i)) )))# np.array([  for k in range(np.prod(N_i))])
+    pool.close()
+    pool.join()
+    pool.clear()
+#    print verts
+    #-----------------------------------------------------------------------------#
+    """ OMEGA """#+  ha(iE(0,N)
+    k_0 =  np.where(np.all(verts[:,0:2] == np.around(np.array(a) , decimals = roundof).tolist(),axis=1))[0][0]
+    omega = [k_0 + k + j*N_i[1] for k in range(N[1]) for j in range(N[0])]# pool.map(om, range(num_omega))    
+    ####-----------------------------------------------------------------------------#
+    """ OMEGA_I """
+    omega_i = list(set(range(len(verts))) - set(omega) -set(np.where(verts[:,0]== b_i[0])[0])  -set(np.where(verts[:,1]== b_i[1])[0]  ) )
+    ###-----------------------------------------------------------------------------#
+    #""" NODES """
+    nodes = omega  
+    ##-----------------------------------------------------------------------------#
+    """ OMEGA """
+    omega = np.zeros((2*len(nodes), 3), dtype = int)
+    
+    for j in range(len(nodes)):
+        k = nodes[j]
+        omega[2*j,    ] = np.array([k, k+ N_i[1]+1,k + 1])#  clockwise
+        omega[2*j + 1,    ] = np.array([k, k + N_i[1], k+ N_i[1]+1])#  clockwise
+    
+    """ OMEGA_i """
+    Omega_i = np.zeros((2*len(omega_i), 3), dtype = int)
+    
+    for j in range(len(omega_i)):
+        k = omega_i[j]
+        Omega_i[2*j,    ] = np.array([k, k+ N_i[1]+1,k + 1 ]) # clockwise
+        Omega_i[2*j +1, ] = np.array([k,k + N_i[1], k+ N_i[1]+1])#clockwise
+    
+    omega_i = Omega_i
+    
+    ##-----------------------------------------------------------------------------#
+    """ BOUNDARY """
+    boundary1 = [k_0 + kk  for kk in range(N[0])]
+    boundary2 = [k_0 + N[1]*N_i[0] + kkk  for kkk in range(N[0]+1)]
+    boundary3 = [k_0 + j*N_i[0] for j in range(N[1])]
+    boundary4 = [k_0 +N[0]+ j*N_i[0] for j in range(N[1])]
+    
+    boundary = np.unique( boundary1 + boundary2 + boundary3 + boundary4)
+
+    ##-----------------------------------------------------------------------------#
+    aux = np.zeros((len(omega),4), dtype=int)    
+    aux[:,1:] = omega  
+    aux[:,0] = 1*np.ones(len(omega), dtype = int)
+    omega = aux
+    
+    aux = np.zeros((len(omega_i),4), dtype=int)    
+    aux[:,1:] = omega_i  
+    aux[:,0] = 2*np.ones(len(omega_i), dtype = int)
+    omega_i = aux
+    
+    ##-----------------------------------------------------------------------------#
+    """ TRIANGLES """
+    triangles = np.vstack((omega, omega_i))
+
+    """ NODES """
+    num_omega = np.shape(omega)[0]
+    nodes = np.unique(omega[:,1:4].reshape(3*num_omega))
+
+    ##-----------------------------------------------------------------------------#
+    """ PERMUTE VERTS TO SORT OMEGA_I TO THE END and ADAPT TRIANGLES etc """ 
+    nodes_inner = list(set(nodes) - set(boundary))
+    nodes_rest = list(set(range(len(verts))) - set(nodes_inner) - set(boundary))
+    verts = np.vstack((verts[nodes_inner], verts[boundary], verts[nodes_rest]))
+    
+    new_order = nodes_inner + list(boundary) + nodes_rest
+    def permutation(i):
+        return new_order.index(i)
+    
+    triangles_old = triangles
+    
+    triangles = np.zeros(np.shape(triangles_old), dtype = int)
+    triangles[:,0] = triangles_old[:,0]
+    
+    for i in range(np.shape(triangles_old)[0]):
+        for j in range(1,4):
+            triangles[i,j] = int(permutation(triangles_old[i,j] ))
+
+    omega = triangles[np.where(triangles[:,0] != 2)[0]]
+    # plot omega
+#    for i in range(len(omega)):
+#        plt.gca().add_patch(plt.Polygon(verts[omega[i,1:]], closed=True, fill = True, color = 'blue', alpha = 0.2)) 
+    
+    boundary = list(range(len(nodes_inner), len(nodes_inner)+len(boundary)))
+    nodes = list(range(len(nodes_inner)))+list(boundary)
+    
+    # PLOT verts
+#    plt.plot(verts[nodes][:,0], verts[nodes][:,1], 'bo')
+#    plt.plot(verts[len(nodes):][:,0], verts[len(nodes):][:,1], 'rx')
+    
+    """ SUPPORT (subset omega)"""
+    support = []# [list(np.where(omega[:,1:4] == aa)[0]) for aa in nodes]
+
+    #--------------------------------------------------------------------------
+    """ Neighboring nodes x_j of x_k for which j<=k (subset of nodes)"""
+    NHD = []
+    # for k in range(len(nodes)):
+    #     nhd = list(set(np.unique(triangles[support[k]][:,1:])) & set(omega[:,1:].reshape(3*len(omega)))) # subset of verts, intersect with omega, since nodes only are in omega
+    #     #convert nhd from subset of verts into subset of nodes and take only those<=k
+    #     aux = np.array([np.where(np.all(verts[nodes] == verts[j],axis=1))[0][0] for j in nhd]  )
+    #     NHD += [aux[aux<=k].tolist()]
+    #--------------------------------------------------------------------------
+    """ HASH TABLE (subset triangles)"""
+    bary = (verts[triangles[:,1]] + verts[triangles[:,2]] + verts[triangles[:,3]]) / 3.       
+    hash_table = []#[np.where(norm((bary-np.repeat(verts[nodes[i]][:,np.newaxis], len(bary), axis = 1).transpose()).transpose())<=(eps+diam))[0].tolist() for i in range(len(nodes))]
+
+    #--------------------------------------------------------------------------
+    """ HASH TABLE_nodes (subset nodes)"""      
+#    hash_table_nodes = [list(set(np.where(norm((verts[nodes]-np.repeat(verts[nodes[i]][:,np.newaxis], len(nodes), axis = 1).transpose()).transpose())<=(eps+diam))[0].tolist())&set(range(i+1))) for i in range(len(nodes))]
+    
+    """ HASH TABLE_approx (= hash table bary without puffer)"""      
+    hash_table_approx = []#[np.where(norm((bary-np.repeat(bary[i][:,np.newaxis], len(bary), axis = 1).transpose()).transpose())<=(eps))[0].tolist() for i in range(len(bary))]
+    #--------------------------------------------------------------------------
+    """ HASH TABLE (subset 0:len(bary))"""
+    hash_table_bary = []#[np.where(norm((bary-np.repeat(bary[i][:,np.newaxis], len(bary), axis = 1).transpose()).transpose())<=(eps+ diam))[0].tolist() for i in range(len(bary))]
+    
+    #--------------------------------------------------------------------------
+    """ BOUNDARY_nodes (subset 0:len(nodes) )"""      
+    bdry_nodes = [nodes.index(i) for i in boundary] 
+    
+    #--------------------------------------------------------------------------
+    """ SHAPE INTERFACE (subset 0:len(verts) )"""      
+    interface = []#np.unique(lines[np.where(lines[:,0]==12)][:,1:]).tolist()     
+
+    #------------------------------------------------------------------------------  
+    """ BUILDING MESH CLASS """
+    proc_mesh_data = [triangles, omega, verts, hash_table, boundary, nodes, NHD, diam, support, hash_table_approx, bary, bdry_nodes, hash_table_bary, interface,[],len(verts), len(triangles), len(omega), len(nodes)]
+    mesh = Mesh(proc_mesh_data)
+    #------------------------------------------------------------------------------       
+    return mesh, proc_mesh_data
+
+
+def prepare_mesh_nonreg(H, eps, Norm, num_cores):
+    # if not (1 / h).is_integer() or not (eps / h).is_integer():
+    #     print('(1/h and delta/h have to be an integer !!!')
+    #     eps_i = h
+    #
+    # if eps < h:
+    #     eps_i = h
+    # else:
+    #     eps_i = eps
+
+    eps_i = eps
+
+    norm = norm_dict[Norm]
+    a = [0., 0.]
+    b = [1., 1.]
+    gridsize = np.array([H[0], H[1]])
+
+    diam = np.sqrt(gridsize[0] ** 2 + gridsize[1] ** 2)  # = longest edge of the triangle
+
+    dim = 2
+
+    def E(z, L):
+        p = [np.prod([L[k] for k in range(j + 1, dim)]) for j in range(dim)] + [np.prod(L)]
+        summe = 0
+        for i in range(dim):
+            summe = summe + z[i] * p[i]
+        return int(summe)
+
+    def iE(k, L):
+        p = [np.prod([L[l] for l in range(j + 1, dim)]) for j in range(dim)] + [np.prod(L)]
+        x = np.zeros(dim)
+        for i in range(dim):
+            x[i] = k // (p[i]) - (k // (p[i - 1])) * L[i]
+        return x
+
+    # ==============================================================================
+    #                    COMPUTE ARRAYS
+    # ==============================================================================
+    roundof = 6  # verts will not give precisely the value but rather 0.1000009 (in order to make
+    # np.where () work we have to round of, roughly in the dimension of the gridsize)
+    N = [int((b[i] - a[i]) / gridsize[i]) for i in range(dim)]
+
+    #    L = [N[i]-1   for i in range(dim)]
+    def ha(x):
+        return np.array([gridsize[0] * x[0], gridsize[1] * x[1]])
+
+    a_i = [a[0] - eps_i, a[1] - eps_i]
+    b_i = np.around([b[0] + eps_i, b[1] + eps_i], decimals=roundof)
+    N_i = [int(np.around((b_i[i] - a_i[i]) / gridsize[i])) + 1 for i in range(dim)]
+
+    # -----------------------------------------------------------------------------#
+    """ VERTS """
+
+    def fun(k):
+        return np.around(np.array(a_i) + ha(iE(k, N_i)), decimals=roundof)
+
+    pool = Pool(processes=num_cores)
+    verts = np.array(list(pool.map(fun, range(np.prod(N_i)))))  # np.array([  for k in range(np.prod(N_i))])
+    pool.close()
+    pool.join()
+    pool.clear()
+    #    print verts
+    # -----------------------------------------------------------------------------#
+    """ OMEGA """  # +  ha(iE(0,N)
+    k_0 = np.where(np.all(verts[:, 0:2] == np.around(np.array(a), decimals=roundof).tolist(), axis=1))[0][0]
+    omega = [k_0 + k + j * N_i[1] for k in range(N[1]) for j in range(N[0])]  # pool.map(om, range(num_omega))
+    ####-----------------------------------------------------------------------------#
+    """ OMEGA_I """
+    omega_i = list(set(range(len(verts))) - set(omega) - set(np.where(verts[:, 0] == b_i[0])[0]) - set(
+        np.where(verts[:, 1] == b_i[1])[0]))
+    ###-----------------------------------------------------------------------------#
+    # """ NODES """
+    nodes = omega
+    ##-----------------------------------------------------------------------------#
+    """ OMEGA """
+    omega = np.zeros((2 * len(nodes), 3), dtype=int)
+
+    for j in range(len(nodes)):
+        k = nodes[j]
+        omega[2 * j,] = np.array([k, k + N_i[1] + 1, k + 1])  # clockwise
+        omega[2 * j + 1,] = np.array([k, k + N_i[1], k + N_i[1] + 1])  # clockwise
+
+    """ OMEGA_i """
+    Omega_i = np.zeros((2 * len(omega_i), 3), dtype=int)
+
+    for j in range(len(omega_i)):
+        k = omega_i[j]
+        Omega_i[2 * j,] = np.array([k, k + N_i[1] + 1, k + 1])  # clockwise
+        Omega_i[2 * j + 1,] = np.array([k, k + N_i[1], k + N_i[1] + 1])  # clockwise
+
+    omega_i = Omega_i
+
+    ##-----------------------------------------------------------------------------#
+    """ BOUNDARY """
+    boundary1 = [k_0 + kk for kk in range(N[1])]
+    boundary2 = [k_0 + N[1] + N_i[1] * kkk for kkk in range(N[0])]
+    boundary3 = [k_0 + j * N_i[1] for j in range(N[0])]
+    boundary4 = [k_0 + N[0]*N_i[1] + j for j in range(N[1]+1)]
+
+    boundary = np.unique(boundary1 + boundary2 + boundary3 + boundary4)
+
+    ##-----------------------------------------------------------------------------#
+    aux = np.zeros((len(omega), 4), dtype=int)
+    aux[:, 1:] = omega
+    aux[:, 0] = 1 * np.ones(len(omega), dtype=int)
+    omega = aux
+
+    aux = np.zeros((len(omega_i), 4), dtype=int)
+    aux[:, 1:] = omega_i
+    aux[:, 0] = 2 * np.ones(len(omega_i), dtype=int)
+    omega_i = aux
+
+    ##-----------------------------------------------------------------------------#
+    """ TRIANGLES """
+    triangles = np.vstack((omega, omega_i))
+
+    """ NODES """
+    num_omega = np.shape(omega)[0]
+    nodes = np.unique(omega[:, 1:4].reshape(3 * num_omega))
+
+    ##-----------------------------------------------------------------------------#
+    """ PERMUTE VERTS TO SORT OMEGA_I TO THE END and ADAPT TRIANGLES etc """
+    nodes_inner = list(set(nodes) - set(boundary))
+    nodes_rest = list(set(range(len(verts))) - set(nodes_inner) - set(boundary))
+    verts = np.vstack((verts[nodes_inner], verts[boundary], verts[nodes_rest]))
+
+    new_order = nodes_inner + list(boundary) + nodes_rest
+
+    def permutation(i):
+        return new_order.index(i)
+
+    triangles_old = triangles
+
+    triangles = np.zeros(np.shape(triangles_old), dtype=int)
+    triangles[:, 0] = triangles_old[:, 0]
+
+    for i in range(np.shape(triangles_old)[0]):
+        for j in range(1, 4):
+            triangles[i, j] = int(permutation(triangles_old[i, j]))
+
+    omega = triangles[np.where(triangles[:, 0] != 2)[0]]
+    # plot omega
+    #    for i in range(len(omega)):
+    #        plt.gca().add_patch(plt.Polygon(verts[omega[i,1:]], closed=True, fill = True, color = 'blue', alpha = 0.2))
+
+    boundary = list(range(len(nodes_inner), len(nodes_inner) + len(boundary)))
+    nodes = list(range(len(nodes_inner))) + list(boundary)
+
+    # PLOT verts
+    #    plt.plot(verts[nodes][:,0], verts[nodes][:,1], 'bo')
+    #    plt.plot(verts[len(nodes):][:,0], verts[len(nodes):][:,1], 'rx')
+
+    """ SUPPORT (subset omega)"""
+    support = []  # [list(np.where(omega[:,1:4] == aa)[0]) for aa in nodes]
+
+    # --------------------------------------------------------------------------
+    """ Neighboring nodes x_j of x_k for which j<=k (subset of nodes)"""
+    NHD = []
+    # for k in range(len(nodes)):
+    #     nhd = list(set(np.unique(triangles[support[k]][:,1:])) & set(omega[:,1:].reshape(3*len(omega)))) # subset of verts, intersect with omega, since nodes only are in omega
+    #     #convert nhd from subset of verts into subset of nodes and take only those<=k
+    #     aux = np.array([np.where(np.all(verts[nodes] == verts[j],axis=1))[0][0] for j in nhd]  )
+    #     NHD += [aux[aux<=k].tolist()]
+    # --------------------------------------------------------------------------
+    """ HASH TABLE (subset triangles)"""
+    bary = (verts[triangles[:, 1]] + verts[triangles[:, 2]] + verts[triangles[:, 3]]) / 3.
+    hash_table = []  # [np.where(norm((bary-np.repeat(verts[nodes[i]][:,np.newaxis], len(bary), axis = 1).transpose()).transpose())<=(eps+diam))[0].tolist() for i in range(len(nodes))]
+
+    # --------------------------------------------------------------------------
+    """ HASH TABLE_nodes (subset nodes)"""
+    #    hash_table_nodes = [list(set(np.where(norm((verts[nodes]-np.repeat(verts[nodes[i]][:,np.newaxis], len(nodes), axis = 1).transpose()).transpose())<=(eps+diam))[0].tolist())&set(range(i+1))) for i in range(len(nodes))]
+
+    """ HASH TABLE_approx (= hash table bary without puffer)"""
+    hash_table_approx = []  # [np.where(norm((bary-np.repeat(bary[i][:,np.newaxis], len(bary), axis = 1).transpose()).transpose())<=(eps))[0].tolist() for i in range(len(bary))]
+    # --------------------------------------------------------------------------
+    """ HASH TABLE (subset 0:len(bary))"""
+    hash_table_bary = []  # [np.where(norm((bary-np.repeat(bary[i][:,np.newaxis], len(bary), axis = 1).transpose()).transpose())<=(eps+ diam))[0].tolist() for i in range(len(bary))]
+
+    # --------------------------------------------------------------------------
+    """ BOUNDARY_nodes (subset 0:len(nodes) )"""
+    bdry_nodes = [nodes.index(i) for i in boundary]
+
+    # --------------------------------------------------------------------------
+    """ SHAPE INTERFACE (subset 0:len(verts) )"""
+    interface = []  # np.unique(lines[np.where(lines[:,0]==12)][:,1:]).tolist()
+
+    # ------------------------------------------------------------------------------
+    """ BUILDING MESH CLASS """
+    proc_mesh_data = [triangles, omega, verts, hash_table, boundary, nodes, NHD, diam, support, hash_table_approx, bary,
+                      bdry_nodes, hash_table_bary, interface, [], len(verts), len(triangles), len(omega), len(nodes)]
+    mesh = Mesh(proc_mesh_data)
+    # ------------------------------------------------------------------------------
+    return mesh, proc_mesh_data
+
+
+def prepare_mesh_reg_slim(h, eps, Norm, num_cores):
+    if not (1/h).is_integer() or not (eps/h).is_integer():
+        print('(1/h and delta/h have to be an integer !!!')
+        
+    if eps < h:
+        eps_i = h
+    else:
+        eps_i = eps
+
+    a = [0.,0.]
+    b = [1.,1.]
+    gridsize = np.array([h,h])
+
+    dim = 2 
+    def E(z, L):
+        p = [np.prod([L[k] for k in range(j+1,dim)]) for j in range(dim)] + [np.prod(L)]
+        summe = 0
+        for i in range(dim):
+            summe = summe + z[i] * p[i]  
+        return int(summe)
+    def iE(k, L):
+        p = [np.prod([L[l] for l in range(j+1,dim)]) for j in range(dim)] + [np.prod(L)]
+        x = np.zeros(dim)
+        for i in range(dim):
+            x[i] = k//(int(p[i])) - (k//(int(p[i-1]))) * L[i]
+        return x
+
+    #==============================================================================
+    #                    COMPUTE ARRAYS
+    #==============================================================================
+    roundof = 6 # verts will not give precisely the value but rather 0.1000009 (in order to make 
+                # np.where () work we have to ceil roughly in the dimension of the gridsize)
+    N = [int((b[i]-a[i])/gridsize[i]) for i in range(dim)]
+#    L = [N[i]-1   for i in range(dim)]
+    def ha(x):
+        return np.array([gridsize[0]*x[0], gridsize[1]*x[1]])
+    
+    a_i = [a[0]-eps_i, a[1]-eps_i]
+    b_i = np.around([b[0]+eps_i, b[1]+eps_i], decimals = roundof)
+    N_i = [int(np.around((b_i[i]-a_i[i])/gridsize[i])) + 1 for i in range(dim)]
+    
+    #-----------------------------------------------------------------------------#
+    """ VERTS """
+    def fun(k):
+        return np.around(np.array(a_i) +  ha(iE(k,N_i)), decimals = roundof)
+    pool = Pool(processes=num_cores) 
+    verts = np.array(pool.map(fun,range(np.prod(N_i)) ))# np.array([  for k in range(np.prod(N_i))])
+    pool.close()
+    pool.join()
+    pool.clear()
+#    print verts
+    #-----------------------------------------------------------------------------#
+    """ OMEGA """#+  ha(iE(0,N)
+    k_0 =  np.where(np.all(verts[:,0:2]==np.around(np.array(a) , decimals = roundof).tolist(),axis=1))[0][0] 
+    omega = [k_0 + k + j*N_i[1] for k in range(N[1]) for j in range(N[0])]# pool.map(om, range(num_omega))    
+    ####-----------------------------------------------------------------------------#
+    """ OMEGA_I """
+    omega_i = list(set(range(len(verts))) - set(omega) -set(np.where(verts[:,0]== b_i[0])[0])  -set(np.where(verts[:,1]== b_i[1])[0]  ) )
+    ###-----------------------------------------------------------------------------#
+    #""" NODES """
+    nodes = omega  
+    ##-----------------------------------------------------------------------------#
+    """ OMEGA """
+    omega = np.zeros((2*len(nodes), 3), dtype = int)
+    
+    for j in range(len(nodes)):
+        k = nodes[j]
+        omega[2*j,    ] = np.array([k, k+ N_i[1]+1,k + 1])#  clockwise
+        omega[2*j + 1,    ] = np.array([k, k + N_i[1], k+ N_i[1]+1])#  clockwise
+    
+    """ OMEGA_i """
+    Omega_i = np.zeros((2*len(omega_i), 3), dtype = int)
+    
+    for j in range(len(omega_i)):
+        k = omega_i[j]
+        Omega_i[2*j,    ] = np.array([k, k+ N_i[1]+1,k + 1 ]) # clockwise
+        Omega_i[2*j +1, ] = np.array([k,k + N_i[1], k+ N_i[1]+1])#clockwise
+    
+    omega_i = Omega_i
+    
+    ##-----------------------------------------------------------------------------#
+    """ BOUNDARY """
+    boundary1 = [k_0 + kk  for kk in range(N[0])]
+    boundary2 = [k_0 + N[1]*N_i[0] + kkk  for kkk in range(N[0]+1)]
+    boundary3 = [k_0 + j*N_i[0] for j in range(N[1])]
+    boundary4 = [k_0 +N[0]+ j*N_i[0] for j in range(N[1])]
+    
+    boundary = np.unique( boundary1 + boundary2 + boundary3 + boundary4)
+
+    ##-----------------------------------------------------------------------------#
+    
+    aux = np.zeros((len(omega),4), dtype=int)    
+    aux[:,1:] = omega  
+    aux[:,0] = 1*np.ones(len(omega), dtype = int)
+    omega = aux
+    
+    aux = np.zeros((len(omega_i),4), dtype=int)    
+    aux[:,1:] = omega_i  
+    aux[:,0] = 2*np.ones(len(omega_i), dtype = int)
+    omega_i = aux
+    
+    ##-----------------------------------------------------------------------------#
+    """ TRIANGLES """
+    triangles = np.vstack((omega, omega_i))
+
+    """ NODES """
+    num_omega = np.shape(omega)[0]
+    nodes = np.unique(omega[:,1:4].reshape(3*num_omega))
+
+    ##-----------------------------------------------------------------------------#
+    """ PERMUTE VERTS TO SORT OMEGA_I TO THE END and ADAPT TRIANGLES etc """ 
+    nodes_inner = list(set(nodes) - set(boundary))
+    nodes_rest = list(set(range(len(verts))) - set(nodes_inner) - set(boundary))
+    verts = np.vstack((verts[nodes_inner], verts[boundary], verts[nodes_rest]))
+    
+    new_order = nodes_inner + list(boundary) + nodes_rest
+    def permutation(i):
+        return new_order.index(i)
+    
+    triangles_old = triangles
+    triangles = np.zeros(np.shape(triangles_old), dtype = int)
+    triangles[:,0] = triangles_old[:,0]
+    
+    for i in range(np.shape(triangles_old)[0]):
+        for j in range(1,4):
+            triangles[i,j] = int(permutation(triangles_old[i,j] ))
+
+    omega = triangles[np.where(triangles[:,0] != 2)[0]]
+    boundary = range(len(nodes_inner), len(nodes_inner)+len(boundary))
+    nodes = list(range(len(nodes_inner)))+list(boundary)
+
+    #--------------------------------------------------------------------------
+    """ BOUNDARY_nodes (subset 0:len(nodes) )"""      
+    bdry_nodes = [nodes.index(i) for i in boundary] 
+    
+    #--------------------------------------------------------------------------
+    """ SHAPE INTERFACE (subset 0:len(verts) )"""      
+    interface = []#np.unique(lines[np.where(lines[:,0]==12)][:,1:]).tolist()     
+
+    #------------------------------------------------------------------------------  
+    """ BUILDING MESH CLASS """
+    proc_mesh_data = [triangles, omega, verts, boundary, nodes, bdry_nodes, interface]    
+    mesh = Mesh_slim(proc_mesh_data)
+    #------------------------------------------------------------------------------       
+    return mesh, proc_mesh_data
+
+
+
+
+
+       
+def prepare_mesh_slim(verts, lines, triangles, eps):
+    verts = verts[:,0:2]
+    # note that eps is determined already in the mesh, however: for 
+    # homogeneous dirichtlet constraints it simply has to be smaller than
+    # the pre-determined epsilon
+
+    """ sort triangles """
+    # we sort by labels
+    # this is important such that omega[k,] = triangle[k,]
+    # As a consequence we can use omega for the list 'support'
+    triangles = triangles[triangles[:,0].argsort()]
+
+    def norm(x):
+        return np.max(np.abs(x), axis= 0)
+    #--------------------------------------------------------------------------
+    """ DECRYPTING LABELS: 1 = shape; 2 = omega\shape; 3 = omega_i """   
+    omega = triangles[np.where(triangles[:,0] != 3)[0]]    
+
+    #--------------------------------------------------------------------------
+    """ SHAPE INTERFACE (subset 0:len(verts) )"""      
+    interface = np.unique(lines[np.where(lines[:,0]==12)][:,1:]).tolist()   
+    
+    #--------------------------------------------------------------------------
+    """ NODES (subset of verts)"""   
+
+    omega1 = triangles[np.where(triangles[:,0] == 1)] 
+    omega2 = triangles[np.where(triangles[:,0] == 2)] 
+    nodes1 = list(np.unique(omega1[:,1:4]))
+    nodes2 = list(np.unique(omega2[:,1:4]))
+
+    G_N = []
+    for i in interface:
+        G_N += np.where(norm((verts-np.repeat(verts[i][:,np.newaxis], len(verts), axis = 1).transpose()).transpose())<=eps)[0].tolist()
+
+    G_N1 = list( (set(nodes1)&set(G_N)) )
+    G_N2 = list(  (set(nodes2)&set(G_N)) )
+    
+    nodes1 = list(set(nodes1) - set(G_N1) )
+    nodes2 = list(set(nodes2) - set(G_N2) )
+    G_N1 = list( (set(G_N1)-set(interface)) )
+    G_N2 = list(  (set(G_N2)-set(interface)) )
+    nodes = list(nodes1)  + list(G_N1)+ interface + list(G_N2) + list(nodes2) 
+    nodes = np.array(nodes)
+
+    #--------------------------------------------------------------------------
+    """ BOUNDARY_verts (subset of verts); label = 9"""
+    boundary = np.unique(lines[lines[:,0] == 9][:,1:3])
+    # test nodes
+#    plt.plot(verts[boundary][:,0], verts[boundary][:,1], 'ro')
+    ##-----------------------------------------------------------------------------#
+    """ PERMUTE VERTS TO SORT OMEGA_I TO THE END and ADAPT TRIANGLES etc """ 
+    if True:
+        nodes_inner = list(set(nodes) - set(boundary))
+        nodes_rest = list(set(range(len(verts))) - set(nodes_inner) - set(boundary))
+    
+        verts = np.vstack((verts[nodes_inner], verts[boundary], verts[nodes_rest]))
+        
+        new_order = nodes_inner + list(boundary) + nodes_rest
+        def permutation(i):
+            return new_order.index(i)
+        triangles_old = triangles
+        triangles = np.zeros(np.shape(triangles_old), dtype = int)
+        triangles[:,0] = triangles_old[:,0]
+        
+        for i in range(np.shape(triangles_old)[0]):
+            for j in range(1,4):
+                triangles[i,j] = int(permutation(triangles_old[i,j] ))
+        
+    
+        interface_old= interface
+        interface = np.zeros(len(interface_old), dtype = int)
+        for i in range(len(interface_old)):
+            interface[i] = permutation(interface_old[i])
+        
+        omega = triangles[np.where(triangles[:,0] != 3)[0]]
+        # plot omega
+    #    for i in range(len(omega)):
+    #        plt.gca().add_patch(plt.Polygon(verts[omega[i,1:]], closed=True, fill = True, color = 'blue', alpha = 0.2)) 
+        
+        boundary = np.array(range(len(nodes_inner), len(nodes_inner)+len(boundary)))
+        nodes = np.array(range(len(nodes_inner)+len(boundary)))#+list(boundary)
+#     PLOT verts
+#    plt.plot(verts[nodes][:,0], verts[nodes][:,1], 'bx')
+#    plt.plot(verts[interface][:,0], verts[interface][:,1], 'yd')
+#    plt.plot(verts[len(nodes):][:,0], verts[len(nodes):][:,1], 'ro')
+    #--------------------------------------------------------------------------
+    """ BOUNDARY_nodes (subset 0:len(nodes) )"""      
+    bdry_nodes = [nodes.tolist().index(i) for i in boundary] 
+
+    """ BUILDING MESH CLASS """
+    proc_mesh_data = [triangles, omega, verts, boundary, nodes,bdry_nodes,interface]    
+    mesh = Mesh_slim(proc_mesh_data)
+    #------------------------------------------------------------------------------       
+    return mesh, proc_mesh_data
+
+
+class Mesh_1d:
+
+    # object with all processed mesh data
+    def __init__(self, proc_mesh_data):
+
+        self.triangles = proc_mesh_data[0]
+        self.omega = proc_mesh_data[1]
+        self.verts = proc_mesh_data[2]
+        self.boundary_verts = proc_mesh_data[3]
+        self.nodes = proc_mesh_data[4]
+        self.diam = proc_mesh_data[5]
+        self.hash_table_approx = proc_mesh_data[6]
+        self.bary = proc_mesh_data[7]
+        self.boundary = proc_mesh_data[8]
+        self.hash_table_bary = proc_mesh_data[9]
+        self.shape_interface = proc_mesh_data[10]
+        self.h = proc_mesh_data[11]
+
+
+def prepare_mesh_reg_1d(h, delta, num_cores, **kwargs):
+
+    interface_point = kwargs.get('interface_point', 'x')
+    if interface_point == 'x':
+        interface_point =  2*h
+        labels = [1,1,3]
+    else:
+        labels = [1,2,3]
+    
+    if not (1/h).is_integer() or not (delta/h).is_integer():
+        print()
+        print('\n    ---- WARNING ----     \n')
+        print('(1/h and delta/h have to be an integer !!!')
+        print('\n    ---- WARNING ----     \n')
+        print()
+
+    if delta < h:
+        delta_i = h
+    else:
+        delta_i = delta
+        
+    def norm(x):
+        return np.abs(x)
+    a = [0.]
+    b = [1.]
+    gridsize = [h]
+    diam = h
+    dim = 1 
+    def E(z, L):
+        p = [np.prod([L[k] for k in range(j+1,dim)]) for j in range(dim)] + [np.prod(L)]
+        summe = 0
+        for i in range(dim):
+            summe = summe + z[i] * p[i]  
+        return int(summe)
+    def iE(k, L):
+        p = [np.prod([L[l] for l in range(j+1,dim)]) for j in range(dim)] + [np.prod(L)]
+        x = np.zeros(dim)
+        for i in range(dim):
+            x[i] = k//(int(p[i])) - (k//(int(p[i-1]))) * L[i]
+        return x[0]
+    
+    roundof = 7 # verts will not give precisely the value but rather 0.1000009 (in order to make 
+                # np.where () work we have to round of, roughly in the dimension of the gridsize)
+    def ha(x):
+        return np.array([gridsize[0]*x])
+    
+    a_i = [a[0]- delta_i]
+    b_i = [b[0] + delta_i]
+    N_i = [int(np.around((b_i[i]-a_i[i])/gridsize[i])) + 1 for i in range(dim)]
+    
+    #-----------------------------------------------------------------------------#
+    """ VERTS """
+    def fun(k):
+        return (a_i[0] +  ha(iE(k,N_i)))[0]#, decimals = roundof)
+    #    pool = Pool(processes=num_cores) 
+    verts = np.around(np.array(map(fun, range(np.prod(N_i)) )), decimals = roundof)# np.array([  for k in range(np.prod(N_i))])
+    #    pool.close()
+    #    pool.join()
+    #    pool.clear()
+    #    print verts
+    
+    verts = np.sort(np.unique(np.append(verts, [interface_point]))) 
+    # note: if we dont want interface, then interface = 2h, in this case no
+    # new point is added to the grid
+    """ OMEGA """
+    k_0 =  np.where(verts==np.around(np.array(a) , decimals = roundof))[0][0] 
+    k_i = np.where(verts==np.around(np.array(interface_point) , decimals = roundof))[0][0] 
+    k_1 =  np.where(verts==np.around(np.array(b) , decimals = roundof))[0][0]
+    omega = np.zeros((k_1-k_0, 3), dtype = int)
+    for j in range(k_i - k_0):
+        omega[j, ] = np.array([labels[0], k_0 + j, k_0 + j + 1])#  clockwise
+    for j in range(k_1 - k_i):
+        omega[k_i-k_0 + j, ] = np.array([labels[1], k_i + j, k_i + j + 1])#  clockwise
+    """ OMEGA_i """
+    omega_i = np.zeros((2*len(range(k_0)), 3), dtype = int)
+    for j in range(k_0):
+        omega_i[j,    ] = np.array([labels[2], j, j+1]) # clockwise
+        omega_i[k_0 + j,    ] = np.array([labels[2], k_1 + j, k_1 +j+1])
+    """ BOUNDARY """
+    boundary = [k_0, k_1]
+    """ TRIANGLES """
+    triangles = np.vstack((omega, omega_i))
+    """ NODES """
+    num_omega = np.shape(omega)[0]
+    nodes = np.unique(omega[:,1:3].reshape(2*num_omega))
+    bary = (verts[triangles[:,1]] + verts[triangles[:,2]] ) /2.
+    """ HASH TABLE_approx (= hash table bary without puffer)"""      
+    hash_table_approx = []#[np.where(np.abs((bary-np.repeat(bary[i], len(bary))))<=(delta))[0].tolist() for i in range(len(bary))]
+    """ HASH TABLE (subset 0:len(bary))"""
+    hash_table_bary = []#[np.where(norm((bary-np.repeat(bary[i], len(bary)).transpose()).transpose())<=(delta+ diam))[0].tolist() for i in range(len(bary))]
+    """ BOUNDARY_nodes (subset 0:len(nodes) )"""      
+    bdry_nodes = [nodes.tolist().index(i) for i in boundary]
+    """ SHAPE INTERFACE (subset 0:len(verts) )"""      
+    interface = []#np.unique(lines[np.where(lines[:,0]==12)][:,1:]).tolist()
+    """ BUILDING MESH CLASS """
+    proc_mesh_data = [triangles, omega, verts,  boundary, nodes,  diam,  hash_table_approx, bary, bdry_nodes, hash_table_bary, interface, h]    
+    mesh = Mesh_1d(proc_mesh_data)
+    #------------------------------------------------------------------------------       
+    return mesh, proc_mesh_data
+   
+
+"""-------------------------------------------------------------------------"""
+"""                     END PREPARE MESH                                    """
+"""-------------------------------------------------------------------------"""
+#=============================================================================#
+#=============================================================================#
+#=============================================================================#
+#=============================================================================#
+"""-------------------------------------------------------------------------"""
+"""                   ASSEMBLY FUNCTIONS                                    """
+"""-------------------------------------------------------------------------"""
+#==============================================================================
+#                          QUADRATURE
+#==============================================================================
+if quad_order_outer == 'test':
+    P = P_test#np.array([ [ 1./3., 1./3.]]).transpose()
+    weights=  np.array([ 0.5])
+    
+elif quad_order_outer == 8:
+    print('outer quad = 16 points')
+    P = np.array([ [ 0.33333333,  0.33333333],
+                   [ 0.45929259,  0.45929259],
+                   [ 0.45929259,  0.08141482],
+                   [ 0.08141482,  0.45929259],
+                   [ 0.17056931,  0.17056931],
+                   [ 0.17056931,  0.65886138],
+                   [ 0.65886138,  0.17056931],
+                   [ 0.05054723,  0.05054723],
+                   [ 0.05054723,  0.89890554],
+                   [ 0.89890554,  0.05054723],
+                   [ 0.26311283,  0.72849239],
+                   [ 0.72849239,  0.00839478],
+                   [ 0.00839478,  0.26311283],
+                   [ 0.72849239,  0.26311283],
+                   [ 0.26311283,  0.00839478],
+                   [ 0.00839478,  0.72849239]]).transpose()
+                   
+    weights=  np.array([ 0.14431560767779
+                       , 0.09509163426728
+                       , 0.09509163426728
+                       , 0.09509163426728
+                       , 0.10321737053472
+                       , 0.10321737053472
+                       , 0.10321737053472
+                       , 0.03245849762320
+                       , 0.03245849762320
+                       , 0.03245849762320
+                       , 0.02723031417443
+                       , 0.02723031417443
+                       , 0.02723031417443
+                       , 0.02723031417443
+                       , 0.02723031417443
+                       , 0.02723031417443])
+
+elif quad_order_outer == 5:
+    print('outer quad = 7 Gaussian points')
+    P = np.array([[0.33333333333333,    0.33333333333333],
+                  [0.47014206410511,    0.47014206410511],
+                  [0.47014206410511,    0.05971587178977],
+                  [0.05971587178977,    0.47014206410511],
+                  [0.10128650732346,    0.10128650732346],
+                  [0.10128650732346,    0.79742698535309],
+                  [0.79742698535309,    0.10128650732346] ]).transpose()
+    
+    weights = np.array([0.22500000000000,
+                        0.13239415278851,
+                        0.13239415278851,
+                        0.13239415278851,
+                        0.12593918054483,
+                        0.12593918054483,
+                        0.12593918054483])
+        
+
+elif quad_order_outer == 3:            
+    P = np.array([[ 1./3.,  1./3.],
+                  [ 0.2       ,  0.6       ],
+                  [ 0.2       ,  0.2       ],
+                  [ 0.6       ,  0.2       ]]).transpose()
+    
+    weights = np.array([-27./48., 25./48., 25./48., 25./48.])
+
+elif quad_order_outer == 2: 
+    P = np.array([[1./6.,    1./6.],
+                  [1./6.,    2./3.],  
+                  [2./3.,    1./6.]  ]).transpose()
+    weights = 1./3 * np.ones(3)
+
+elif quad_order_outer == 'GL-5-12':
+    P = np.array([[1./21. * (7 - np.sqrt(7))    , 1./21. * (7 - np.sqrt(7))],
+                  [1./21. * (7 - np.sqrt(7))    , 1- 2./21. * (7 - np.sqrt(7))  ],
+                  [1- 2./21. * (7 - np.sqrt(7)) , 1./21. * (7 - np.sqrt(7))],
+                  [1./42.*(21.-np.sqrt(21*(4*np.sqrt(7)-7))), 0. ],
+                  [0. ,1.-1./42.*(21.-np.sqrt(21*(4*np.sqrt(7)-7)))],
+                  [1.-1./42.*(21.-np.sqrt(21*(4*np.sqrt(7)-7))), 1./42.*(21.-np.sqrt(21*(4*np.sqrt(7)-7)))],
+                  [1./42.*(21.+np.sqrt(21*(4*np.sqrt(7)-7))), 0. ],
+                  [0. ,1.-1./42.*(21.+np.sqrt(21*(4*np.sqrt(7)-7)))],
+                  [1.-1./42.*(21.+np.sqrt(21*(4*np.sqrt(7)-7))), 1./42.*(21.+np.sqrt(21*(4*np.sqrt(7)-7)))],
+                  [0., 0.],
+                  [1., 0.],
+                  [0., 1.] ]).transpose()
+
+
+
+    weights = 2*np.array([7./720. * (14. - np.sqrt(7.)), 7./720. * (14. - np.sqrt(7.)), 7./720. * (14. - np.sqrt(7.)),
+                        1./720. * (7. + 4.*np.sqrt(7.)), 1./720. * (7. + 4.*np.sqrt(7.)), 1./720. * (7. + 4.*np.sqrt(7.)),
+                        1./720. * (7. + 4.*np.sqrt(7.)), 1./720. * (7. + 4.*np.sqrt(7.)), 1./720. * (7. + 4.*np.sqrt(7.)),
+                        1./720. * (8.-np.sqrt(7.)),1./720. * (8.-np.sqrt(7.)),1./720. * (8.-np.sqrt(7.))])
+
+
+else:
+    print('outer quad = 7 points incl. vertices')
+    # 7-points rule including vertices of triangle
+    P = np.array([[0.,0.],
+               [0.5, 0.],
+               [1., 0.],
+               [1./3., 1./3.],
+               [0.,0.5],
+               [0.5, 0.5],
+               [0.,1.] ]).transpose()
+
+    weights = np.array([1./20., 4./30., 1./20., 9./20., 4./30., 4./30., 1./20.])
+
+#===================        FOR INNER INTEGRAL     ============================
+if quad_order_inner == 8:
+    print('inner quad = 16 points ')
+    P2 = np.array([ [ 0.33333333,  0.33333333],
+                   [ 0.45929259,  0.45929259],
+                   [ 0.45929259,  0.08141482],
+                   [ 0.08141482,  0.45929259],
+                   [ 0.17056931,  0.17056931],
+                   [ 0.17056931,  0.65886138],
+                   [ 0.65886138,  0.17056931],
+                   [ 0.05054723,  0.05054723],
+                   [ 0.05054723,  0.89890554],
+                   [ 0.89890554,  0.05054723],
+                   [ 0.26311283,  0.72849239],
+                   [ 0.72849239,  0.00839478],
+                   [ 0.00839478,  0.26311283],
+                   [ 0.72849239,  0.26311283],
+                   [ 0.26311283,  0.00839478],
+                   [ 0.00839478,  0.72849239]]).transpose()
+                   
+    weights2=  np.array([ 0.14431560767779
+                       , 0.09509163426728
+                       , 0.09509163426728
+                       , 0.09509163426728
+                       , 0.10321737053472
+                       , 0.10321737053472
+                       , 0.10321737053472
+                       , 0.03245849762320
+                       , 0.03245849762320
+                       , 0.03245849762320
+                       , 0.02723031417443
+                       , 0.02723031417443
+                       , 0.02723031417443
+                       , 0.02723031417443
+                       , 0.02723031417443
+                       , 0.02723031417443])
+
+elif quad_order_inner == 5:
+    P2 = np.array([[0.33333333333333,    0.33333333333333],
+                  [0.47014206410511,    0.47014206410511],
+                  [0.47014206410511,    0.05971587178977],
+                  [0.05971587178977,    0.47014206410511],
+                  [0.10128650732346,    0.10128650732346],
+                  [0.10128650732346,    0.79742698535309],
+                  [0.79742698535309,    0.10128650732346] ]).transpose()
+    
+    weights2 = np.array([0.22500000000000,
+                        0.13239415278851,
+                        0.13239415278851,
+                        0.13239415278851,
+                        0.12593918054483,
+                        0.12593918054483,
+                        0.12593918054483])
+
+elif quad_order_inner == 3:    
+    print("inner quad = 4 points Gaussian")        
+    P2 = np.array([[ 1./3.,  1./3.],
+                  [ 0.2       ,  0.6       ],
+                  [ 0.2       ,  0.2       ],
+                  [ 0.6       ,  0.2       ]]).transpose()
+    
+    weights2 = np.array([-27./48., 25./48., 25./48., 25./48.])
+
+elif quad_order_inner == 2: 
+    print("inner quad = 3 points Gaussian") 
+    P2 = np.array([[1./6.,    1./6.],
+                  [1./6.,    2./3.],  
+                  [2./3.,    1./6.]  ]).transpose()
+    weights2 = 1./3 * np.ones(3)        
+
+else:
+    print("inner quad = 1 point - barycenter + triangle vol") 
+    P2 = np.array([[1./3., 1./3.]]).transpose()
+    weights2 = np.array([1.0])
+
+
+n = np.shape(P)[1]
+n2 = np.shape(P2)[1]
+
+X = np.tile(P,n)
+Y = np.repeat(P,n, axis=1)
+W = 0.25 * np.array([weights[i]*weights[r] for i in range(n) for r in range(n)])
+
+def BASIS(v):
+    return np.array([ 1. - v[0] - v[1], v[0], v[1]])
+
+PSI = BASIS(P)
+PSI_2 = BASIS(P2)
+
+PSI_X = BASIS(X)
+PSI_Y = BASIS(Y)
+
+PSI_P = BASIS(P)
+weights = 0.5 * weights
+weights2 = 0.5 * weights2
+
+def basis_0(v):
+    return 1. - v[0] - v[1]
+def basis_1(v):
+    return v[0]
+def basis_2(v):
+    return v[1]
+def basis_3(v):
+    return v[1]-v[1]
+
+basis = [basis_0, basis_1, basis_2, basis_3]
+
+
+""" TEST FOR MINIMUM PRECISION"""
+P_outer = P
+weights_outer = weights
+P_inner = P2
+weights_inner = weights2
+n_outer, n_inner = n, n2
+X_outer, Y_inner = np.tile(P_outer,n_inner), np.repeat(P_inner,n_outer, axis=1)
+W_minprec = np.array([weights_outer[r]*weights_inner[i] for i in range(n_inner) for r in range(n_outer)])
+PSI_outer = BASIS(X_outer)
+PSI_inner = BASIS(Y_inner)
+#-----------------------------------------------------------------------------
+
+
+"""#===========================================================================
+                              QUADRATURE 1d
+#==========================================================================="""
+## quadpoints and weights for reference interval [0,1]
+points1_1d = np.polynomial.legendre.leggauss(n1_1d)[0]    
+weights1_1d = np.polynomial.legendre.leggauss(n1_1d)[1] 
+p1_1d = 0.5 + 0.5 * points1_1d
+
+points2_1d = np.polynomial.legendre.leggauss(n2_1d)[0]    
+weights2_1d = np.polynomial.legendre.leggauss(n2_1d)[1] 
+p2_1d = 0.5 + 0.5 * points2_1d
+
+n1_1d = len(p1_1d)
+n2_1d = len(p2_1d)
+
+X_1d = np.tile(p1_1d,n1_1d)
+Y_1d = np.repeat(p1_1d,n1_1d)
+W_1d = 0.25 * np.array([weights1_1d[i]*weights1_1d[r] for i in range(n1_1d) for r in range(n1_1d)])
+
+def BASIS_1d(v):
+    return np.array([ 1-v, v])
+
+PSI_1d = BASIS_1d(p1_1d)
+PSI_2_1d = BASIS_1d(p2_1d)
+
+PSI_X_1d = BASIS_1d(X_1d)
+PSI_Y_1d = BASIS_1d(Y_1d)
+
+PSI_P_1d = BASIS_1d(p1_1d)
+weights1_1d = 0.5 * weights1_1d
+weights2_1d = 0.5 * weights2_1d
+
+def psi0(v):
+    return 1.-v          
+def psi1(v):
+    return v
+def psi2(v):
+    return (v - v)
+
+basis_1d = [psi0, psi1, psi2]
+
+#==============================================================================
+"""                 CHOOSE PARAMETER FOR ADAPTIVE RULE                      """
+#==============================================================================
+T_ref = [[0., 0.], [1., 0.], [0., 1.]]
+""" plot quad_points """
+#plt.gca().add_patch(plt.Polygon(T_ref , closed=True, fill = False))  
+#for p in P.transpose():
+#    plt.plot(p[0], p[1], 'rx')
+#plt.axis('equal')
+"""RONALD COOLS and ANN HAEGEMANS  5-7 embedded rule """    
+P_radon = np.array([[ 1./3.,  1./3.],
+              [ (6+np.sqrt(15))/21.,            (6+np.sqrt(15))/21. ],
+              [ (6+np.sqrt(15))/21.,            (9. - 2. * np.sqrt(15))/21. ],
+              [ (9. - 2. * np.sqrt(15))/21. ,   (6+np.sqrt(15))/21.  ], 
+              [ (6-np.sqrt(15))/21.,            (6-np.sqrt(15))/21. ],
+              [ (6-np.sqrt(15))/21.,            (9.+ 2. * np.sqrt(15))/21. ],
+              [ (9.+ 2. * np.sqrt(15))/21. ,    (6-np.sqrt(15))/21.],
+              [1./9.,                           1./9.],
+              [1./9.,                           7./9.],
+              [7./9.,                           1./9.],
+              [1./9.,                           (4 + np.sqrt(15))/9.],
+              [1./9.,                           (4 - np.sqrt(15))/9.],
+              [(4 + np.sqrt(15))/9.,            1./9.],
+              [(4 + np.sqrt(15))/9.,            (4 - np.sqrt(15))/9.],  
+              [(4 - np.sqrt(15))/9.,            1./9.],
+              [(4 - np.sqrt(15))/9.,            (4+ np.sqrt(15))/9.]])
+
+
+weights7 = np.array([1773./17920., 
+                      1./3. * (13558.*np.sqrt(15) - 37801.)/89600., 1./3. * (13558.*np.sqrt(15) - 37801.)/89600.,1./3. * (13558.*np.sqrt(15) - 37801.)/89600.,
+                      1./3. * (-13558.*np.sqrt(15) - 37801.)/89600., 1./3. * (-13558.*np.sqrt(15) - 37801.)/89600., 1./3. * (-13558.*np.sqrt(15) - 37801.)/89600., 
+                      1./3. * 19683./17920, 1./3. * 19683./17920,1./3. * 19683./17920,
+                      1./6. * 6561./44800.,1./6. * 6561./44800.,1./6. * 6561./44800.,1./6. * 6561./44800.,1./6. * 6561./44800.,1./6. * 6561./44800.])
+weights5 = 0.5 * np.array([9./40., 1./3. * (155. + np.sqrt(15))/400., 1./3. * (155. + np.sqrt(15))/400., 1./3. * (155. + np.sqrt(15))/400., 1./3. * (155. - np.sqrt(15))/400., 1./3. * (155. - np.sqrt(15))/400., 1./3. * (155. - np.sqrt(15))/400.,0,0,0,0,0,0,0,0,0])    
+
+def tri_adapt(f, T, **kwargs):
+    tol1_Radon_get = kwargs.get('tol1_Radon_get', tol1_Radon)
+    tol2_Radon_get = kwargs.get('tol2_Radon_get', tol2_Radon)
+#    plot = kwargs.get('plot', 0)
+
+    T = np.array(T)
+
+    M = np.array([T[1] - T[0], T[2] - T[0]]).transpose()
+    def trans(y):   
+#        plt.plot((T[0] + M.dot(y) )[0], (T[0] + M.dot(y) )[1], 'rx')
+        return T[0] + M.dot(y) 
+        
+    det = abs(np.linalg.det(np.array([T[1] - T[0], T[2] - T[0]]).transpose()))
+
+    I = np.array(map(lambda i: f(trans(P_radon[i])), range(np.shape(P_radon)[0]) )) 
+
+    g_high = det * (I * weights7).sum()
+    g_low =  det * (I * weights5).sum()
+    diam = max(np.linalg.norm(T[0]-T[1]),np.linalg.norm(T[0]-T[2]), np.linalg.norm(T[2]-T[1]))
+    
+#    if plot:
+#        plt.gca().add_patch(plt.Polygon(T , closed=True, fill = False))  
+    
+    if abs(g_high - g_low)/abs(g_low+1e-9) > tol1_Radon_get and diam>tol2_Radon_get:#
+        new1 = list(0.5 * (np.array(T[0])+np.array(T[2])))
+        new2 = list(0.5 * (np.array(T[0])+np.array(T[1])))
+        new3 = list(0.5 * (np.array(T[1])+np.array(T[2])))
+
+        T1 = [T[0], new2, new1]
+        T2 = [new1, new2, new3]
+        T3 = [new1, new3, T[2]]
+        T4 = [new2, T[1], new3]
+        
+        return   tri_adapt(f, T1, tol2_Radon_get = tol2_Radon_get, tol1_Radon_get = tol1_Radon_get)  \
+               + tri_adapt(f, T2, tol2_Radon_get = tol2_Radon_get, tol1_Radon_get = tol1_Radon_get)  \
+               + tri_adapt(f, T3, tol2_Radon_get = tol2_Radon_get, tol1_Radon_get = tol1_Radon_get)  \
+               + tri_adapt(f, T4, tol2_Radon_get = tol2_Radon_get, tol1_Radon_get = tol1_Radon_get) 
+               
+    return g_high    
+  
+"""-------------------------------------------------------------------------"""
+"""                   ASSEMBLY FUNCTIONS                                    """
+"""-------------------------------------------------------------------------"""
+#=============================================================================#
+#=============================================================================#
+#=============================================================================#
+#=============================================================================#"""-------------------------------------------------------------------------"""
+"""-------------------------------------------------------------------------"""
+"""                     ASSEMBLY LAPLACE STIFFNESS MATRIX                   """
+"""-------------------------------------------------------------------------"""
+def Laplace(mesh,num_cores, **kwargs):
+    deform = kwargs.get('deform', 0)
+    verts = mesh.vertices + deform
+    triangles = mesh.elements
+    nodes = mesh.nodes
+    support = mesh.support
+    nodes = list(nodes)
+    gradient = [np.array([-1, -1]), np.array([1, 0]), np.array([0, 1])]
+    
+    def entry(k,j):
+        res = 0.
+        Skj = list(set(support[k]) & set(support[j]))
+        for s in Skj:
+            if triangles[s,0] != 3:
+                S = triangles[s,1:].tolist()
+                a, b= S.index(nodes[k]),S.index(nodes[j])
+                T = [verts[S[i]] for i in range(3)]    
+                Mat_k = np.array( [T[1] - T[0],T[2] - T[0] ]).transpose()
+                det_k = float((T[1] - T[0])[0] * (T[2] - T[0])[1] - (T[1] - T[0])[1] * (T[2] - T[0])[0] )
+                iMat_k = 1./det_k * np.array([ [Mat_k[1,1], -Mat_k[0,1]], [-Mat_k[1,0], Mat_k[0,0]]  ])
+                res += 0.5 * abs(det_k) * gradient[a].dot(iMat_k.dot(iMat_k.transpose().dot(gradient[b])))
+        return res
+
+    L = np.zeros((len(nodes), len(nodes)))
+    def fun_wrapper(indices):
+        return entry(*indices)
+    def fun(k):
+        return np.array(map(fun_wrapper, [(k, j) for j in mesh.nhd[k]]))
+    AUX = list(map(fun, range(len(nodes))))
+    for k in xrange(len(nodes)):
+        L[k, mesh.nhd[k]] = AUX[k]
+    L = np.tril(L)
+    L = L.transpose() + L - np.diag(L.diagonal())    
+    
+    return ss.csr_matrix(L)
+
+def Laplace_1d(mesh, diff_coeff):
+
+    verts = mesh.vertices
+#    nodes = mesh.nodes
+    gradient = [np.array([-1]), np.array([1])]
+
+    L = ss.lil_matrix((len(mesh.vertices), len(mesh.vertices)), dtype = float)
+
+    for i in range(len(mesh.elements)):
+        label_i = mesh.elements[i, 0]
+        T_i = mesh.elements[i, 1:].tolist()
+        T_i_v = verts[T_i]#np.array([verts[T_i[0]],verts[T_i[1]], verts[T_i[2]]])
+        det_T_i = T_i_v[1] - T_i_v[0]
+        iMat_i = 1./det_T_i
+        for a in range(2):
+            for b in range(2):
+                kk, jj = T_i[a], T_i[b]
+                L[kk, jj] += abs(det_T_i) * diff_coeff[label_i-1] * gradient[a] * iMat_i * iMat_i * gradient[b]
+
+    return L.tocsr()
+
+    
+def Laplace_para(mesh, diff_coeff, num_cores, **kwargs):
+    """
+    actually not worth it, because:
+    1) if matrix small: serial pretty fast, too much overhead elsewise
+    2) if matrix is large: way of parallizing takes way to much RAM
+    """
+    
+    deform = kwargs.get('deform', 0)
+    # print(deform)
+    # print('verts1', mesh.verts[50])
+    verts = mesh.vertices + deform
+    # print('verts2', verts[50])
+    nodes = mesh.nodes
+    gradient = [np.array([-1, -1]), np.array([1, 0]), np.array([0, 1])]
+
+    # randomly shuffle indices: 
+    # For areas where the mesh is fine, hash_i might be much larger 
+    liste = range(len(mesh.omega))
+    random.shuffle(list(liste))
+    pieces = np.array_split(liste, 1)
+
+    # For every pieces compute the whole matrix
+    def aux(m):
+
+        L = ss.lil_matrix((len(mesh.nodes),len(mesh.nodes)), dtype = float)
+
+        for i in pieces[m].tolist():
+            label_i = mesh.omega[i,0]
+            T_i = mesh.omega[i, 1:].tolist()
+            T_i_v = verts[T_i]#np.array([verts[T_i[0]],verts[T_i[1]], verts[T_i[2]]])
+            # if i == 60:
+            #     print(T_i_v)
+            Mat_i = np.array( [T_i_v[1] - T_i_v[0],T_i_v[2] - T_i_v[0] ]).transpose()
+            det_T_i = Mat_i[0,0] * Mat_i[1,1] - Mat_i[1,0] * Mat_i[0,1]
+            iMat_i = 1./det_T_i * np.array([ [Mat_i[1,1], -Mat_i[0,1]], [-Mat_i[1,0], Mat_i[0,0]]  ])
+            for a in range(3):
+                for b in range(3):
+                    kk, jj = np.where(nodes == T_i[a])[0][0], np.where(nodes == T_i[b])[0][0]
+                    L[kk, jj] += diff_coeff[label_i-1] * 0.5 * abs(det_T_i) * gradient[a].dot(iMat_i.dot(iMat_i.transpose().dot(gradient[b])))
+
+        return L
+
+    Ls = list(map(aux, range(1)))#Pool(num_cores).
+
+    L = ss.lil_matrix((len(mesh.nodes),len(mesh.nodes)), dtype = float)
+    for i in range(1):
+        # print(Ls[i].A)
+        L += Ls[i]
+
+    return L.tocsr()
+"""-------------------------------------------------------------------------"""
+"""                 END ASSEMBLY LAPLACE STIFFNESS MATRIX                   """
+"""-------------------------------------------------------------------------"""
+
+#=============================================================================#
+#=============================================================================#
+#=============================================================================#
+"""-------------------------------------------------------------------------"""
+"""                       ASSEMBLY OF RHS                                   """
+"""-------------------------------------------------------------------------"""
+def source_term_discon(mesh, source, **kwargs):
+    """
+    source: function determining the source term
+    omega: triangles in omega
+    verts: associated nodes
+    """
+    deform = kwargs.get('deform', 0)
+    verts = mesh.vertices + deform
+
+#    f0 = source[0]
+#    f1 = source[1]
+
+    P = np.array([[ 0.33333333,  0.33333333],
+                  [ 0.2       ,  0.6       ],
+                  [ 0.2       ,  0.2       ],
+                  [ 0.6       ,  0.2       ]]).transpose()
+
+    n = np.shape(P)[1]
+    weights = 0.5 * np.array([-27./48, 25./48, 25./48, 25./48])
+
+    def BASIS(v):
+        return np.array([ 1. - v[0] - v[1], v[0], v[1]])
+
+    PSI = BASIS(P)
+
+    num_nodes = len(mesh.nodes)
+    res = np.zeros(num_nodes)
+
+    labels_inner_domain = np.sort(np.unique(mesh.elements[:, 0]))[0:-1].tolist()
+
+    for label in labels_inner_domain:
+        omega = mesh.elements[np.where(mesh.elements[:, 0] == label)[0]]
+
+        num_omega = len(omega)
+
+        nodes = list(mesh.nodes)
+        for i in range(num_omega):
+            T_i = omega[i][1:].tolist()
+            T_i_v = np.array([verts[T_i[0]],verts[T_i[1]], verts[T_i[2]]])
+            for k in range(3):
+                Mat_k = np.array( [T_i_v[(k+1)%3] - T_i_v[k],T_i_v[(k-1)%3] - T_i_v[k] ]).transpose()
+                det_k = abs(Mat_k[0,0] * Mat_k[1,1] - Mat_k[1,0] * Mat_k[0,1] )
+                B = source[label-1] * np.ones(n)
+                res[nodes.index(T_i[k])] += det_k * (B * PSI[k] * weights).sum()
+
+    return res
+
+"""-------------------------------------------------------------------------"""
+"""                   END ASSEMBLY OF RHS                                   """
+"""-------------------------------------------------------------------------"""
+#=============================================================================#
+#=============================================================================#
+#=============================================================================#
+"""-------------------------------------------------------------------------"""
+"""                       ASSEMBLY OF MASSMATRIX                            """
+"""-------------------------------------------------------------------------"""
+def mass_matrix2(mesh, **kwargs):
+
+    deform = kwargs.get('deform', 0)
+
+    verts = mesh.vertices + deform
+
+    nodes = np.array(mesh.nodes)
+
+    P = np.array([[ 0.33333333,  0.33333333],
+                  [ 0.2       ,  0.6       ],
+                  [ 0.2       ,  0.2       ],
+                  [ 0.6       ,  0.2       ]]).transpose()
+
+    weights = 0.5 * np.array([-27./48, 25./48, 25./48, 25./48])
+
+    def BASIS(v):
+        return np.array([ 1. - v[0] - v[1], v[0], v[1]])
+
+    PSI = BASIS(P)
+
+    num_nodes = len(mesh.nodes)
+
+
+    L = ss.lil_matrix((num_nodes,num_nodes), dtype = float)
+
+    for i in range(len(mesh.omega)):
+        T_i = mesh.omega[i, 1:].tolist()
+        T_i_v = np.array([verts[T_i[0]],verts[T_i[1]], verts[T_i[2]]])
+        Mat_i = np.array( [T_i_v[1] - T_i_v[0],T_i_v[2] - T_i_v[0] ]).transpose()
+        det_T_i = abs(Mat_i[0,0] * Mat_i[1,1] - Mat_i[1,0] * Mat_i[0,1] )
+        for a in range(3):
+            for b in range(3):
+                L[np.where(nodes == T_i[a])[0][0],np.where(nodes == T_i[b])[0][0]] += det_T_i * (PSI[a] * PSI[b] * weights).sum()
+
+    return L.tocsr()
+
+def mass_matrix2_DG(mesh, **kwargs):
+
+    deform = kwargs.get('deform', 0)
+
+    verts = mesh.vertices + deform
+
+    nodes = np.array(mesh.nodes)
+
+    P = np.array([[ 0.33333333,  0.33333333],
+                  [ 0.2       ,  0.6       ],
+                  [ 0.2       ,  0.2       ],
+                  [ 0.6       ,  0.2       ]]).transpose()
+
+    weights = 0.5 * np.array([-27./48, 25./48, 25./48, 25./48])
+
+    def BASIS(v):
+        return np.array([ 1. - v[0] - v[1], v[0], v[1]])
+
+    PSI = BASIS(P)
+
+    num_nodes = len(mesh.nodes)
+
+    L = ss.lil_matrix((3*len(mesh.omega),3*len(mesh.omega)), dtype = float)
+
+    for i in range(len(mesh.omega)):
+        T_i = mesh.omega[i, 1:].tolist()
+        T_i_v = np.array([verts[T_i[0]],verts[T_i[1]], verts[T_i[2]]])
+        Mat_i = np.array( [T_i_v[1] - T_i_v[0],T_i_v[2] - T_i_v[0] ]).transpose()
+        det_T_i = abs(Mat_i[0,0] * Mat_i[1,1] - Mat_i[1,0] * Mat_i[0,1] )
+        for a in range(3):
+            for b in range(3):
+                L[3*i + a, 3*i +b] = det_T_i * (PSI[a] * PSI[b] * weights).sum()
+
+    return L.tocsr()
+
+def mass_matrix_full(mesh, **kwargs):
+
+    deform = kwargs.get('deform', 0)
+
+    verts = mesh.vertices + deform
+
+    P = np.array([[ 0.33333333,  0.33333333],
+                  [ 0.2       ,  0.6       ],
+                  [ 0.2       ,  0.2       ],
+                  [ 0.6       ,  0.2       ]]).transpose()
+
+    weights = 0.5 * np.array([-27./48, 25./48, 25./48, 25./48])
+
+    # P = np.array([[0.33333333, 0.33333333],
+    #               [0.45929259, 0.45929259],
+    #               [0.45929259, 0.08141482],
+    #               [0.08141482, 0.45929259],
+    #               [0.17056931, 0.17056931],
+    #               [0.17056931, 0.65886138],
+    #               [0.65886138, 0.17056931],
+    #               [0.05054723, 0.05054723],
+    #               [0.05054723, 0.89890554],
+    #               [0.89890554, 0.05054723],
+    #               [0.26311283, 0.72849239],
+    #               [0.72849239, 0.00839478],
+    #               [0.00839478, 0.26311283],
+    #               [0.72849239, 0.26311283],
+    #               [0.26311283, 0.00839478],
+    #               [0.00839478, 0.72849239]]).transpose()
+    #
+    # weights = np.array([0.14431560767779
+    #                        , 0.09509163426728
+    #                        , 0.09509163426728
+    #                        , 0.09509163426728
+    #                        , 0.10321737053472
+    #                        , 0.10321737053472
+    #                        , 0.10321737053472
+    #                        , 0.03245849762320
+    #                        , 0.03245849762320
+    #                        , 0.03245849762320
+    #                        , 0.02723031417443
+    #                        , 0.02723031417443
+    #                        , 0.02723031417443
+    #                        , 0.02723031417443
+    #                        , 0.02723031417443
+    #                        , 0.02723031417443])
+
+    def BASIS(v):
+        return np.array([ 1. - v[0] - v[1], v[0], v[1]])
+
+    PSI = BASIS(P)
+
+    L = ss.lil_matrix((len(verts),len(verts)), dtype = float)
+
+    for i in range(len(mesh.elements)):
+        T_i = mesh.elements[i, 1:].tolist()
+        T_i_v = np.array([verts[T_i[0]],verts[T_i[1]], verts[T_i[2]]])
+        Mat_i = np.array( [T_i_v[1] - T_i_v[0],T_i_v[2] - T_i_v[0] ]).transpose()
+        det_T_i = abs(Mat_i[0,0] * Mat_i[1,1] - Mat_i[1,0] * Mat_i[0,1] )
+        for a in range(3):
+            for b in range(3):
+                L[T_i[a], T_i[b]] += det_T_i * (PSI[a] * PSI[b] * weights).sum()
+
+    return L.tocsr()
+
+def mass_matrix_full_DG(mesh, **kwargs):
+
+    deform = kwargs.get('deform', 0)
+
+    verts = mesh.vertices + deform
+
+    P = np.array([[ 0.33333333,  0.33333333],
+                  [ 0.2       ,  0.6       ],
+                  [ 0.2       ,  0.2       ],
+                  [ 0.6       ,  0.2       ]]).transpose()
+
+    weights = 0.5 * np.array([-27./48, 25./48, 25./48, 25./48])
+
+    def BASIS(v):
+        return np.array([ 1. - v[0] - v[1], v[0], v[1]])
+
+    PSI = BASIS(P)
+
+    L = ss.lil_matrix((3 * len(mesh.elements), 3 * len(mesh.elements)), dtype = float)
+
+    for i in range(len(mesh.elements)):
+        T_i = mesh.elements[i, 1:].tolist()
+        T_i_v = np.array([verts[T_i[0]],verts[T_i[1]], verts[T_i[2]]])
+        Mat_i = np.array( [T_i_v[1] - T_i_v[0],T_i_v[2] - T_i_v[0] ]).transpose()
+        det_T_i = abs(Mat_i[0,0] * Mat_i[1,1] - Mat_i[1,0] * Mat_i[0,1] )
+        for a in range(3):
+            for b in range(3):
+                L[3*i + a, 3*i + b] += det_T_i * (PSI[a] * PSI[b] * weights).sum()
+
+    return L.tocsr()
+
+def mass_matrix_para(mesh, num_cores, **kwargs):
+
+    deform = kwargs.get('deform', 0)
+    verts = mesh.vertices + deform
+    nodes = np.array(mesh.nodes)
+    P = np.array([[ 0.33333333,  0.33333333],
+                  [ 0.2       ,  0.6       ],
+                  [ 0.2       ,  0.2       ],
+                  [ 0.6       ,  0.2       ]]).transpose()
+
+    weights = 0.5 * np.array([-27./48, 25./48, 25./48, 25./48])
+
+    def BASIS(v):
+        return np.array([ 1. - v[0] - v[1], v[0], v[1]])
+
+    PSI = BASIS(P)
+    # randomly shuffle indices:
+    # For areas where the mesh is fine, hash_i might be much larger
+    liste = range(len(mesh.omega))
+    random.shuffle(list(liste))
+    pieces = np.array_split(liste, num_cores)
+
+    # For every pieces compute the whole matrix
+    def aux(m):
+
+        L = ss.lil_matrix((len(mesh.nodes),len(mesh.nodes)), dtype = float)
+
+        for i in pieces[m].tolist():
+
+            T_i = mesh.omega[i, 1:].tolist()
+            T_i_v = np.array([verts[T_i[0]],verts[T_i[1]], verts[T_i[2]]])
+            Mat_i = np.array( [T_i_v[1] - T_i_v[0],T_i_v[2] - T_i_v[0] ]).transpose()
+            det_T_i = abs(Mat_i[0,0] * Mat_i[1,1] - Mat_i[1,0] * Mat_i[0,1] )
+            for a in range(3):
+                for b in range(3):
+                    L[np.where(nodes == T_i[a])[0][0],np.where(nodes == T_i[b])[0][0]] += det_T_i * (PSI[a] * PSI[b] * weights).sum()
+
+        return L
+
+    Ls = Pool(num_cores).map(aux, range(num_cores))
+
+    L = ss.lil_matrix((len(mesh.nodes),len(mesh.nodes)), dtype = float)
+    for i in range(num_cores):
+        L += Ls[i]
+
+    return L
+
+def mass_matrix_1d(mesh):
+
+    num_nodes = len(mesh.nodes)
+
+    L = ss.lil_matrix((num_nodes,num_nodes), dtype = float)
+
+    for i in range(len(mesh.omega)):
+        T_i = mesh.omega[i, 1:].tolist()
+        det_T_i = mesh.h
+        for a in range(2):
+            for b in range(2):
+                L[np.where(mesh.nodes == T_i[a])[0][0],np.where(mesh.nodes == T_i[b])[0][0]] += det_T_i * (PSI_P_1d[a] * PSI_P_1d[b] * weights1_1d).sum()
+
+    return L.tocsr()
+
+def mass_matrix_1d_full(mesh):
+
+    num_nodes = len(mesh.vertices)
+
+    L = ss.lil_matrix((num_nodes,num_nodes), dtype = float)
+
+    for i in range(len(mesh.elements)):
+        T_i = mesh.elements[i, 1:].tolist()
+        det_T_i = mesh.h
+        for a in range(2):
+            for b in range(2):
+                L[T_i[a], T_i[b]] += det_T_i * (PSI_P_1d[a] * PSI_P_1d[b] * weights1_1d).sum()
+
+    return L.tocsr()
+
+
+def assembly_coupling_1d(mesh, gam, retriangulate, num_cores):
+
+    labels_domains = np.sort(np.unique(mesh.elements[:, 0]))
+    nodes = np.array(mesh.nodes)
+
+    liste = range(len(mesh.omega))
+    pieces = np.array_split(liste, num_cores)
+
+    # For every pieces compute the whole matrix
+    def aux(m):
+
+        L = ss.lil_matrix((len(mesh.nodes),len(mesh.nodes)), dtype = float)
+        for i in pieces[m].tolist():
+
+            label_i = mesh.omega[i, 0]
+            eps_i = gam['eps'+str(label_i)]
+
+            T_i = mesh.omega[i, 1:].tolist()
+            T_i_v = mesh.vertices[T_i]
+
+            det_T_i = abs(mesh.h)
+
+            i_triangles = i#np.where(np.all(mesh.triangles == mesh.f[i],axis=1))[0][0]
+
+            hash_i = mesh.hash_table_bary[i_triangles]
+
+            for j in hash_i:
+
+                label_j = mesh.elements[j, 0]
+                gam_j = gam[str(label_i)+str(label_j)]
+
+                T_j = mesh.elements[j, 1:].tolist()
+                T_j_v = mesh.vertices[T_j]
+
+                def iPhi_j(y):
+                    return 1./mesh.h * ( y - np.repeat(T_j_v[0], n2_1d))
+
+                def I1(x):
+                    x_trans = (T_i_v[0]+ mesh.h * x)
+                    integral, integral0, integral1 = 0., 0., 0.
+                    aux = np.repeat(x_trans, n2_1d)
+
+                    def inner(tri, gam_j):
+                        tri = np.array(tri)
+                        h_l = tri[1] - tri[0]
+                        det_l = abs(h_l)
+                        def Phi_l(y):
+                            return np.repeat(tri[0], n2_1d) +  h_l * y
+
+                        GAM = det_l * gam_j(aux, Phi_l(p2_1d)) * weights2_1d
+
+                        if label_j != labels_domains[-1]:
+
+                            return  GAM.sum(), (basis_1d[0](iPhi_j(Phi_l(p2_1d))) * GAM ).sum(), (basis_1d[1](iPhi_j(Phi_l(p2_1d))) * GAM ).sum()
+                        else:
+                            return  GAM.sum(), 0., 0.
+
+                    tri = retriangulate(x_trans, T_j_v, eps_i, mesh.h )
+
+                    if len(tri) != 0:
+
+                        v, v0, v1= inner(tri, gam_j)
+                        integral  = v
+                        integral0 = v0
+                        integral1 = v1
+
+                    return np.array([integral0, integral1, integral])
+
+                I = np.array(map(I1, p1_1d)).transpose()
+
+
+                for a in range(2):
+                    kk = np.where(nodes == T_i[a])[0][0]
+                    for b in range(2):
+                       if label_j != labels_domains[-1]:
+                           L[kk, np.where(nodes == T_j[b])[0][0]] += -det_T_i * (PSI_P_1d[a] * I[b] * weights1_1d).sum()
+                       L[kk, np.where(nodes == T_i[b])[0][0]] += det_T_i * (PSI_P_1d[a] * PSI_P_1d[b] * I[2] * weights1_1d).sum()
+        return 2 * L
+
+
+
+    if num_cores == 1:
+        Ls = map(aux, range(num_cores))#
+    else:
+        p = Pool(num_cores)
+        Ls = p.map(aux, range(num_cores))
+        p.close()
+        p.join()
+        p.clear()
+
+    L = ss.lil_matrix((len(mesh.nodes),len(mesh.nodes)), dtype = float)
+    for i in range(num_cores):
+        L += Ls[i]
+
+    del Ls
+
+    return L
+
+def assembly_coupling_1d_full(mesh, gam, retriangulate, num_cores):
+#    labels_domains = np.sort(np.unique(mesh.triangles[:,0]))
+
+    liste = range(len(mesh.elements))
+    pieces = np.array_split(liste, num_cores)
+
+    # For every pieces compute the whole matrix
+    def aux(m):
+
+        L = ss.lil_matrix((len(mesh.vertices), len(mesh.vertices)), dtype = float)
+        for i in pieces[m].tolist():
+
+            label_i = mesh.elements[i, 0]
+            eps_i = gam['eps'+str(label_i)]
+
+            T_i = mesh.elements[i, 1:].tolist()
+            T_i_v = mesh.vertices[T_i]
+
+            det_T_i = abs(mesh.h)
+
+            i_triangles = i#np.where(np.all(mesh.triangles == mesh.omega[i],axis=1))[0][0]
+
+            hash_i = mesh.hash_table_bary[i_triangles]
+
+            for j in hash_i:
+
+                label_j = mesh.elements[j, 0]
+                gam_j = gam[str(label_i)+str(label_j)]
+
+                T_j = mesh.elements[j, 1:].tolist()
+                T_j_v = mesh.vertices[T_j]
+
+                def iPhi_j(y):
+                    return 1./mesh.h * ( y - np.repeat(T_j_v[0], n2_1d))
+
+                def I1(x):
+                    x_trans = (T_i_v[0]+ mesh.h * x)
+                    integral, integral0, integral1 = 0., 0., 0.
+                    aux = np.repeat(x_trans, n2_1d)
+
+                    def inner(tri, gam_j):
+                        tri = np.array(tri)
+                        h_l = tri[1] - tri[0]
+                        det_l = abs(h_l)
+                        def Phi_l(y):
+                            return np.repeat(tri[0], n2_1d) +  h_l * y
+
+                        GAM = det_l * gam_j(aux, Phi_l(p2_1d)) * weights2_1d
+
+#                        if label_j != labels_domains[-1]:
+
+                        return  GAM.sum(), (basis_1d[0](iPhi_j(Phi_l(p2_1d))) * GAM ).sum(), (basis_1d[1](iPhi_j(Phi_l(p2_1d))) * GAM ).sum()
+#                        else:
+#                            return  GAM.sum(), 0., 0.
+
+                    tri = retriangulate(x_trans, T_j_v, eps_i, mesh.h )
+
+                    if len(tri) != 0:
+
+                        v, v0, v1= inner(tri, gam_j)
+                        integral  = v
+                        integral0 = v0
+                        integral1 = v1
+
+                    return np.array([integral0, integral1, integral])
+
+                I = np.array(map(I1, p1_1d)).transpose()
+
+
+                for a in range(2):
+                    kk = T_i[a]
+                    for b in range(2):
+                       L[kk, T_j[b]] += -det_T_i * (PSI_P_1d[a] * I[b] * weights1_1d).sum()
+                       L[kk, T_i[b]] += det_T_i * (PSI_P_1d[a] * PSI_P_1d[b] * I[2] * weights1_1d).sum()
+        return 2 * L
+
+
+
+    if num_cores == 1:
+        Ls = map(aux, range(num_cores))#
+    else:
+        p = Pool(num_cores)
+        Ls = p.map(aux, range(num_cores))
+        p.close()
+        p.join()
+        p.clear()
+
+    L = ss.lil_matrix((len(mesh.vertices), len(mesh.vertices)), dtype = float)
+    for i in range(num_cores):
+        L += Ls[i]
+
+    del Ls
+
+    return L
+
+
+def assembly_coupling(mesh, gam, retriangulate, Norm, num_cores, **kwargs):
+
+    labels_domains = np.sort(np.unique(mesh.elements[:, 0]))
+    deform = kwargs.get('deform', 0)
+    verts = mesh.vertices + deform
+    nodes = np.array(mesh.nodes)
+
+    # randomly shuffle indices:
+    # For areas where the mesh is fine, hash_i might be much larger
+    liste = range(len(mesh.omega))
+    random.shuffle(list(liste))
+    pieces = np.array_split(liste, num_cores)
+
+    # For every pieces compute the whole matrix
+    def aux(m):
+
+        L = ss.lil_matrix((len(mesh.nodes),len(mesh.nodes)), dtype = float)
+
+        for i in pieces[m].tolist():
+
+            label_i = mesh.omega[i, 0]
+            eps_i = gam['eps'+str(label_i)]
+
+            T_i = mesh.omega[i, 1:].tolist()
+            T_i_v = verts[T_i]
+            Mat_i = np.array( [T_i_v[1] - T_i_v[0],T_i_v[2] - T_i_v[0] ]).transpose()
+            det_T_i = abs(Mat_i[0,0] * Mat_i[1,1] - Mat_i[1,0] * Mat_i[0,1])
+
+            def Phi_i(y):
+                return np.repeat(T_i_v[0][:,np.newaxis], n**2, axis=1) +  Mat_i.dot(y)
+
+            i_triangles = np.where(np.all(mesh.elements == mesh.omega[i], axis=1))[0][0]
+            hash_i = np.where(norm_dict[Norm]((mesh.bary-np.repeat(mesh.bary[i][:,np.newaxis], len(mesh.bary), axis = 1).transpose()).transpose())<=(eps_i + mesh.diam))[0].tolist()
+
+            for j in hash_i:
+
+                label_j = mesh.elements[j, 0]
+                gam_j = gam[str(label_i)+str(label_j)]
+
+                T_j = mesh.elements[j, 1:].tolist()
+                T_j_v = verts[T_j]
+                Mat_j = np.array( [T_j_v[1] - T_j_v[0],T_j_v[2] - T_j_v[0] ]).transpose()
+                det_T_j = Mat_j[0,0] * Mat_j[1,1] - Mat_j[1,0] * Mat_j[0,1]
+
+                def check_interaction(S,T, norm, eps):
+                    """checks if T is subset of the interaction domain of S """ #  is this really an improvement here due to the overhead of "check_interaction"?
+                    length_of_edges = np.array([np.linalg.norm(T[0]-T[1]),np.linalg.norm(T[0]-T[2]), np.linalg.norm(T[1]-T[2])] )
+                    diam = np.max(length_of_edges)
+                    return np.all(np.array([ np.any(np.array([norm(S[k]-T[i]) for i in range(3)] )< (max(eps-0.5*diam, 0))) for k in range(len(T))]) )
+
+                if check_interaction(T_i_v,T_j_v, norm_dict[Norm], eps_i):#norm_dict[Norm](mesh.bary[i_triangles]-mesh.bary[j]) < eps_i -mesh.diam:
+                    # no re-triangulation needed
+                    def Phi_j(y):
+                        return np.repeat(T_j_v[0][:,np.newaxis], n**2, axis=1) +  Mat_j.dot(y)
+
+                    for a in range(3):
+                        kk = np.where(nodes == T_i[a])[0][0]
+                        for b in range(3):
+                           if label_j != labels_domains[-1]:
+                               L[kk, np.where(nodes == T_j[b])[0][0]] += -det_T_i * abs(det_T_j) * ( PSI_X[a] *  PSI_Y[b]  * W * gam_j(Phi_i(X),Phi_j(Y))).sum()
+                           L[kk, np.where(nodes == T_i[b])[0][0]] += det_T_i * abs(det_T_j) * ( PSI_X[a] *  PSI_X[b]  * W * gam_j(Phi_i(X),Phi_j(Y))).sum()#det_T_i * (PSI_P[a] * PSI_P[b] * I[3] * weights).sum()
+                else:
+
+                    iMat_j = 1./det_T_j * np.array([ [Mat_j[1,1], -Mat_j[0,1]], [-Mat_j[1,0], Mat_j[0,0]]  ])
+                    def iPhi_j(y):
+                        return iMat_j.dot( y - np.repeat(T_j_v[0][:,np.newaxis], n2, axis=1))
+
+                    def I1(x):
+                        x_trans = (T_i_v[0]+Mat_i.dot(x))
+                        integral, integral0, integral1, integral2 = 0., 0., 0., 0.
+                        aux = np.repeat(x_trans[:,np.newaxis], n2, axis=1)
+
+                        def inner(tri, gam_j):
+                            tri = np.array(tri)
+                            Mat_l = np.array( [tri[1] - tri[0],tri[2] - tri[0] ]).transpose()
+                            det_l = abs((tri[1] - tri[0])[0] * (tri[2] - tri[0])[1] - (tri[1] - tri[0])[1] * (tri[2] - tri[0])[0] )
+                            def Phi_l(y):
+                                return np.repeat(tri[0][:,np.newaxis], n2, axis=1) +  Mat_l.dot(y)
+
+                            GAM = det_l * gam_j(aux, Phi_l(P2)) * weights2
+
+                            if label_j != labels_domains[-1]:
+                                return  GAM.sum(), (basis[0](iPhi_j(Phi_l(P2))) * GAM ).sum(), (basis[1](iPhi_j(Phi_l(P2))) * GAM ).sum()  , (basis[2](iPhi_j(Phi_l(P2))) * GAM ).sum()
+                            else:
+                                return  GAM.sum(), 0., 0., 0.
+
+                        tris = retriangulate(x_trans, T_j_v, Norm, eps_i )
+                        if len(tris) != 0:
+                            for tri in tris:
+                                v, v0, v1, v2 = inner(tri, gam_j)
+                                integral  += v
+                                integral0 += v0
+                                integral1 += v1
+                                integral2 += v2
+
+                                """plot for testing below"""
+                #                plt.gca().add_patch(plt.Polygon(tri , closed=True, fill = True))
+                #                plt.gca().add_patch(plt.Polygon(tri , closed=True, fill = False))
+
+                        return np.array([integral0, integral1, integral2, integral])
+
+                    I = np.array(list(map(I1, P.transpose()))).transpose()
+
+                    for a in range(3):
+                        kk = np.where(nodes == T_i[a])[0][0]
+                        for b in range(3):
+                           if label_j != labels_domains[-1]:
+                               L[kk, np.where(nodes == T_j[b])[0][0]] += -det_T_i * (PSI_P[a] * I[b] * weights).sum()
+                           L[kk, np.where(nodes == T_i[b])[0][0]] += det_T_i * (PSI_P[a] * PSI_P[b] * I[3] * weights).sum()
+
+        return 2 * L
+
+    p = Pool(num_cores)
+
+    Ls = p.map(aux, range(num_cores))#
+
+    L = ss.lil_matrix((len(mesh.nodes),len(mesh.nodes)), dtype = float)
+    for i in range(num_cores):
+        L += Ls[i]
+
+    del Ls
+    p.close()
+    p.join()
+    p.clear()
+
+    return L
+
+
+
+def assembly_coupling_full_DG(mesh, gam, retriangulate, norm, num_cores, **kwargs):
+    """
+        STANDARD VERSION BY NOW !
+
+        -----
+
+       uses simple criterion
+                ||E_a^bary - E_b^bary || < delta - h
+       to decide whether subdivision or special treatment of outer triangle is
+       needed
+    """
+#    labels_domains = np.sort(np.unique(mesh.triangles[:,0]))
+    deform = kwargs.get('deform', 0)
+    hash_onthefly = kwargs.get('hash_onthefly', 0)
+    verts = mesh.vertices + deform
+
+    # randomly shuffle indices:
+    # For areas where the mesh is fine, hash_i might be much larger
+    liste = range(len(mesh.elements))
+    random.shuffle(list(liste))
+    pieces = np.array_split(liste, num_cores)
+
+    # For every pieces compute the whole matrix
+    def aux(m):
+
+        L = ss.lil_matrix((3 * len(mesh.elements), 3 * len(mesh.elements)), dtype = float)
+
+        for i in pieces[m].tolist():
+
+            label_i = mesh.elements[i, 0]
+            eps_i = gam['eps'+str(label_i)]
+
+            T_i = mesh.elements[i, 1:].tolist()
+            T_i_v = verts[T_i]
+            Mat_i = np.array( [T_i_v[1] - T_i_v[0],T_i_v[2] - T_i_v[0] ]).transpose()
+            det_T_i = abs(Mat_i[0,0] * Mat_i[1,1] - Mat_i[1,0] * Mat_i[0,1])
+            def Phi_i(y):
+                return np.repeat(T_i_v[0][:,np.newaxis], n**2, axis=1) +  Mat_i.dot(y)
+
+            i_triangles = i
+            if hash_onthefly:
+                hash_i = np.where(norm((mesh.bary-np.repeat(mesh.bary[i][:,np.newaxis], len(mesh.bary), axis = 1).transpose()).transpose())<=(eps_i + mesh.diam))[0].tolist()
+            else:
+                hash_i = mesh.hash_table_bary[i_triangles]
+
+            for j in hash_i:
+
+                label_j = mesh.elements[j, 0]
+                gam_j = gam[str(label_i)+str(label_j)]
+
+                T_j = mesh.elements[j, 1:].tolist()
+                T_j_v = verts[T_j]
+                Mat_j = np.array( [T_j_v[1] - T_j_v[0],T_j_v[2] - T_j_v[0] ]).transpose()
+                det_T_j = Mat_j[0,0] * Mat_j[1,1] - Mat_j[1,0] * Mat_j[0,1]
+
+                if norm(mesh.bary[i_triangles]-mesh.bary[j]) < eps_i  -mesh.diam:
+                    # no subdivision or outer integral treatment needed
+                    def Phi_j(y):
+                        return np.repeat(T_j_v[0][:,np.newaxis], n**2, axis=1) +  Mat_j.dot(y)
+
+                    for a in range(3):
+                        for b in range(3):
+                            #if label_j != labels_domains[-1]:
+                            L[3*i+a, 3*j+b] += -det_T_i * abs(det_T_j) * ( PSI_X[a] *  PSI_Y[b]  * W * gam_j(Phi_i(X),Phi_j(Y))).sum()
+                            # if i==j:
+                            L[3*i+a, 3*i+b] += det_T_i * abs(det_T_j) * ( PSI_X[a] *  PSI_X[b]  * W * gam_j(Phi_i(X),Phi_j(Y))).sum()#det_T_i * (PSI_P[a] * PSI_P[b] * I[3] * weights).sum()
+                else:
+
+                    iMat_j = 1./det_T_j * np.array([ [Mat_j[1,1], -Mat_j[0,1]], [-Mat_j[1,0], Mat_j[0,0]]  ])
+                    def iPhi_j(y):
+                        return iMat_j.dot( y - np.repeat(T_j_v[0][:,np.newaxis], n2, axis=1))
+
+                    def I1(x):
+                        x_trans = (T_i_v[0]+Mat_i.dot(x))
+                        integral, integral0, integral1, integral2 = 0., 0., 0., 0.
+                        aux = np.repeat(x_trans[:,np.newaxis], n2, axis=1)
+
+                        def inner(tri, gam_j):
+                            tri = np.array(tri)
+                            Mat_l = np.array( [tri[1] - tri[0],tri[2] - tri[0] ]).transpose()
+                            det_l = abs((tri[1] - tri[0])[0] * (tri[2] - tri[0])[1] - (tri[1] - tri[0])[1] * (tri[2] - tri[0])[0] )
+                            def Phi_l(y):
+                                return np.repeat(tri[0][:,np.newaxis], n2, axis=1) +  Mat_l.dot(y)
+
+                            GAM = det_l * gam_j(aux, Phi_l(P2)) * weights2
+
+                            return  GAM.sum(), (basis[0](iPhi_j(Phi_l(P2))) * GAM ).sum(), (basis[1](iPhi_j(Phi_l(P2))) * GAM ).sum()  , (basis[2](iPhi_j(Phi_l(P2))) * GAM ).sum()
+
+                        tris = retriangulate(x_trans, T_j_v, norm, eps_i )
+
+                        if len(tris) != 0:
+                            for tri in tris:
+                                v, v0, v1, v2 = inner(tri, gam_j)
+                                integral  += v
+                                integral0 += v0
+                                integral1 += v1
+                                integral2 += v2
+
+                                """plot for testing below"""
+                #                plt.gca().add_patch(plt.Polygon(tri , closed=True, fill = True))
+                #                plt.gca().add_patch(plt.Polygon(tri , closed=True, fill = False))
+
+                        return np.array([integral0, integral1, integral2, integral])
+
+                    I = np.array( list(map(I1, P.transpose())) ).transpose()
+                    for a in range(3):
+                        for b in range(3):
+
+                           L[3*i+a, 3*j+b] += -det_T_i * (PSI_P[a] * I[b] * weights).sum()
+                           L[3*i+a, 3*i+b] += det_T_i * (PSI_P[a] * PSI_P[b] * I[3] * weights).sum()
+
+        return 2 * L
+
+    p = Pool(num_cores)
+
+    Ls = p.map(aux, range(num_cores))#
+   # Ls = list(map(aux, range(num_cores)))  #
+#    L =  np.zeros((len(verts),len(verts)), dtype = float)#ss.lil_matrix((len(verts),len(verts)), dtype = float)
+    L =  ss.lil_matrix((3 * len(mesh.elements), 3 * len(mesh.elements)), dtype = float)
+    for i in range(num_cores):
+        L += Ls[i]
+
+    del Ls
+    p.close()
+    p.join()
+    p.clear()
+
+    return L
+
+def assembly_coupling_full_standard(mesh, gam, retriangulate, norm, num_cores, **kwargs):
+    """
+        STANDARD VERSION BY NOW !
+
+        -----
+
+       uses simple criterion
+                ||E_a^bary - E_b^bary || < delta - h
+       to decide whether subdivision or special treatment of outer triangle is
+       needed
+    """
+#    labels_domains = np.sort(np.unique(mesh.triangles[:,0]))
+    deform = kwargs.get('deform', 0)
+    hash_onthefly = kwargs.get('hash_onthefly', 0)
+    verts = mesh.vertices + deform
+
+    # randomly shuffle indices:
+    # For areas where the mesh is fine, hash_i might be much larger
+    liste = range(len(mesh.elements))
+    random.shuffle(list(liste))
+    pieces = np.array_split(liste, num_cores)
+
+    # For every pieces compute the whole matrix
+    def aux(m):
+
+        L = ss.lil_matrix((len(verts),len(verts)), dtype = float)
+
+        for i in pieces[m].tolist():
+
+            label_i = mesh.elements[i, 0]
+            eps_i = gam['eps'+str(label_i)]
+
+            T_i = mesh.elements[i, 1:].tolist()
+            T_i_v = verts[T_i]
+            Mat_i = np.array( [T_i_v[1] - T_i_v[0],T_i_v[2] - T_i_v[0] ]).transpose()
+            det_T_i = abs(Mat_i[0,0] * Mat_i[1,1] - Mat_i[1,0] * Mat_i[0,1])
+
+
+            """test for minimum precision"""
+            # def Phi_i(y):
+            #     return np.repeat(T_i_v[0][:,np.newaxis], n**2, axis=1) +  Mat_i.dot(y)
+            def Phi_i(y):
+                return np.repeat(T_i_v[0][:,np.newaxis], n_inner*n_outer, axis=1) +  Mat_i.dot(y)
+
+            i_triangles = i
+            if hash_onthefly:
+                hash_i = np.where(norm((mesh.bary-np.repeat(mesh.bary[i][:,np.newaxis], len(mesh.bary), axis = 1).transpose()).transpose())<=(eps_i + mesh.diam))[0].tolist()
+            else:
+                hash_i = mesh.hash_table_bary[i_triangles]
+
+            for j in hash_i:
+
+                label_j = mesh.elements[j, 0]
+                gam_j = gam[str(label_i)+str(label_j)]
+
+                T_j = mesh.elements[j, 1:].tolist()
+                T_j_v = verts[T_j]
+                Mat_j = np.array( [T_j_v[1] - T_j_v[0],T_j_v[2] - T_j_v[0] ]).transpose()
+                det_T_j = Mat_j[0,0] * Mat_j[1,1] - Mat_j[1,0] * Mat_j[0,1]
+
+                if norm(mesh.bary[i_triangles]-mesh.bary[j]) < eps_i -mesh.diam:
+                    # no subdivision or outer integral treatment needed
+
+                    """test for minimum precision"""
+                    # def Phi_j(y):
+                    #     return np.repeat(T_j_v[0][:,np.newaxis], n**2, axis=1) +  Mat_j.dot(y)
+                    def Phi_j(y):
+                        return np.repeat(T_j_v[0][:,np.newaxis], n_inner*n_outer, axis=1) +  Mat_j.dot(y)
+
+                    GAM = det_T_i * abs(det_T_j) * W_minprec * gam_j(Phi_i(X_outer), Phi_j(Y_inner))
+
+                    for a in range(3):
+                        kk = T_i[a]
+                        for b in range(3):
+                           # L[kk, T_j[b]] += -det_T_i * abs(det_T_j) * ( PSI_X[a] *  PSI_Y[b]  * W * gam_j(Phi_i(X),Phi_j(Y))).sum()
+                           # L[kk, T_i[b]] +=  det_T_i * abs(det_T_j) * ( PSI_X[a] *  PSI_X[b]  * W * gam_j(Phi_i(X),Phi_j(Y))).sum()
+                           """minimum precision variant"""
+                           L[kk, T_j[b]] += -(PSI_outer[a] * PSI_inner[b] * GAM).sum()
+                           L[kk, T_i[b]] +=  (PSI_outer[a] * PSI_outer[b] * GAM).sum()
+
+                else:
+
+                    iMat_j = 1./det_T_j * np.array([ [Mat_j[1,1], -Mat_j[0,1]], [-Mat_j[1,0], Mat_j[0,0]]  ])
+                    def iPhi_j(y):
+                        return iMat_j.dot( y - np.repeat(T_j_v[0][:,np.newaxis], n2, axis=1))
+
+                    def I1(x):
+                        x_trans = (T_i_v[0]+Mat_i.dot(x))
+                        integral, integral0, integral1, integral2 = 0., 0., 0., 0.
+                        aux = np.repeat(x_trans[:,np.newaxis], n2, axis=1)
+
+                        def inner(tri, gam_j):
+                            tri = np.array(tri)
+                            Mat_l = np.array( [tri[1] - tri[0],tri[2] - tri[0] ]).transpose()
+                            det_l = abs((tri[1] - tri[0])[0] * (tri[2] - tri[0])[1] - (tri[1] - tri[0])[1] * (tri[2] - tri[0])[0] )
+                            def Phi_l(y):
+                                return np.repeat(tri[0][:,np.newaxis], n2, axis=1) +  Mat_l.dot(y)
+
+                            GAM = det_l * gam_j(aux, Phi_l(P2)) * weights2
+
+                            return  GAM.sum(), (basis[0](iPhi_j(Phi_l(P2))) * GAM ).sum(), (basis[1](iPhi_j(Phi_l(P2))) * GAM ).sum()  , (basis[2](iPhi_j(Phi_l(P2))) * GAM ).sum()
+
+                        tris = retriangulate(x_trans, T_j_v, norm, eps_i )
+
+                        if len(tris) != 0:
+                            for tri in tris:
+                                v, v0, v1, v2 = inner(tri, gam_j)
+                                integral  += v
+                                integral0 += v0
+                                integral1 += v1
+                                integral2 += v2
+
+                                """plot for testing below"""
+                #                plt.gca().add_patch(plt.Polygon(tri , closed=True, fill = True))
+                #                plt.gca().add_patch(plt.Polygon(tri , closed=True, fill = False))
+
+                        return np.array([integral0, integral1, integral2, integral])
+
+                    I = np.array(list(map(I1, P.transpose()))).transpose()
+
+                    for a in range(3):
+                        kk = T_i[a]
+                        for b in range(3):
+                           L[kk, T_j[b]] += -det_T_i * (PSI_P[a] * I[b] * weights).sum()
+                           L[kk, T_i[b]] += det_T_i * (PSI_P[a] * PSI_P[b] * I[3] * weights).sum()
+
+        return 2 * L
+
+    p = Pool(num_cores)
+
+    Ls = p.map(aux, range(num_cores))#
+
+#    L =  np.zeros((len(verts),len(verts)), dtype = float)#ss.lil_matrix((len(verts),len(verts)), dtype = float)
+    L =  ss.lil_matrix((len(verts),len(verts)), dtype = float)
+    for i in range(num_cores):
+        L += Ls[i]
+
+    del Ls
+    p.close()
+    p.join()
+    p.clear()
+
+    return L
+
+def assembly_coupling_full_exactcaps(mesh, gam, retriangulate, norm, num_cores, **kwargs):
+    """
+        STANDARD VERSION BY NOW !
+
+        -----
+
+       uses simple criterion
+                ||E_a^bary - E_b^bary || < delta - h
+       to decide whether subdivision or special treatment of outer triangle is
+       needed
+    """
+#    labels_domains = np.sort(np.unique(mesh.triangles[:,0]))
+    deform = kwargs.get('deform', 0)
+    hash_onthefly = kwargs.get('hash_onthefly', 0)
+    verts = mesh.vertices + deform
+
+    # randomly shuffle indices:
+    # For areas where the mesh is fine, hash_i might be much larger
+    liste = range(len(mesh.elements))
+    random.shuffle(list(liste))
+    pieces = np.array_split(liste, num_cores)
+
+    # For every pieces compute the whole matrix
+    def aux(m):
+
+        L = ss.lil_matrix((len(verts),len(verts)), dtype = float)
+
+        for i in pieces[m].tolist():
+
+            label_i = mesh.elements[i, 0]
+            eps_i = gam['eps'+str(label_i)]
+
+            T_i = mesh.elements[i, 1:].tolist()
+            T_i_v = verts[T_i]
+            Mat_i = np.array( [T_i_v[1] - T_i_v[0],T_i_v[2] - T_i_v[0] ]).transpose()
+            det_T_i = abs(Mat_i[0,0] * Mat_i[1,1] - Mat_i[1,0] * Mat_i[0,1])
+            def Phi_i(y):
+                return np.repeat(T_i_v[0][:,np.newaxis], n**2, axis=1) +  Mat_i.dot(y)
+
+            i_triangles = i
+            if hash_onthefly:
+                hash_i = np.where(norm((mesh.bary-np.repeat(mesh.bary[i][:,np.newaxis], len(mesh.bary), axis = 1).transpose()).transpose())<=(eps_i + mesh.diam))[0].tolist()
+            else:
+                hash_i = mesh.hash_table_bary[i_triangles]
+
+            for j in hash_i:
+
+                label_j = mesh.elements[j, 0]
+                gam_j = gam[str(label_i)+str(label_j)]
+
+                T_j = mesh.elements[j, 1:].tolist()
+                T_j_v = verts[T_j]
+                Mat_j = np.array( [T_j_v[1] - T_j_v[0],T_j_v[2] - T_j_v[0] ]).transpose()
+                det_T_j = Mat_j[0,0] * Mat_j[1,1] - Mat_j[1,0] * Mat_j[0,1]
+
+                if norm(mesh.bary[i_triangles]-mesh.bary[j]) < eps_i -mesh.diam:
+                    # no subdivision or outer integral treatment needed
+                    def Phi_j(y):
+                        return np.repeat(T_j_v[0][:,np.newaxis], n**2, axis=1) +  Mat_j.dot(y)
+
+                    for a in range(3):
+                        kk = T_i[a]
+                        for b in range(3):
+#                           if label_j != labels_domains[-1]:
+                           L[kk, T_j[b]] += -det_T_i * abs(det_T_j) * ( PSI_X[a] *  PSI_Y[b]  * W * gam_j(Phi_i(X),Phi_j(Y))).sum()
+                           L[kk, T_i[b]] += det_T_i * abs(det_T_j) * ( PSI_X[a] *  PSI_X[b]  * W * gam_j(Phi_i(X),Phi_j(Y))).sum()#det_T_i * (PSI_P[a] * PSI_P[b] * I[3] * weights).sum()
+                else:
+
+                    iMat_j = 1./det_T_j * np.array([ [Mat_j[1,1], -Mat_j[0,1]], [-Mat_j[1,0], Mat_j[0,0]]  ])
+                    def iPhi_j(y):
+                        return iMat_j.dot( y - np.repeat(T_j_v[0][:,np.newaxis], n2, axis=1))
+                    def iPhi_j_1point(y):
+                        return iMat_j.dot( y - T_j_v[0])
+                    def I1(x):
+                        x_trans = (T_i_v[0]+Mat_i.dot(x))
+                        integral, integral0, integral1, integral2 = 0., 0., 0., 0.
+                        aux = np.repeat(x_trans[:,np.newaxis], n2, axis=1)
+
+                        def inner(tri, gam_j):
+                            tri = np.array(tri)
+                            Mat_l = np.array( [tri[1] - tri[0],tri[2] - tri[0] ]).transpose()
+                            det_l = abs((tri[1] - tri[0])[0] * (tri[2] - tri[0])[1] - (tri[1] - tri[0])[1] * (tri[2] - tri[0])[0] )
+                            def Phi_l(y):
+                                return np.repeat(tri[0][:,np.newaxis], n2, axis=1) +  Mat_l.dot(y)
+
+                            GAM = det_l * gam_j(aux, Phi_l(P2)) * weights2
+
+                            return  GAM.sum(), (basis[0](iPhi_j(Phi_l(P2))) * GAM ).sum(), (basis[1](iPhi_j(Phi_l(P2))) * GAM ).sum()  , (basis[2](iPhi_j(Phi_l(P2))) * GAM ).sum()
+
+                        def inner_cap(cap, gam_j):
+                            GAM = gam_j(x_trans, cap[0]) * cap[1]
+                            return  GAM.sum(), (basis[0](iPhi_j_1point(cap[0])) * GAM ).sum(), (basis[1](iPhi_j_1point(cap[0])) * GAM ).sum()  , (basis[2](iPhi_j_1point(cap[0])) * GAM ).sum()
+
+                        tris, caps = retriangulate(x_trans, T_j_v, norm, eps_i )
+
+                        if len(tris) != 0:
+                            for tri in tris:
+                                v, v0, v1, v2 = inner(tri, gam_j)
+                                integral  += v
+                                integral0 += v0
+                                integral1 += v1
+                                integral2 += v2
+                        if len(caps) != 0:
+                            for cap in caps:
+                                v, v0, v1, v2 = inner_cap(cap, gam_j)
+                                integral += v
+                                integral0 += v0
+                                integral1 += v1
+                                integral2 += v2
+                                """plot for testing below"""
+                #                plt.gca().add_patch(plt.Polygon(tri , closed=True, fill = True))
+                #                plt.gca().add_patch(plt.Polygon(tri , closed=True, fill = False))
+
+                        return np.array([integral0, integral1, integral2, integral])
+
+                    I = np.array(list(map(I1, P.transpose()))).transpose()
+
+                    for a in range(3):
+                        kk = T_i[a]
+                        for b in range(3):
+                           L[kk, T_j[b]] += -det_T_i * (PSI_P[a] * I[b] * weights).sum()
+                           L[kk, T_i[b]] += det_T_i * (PSI_P[a] * PSI_P[b] * I[3] * weights).sum()
+
+        return 2 * L
+
+    p = Pool(num_cores)
+
+    Ls = p.map(aux, range(num_cores))#
+
+#    L =  np.zeros((len(verts),len(verts)), dtype = float)#ss.lil_matrix((len(verts),len(verts)), dtype = float)
+    L =  ss.lil_matrix((len(verts),len(verts)), dtype = float)
+    for i in range(num_cores):
+        L += Ls[i]
+
+    del Ls
+    p.close()
+    p.join()
+    p.clear()
+
+    return L
+
+
+def assembly_coupling_full_bary(mesh, gam, retriangulate, norm, num_cores, **kwargs):
+    """
+        RETRIANGULATE OUTER INTEGRAL
+
+        -----
+
+       uses simple criterion
+                ||E_a^bary - E_b^bary || < delta - h
+       to decide whether subdivision or special treatment of outer triangle is
+       needed
+    """
+#    labels_domains = np.sort(np.unique(mesh.triangles[:,0]))
+    deform = kwargs.get('deform', 0)
+    hash_onthefly = kwargs.get('hash_onthefly', 0)
+    verts = mesh.vertices + deform
+
+    # randomly shuffle indices:
+    # For areas where the mesh is fine, hash_i might be much larger
+    liste = range(len(mesh.elements))
+    random.shuffle(list(liste))
+    pieces = np.array_split(liste, num_cores)
+
+
+    # For every pieces compute the whole matrix
+    def aux(m):
+
+        L = ss.lil_matrix((len(verts),len(verts)), dtype = float)
+
+        for i in pieces[m].tolist():
+
+            label_i = mesh.elements[i, 0]
+            eps_i = gam['eps'+str(label_i)]
+
+            T_i = mesh.elements[i, 1:].tolist()
+            T_i_v = verts[T_i]
+            Mat_i = np.array( [T_i_v[1] - T_i_v[0],T_i_v[2] - T_i_v[0] ]).transpose()
+            det_T_i = Mat_i[0,0] * Mat_i[1,1] - Mat_i[1,0] * Mat_i[0,1]
+            def Phi_i(y):
+                return np.repeat(T_i_v[0][:,np.newaxis], n**2, axis=1) +  Mat_i.dot(y)
+            iMat_i = 1./det_T_i * np.array([ [Mat_i[1,1], -Mat_i[0,1]], [-Mat_i[1,0], Mat_i[0,0]]  ])
+            def iPhi_i(y):
+                return iMat_i.dot( y - np.repeat(T_i_v[0][:,np.newaxis], n**2, axis=1))
+            i_triangles = i
+
+            if hash_onthefly:
+                hash_i = np.where(norm((mesh.bary-np.repeat(mesh.bary[i][:,np.newaxis], len(mesh.bary), axis = 1).transpose()).transpose())<=(eps_i + mesh.diam))[0].tolist()
+            else:
+                hash_i = mesh.hash_table_bary[i_triangles]
+
+            for j in hash_i:
+
+                label_j = mesh.elements[j, 0]
+                gam_j = gam[str(label_i)+str(label_j)]
+
+                T_j = mesh.elements[j, 1:].tolist()
+                T_j_v = verts[T_j]
+                Mat_j = np.array( [T_j_v[1] - T_j_v[0],T_j_v[2] - T_j_v[0] ]).transpose()
+                det_T_j = Mat_j[0,0] * Mat_j[1,1] - Mat_j[1,0] * Mat_j[0,1]
+                def Phi_j(y):
+                    return np.repeat(T_j_v[0][:,np.newaxis], n**2, axis=1) +  Mat_j.dot(y)
+
+                if norm(mesh.bary[i_triangles]-mesh.bary[j]) < eps_i -mesh.diam:
+                    # no subdivision or outer integral treatment needed
+
+                    for a in range(3):
+                        kk = T_i[a]
+                        for b in range(3):
+#                           if label_j != labels_domains[-1]:
+                           L[kk, T_j[b]] += -abs(det_T_i) * abs(det_T_j) * ( PSI_X[a] *  PSI_Y[b]  * W * gam_j(Phi_i(X),Phi_j(Y))).sum()
+                           L[kk, T_i[b]] += abs(det_T_i) * abs(det_T_j) * ( PSI_X[a] *  PSI_X[b]  * W * gam_j(Phi_i(X),Phi_j(Y))).sum()#det_T_i * (PSI_P[a] * PSI_P[b] * I[3] * weights).sum()
+                else:
+
+
+                    tris = retriangulate(mesh.bary[j], T_i_v, norm, eps_i )
+
+                    for tri in tris:
+
+                        tri = np.array(tri)
+                        Mat_l = np.array( [tri[1] - tri[0],tri[2] - tri[0] ]).transpose()
+                        det_l = abs((tri[1] - tri[0])[0] * (tri[2] - tri[0])[1] - (tri[1] - tri[0])[1] * (tri[2] - tri[0])[0] )
+                        def Phi_l(y):
+                            return np.repeat(tri[0][:,np.newaxis], n**2, axis=1) +  Mat_l.dot(y)
+
+                        for a in range(3):
+                            kk = T_i[a]
+                            for b in range(3):
+    #                           if label_j != labels_domains[-1]:
+                               L[kk, T_j[b]] += -abs(det_l) * abs(det_T_j) * ( basis[a](iPhi_i(Phi_l(X))) *  PSI_Y[b]  * W * gam_j(Phi_l(X),Phi_j(Y))).sum()
+                               L[kk, T_i[b]] += abs(det_l) * abs(det_T_j) * ( basis[a](iPhi_i(Phi_l(X))) *  basis[b](iPhi_i(Phi_l(X)))  * W * gam_j(Phi_l(X),Phi_j(Y))).sum()#det_T_i * (PSI_P[a] * PSI_P[b] * I[3] * weights).sum()
+
+        return 2 * L
+
+    p = Pool(num_cores)
+
+    Ls = p.map(aux, range(num_cores))#
+
+#    L =  np.zeros((len(verts),len(verts)), dtype = float)#ss.lil_matrix((len(verts),len(verts)), dtype = float)
+    L =  ss.lil_matrix((len(verts),len(verts)), dtype = float)
+    for i in range(num_cores):
+        L += Ls[i]
+
+    del Ls
+    p.close()
+    p.join()
+    p.clear()
+
+    return L
+
+
+def assembly_coupling_full_shifted(mesh, gam, retriangulate, norm, num_cores, **kwargs):
+    """
+        uses shifted balls
+    """
+#    labels_domains = np.sort(np.unique(mesh.triangles[:,0]))
+    deform = kwargs.get('deform', 0)
+    hash_onthefly = kwargs.get('hash_onthefly', 0)
+    verts = mesh.vertices + deform
+
+    # randomly shuffle indices:
+    # For areas where the mesh is fine, hash_i might be much larger
+    liste = range(len(mesh.elements))
+    random.shuffle(list(liste))
+    pieces = np.array_split(liste, num_cores)
+
+    # For every pieces compute the whole matrix
+    def aux(m):
+
+        L = ss.lil_matrix((len(verts),len(verts)), dtype = float)
+
+        for i in pieces[m].tolist():
+
+            label_i = mesh.elements[i, 0]
+            eps_i = gam['eps'+str(label_i)]
+
+            T_i = mesh.elements[i, 1:].tolist()
+            T_i_v = verts[T_i]
+            Mat_i = np.array( [T_i_v[1] - T_i_v[0],T_i_v[2] - T_i_v[0] ]).transpose()
+            det_T_i = Mat_i[0,0] * Mat_i[1,1] - Mat_i[1,0] * Mat_i[0,1]
+            def Phi_i(y):
+                return np.repeat(T_i_v[0][:,np.newaxis], n**2, axis=1) +  Mat_i.dot(y)
+            i_triangles = i
+
+            if hash_onthefly:
+                hash_i = np.where(norm((mesh.bary-np.repeat(mesh.bary[i][:,np.newaxis], len(mesh.bary), axis = 1).transpose()).transpose())<=(eps_i + mesh.diam))[0].tolist()
+            else:
+                hash_i = mesh.hash_table_bary[i_triangles]
+
+            for j in hash_i:
+
+                label_j = mesh.elements[j, 0]
+                gam_j = gam[str(label_i)+str(label_j)]
+
+                T_j = mesh.elements[j, 1:].tolist()
+                T_j_v = verts[T_j]
+                Mat_j = np.array( [T_j_v[1] - T_j_v[0],T_j_v[2] - T_j_v[0] ]).transpose()
+                det_T_j = Mat_j[0,0] * Mat_j[1,1] - Mat_j[1,0] * Mat_j[0,1]
+                def Phi_j(y):
+                    return np.repeat(T_j_v[0][:,np.newaxis], n2**2, axis=1) +  Mat_j.dot(y)
+                iMat_j = 1./det_T_j * np.array([ [Mat_j[1,1], -Mat_j[0,1]], [-Mat_j[1,0], Mat_j[0,0]]  ])
+                def iPhi_j(y):
+                    return iMat_j.dot( y - np.repeat(T_j_v[0][:,np.newaxis], n**2, axis=1))
+                # check if close enough, so that integration over whole elements
+                if norm(mesh.bary[i_triangles]-mesh.bary[j]) < eps_i -mesh.diam:
+                    # no subdivision or outer integral treatment needed
+
+                    for a in range(3):
+                        kk = T_i[a]
+                        for b in range(3):
+#                           if label_j != labels_domains[-1]:
+                           L[kk, T_j[b]] += -abs(det_T_i) * abs(det_T_j) * ( PSI_X[a] *  PSI_Y[b]  * W * gam_j(Phi_i(X),Phi_j(Y))).sum()
+                           L[kk, T_i[b]] += abs(det_T_i) * abs(det_T_j) * ( PSI_X[a] *  PSI_X[b]  * W * gam_j(Phi_i(X),Phi_j(Y))).sum()#det_T_i * (PSI_P[a] * PSI_P[b] * I[3] * weights).sum()
+
+                # otherwise re-triangulate
+                else:
+
+
+                    tris = retriangulate(mesh.bary[i], T_j_v, norm, eps_i )
+
+                    for tri in tris:
+
+                        tri = np.array(tri)
+                        Mat_l = np.array( [tri[1] - tri[0],tri[2] - tri[0] ]).transpose()
+                        det_l = abs((tri[1] - tri[0])[0] * (tri[2] - tri[0])[1] - (tri[1] - tri[0])[1] * (tri[2] - tri[0])[0] )
+                        def Phi_l(y):
+                            return np.repeat(tri[0][:,np.newaxis], n**2, axis=1) +  Mat_l.dot(y)
+
+                        for a in range(3):
+                            kk = T_i[a]
+                            for b in range(3):
+    #                           if label_j != labels_domains[-1]:
+                               L[kk, T_j[b]] += -abs(det_l) * abs(det_T_i) * ( PSI_X[a] *  basis[b](iPhi_j(Phi_l(Y)))  * W * gam_j(Phi_i(X),Phi_l(Y))).sum()
+                               L[kk, T_i[b]] +=  abs(det_l) * abs(det_T_i) * ( PSI_X[a] *  PSI_X[b]   * W * gam_j(Phi_i(X),Phi_l(Y))).sum()#det_T_i * (PSI_P[a] * PSI_P[b] * I[3] * weights).sum()
+
+        return 2 * L
+
+    p = Pool(num_cores)
+
+    Ls = p.map(aux, range(num_cores))#
+
+#    L =  np.zeros((len(verts),len(verts)), dtype = float)#ss.lil_matrix((len(verts),len(verts)), dtype = float)
+    L =  ss.lil_matrix((len(verts),len(verts)), dtype = float)
+    for i in range(num_cores):
+        L += Ls[i]
+
+    del Ls
+    p.close()
+    p.join()
+    p.clear()
+
+    return L
+
+def assembly_coupling_full_approx(mesh, gam, retriangulate, norm, num_cores, **kwargs):
+    """
+        Combination of: Shifted ball and barycenter method
+
+           = integrate over whole triangles with barycenters are closer than delta
+    """
+#    labels_domains = np.sort(np.unique(mesh.triangles[:,0]))
+    deform = kwargs.get('deform', 0)
+    hash_onthefly = kwargs.get('hash_onthefly', 0)
+    verts = mesh.vertices + deform
+
+    # randomly shuffle indices:
+    # For areas where the mesh is fine, hash_i might be much larger
+    liste = range(len(mesh.elements))
+    random.shuffle(list(liste))
+    pieces = np.array_split(liste, num_cores)
+
+    # For every pieces compute the whole matrix
+    def aux(m):
+
+        L = ss.lil_matrix((len(verts),len(verts)), dtype = float)
+
+        for i in pieces[m].tolist():
+
+            label_i = mesh.elements[i, 0]
+            eps_i = gam['eps'+str(label_i)]
+
+            T_i = mesh.elements[i, 1:].tolist()
+            T_i_v = verts[T_i]
+            Mat_i = np.array( [T_i_v[1] - T_i_v[0],T_i_v[2] - T_i_v[0] ]).transpose()
+            det_T_i = Mat_i[0,0] * Mat_i[1,1] - Mat_i[1,0] * Mat_i[0,1]
+            def Phi_i(y):
+                return np.repeat(T_i_v[0][:,np.newaxis], n**2, axis=1) +  Mat_i.dot(y)
+
+            hash_i = np.where(norm((mesh.bary-np.repeat(mesh.bary[i][:,np.newaxis], len(mesh.bary), axis = 1).transpose()).transpose()) < eps_i)[0].tolist()
+            for j in hash_i:
+
+                label_j = mesh.elements[j, 0]
+                gam_j = gam[str(label_i)+str(label_j)]
+
+                T_j = mesh.elements[j, 1:].tolist()
+                T_j_v = verts[T_j]
+                Mat_j = np.array( [T_j_v[1] - T_j_v[0],T_j_v[2] - T_j_v[0] ]).transpose()
+                det_T_j = Mat_j[0,0] * Mat_j[1,1] - Mat_j[1,0] * Mat_j[0,1]
+                def Phi_j(y):
+                    return np.repeat(T_j_v[0][:,np.newaxis], n**2, axis=1) +  Mat_j.dot(y)
+
+                for a in range(3):
+                    kk = T_i[a]
+                    for b in range(3):
+#                           if label_j != labels_domains[-1]:
+                       L[kk, T_j[b]] += -abs(det_T_i) * abs(det_T_j) * ( PSI_X[a] *  PSI_Y[b]  * W * gam_j(Phi_i(X),Phi_j(Y))).sum()
+                       L[kk, T_i[b]] +=  abs(det_T_i) * abs(det_T_j) * ( PSI_X[a] *  PSI_X[b]  * W * gam_j(Phi_i(X),Phi_j(Y))).sum()#det_T_i * (PSI_P[a] * PSI_P[b] * I[3] * weights).sum()
+
+        return 2 * L
+
+    p = Pool(num_cores)
+
+    Ls = p.map(aux, range(num_cores))#
+
+#    L =  np.zeros((len(verts),len(verts)), dtype = float)#ss.lil_matrix((len(verts),len(verts)), dtype = float)
+    L =  ss.lil_matrix((len(verts),len(verts)), dtype = float)
+    for i in range(num_cores):
+        L += Ls[i]
+
+    del Ls
+    p.close()
+    p.join()
+    p.clear()
+
+    return L
+
+
+def assembly_coupling_full_adaptive(mesh, gam, retriangulate, norm, num_cores, **kwargs):
+    """
+       uses simple criterion
+                ||E_a^bary - E_b^bary || < delta - h
+       to decide whether subdivision or special treatment of outer triangle is
+       needed
+
+       +++
+
+       adaptive quadrature rule for outer triangle
+
+    """
+    hash_onthefly = kwargs.get('hash_onthefly', 0)
+    deform = kwargs.get('deform', 0)
+    verts = mesh.vertices + deform
+
+    # randomly shuffle indices:
+    # For areas where the mesh is fine, hash_i might be much larger
+    liste = range(len(mesh.elements))
+    random.shuffle(list(liste))
+    pieces = np.array_split(liste, num_cores)
+
+    # For every pieces compute the whole matrix
+    def aux(m):
+
+#        L =  np.zeros((len(verts),len(verts)), dtype = float)#
+        L = ss.lil_matrix((len(verts),len(verts)), dtype = float)
+
+        for i in pieces[m].tolist():
+
+            label_i = mesh.elements[i, 0]
+            eps_i = gam['eps'+str(label_i)]
+
+            T_i = mesh.elements[i, 1:].tolist()
+            T_i_v = verts[T_i]
+            Mat_i = np.array( [T_i_v[1] - T_i_v[0],T_i_v[2] - T_i_v[0] ]).transpose()
+            det_T_i = abs(Mat_i[0,0] * Mat_i[1,1] - Mat_i[1,0] * Mat_i[0,1])
+            def Phi_i(y):
+                return np.repeat(T_i_v[0][:,np.newaxis], n**2, axis=1) +  Mat_i.dot(y)
+
+            if hash_onthefly:
+                hash_i = np.where(norm((mesh.bary-np.repeat(mesh.bary[i][:,np.newaxis], len(mesh.bary), axis = 1).transpose()).transpose())<=(eps_i + mesh.diam))[0].tolist()
+            else:
+                hash_i = mesh.hash_table_bary[i_triangles]
+
+            for j in hash_i:
+
+                label_j = mesh.elements[j, 0]
+                gam_j = gam[str(label_i)+str(label_j)]
+
+                T_j = mesh.elements[j, 1:].tolist()
+                T_j_v = verts[T_j]
+                Mat_j = np.array( [T_j_v[1] - T_j_v[0],T_j_v[2] - T_j_v[0] ]).transpose()
+                det_T_j = Mat_j[0,0] * Mat_j[1,1] - Mat_j[1,0] * Mat_j[0,1]
+
+                if norm(mesh.bary[i]-mesh.bary[j]) < eps_i - mesh.diam:
+                    # no subdivision or outer integral treatment needed
+                    def Phi_j(y):
+                        return np.repeat(T_j_v[0][:,np.newaxis], n**2, axis=1) +  Mat_j.dot(y)
+
+                    for a in range(3):
+                        kk = T_i[a]
+                        for b in range(3):
+                           L[kk, T_j[b]] += -det_T_i * abs(det_T_j) * ( PSI_X[a] *  PSI_Y[b]  * W * gam_j(Phi_i(X),Phi_j(Y))).sum()
+                           L[kk, T_i[b]] +=  det_T_i * abs(det_T_j) * ( PSI_X[a] *  PSI_X[b]  * W * gam_j(Phi_i(X),Phi_j(Y))).sum()#det_T_i * (PSI_P[a] * PSI_P[b] * I[3] * weights).sum()
+
+                else:
+
+                    iMat_j = 1./det_T_j * np.array([ [Mat_j[1,1], -Mat_j[0,1]], [-Mat_j[1,0], Mat_j[0,0]]  ])
+                    def iPhi_j(y):
+                        return iMat_j.dot( y - np.repeat(T_j_v[0][:,np.newaxis], n2, axis=1))
+
+                    for a in range(3):
+                        for b in range(3):
+
+                            def I1(x):
+                                x_trans = (T_i_v[0]+Mat_i.dot(x))
+                                integral  = 0.
+                                aux = np.repeat(x_trans[:,np.newaxis], n2, axis=1)
+                                aux2 = np.repeat(x[:,np.newaxis], n2, axis=1)
+
+                                def inner(tri, gam_j):
+                                    tri = np.array(tri)
+                                    Mat_l = np.array( [tri[1] - tri[0],tri[2] - tri[0] ]).transpose()
+                                    det_l = abs((tri[1] - tri[0])[0] * (tri[2] - tri[0])[1] - (tri[1] - tri[0])[1] * (tri[2] - tri[0])[0] )
+                                    def Phi_l(y):
+                                        return np.repeat(tri[0][:,np.newaxis], n2, axis=1) +  Mat_l.dot(y)
+
+                                    GAM = det_l * gam_j(aux, Phi_l(P2)) * weights2
+
+                                    return (basis[a](aux2) * basis[b](aux2) * GAM ).sum()
+
+                                tris = retriangulate(x_trans, T_j_v, norm, eps_i )
+
+                                if len(tris) != 0:
+                                    for tri in tris:
+                                        integral += inner(tri, gam_j)
+
+                                return integral
+
+                            def I2(x):
+                                x_trans = (T_i_v[0]+Mat_i.dot(x))
+                                integral  = 0.
+                                aux = np.repeat(x_trans[:,np.newaxis], n2, axis=1)
+                                aux2 = np.repeat(x[:,np.newaxis], n2, axis=1)
+
+                                def inner(tri, gam_j):
+                                    tri = np.array(tri)
+                                    Mat_l = np.array( [tri[1] - tri[0],tri[2] - tri[0] ]).transpose()
+                                    det_l = abs((tri[1] - tri[0])[0] * (tri[2] - tri[0])[1] - (tri[1] - tri[0])[1] * (tri[2] - tri[0])[0] )
+                                    def Phi_l(y):
+                                        return np.repeat(tri[0][:,np.newaxis], n2, axis=1) +  Mat_l.dot(y)
+
+                                    GAM = det_l * gam_j(aux, Phi_l(P2)) * weights2
+
+                                    return -  ( basis[a](aux2) * basis[b](iPhi_j(Phi_l(P2)))   * GAM ).sum()
+
+                                tris = retriangulate(x_trans, T_j_v, norm, eps_i )
+
+                                if len(tris) != 0:
+                                    for tri in tris:
+                                        integral += inner(tri, gam_j)
+
+                                return integral
+
+                            val1 = det_T_i * tri_adapt(I1, T_ref)
+                            val2 = det_T_i * tri_adapt(I2, T_ref)
+                            L[T_i[a], T_i[b]] += val1
+                            L[T_i[a], T_j[b]] += val2
+
+        return 2 * L
+
+    p = Pool(num_cores)
+
+    Ls = p.map(aux, range(num_cores))#
+
+    L =  ss.lil_matrix((len(verts),len(verts)), dtype = float)
+    for i in range(num_cores):
+        L += Ls[i]
+
+    del Ls
+    p.close()
+    p.join()
+    p.clear()
+
+    return L
+
+
+
+
+def assembly_coupling_approx(mesh, gam, retriangulate, Norm, num_cores, **kwargs):
+
+    labels_domains = np.sort(np.unique(mesh.elements[:, 0]))
+    deform = kwargs.get('deform', 0)
+    verts = mesh.vertices + deform
+    nodes = np.array(mesh.nodes)
+
+    # randomly shuffle indices:
+    # For areas where the mesh is fine, hash_i might be much larger
+    liste = range(len(mesh.omega))
+    random.shuffle(list(liste))
+    pieces = np.array_split(liste, num_cores)
+
+    # For every pieces compute the whole matrix
+    def aux(m):
+
+        L = ss.lil_matrix((len(mesh.nodes),len(mesh.nodes)), dtype = float)
+
+        for i in pieces[m].tolist():
+
+            label_i = mesh.omega[i, 0]
+
+            T_i = mesh.omega[i, 1:].tolist()
+            T_i_v = verts[T_i]
+            Mat_i = np.array( [T_i_v[1] - T_i_v[0],T_i_v[2] - T_i_v[0] ]).transpose()
+            det_T_i = abs(Mat_i[0,0] * Mat_i[1,1] - Mat_i[1,0] * Mat_i[0,1])
+            def Phi_i(y):
+                return np.repeat(T_i_v[0][:,np.newaxis], n**2, axis=1) +  Mat_i.dot(y)
+
+            hash_i = np.where(norm_dict[Norm]((mesh.bary-np.repeat(mesh.bary[i][:,np.newaxis], len(mesh.bary), axis = 1).transpose()).transpose())<=(eps_i))[0].tolist()
+            for j in hash_i:
+
+                label_j = mesh.elements[j, 0]
+                gam_j = gam[str(label_i)+str(label_j)]
+
+                T_j = mesh.elements[j, 1:].tolist()
+                T_j_v = verts[T_j]
+                Mat_j = np.array( [T_j_v[1] - T_j_v[0],T_j_v[2] - T_j_v[0] ]).transpose()
+                det_T_j = abs(Mat_j[0,0] * Mat_j[1,1] - Mat_j[1,0] * Mat_j[0,1])
+                def Phi_j(y):
+                    return np.repeat(T_j_v[0][:,np.newaxis], n**2, axis=1) +  Mat_j.dot(y)
+
+                for a in range(3):
+                    kk = np.where(nodes == T_i[a])[0][0]
+                    for b in range(3):
+                       L[kk, np.where(nodes == T_i[b])[0][0]] += det_T_i * det_T_j * ( PSI_X[a] *  PSI_X[b]  * W * gam_j(Phi_i(X),Phi_j(Y))).sum()#det_T_i * (PSI_P[a] * PSI_P[b] * I[3] * weights).sum()
+                       if label_j != labels_domains[-1]:
+                           # CONVOLUTION PART
+                           L[kk, np.where(nodes == T_j[b])[0][0]] += -det_T_i * det_T_j * ( PSI_X[a] *  PSI_Y[b]  * W * gam_j(Phi_i(X),Phi_j(Y))).sum()
+
+        return 2 * L
+
+    p = Pool(num_cores)
+    Ls = list(p.map(aux, range(num_cores))) #
+
+    L = ss.lil_matrix((len(mesh.nodes),len(mesh.nodes)), dtype = float)
+    for i in range(num_cores):
+        L += Ls[i]
+
+    del Ls
+    p.close()
+    p.join()
+    p.clear()
+
+    return L
+
+
+
+"""-------------------------------------------------------------------------"""
+"""                   END ASSEMBLY                                          """
+"""-------------------------------------------------------------------------"""
+
+#=============================================================================#
+#=============================================================================#
+"""-------------------------------------------------------------------------"""
+"""                             SOLVE SYSTEM                                """
+"""-------------------------------------------------------------------------"""
+def solve(mesh, A, b):
+    #==========================================================================
+    #               INCORPORATE DIRICHLET VOLUME CONSTRAINTS
+    #==========================================================================
+    A = A.tolil()
+    num_nodes = len(mesh.nodes)
+    for k in mesh.boundary:
+        # adjust righthand side at particular value (2x because substract again)
+        b[k] = 0
+        A[k,:] = ss.eye(1, num_nodes, k).tocsr()
+        A[:, k] = ss.eye(1, num_nodes, k ).tocsr().transpose()
+
+    A = A.tocsr()
+#    def func(x):
+#        return A.dot(x)
+#
+#    u = cg(func,b,0,True)
+    u = ssl.spsolve(A, b)
+
+    return u
+"""-------------------------------------------------------------------------"""
+"""                          END SOLVE SYSTEM                               """
+"""-------------------------------------------------------------------------"""
+#=============================================================================#
+#=============================================================================#
+#=============================================================================#
+
+
+
+"""-------------------------------------------------------------------------"""
+"""                          PLOT                                           """
+"""-------------------------------------------------------------------------"""
+#def myfunc(a,b, *args, **kwargs):
+#      c = kwargs.get('c', None)
+#      d = kwargs.get('d', None)
+def plot(mesh, u, **kwargs):
+    """
+    verts: vertices of the triangulation
+    nodes: number of the nodes in Omega
+    z: array containing for each triangle 3 values, indicating value at the nodes
+    """
+    title = kwargs.get('title', '')
+    vmin_max = kwargs.get('vmin_max', [min(u), max(u)])
+    plt.figure(title)
+    plt.tricontourf(mesh.vertices[mesh.nodes][:, 0], mesh.vertices[mesh.nodes][:, 1], u, 100, interpolation='gaussian', cmap =plt.cm.get_cmap('rainbow'), vmin = vmin_max[0], vmax = vmin_max[1]) # choose 20 contour levels, just to show how good its interpolation is
+    plt.colorbar()
+    plt.axis('equal')
+    plt.show()
+
+def plot_inner(mesh, u, **kwargs):
+    """
+    verts: vertices of the triangulation
+    nodes: number of the nodes in Omega
+    z: array containing for each triangle 3 values, indicating value at the nodes
+    """
+    nodes_inner = range(len(mesh.nodes)-len(mesh.boundary))
+    title = kwargs.get('title', '')
+    vmin_max = kwargs.get('vmin_max', [min(u), max(u)])
+    plt.figure(title)
+    plt.tricontourf(mesh.vertices[nodes_inner][:, 0], mesh.vertices[nodes_inner][:, 1], u, 100, interpolation='gaussian', cmap =plt.cm.get_cmap('rainbow'), vmin = vmin_max[0], vmax = vmin_max[1]) # choose 20 contour levels, just to show how good its interpolation is
+    plt.colorbar()
+    plt.axis('equal')
+
+def plot_all(mesh, u, **kwargs):
+    """
+    verts: vertices of the triangulation
+    nodes: number of the nodes in Omega
+    z: array containing for each triangle 3 values, indicating value at the nodes
+    """
+    title = kwargs.get('title', '')
+    vmin_max = kwargs.get('vmin_max', [min(u), max(u)])
+    plt.figure(title)
+    plt.tricontourf(mesh.vertices[:, 0], mesh.vertices[:, 1], u, 100, interpolation='gaussian', cmap =plt.cm.get_cmap('rainbow'), vmin = vmin_max[0], vmax = vmin_max[1]) # choose 20 contour levels, just to show how good its interpolation is
+    plt.colorbar()
+    plt.axis('equal')
+
+
+
+def plot_mesh(mesh, **kwargs):
+    """
+    mesh: mesh class from above
+    """
+    new_figure = kwargs.get('new_figure', True)
+    title = kwargs.get('title', '')
+    linewidth = kwargs.get('linewidth', 1)
+    verts = kwargs.get('verts', mesh.vertices)
+    if new_figure:
+        plt.figure(title)
+
+    labels = np.sort(np.unique(mesh.elements[:, 0]).tolist())
+    num_labels = len(labels)
+    color = ['r', 'b', 'black', 'g', 'y', 'grey']
+    for i in range(num_labels):
+        plt.triplot(verts[:,0], verts[:,1], mesh.elements[np.where(mesh.elements[:, 0] == labels[i])][:, 1:], color = color[i], linewidth = linewidth)
+#        tris_label = mesh.triangles[np.where(mesh.triangles[:,0]==labels[i])]
+#        for k in range(len(tris_label)):
+#            plt.gca().add_patch(plt.Polygon(verts[tris_label[k,1:]], closed=True, fill = False, color = color[i], linewidth = linewidth))
+
+    plt.axis('equal')
+    plt.show()
+
+def plot_vertices(mesh, indices, color, new_figure):
+    """
+    mesh: mesh class from above
+    indices: indices of mesh.vertices which shall be plotted
+    color: string with one letter indicating color (e.g., 'b', 'g', 'y', 'r',..)
+    new_figure: False or True
+    """
+    if new_figure:
+        plt.figure('Mesh')
+    plt.plot(mesh.vertices[indices][:, 0], mesh.vertices[indices][:, 1], color + 'x')
+"""-------------------------------------------------------------------------"""
+"""                      END PLOT                                           """
+"""-------------------------------------------------------------------------"""
+
+
+
+
+"""
+*******************************************************************************
+*******************************************************************************
+
+                    R E  -  T R I A N G U L A T I O N
+     
+*******************************************************************************
+*******************************************************************************
+"""
+#==========================================================================
+#                               AUXILIARY FUNCTIONS
+#==========================================================================
+def intersect(line1, line2):
+    """
+    line1 = [a, b]
+    line2 = [c, d]
+    returns intersection point of line(a,b) \cap line(c,d)
+    if intersection not unique (linear dependent), then return 0
+
+    caution: method does check for intersection of the (infinite) lines not the
+             convex combinations
+    """
+
+
+def are_intersecting_lines(line1, line2):
+    """
+    line1 = [a, b]
+    line2 = [c, d]
+
+    tests if two (finite !) line segments intersect or not
+
+    caution: method does check for intersection of the convex combinations
+    """
+    a = line1[0]
+    b = line1[1]
+    c = line2[0]
+    d = line2[1]
+    # construct matrix (b-a, d-c)
+    M = np.array([b-a,c-d]).transpose()
+    det = M[0,0]*M[1,1] - M[0,1]*M[1,0]
+
+    tol = 0.0000001
+
+    if det != 0:
+        iM = 1./det * np.array([ [M[1,1], -M[0,1]], [-M[1,0], M[0,0]]  ])
+        lbd = iM.dot(c-a)#np.linalg.solve(M,c-a)
+
+        if tol < lbd[0] < 1-tol and tol < lbd[1] < 1-tol :
+            return 1
+    else:
+        return 0
+    # test
+#line1 = [np.ones(2), np.zeros(2)]
+#line2 = [np.array([0,0]), np.array([2,0])]
+#print are_intersecting_lines(line1, line2)
+
+def which_vertices(vertices, T):
+    """ test which vertices of the ball lie in interior of triangle T """
+    """ ATTENTION: Vertices have to be sorted accordingly !!! """
+
+     #sort
+    origin = np.array(T[0])
+    refvec = T[1]-T[0]#np.array([1, 0])
+    def clockwiseangle_and_distance(point):
+        vector = [point[0]-origin[0], point[1]-origin[1]]
+        lenvector = math.hypot(vector[0], vector[1])
+        if lenvector == 0:
+            return -math.pi, 0
+        normalized = [vector[0]/lenvector, vector[1]/lenvector]
+        dotprod  = normalized[0]*refvec[0] + normalized[1]*refvec[1]     # x1*x2 + y1*y2
+        diffprod = refvec[1]*normalized[0] - refvec[0]*normalized[1]     # x1*y2 - y1*x2
+        angle = math.atan2(diffprod, dotprod)
+        return angle, lenvector
+    a = sorted(range(len(T)),key=lambda x:clockwiseangle_and_distance(T[x]))
+    T = T[a][::-1]
+
+    ipts =[]
+    a = T[0]
+    b = T[1]
+    c = T[2]
+
+    M = np.array([b-a, c-a]).transpose()
+    det = M[0,0]*M[1,1] - M[0,1]*M[1,0]
+    iM = 1./det * np.array([ [M[1,1], -M[0,1]], [-M[1,0], M[0,0]]  ])
+
+    for vert in vertices:
+        lbd = iM.dot(vert-a)#np.linalg.solve(M,line[0]-a)
+        if 0<lbd[0]<1 and 0<lbd[1]<1 and (lbd[0]+lbd[1])<1:
+            ipts += [vert]
+
+    return ipts
+
+
+def intersection_l1linf(x_trans, T_j, Norm, eps):
+    """
+    outputs vertices of the polygon that results from intersecting
+
+        * the ball which is defined by its center 'x_trans', radius 'eps' and the Norm (='L1', 'Linf')
+    and
+        * the triangle T_j = [v0,v1,v2]
+
+    """
+    if Norm == 'L1':
+        vertices = [x_trans + np.array([-eps,0]), x_trans +  np.array([0, eps]), x_trans + np.array([ eps, 0]),x_trans + np.array([ 0,-eps])]
+
+        def norm(x):
+            return np.sum(np.abs(x), axis = 0)#np.array([abs(x[i]) for i in range(len(x))]).sum()#
+
+    elif Norm == 'Linf':
+        vertices = [x_trans + np.array([-eps,-eps]), x_trans +  np.array([-eps,eps]), x_trans + np.array([ eps, eps]),x_trans + np.array([ eps,-eps])]
+
+        def norm(x):
+            return np.max(np.abs(x))
+
+    """plot for testing below"""
+#    for i in range(4):
+#       plt.gca().add_patch(plt.Polygon([vertices[i], vertices[(i+1)%4]] , closed=False, fill = False, color = 'red'))
+
+    # find out how many vertices of the triangle lie in the ball
+    ipts = []
+    for k in range(3):
+        if norm(x_trans-T_j[k]) < eps:
+            ipts = ipts + [k]
+
+    # case 1 (3 interior) = element fully contained in the ball
+    if len(ipts) == 3:
+        points = T_j
+
+    # case 2 = element only partly covered by the ball
+    else:
+        intersection_points = []
+        sides = [[T_j[0], T_j[1]], [T_j[1], T_j[2]], [T_j[2], T_j[0]]]  # sides of triangle
+        for a in range(4):
+            for b in range(3):
+                #--------------------------------------------------------
+                # intersect two lines
+                line1 = [vertices[a], vertices[(a + 1) % 4]]
+                line2 = sides[b]
+                a = line1[0]
+                b = line1[1]
+                c = line2[0]
+                d = line2[1]
+                # construct matrix (b-a, d-c)
+                M = np.array([b - a, c - d]).transpose()
+                det = M[0, 0] * M[1, 1] - M[0, 1] * M[1, 0]
+                if det == 0:
+                    #        print 'there is no unique intersection'
+                    p, lbd = np.zeros(2), 10. * np.ones(2)
+                else:
+                    iM = 1. / det * np.array([[M[1, 1], -M[0, 1]], [-M[1, 0], M[0, 0]]])
+                    lbd = iM.dot(c - a)  # np.linalg.solve(M,c-a)
+                    p, lbd = a + lbd[0] * (b - a), lbd
+                if 0 <= lbd[0] <= 1 and 0 <= lbd[1] <= 1:
+                    intersection_points += [p]
+                # --------------------------------------------------------
+        points = [T_j[ipts[i]] for i in range(len(ipts))]
+        points += intersection_points
+        points += which_vertices(vertices, T_j)
+
+    return points
+
+
+def order_indices(b):
+    origin = np.array(b[0])
+    refvec = b[1] - b[0]  # np.array([1, 0])
+
+    def clockwiseangle_and_distance(point):
+        vector = [point[0] - origin[0], point[1] - origin[1]]
+        lenvector = math.hypot(vector[0], vector[1])
+        if lenvector == 0:
+            return -math.pi, 0
+        normalized = [vector[0] / lenvector, vector[1] / lenvector]
+        dotprod = normalized[0] * refvec[0] + normalized[1] * refvec[1]  # x1*x2 + y1*y2
+        diffprod = refvec[1] * normalized[0] - refvec[0] * normalized[1]  # x1*y2 - y1*x2
+        angle = math.atan2(diffprod, dotprod)
+        return angle, lenvector
+
+    a = sorted(range(len(b)), key=lambda x: clockwiseangle_and_distance(b[x]))
+
+    return a
+
+
+# auxiliary functions
+def intersection_points_l2(x, eps, T,norm):
+    """
+    compute intersection points of triangle and l2-ball
+    """
+    intersection_points = []
+    sides = [[T[0], T[1]], [T[1], T[2]], [T[2], T[0]]]  # sides of triangle
+    for i in range(3):
+        side = sides[i]
+        a = side[0]
+        b = side[1]
+
+        def f(lbd):
+            return norm(a + lbd * (b - a) - x) - eps
+
+        """USING pq formula"""
+        c = a - x
+        d = b - a
+        p = np.dot(c, d) / np.dot(d, d)
+        v = p ** 2 - (np.dot(c, c) - eps ** 2) / np.dot(d, d)
+        if v >= 0:
+            lbd1 = -p - np.sqrt(v)
+            lbd2 = (np.dot(c, c) - eps ** 2) / np.dot(d, d) / lbd1  # -p +np.sqrt(v)
+            if 0 <= lbd1 <= 1 and np.allclose(f(lbd1), 0.):
+                intersection_points += [np.array(a + lbd1 * (b - a))]
+            if 0 <= lbd2 <= 1 and np.allclose(a + lbd1 * (b - a), a + lbd2 * (b - a)) == False and np.allclose(f(lbd2),0.):  #
+                intersection_points += [np.array(a + lbd2 * (b - a))]
+
+    return intersection_points#
+
+
+
+
+def intersection_exactl2_1(x_trans, T, eps):
+    """
+    POLYGON THAT RESULTS FROM LEAVING OUT CAPS
+        +
+    PUTTING 1 Triangles on the CAPS
+
+    outputs vertices of the polygon that results from intersecting
+
+        * the L2 ball which is defined by its center x_trans and eps
+    and
+        * the triangle T = [v0,v1,v2]
+
+    """
+    def norm(x):
+        return np.sqrt(np.dot(x,x))
+
+    """ POLYGON (without caps) """
+    # (1) Find out interior points (= vertices of triangle that lie in the interior of the ball)
+    ipts = []
+    for k in range(3):
+        if norm(x_trans-T[k]) < eps:
+            ipts = ipts + [k]
+
+    # CASE 1 (3 interior = triangle fully contained in the ball) -> finished
+    if len(ipts) == 3:
+        return [T]
+
+    # CASE 2 (not all points are interior points, i.e., boundaries intersect or intersection empty)
+    # we have to figure out intersection points and potentially add caps
+    else:
+
+        # (2) Compute intersection points (there do not have to be one, if there is no intersection)
+        # we also label these points according to which side of the triangle they intersect
+        # due to the labeling we cannot use the function "intersection_points_l2"
+        intersection_points = []
+        labels = []
+        sides = [[T[0], T[1]], [T[1], T[2]], [T[2], T[0]]] # sides of triangle
+        for i in range(3):
+            c = sides[i][0] - x_trans
+            d = sides[i][1] - sides[i][0]
+            p = np.dot(c,d)/np.dot(d,d)
+            v = p**2 - (np.dot(c,c)-eps**2) / np.dot(d,d)
+            if v >= 0:
+                # lbd1 and lbd2 are the two roots of ||s1 + lbd (s2-s1) - x_trans|| - eps = 0
+                #                                    ||c + lbd * d|| - eps = 0
+                # the following is the numerically more stable p/q formula implementation
+                lbd1 = -p - np.sqrt(v)
+                lbd2 = (np.dot(c, c) - eps ** 2) / np.dot(d, d) / lbd1
+
+                if 0<=lbd1<=1:
+                    intersection_points += [np.array(sides[i][0]+lbd1*d)]
+                    labels += [i]
+                if 0<=lbd2<=1:
+                    intersection_points += [np.array(sides[i][0]+lbd2*d)]
+                    labels += [i]
+
+        # interior points + intersection points
+        points = [T[ipts[i]] for i in range(len(ipts))] + intersection_points
+
+        # empty intersection
+        if len(points) < 3:
+            tris = []
+
+        # divide polygon resulting from points
+        else:
+            tris = divide_polygon(points)
+
+
+        """ NOW ADD THE CAPS (put a single triangle into the cap) """
+        num_int_points = len(intersection_points)
+
+        # case not covered: ball very small and fully contained in a triangle, therefore this if statement
+        if num_int_points>1:
+            # we order intersection_point clockwise and adapt angles accordingly
+            a = order_indices(intersection_points)
+            intersection_points, labels = [intersection_points[a[i]] for i in range(len(a))], [labels[a[i]] for i in range(len(a))]
+
+            # have to avoid that in this case two times the same triangle is put on cap
+            if num_int_points==2:
+                i = 0
+                s1 = intersection_points[i]
+                s2 = intersection_points[(i + 1) % num_int_points]
+                s_bar = 0.5 * (s1 + s2)
+                c_plus = x_trans + eps * ((s_bar - x_trans) / np.linalg.norm(s_bar - x_trans))
+                c_minus = x_trans - eps * ((s_bar - x_trans) / np.linalg.norm(s_bar - x_trans))
+                #
+                # if cplus is in the triangle, then this is the cap
+                aux = which_vertices([c_plus], T)
+                if len(aux) > 0:
+                    tris += [order([s1, s2, c_plus])]
+                # if cminus is in the triangle, then this is the cap (note that both may not be in the triangle!)
+                aux = which_vertices([c_minus], T)
+                if len(aux) > 0:
+                    tris += [order([s1, s2, c_minus])]
+            else:
+                for i in range(len(labels)):
+                    if labels[i] != labels[(i+1) % num_int_points]:
+                        s1 = intersection_points[i]
+                        s2 = intersection_points[(i+1) % num_int_points]
+                        s_bar = 0.5 * (s1+s2)
+                        c_plus =  x_trans + eps * ((s_bar - x_trans) / np.linalg.norm(s_bar - x_trans))
+                        c_minus = x_trans - eps * ((s_bar - x_trans)  / np.linalg.norm(s_bar - x_trans))
+                        #
+                        # if cplus is in the triangle, then this is the cap
+                        aux = which_vertices([c_plus], T)
+                        if len(aux)>0:
+                            tris += [order([s1, s2, c_plus])]
+                        # if cminus is in the triangle, then this is the cap (note that both may not be in the triangle!)
+                        aux = which_vertices([c_minus], T)
+                        if len(aux)>0:
+                            tris += [order([s1, s2, c_minus])]
+
+    return tris
+
+def intersection_exactl2_capsonly(x_trans, T, eps):
+
+    def norm(x):
+        return np.sqrt(np.dot(x,x))
+
+    caps = []
+    # (2) Compute intersection points (there do not have to be one, if there is no intersection)
+    # we also label these points according to which side of the triangle they intersect
+    # due to the labeling we cannot use the function "intersection_points_l2"
+    intersection_points = []
+    labels = []
+    sides = [[T[0], T[1]], [T[1], T[2]], [T[2], T[0]]] # sides of triangle
+    for i in range(3):
+        c = sides[i][0] - x_trans
+        d = sides[i][1] - sides[i][0]
+        p = np.dot(c,d)/np.dot(d,d)
+        v = p**2 - (np.dot(c,c)-eps**2) / np.dot(d,d)
+        if v >= 0:
+            lbd1 = -p - np.sqrt(v)
+            lbd2 = (np.dot(c, c) - eps ** 2) / np.dot(d, d) / lbd1#-p +np.sqrt(v)
+            if 0<=lbd1<=1:
+                intersection_points += [np.array(sides[i][0]+lbd1*d)]
+                labels += [i]
+            if 0<=lbd2<=1:
+                intersection_points += [np.array(sides[i][0]+lbd2*d)]
+                labels += [i]
+    """  CAPS """
+    num_int_points = len(intersection_points)
+
+    # we do not cover the case that the ball is fully contained in a triangle, therefore this if statement
+    if num_int_points>1:
+        # we order intersection_point clockwise and adapt angles accordingly
+        a = order_indices(intersection_points)
+        intersection_points, labels = [intersection_points[a[i]] for i in range(len(a))], [labels[a[i]] for i in range(len(a))]
+
+        # sides of the "nocaps"-polygon clockwise
+        sides = []
+        for i in range(num_int_points):
+            sides += [[np.array(intersection_points[i]), np.array(intersection_points[(i+1) % num_int_points])]]
+
+
+        if num_int_points == 2:
+            s1 = intersection_points[0]
+            s2 = intersection_points[1]
+            p1, p2 = s1 - x_trans, s2 - x_trans
+            s_bar = 0.5 * (s1 + s2)
+
+            alpha = 0.5 * np.arccos(np.dot(p1, p2) / eps ** 2)
+            centroid = x_trans + 4 * eps * np.sin(alpha) ** 3 / (3 * (2 * alpha - np.sin(2 * alpha))) * (
+                        (s_bar - x_trans) / np.linalg.norm(s_bar - x_trans))
+            area = 0.25 * eps ** 2 * (2 * alpha - np.sin(2 * alpha))
+
+            # plt.plot(s1[0], s1[1], 'rx')
+            # plt.plot(s2[0], s2[1], 'yx')
+            # plt.plot(x_trans[0], x_trans[1], 'bx')
+            # plt.plot(centroid[0], centroid[1], 'ro')
+            # plt.quiver(x_trans[0], x_trans[1],p1[0], p1[1],   angles='xy', scale_units='xy', scale=1)
+            # plt.quiver(x_trans[0], x_trans[1],p2[0], p2[1],  color='b',angles='xy', scale_units='xy', scale=1)
+
+            caps += [[alpha, centroid, area]]
+
+        else:
+            for i in range(len(labels)):
+                #caps points always belong to different sides of the triangles
+                if labels[i] != labels[(i+1) % num_int_points]:
+
+                    s1 = intersection_points[i]
+                    s2 = intersection_points[(i+1) % num_int_points]
+                    p1, p2 = s1-x_trans, s2-x_trans
+                    s_bar = 0.5 * (s1+s2)
+
+                    alpha = 0.5 * np.arccos(np.dot(p1, p2) / eps ** 2)
+                    centroid = x_trans + 4 * eps * np.sin(alpha) ** 3 / (3 * (2 * alpha - np.sin(2 * alpha))) * ( (s_bar - x_trans) / np.linalg.norm(s_bar - x_trans))
+                    area = 0.25 * eps ** 2 * (2 * alpha - np.sin(2 * alpha))
+
+                    # plt.plot(s1[0], s1[1], 'rx')
+                    # plt.plot(s2[0], s2[1], 'yx')
+                    # plt.plot(x_trans[0], x_trans[1], 'bx')
+                    # plt.plot(centroid[0], centroid[1], 'ro')
+                    # plt.quiver(x_trans[0], x_trans[1],p1[0], p1[1],   angles='xy', scale_units='xy', scale=1)
+                    # plt.quiver(x_trans[0], x_trans[1],p2[0], p2[1],  color='b',angles='xy', scale_units='xy', scale=1)
+
+                    caps += [[alpha, centroid, area]]
+
+    return caps
+
+
+def intersection_approxl2(x_trans, T_j, eps):
+    """
+    POLYGON THAT RESULTS FROM LEAVING OUT CAPS
+
+    outputs vertices of the polygon that results from intersecting
+
+        * the L2 ball which is defined by its center x_trans and eps
+    and
+        * the triangle T_j = [v0,v1,v2]
+
+    """
+    def norm(x):
+        return np.sqrt(np.dot(x,x))
+
+    ipts = []
+    for k in range(3):
+        if norm(x_trans-T_j[k]) < eps:
+            ipts = ipts + [k]
+
+    # case 1 (3 interior)
+    if len(ipts) == 3:
+        tris = [T_j]
+
+    else:
+        points = [T_j[ipts[i]] for i in range(len(ipts))]
+        points += intersection_points_l2(x_trans, eps, T_j, norm)
+
+        if len(points) < 3:
+            tris = []
+        else:
+            tris = divide_polygon(points)
+
+    return tris
+
+
+def intersection_l2_exactcaps(x_trans, T, eps):
+
+    def norm(x):
+        return np.sqrt(np.dot(x,x))
+
+    caps = []
+    # (2) Compute intersection points (there do not have to be one, if there is no intersection)
+    # we also label these points according to which side of the triangle they intersect
+    # due to the labeling we cannot use the function "intersection_points_l2"
+    intersection_points = []
+    labels = []
+    sides = [[T[0], T[1]], [T[1], T[2]], [T[2], T[0]]] # sides of triangle
+    for i in range(3):
+        c = sides[i][0] - x_trans
+        d = sides[i][1] - sides[i][0]
+        p = np.dot(c,d)/np.dot(d,d)
+        v = p**2 - (np.dot(c,c)-eps**2) / np.dot(d,d)
+        if v >= 0:
+            lbd1 = -p - np.sqrt(v)
+            lbd2 = (np.dot(c, c) - eps ** 2) / np.dot(d, d) / lbd1#-p +np.sqrt(v)
+
+            if 0<=lbd1<=1:
+                intersection_points += [np.array(sides[i][0]+lbd1*d)]
+                labels += [i]
+            if 0<=lbd2<=1 and lbd1 != lbd2:
+                intersection_points += [np.array(sides[i][0]+lbd2*d)]
+                labels += [i]
+
+    ipts = []
+    for k in range(3):
+        if norm(x_trans-T[k]) < eps:
+            ipts = ipts + [k]
+
+    # case 1 (3 interior)
+    if len(ipts) == 3:
+        tris = [T]
+
+    else:
+        points = [T[ipts[i]] for i in range(len(ipts))]
+        points += intersection_points_l2(x_trans, eps, T, norm)
+
+        if len(points) < 3:
+            tris = []
+        else:
+            tris = divide_polygon(points)
+
+    """  CAPS """
+    num_int_points = len(intersection_points)
+
+    # we do not cover the case that the ball is fully contained in a triangle, therefore this if statement
+    if num_int_points>1:
+        # we order intersection_point clockwise and adapt angles accordingly
+        a = order_indices(intersection_points)
+        intersection_points, labels = [intersection_points[a[i]] for i in range(len(a))], [labels[a[i]] for i in range(len(a))]
+
+        # sides of the "nocaps"-polygon clockwise
+        sides = []
+        for i in range(num_int_points):
+            sides += [[np.array(intersection_points[i]), np.array(intersection_points[(i+1) % num_int_points])]]
+
+        if num_int_points == 2:
+            s1 = intersection_points[0]
+            s2 = intersection_points[1]
+            p1, p2 = s1 - x_trans, s2 - x_trans
+            s_bar = 0.5 * (s1 + s2)
+
+            aux = np.dot(p1, p2) / eps ** 2
+            if np.allclose(aux, 1.0, atol=1e-07) != True:
+                alpha = 0.5 * np.arccos(aux)
+                centroid = x_trans + 4 * eps * np.sin(alpha) ** 3 / (3 * (2 * alpha - np.sin(2 * alpha))) * (
+                            (s_bar - x_trans) / np.linalg.norm(s_bar - x_trans))
+                area = 0.25 * eps ** 2 * (2 * alpha - np.sin(2 * alpha))
+
+                # print(eps, np.dot(p1, p2) , np.dot(p1, p2) / eps ** 2)
+                # plt.plot(s1[0], s1[1], 'rx')
+                # plt.plot(s2[0], s2[1], 'yx')
+                # plt.plot(x_trans[0], x_trans[1], 'bx')
+                # plt.plot(centroid[0], centroid[1], 'ro')
+                # plt.quiver(x_trans[0], x_trans[1],p1[0], p1[1],   angles='xy', scale_units='xy', scale=1)
+                # plt.quiver(x_trans[0], x_trans[1],p2[0], p2[1],  color='b',angles='xy', scale_units='xy', scale=1)
+
+                caps += [[centroid, area]]
+
+        else:
+
+            for i in range(len(labels)):
+                #caps points always belong to different sides of the triangles
+                if labels[i] != labels[(i+1) % num_int_points]:
+
+                    s1 = intersection_points[i]
+                    s2 = intersection_points[(i+1) % num_int_points]
+                    p1, p2 = s1-x_trans, s2-x_trans
+                    s_bar = 0.5 * (s1+s2)
+                    aux = np.dot(p1, p2) / eps ** 2
+                    if np.allclose(aux, 1.0, atol=1e-07) != True:
+                        alpha = 0.5 * np.arccos(aux)
+                        centroid = x_trans + 4 * eps * np.sin(alpha) ** 3 / (3 * (2 * alpha - np.sin(2 * alpha))) * ( (s_bar - x_trans) / np.linalg.norm(s_bar - x_trans))
+                        area = 0.25 * eps ** 2 * (2 * alpha - np.sin(2 * alpha))
+                        # if np.dot(p1, p2) == 0:
+                        #     plt.plot(s1[0], s1[1], 'rx')
+                        #     plt.plot(s2[0], s2[1], 'yx')
+                        #     plt.plot(x_trans[0], x_trans[1], 'bx')
+                        #     plt.plot(centroid[0], centroid[1], 'ro')
+                        #     plt.quiver(x_trans[0], x_trans[1],p1[0], p1[1],   angles='xy', scale_units='xy', scale=1)
+                        #     plt.quiver(x_trans[0], x_trans[1],p2[0], p2[1],  color='b',angles='xy', scale_units='xy', scale=1)
+
+                        caps += [[centroid, area]]
+
+    return tris, caps
+
+#==============================================================================
+def divide_polygon(b):
+    """
+    task:  divide domain defined by polygon into triangles
+    input: a = [a0, a1, a2, a3, ...] nodes of the polygon
+    output:  [], [] given the indices of the triangle
+
+    idea: sort nodes counter clockwise
+    """
+    origin = np.array(b[0])
+    refvec = b[1]-b[0]#np.array([1, 0])
+    def clockwiseangle_and_distance(point):
+        vector = [point[0]-origin[0], point[1]-origin[1]]
+        lenvector = math.hypot(vector[0], vector[1])
+        if lenvector == 0:
+            return -math.pi, 0
+        normalized = [vector[0]/lenvector, vector[1]/lenvector]
+        dotprod  = normalized[0]*refvec[0] + normalized[1]*refvec[1]     # x1*x2 + y1*y2
+        diffprod = refvec[1]*normalized[0] - refvec[0]*normalized[1]     # x1*y2 - y1*x2
+        angle = math.atan2(diffprod, dotprod)
+        return angle, lenvector
+
+    a = sorted(range(len(b)),key=lambda x:clockwiseangle_and_distance(b[x]))
+    t = []
+
+    for i in range(len(a)-2):
+
+        t  += [ [b[a[0]].tolist(), b[a[i+1]].tolist(), b[a[i+2]].tolist()] ]
+
+    return t
+
+### ADD BARYCENTER
+def divide_polygon_with_barycenter(b):
+    """
+    task:  divide domain defined by polygon into triangles
+    input: a = [a0, a1, a2, a3]  nodes of the polygon
+    output:  [[], [],...], given the indices of the triangle
+
+    idea: sort nodes counter clockwse
+    """
+
+    origin = np.array(b[0])
+    refvec = b[1]-b[0]#np.array([1, 0])
+    def clockwiseangle_and_distance(point):
+        vector = [point[0]-origin[0], point[1]-origin[1]]
+        lenvector = math.hypot(vector[0], vector[1])
+        if lenvector == 0:
+            return -math.pi, 0
+        normalized = [vector[0]/lenvector, vector[1]/lenvector]
+        dotprod  = normalized[0]*refvec[0] + normalized[1]*refvec[1]     # x1*x2 + y1*y2
+        diffprod = refvec[1]*normalized[0] - refvec[0]*normalized[1]     # x1*y2 - y1*x2
+        angle = math.atan2(diffprod, dotprod)
+        return angle, lenvector
+
+    a = sorted(range(len(b)),key=lambda x:clockwiseangle_and_distance(b[x]))
+    t = []
+
+    bary = np.zeros(2)
+    for i in range(len(b)):
+        bary += b[i]
+
+    bary = (1./ float(len(b))) * bary
+
+    for i in range(len(a)):
+        t += [[b[a[i]].tolist(), bary, b[a[(i+1)%len(a)]].tolist()]]
+        #t  += [ [b[a[0]].tolist(), b[a[i+1]].tolist(), b[a[i+2]].tolist()] ]
+
+    return t
+
+def order(b):
+    origin = np.array(b[0])
+    refvec = b[1]-b[0]#np.array([1, 0])
+    def clockwiseangle_and_distance(point):
+        vector = [point[0]-origin[0], point[1]-origin[1]]
+        lenvector = math.hypot(vector[0], vector[1])
+        if lenvector == 0:
+            return -math.pi, 0
+        normalized = [vector[0]/lenvector, vector[1]/lenvector]
+        dotprod  = normalized[0]*refvec[0] + normalized[1]*refvec[1]     # x1*x2 + y1*y2
+        diffprod = refvec[1]*normalized[0] - refvec[0]*normalized[1]     # x1*y2 - y1*x2
+        angle = math.atan2(diffprod, dotprod)
+        return angle, lenvector
+
+    a = sorted(range(len(b)),key=lambda x:clockwiseangle_and_distance(b[x]))
+    res = [b[a[i]] for i in range(len(b))]
+    return res
+
+
+#==============================================================================
+"""  EXACT: L1 and Linf  """
+#==============================================================================
+
+def retriangulate_exactL1Linf(x, T, Norm, eps):
+
+    points = intersection_l1linf(x, T, Norm, eps)
+    if len(points) == 3:
+        tris = [points]
+    elif len(points) > 3:
+        tris = divide_polygon(points)
+    else:
+        tris = []
+
+    return tris
+
+#==============================================================================
+"""  L2 """
+#==============================================================================
+def retriangulate_exactL2(x, T, norm, eps):
+    return intersection_exactl2_1(x, T, eps)#intersection_l2(x, T, eps)
+
+def retriangulate_exactcaps(x, T, norm, eps):
+    return intersection_l2_exactcaps(x, T, eps)
+
+def retriangulate_approxL2(x, T, norm, eps):
+    return intersection_approxl2(x, T, eps)
+
+#==============================================================================
+"""  APPROX_1: intersection is nonempty (all norms) """
+#==============================================================================
+def retriangulate_apx1(x, T, norm, eps):
+    """I think the criterion is wrong !!! """
+    aux = np.array([norm(x-t) for t in T])
+    if np.any(aux<eps) or len(which_vertices([x], T)) == 1: # intersection is nonempty <=> one vertices lies in the interior of the ball
+        return [T]
+    else:
+        return []
+
+#==============================================================================
+"""  APPROX_2: barycenter is in ball (all norms) """
+#==============================================================================
+def retriangulate_apx2(x, T, norm, eps):
+    if norm((1./3.*(T[0]+T[1]+T[2])) - x) < eps:
+        return [T]
+    else:
+        return []
+
+#==============================================================================
+retriangulate_dict = {'exact':      retriangulate_exactL1Linf,
+                      'exact_L2':   retriangulate_exactL2,
+                      'approx_L2':  retriangulate_approxL2, # leave out the caps
+                      'approx1':    retriangulate_apx1, # intersection nonempty
+                      'approx2':    retriangulate_apx2, # barycenter lies in ball
+                      'exactcaps':  retriangulate_exactcaps # centroid rule for caps
+                      }
+
+""" TEST  RE - TRIANGULATE """
+re_triang_test =0
+if re_triang_test:
+    linewidth = 2.5
+    Norm = 2#'L1'#
+    T0 = np.array([[-0.8,0.], [1.0, 0.], [0.,2]])
+    color_ball = 'red'
+    alpha_triangles = 0.1
+    color_triangles = 'cyan'
+    X = [np.array([0.3, 0.8]), np.array([0.25, 0.8]), np.array([0.1, 0.8]), np.array([-0.7, 0.1]), np.array([0.6, 1.4]), np.array([0.25, 0.4]), np.array([0.1, 0.5]), np.array([0.12, 0.5])]
+    Eps = [0.4, 0.9, 0.3, 0.4, 0.8, 1., 0.8, 0.75]
+
+    #X = [X[4], X[6]]
+    #Eps = [Eps[4], Eps[6]]
+    for i in range(len(X)):
+        fig, ax = plt.subplots()
+        plt.gca().add_patch(plt.Polygon(T0 , closed=True, fill = False, linewidth = linewidth))
+        x = X[i]
+        eps = Eps[i]
+    #    plt.plot(x[0], x[1], 'yo')
+        circle = plt.Circle(tuple(x), eps, color=color_ball, fill= False, linewidth = linewidth)
+
+        # tris = retriangulate_approxL2(x, T0, Norm, eps)
+        tris = intersection_exactl2_1(x, T0, eps)
+
+        # caps = intersection_exactl2_capsonly(x, T0, eps)
+        # print(caps)
+        # for i in range(len(caps)):
+        #     print(i, caps[i])
+        #     centroid = caps[i][1]
+        #     plt.plot(centroid[0], centroid[1], 'bo')
+
+
+        print( len(tris))
+        if len(tris) != 0:
+            for T in tris:
+                plt.gca().add_patch(plt.Polygon(T , closed=True, fill = True, alpha = alpha_triangles, color = color_triangles, linewidth = 0.1))
+                plt.gca().add_patch(plt.Polygon(T , closed=True, fill = False, linewidth = 0.7*linewidth))
+
+        if Norm == 2:
+            ax.add_artist(circle)
+        elif Norm == 'Linf':
+            plt.gca().add_patch(plt.Polygon([x + np.array([-eps,-eps]), x +  np.array([-eps,eps]), x + np.array([ eps, eps]),x + np.array([ eps,-eps])] , closed=True, fill = False, color = color_ball, linewidth = linewidth))
+        else:
+            plt.gca().add_patch(plt.Polygon([x + np.array([-eps,0]), x +  np.array([0, eps]), x + np.array([ eps, 0]),x + np.array([ 0,-eps])] , closed=True, fill = False, color = color_ball, linewidth = linewidth))
+
+        plt.axis('equal')
+
+        plt.xlim(-1.5,1.5)
+        plt.ylim(-0.5,2.5)
+        plt.gca().set_adjustable("box")
+    #    plt.autoscale()
+        plt.xticks([])
+        plt.yticks([])
+        plt.axis('equal')
+
+        plt.show()
+
+"""#####################################################"""
+"""                             1D                      """
+"""#####################################################"""
+def retriangulate_1d_approx(x, I, delta , h):
+    a = I[0]
+    b = I[1]
+
+    if (a >= x+delta and b >= x+delta) or (a <= x-delta and b <= x-delta):
+        intersection = []
+    else:
+        intersection = I
+
+    return intersection
+
+def retriangulate_1d_exact(x, I, delta , h):
+    a = I[0]
+    b = I[1]
+    if np.abs(a-x) < delta and np.abs(b-x) < delta:
+        intersection = [a,b]
+    elif np.abs(a-x) < delta:
+        intersection = [a, x+delta]
+    elif np.abs(b-x) < delta:
+        intersection = [x-delta, b]
+    else:
+        intersection = []
+    return intersection
+
+def retriangulate_1d_cap1(x, I, delta, h):
+    a = I[0]
+    b = I[1]
+    delta_aux = delta +  0.1 * h
+    if np.abs(a-x) < delta_aux and np.abs(b-x) < delta_aux:
+        intersection = [a,b]
+    elif np.abs(a-x) < delta_aux:
+        intersection = [a, x+delta_aux]
+    elif np.abs(b-x) < delta_aux:
+        intersection = [x-delta_aux, b]
+    else:
+        intersection = []
+    return intersection
+
+def retriangulate_1d_cap2(x, I, delta, h):
+    a = I[0]
+    b = I[1]
+    delta_aux = delta +  h**2
+    if np.abs(a-x) < delta_aux and np.abs(b-x) < delta_aux:
+        intersection = [a,b]
+    elif np.abs(a-x) < delta_aux:
+        intersection = [a, x+delta_aux]
+    elif np.abs(b-x) < delta_aux:
+        intersection = [x-delta_aux, b]
+    else:
+        intersection = []
+    return intersection
+
+def retriangulate_1d_cap3(x, I, delta, h):
+    a = I[0]
+    b = I[1]
+    delta_aux = delta +  h**3
+    if np.abs(a-x) < delta_aux and np.abs(b-x) < delta_aux:
+        intersection = [a,b]
+    elif np.abs(a-x) < delta_aux:
+        intersection = [a, x+delta_aux]
+    elif np.abs(b-x) < delta_aux:
+        intersection = [x-delta_aux, b]
+    else:
+        intersection = []
+    return intersection
+
+retriangulate_dict_1d = {'exact':retriangulate_1d_exact,
+                         'approx':retriangulate_1d_approx,
+                         'cap1':retriangulate_1d_cap1,
+                         'cap2':retriangulate_1d_cap2,
+                         'cap3':retriangulate_1d_cap3}
+
+"""-------------------------------------------------------------------------"""
+"""                      RE - TRIANGULATE                                   """
+"""-------------------------------------------------------------------------"""
+#=============================================================================#
+#=============================================================================#
+#=============================================================================#
+
+
+
+"""-------------------------------------------------------------------------"""
+"""                    READ MESH                                            """
+"""-------------------------------------------------------------------------"""
+"""
+Read mesh generated by gmsh
+
+output: array of 
+
+        1) Vertices (points in 3d !!!)
+        2) Triangles
+        3) Lines
+        
+For the file format see the documentation:
+
+http://gmsh.info/doc/texinfo/gmsh.html#File-formats
+
+"""
+
+"""-------------------------------------------------------------------------"""
+"""                     READ MESH                                   """
+"""-------------------------------------------------------------------------"""
+#=============================================================================#
+#=============================================================================#
+#=============================================================================#
+def read_mesh(mshfile):
+    """meshfile = .msh - file genrated by gmsh """
+
+    fid = open(mshfile, "r")
+
+    for line in fid:
+
+        if line.find('$Nodes') == 0:
+            # falls in der Zeile 'Nodes' steht, dann steht in der...
+            line = fid.readline()  #...naechsten Zeile...
+            npts = int(line.split()[0]) #..die anzahl an nodes
+
+            Verts = np.zeros((npts, 3), dtype=float) #lege array for nodes an anzahl x dim
+
+            for i in range(0, npts):
+                # run through all nodes
+                line = fid.readline() # put current line to be the one next
+                data = line.split() # split line into its atomic characters
+                Verts[i, :] = list(map(float, data[1:])) # read out the coordinates of the node by applying the function float() to the characters in data
+
+        if line.find('$Elements') == 0:
+            line = fid.readline()
+            nelmts = int(line.split()[0]) # number of elements
+
+            Lines = []
+            Triangles = []
+            #Squares = np.array([])
+
+            for i in range(0, nelmts):
+                line = fid.readline()
+                data = line.split()
+                if int(data[1]) == 1:
+                    """ 
+                    we store [physical group, node1, node2, node3], 
+                    -1 comes from python starting to count from 0
+                    """
+                    # see ordering:
+
+#                   0----------1 --> x
+
+                    Lines += [int(data[3]), int(data[-2])-1, int(data[-1])-1]
+
+                if int(data[1]) == 2:
+                    """
+                    we store [physical group, node1, node2, node3]
+                    """
+                    # see ordering:
+
+#                    y
+#                    ^
+#                    |
+#                    2
+#                    |`\
+#                    |  `\
+#                    |    `\
+#                    |      `\
+#                    |        `\
+#                    0----------1 --> x
+
+                    Triangles += [int(data[3]), int(int(data[-3])-1), int(int(data[-2])-1), int(int(data[-1])-1)]
+
+    return Verts, np.array(Lines).reshape(int(len(Lines)/3), 3), np.array(Triangles).reshape(int(len(Triangles)/4), 4)
+
+
+"""-------------------------------------------------------------------------"""
+"""                    CG                                  """
+"""-------------------------------------------------------------------------"""
+def cg(A, b, M, mute):
+    """preconditioned cg method for
+
+                A * u = b
+
+        with M ~ A^-1 as preconditioner
+
+
+        INPUT:
+        A: function that does matrix*vector A(x) = A*x for
+           A \in \R^{nxn} symmetric and positive definite
+
+        b: right hand side, vector in \R^n
+
+        M ~ A^-1: function that solves Ax = c approximately, that is, M(c) ~ x
+
+        mute: if False then print option
+
+        -----------------------------------------------------------------------
+        REFERENCE:
+         'Finite Element Methods and Fast Iterative Solvers'(A. Wathen), p.80
+    """
+    if M == 0:
+        def M(x):
+            return x
+
+    tol = 10e-12
+    maxiter = 2500
+    n = len(b)
+    u = np.zeros(n)
+    r_alt = b - A(u)
+
+    z_alt = M(r_alt)
+
+
+    p = z_alt
+    k = 0
+    while k < maxiter:
+        if mute == False:
+            print('iteration STEP', k)
+        alpha = np.dot(z_alt, r_alt) / np.dot(A(p), p)
+        u = u + alpha * p
+        r_neu = r_alt - alpha * A(p)
+
+        if np.linalg.norm(r_neu)/np.linalg.norm(b) < tol:
+            break
+
+        z_neu = M(r_neu)
+
+        beta = np.dot(z_neu, r_neu) / np.dot(z_alt, r_alt)
+        p = z_neu + beta * p
+
+        z_alt = z_neu
+        r_alt = r_neu
+        k = k+1
+
+#    print
+#    print 'number of cg iterations = ', k+1
+#    print
+
+    return u
+
+
+def L_BFGS(k, m, s, y, ro, g, A):
+    """
+    m: number of vectors stored
+    s_k = x_(k+1) - x_(k)
+    y_k = gradient_f(x)_(k+1) - gradient_f(x)_(k)
+    ro_k= 1./<y_k, s_k>
+    g = gradient_f(x)_(k)
+    M = matrix for scalarproduct, if 0 then identity
+
+    s and y are stored as follows:
+        s = np.array([ [ ...   s_1      ...],
+                       [ ...   s_2      ...],
+
+                               ...
+
+                       [ ...   s_(k-1)  ...]  ])
+
+
+    returns the decent direction
+
+        z = H^(-1)*grad(f)
+
+    such that the minimization iteration goes as follows:
+
+        x_(k+1) = x_k - h * z
+
+    """
+
+    def M(x):
+        return A.dot(x)
+
+    q = g
+
+    if k == 0:
+        # first step = gradient
+        return q
+
+    else:
+
+        I = min(k, m)
+
+        alpha = np.zeros(k)
+
+        # backward loop
+        for i in range(I)[::-1]:
+            alpha[i] = ro[i] * np.dot(s[i,], M(q))
+            q = q - alpha[i] * y[i, :]
+
+        # re-scale
+        H_0 = np.dot(s[I - 1,], M(y[I - 1,])) / np.dot(y[I - 1,], M(y[I - 1,]))
+        z = H_0 * q
+
+        # forward loop
+        for i in range(I):
+            beta = ro[i] * np.dot(y[i,], M(z))
+            z = z + s[i,] * (alpha[i] - beta)
+
+        return z
+
+
+
+# ==============================================================================
+def save_sparse_csr(filename, array):
+    np.savez(filename, data=array.data, indices=array.indices,
+             indptr=array.indptr, shape=array.shape)
+
+
+def load_sparse_csr(filename):
+    loader = np.load(filename)
+    return ss.csr_matrix((loader['data'], loader['indices'], loader['indptr']),
+                         shape=loader['shape'])
+# ==============================================================================
+"""-------------------------------------------------------------------------"""
+"""                     NORM DICTIONARY                                     """
+"""-------------------------------------------------------------------------"""
+#=============================================================================#
+#=============================================================================#
+#=============================================================================#
+def norm_2(x):
+    return np.sqrt(x[0]**2 + x[1]**2)
+def norm_1(x):
+    return np.sum(np.abs(x), axis = 0)
+def norm_inf(x):
+    return np.max(np.abs(x), axis= 0)
+
+norm_dict = {'L2': norm_2, 'L1': norm_1, 'Linf': norm_inf}
+
+
+"""
+*******************************************************************************
+*******************************************************************************
+
+     X       X  X   X          XXXXXX  X       XXXXXX
+     X       X  XX  X          X       X       X    X
+     X       X  X X X          XXX     X       XXXXXX
+     X       X  X  XX          X       X       X    X
+     XXXXXX  X  X   X          XXXXXX  XXXXXX  X    X
+     
+*******************************************************************************
+*******************************************************************************
+"""
+
+"""========================================================================="""
+"""                            MASS MATRIX    LinElas                              """
+"""========================================================================="""
+def LinElas_massmat(mesh):
+    num_nodes = len(mesh.nodes)
+    num_omega = len(mesh.omega)
+
+    M_1d = ss.lil_matrix((num_nodes, num_nodes), dtype = float)
+    P = np.array([[ 0.33333333,  0.33333333],
+                  [ 0.2       ,  0.6       ],
+                  [ 0.2       ,  0.2       ],
+                  [ 0.6       ,  0.2       ]]).transpose()
+
+    weights = 0.5 * np.array([-27./48, 25./48, 25./48, 25./48])
+
+    def BASIS(v):
+        return np.array([ 1. - v[0] - v[1], v[0], v[1]])
+
+    PSI = BASIS(P)
+
+    for l in range(num_omega):
+        T_num = mesh.omega[l,1:].tolist()
+        T = mesh.vertices[T_num]
+        det = abs(float((T[1] - T[0])[0] * (T[2] - T[0])[1] - (T[1] - T[0])[1] * (T[2] - T[0])[0] ))
+
+        for a in range(3):
+            for b in range(3):
+                a_nodes = np.where(mesh.nodes == T_num[a])[0][0] # find number of node to which element basis function at vertex a contributes
+                b_nodes = np.where(mesh.nodes == T_num[b])[0][0]
+                if a_nodes <= b_nodes:
+                    M_1d[a_nodes, b_nodes] += det * (PSI[a] * PSI[b] * weights).sum()
+
+    M = ss.lil_matrix((2*num_nodes, 2*num_nodes), dtype = float)
+    D = ss.diags(M_1d.diagonal())
+    M_1d = M_1d.transpose() + M_1d - D
+
+    M[0:num_nodes, 0:num_nodes] = M_1d
+    M[num_nodes:,  num_nodes:] = M_1d
+
+    return M
+
+"""========================================================================="""
+"""                       STIFFNESS MATRIX     LinElas                             """
+"""========================================================================="""
+def LinElas_assembly(mu, lbd, mesh):
+
+    num_omega = len(mesh.omega)
+    num_nodes = len(mesh.nodes)
+
+    A = ss.lil_matrix((2*num_nodes, 2*num_nodes), dtype = float)
+
+    grad = [np.array([-1, -1]), np.array([1, 0]), np.array([0, 1])]
+
+    def fun(l):
+#    for l in range(num_omega):
+        T_num = mesh.omega[l,1:].tolist()
+        T = mesh.vertices[T_num]
+
+        Mat = np.array( [T[1] - T[0],T[2] - T[0] ]).transpose()
+        det = float((T[1] - T[0])[0] * (T[2] - T[0])[1] - (T[1] - T[0])[1] * (T[2] - T[0])[0] )
+        iMat = 1./det * np.array([ [Mat[1,1], -Mat[0,1]], [-Mat[1,0], Mat[0,0]]  ])
+        det = abs(det)
+
+        if isinstance(mu, float): # constant mu
+            mu_loc = det * 0.5 * mu # = \int_T mu dx
+        else: # locally varying mu
+            idx = [np.where(mesh.nodes == j)[0][0] for j in T_num]
+
+            # mu values on three vertices of the current triangle
+            mu_vals = mu[idx]
+            mu_loc = 1./6. * det * mu_vals.sum() # = \int_T mu dx, note that integral over reference element basis function is 1/6 for all
+
+
+        for a in range(3):
+            for b in range(3):
+                a_nodes = np.where(mesh.nodes == T_num[a])[0][0]
+                b_nodes = np.where(mesh.nodes == T_num[b])[0][0]
+
+                grad_trans_a = iMat.transpose().dot(grad[a])
+                grad_trans_b = iMat.transpose().dot(grad[b])
+
+                # since A is symmetric we only assemble lower triangle
+                # note: lbd == 0
+                A[a_nodes, num_nodes + b_nodes] += 2 * (mu_loc * ( 0.5 * (grad_trans_a[1])*(grad_trans_b[0])) ) #bilin_2d(U_1, V_1[::-1], det, mu_loc)
+
+                if a_nodes <= b_nodes:
+                    A[a_nodes,             b_nodes]             += 2 * (mu_loc * (grad_trans_a[0]*grad_trans_b[0] + 0.5 * (grad_trans_a[1])*(grad_trans_b[1])) )# bilin_2d(U_1, V_1, det, mu_loc)
+                    A[num_nodes + a_nodes, num_nodes + b_nodes] += 2 * (mu_loc * (grad_trans_a[1]*grad_trans_b[1] + 0.5 * (grad_trans_a[0])*(grad_trans_b[0])) )#bilin_2d(U_1[::-1], V_1[::-1], det, mu_loc)
+
+
+    list(map(fun, range(num_omega)))
+    # reflect lower triangular part of A on diagonal to construct full matrix
+    A = A.tocsr()
+    D = ss.diags(A.diagonal())
+    A = A.transpose() + A - D
+    A = A.tolil()
+
+    # incorporate Dirichlet-data (replace column/row by unit vector)
+    for k in mesh.boundary:
+
+        A[k,:] = ss.eye(1, 2*num_nodes, k).tocsr()
+        A[:, k] = ss.eye(1, 2*num_nodes, k ).tocsr().transpose()
+
+        A[num_nodes + k,:] = ss.eye(1, 2*num_nodes, num_nodes + k).tocsr()
+        A[:, num_nodes + k] = ss.eye(1, 2*num_nodes, num_nodes + k ).tocsr().transpose()
+
+    return A
+
+#def LinElas_assembly_orig(mu, lbd, mesh):
+#
+#    def bilin_2d(U,V,det, mu_loc):
+#        """U, V = iMat^-T * grad (already from transformed formula) """
+#        return det * 0.5 * (lbd*(U[0,0]+U[1,1])*(V[0,0]+V[1,1])) \
+#                    + 2 * (mu_loc * (U[0,0]*V[0,0] + U[1,1]*V[1,1]  \
+#                               + 0.5 * (U[0,1]+U[1,0])*(V[0,1]+V[1,0])) )
+#
+#    num_omega = len(mesh.omega)
+#    num_nodes = len(mesh.nodes)
+#
+#    A = ss.lil_matrix((2*num_nodes, 2*num_nodes), dtype = float)
+#
+#    grad = [np.array([-1, -1]), np.array([1, 0]), np.array([0, 1])]
+#
+#    for l in range(num_omega):
+#        T_num = mesh.omega[l,1:].tolist()
+#        T = mesh.verts[T_num]
+#
+#        Mat = np.array( [T[1] - T[0],T[2] - T[0] ]).transpose()
+#        det = float((T[1] - T[0])[0] * (T[2] - T[0])[1] - (T[1] - T[0])[1] * (T[2] - T[0])[0] )
+#        iMat = 1./det * np.array([ [Mat[1,1], -Mat[0,1]], [-Mat[1,0], Mat[0,0]]  ])
+#        det = abs(det)
+#
+#        if isinstance(mu, float): # constant mu
+#            mu_loc = det * 0.5 * mu # = \int_T mu dx
+#        else: # locally varying mu
+#            idx = [np.where(mesh.nodes == j)[0][0] for j in T_num]
+#
+#            # mu values on three vertices of the current triangle
+#            mu_vals = mu[idx]
+#            mu_loc = 1./6. * det * mu_vals.sum() # = \int_T mu dx, note that integral over reference element basis function is 1/6 for all
+#        print mu_loc
+#        for a in range(3):
+#            for b in range(3):
+#                a_nodes = np.where(mesh.nodes == T_num[a])[0][0]
+#                b_nodes = np.where(mesh.nodes == T_num[b])[0][0]
+#
+#                U_1 = np.vstack((iMat.transpose().dot(grad[a]), np.zeros(2)))
+#                U_2 = np.vstack((np.zeros(2), iMat.transpose().dot(grad[a])))
+#                V_1 = np.vstack((iMat.transpose().dot(grad[b]), np.zeros(2)))
+#                V_2 = np.vstack((np.zeros(2), iMat.transpose().dot(grad[b])))
+#
+#                # since A is symmetric we only assemble lower triangle
+#                A[a_nodes, num_nodes + b_nodes] += bilin_2d(U_1, V_2, det, mu_loc)
+#
+#                if a_nodes <= b_nodes:
+#                    A[a_nodes,             b_nodes]             += bilin_2d(U_1, V_1, det, mu_loc)
+#                    A[num_nodes + a_nodes, num_nodes + b_nodes] += bilin_2d(U_2, V_2, det, mu_loc)
+#
+#    # reflect lower triangular part of A on diagonal to construct full matrix
+#    A = A.tocsr()
+#    D = ss.diags(A.diagonal())
+#    A = A.transpose() + A - D
+#    A = A.tolil()
+#
+#    # incorporate Dirichlet-data (replace column/row by unit vector)
+#    for k in mesh.boundary:
+#
+#        A[k,:] = ss.eye(1, 2*num_nodes, k).tocsr()
+#        A[:, k] = ss.eye(1, 2*num_nodes, k ).tocsr().transpose()
+#
+#        A[num_nodes + k,:] = ss.eye(1, 2*num_nodes, num_nodes + k).tocsr()
+#        A[:, num_nodes + k] = ss.eye(1, 2*num_nodes, num_nodes + k ).tocsr().transpose()
+#
+#    return A
+
+"""========================================================================="""
+"""                          SOURCE TERM                                    """
+"""========================================================================="""
+def source_assembly(fx,fy,M, mesh):
+
+    num_nodes = len(mesh.nodes)
+
+    def source(v):
+        return np.array([fx(v), fy(v)])
+
+    B_phys = np.hstack((fx(mesh.vertices[mesh.nodes].transpose()), fy(mesh.vertices[mesh.nodes].transpose())))
+    B = M.dot(B_phys)
+
+    # incorporate Dirichlet-data
+    for k in mesh.boundary:
+        B[k] = 0
+        B[num_nodes + k] = 0
+
+    return B
+
+"""========================================================================="""
+"""                       PLOT ROUTINES                                     """
+"""========================================================================="""
+def plot_vecfield(U, mesh, title, **kwargs):
+    reshape = kwargs.get('reshape', True)
+    verts = kwargs.get('verts', [0])
+    scale = kwargs.get('scale',1)
+    interaction_domain = kwargs.get('interaction_domain', False)
+
+    if reshape:
+        U = U.reshape(len(mesh.nodes), 2 , order = 'F')
+
+
+    if verts[0] == 0:
+        verts_here = mesh.vertices
+    else:
+        verts_here = verts
+
+    if interaction_domain:
+        X, Y =  verts_here[:,0],  verts_here[:,1]
+    else:
+        X, Y =  verts_here[mesh.nodes][:,0],  verts_here[mesh.nodes][:,1]
+
+
+    U_nor = np.linalg.norm(U, axis=1)
+    norm = matplotlib.colors.Normalize()
+    cm = matplotlib.cm.rainbow
+    sm = matplotlib.cm.ScalarMappable(cmap=cm, norm=norm)
+
+    plt.figure(title)
+    plt.triplot(verts_here[:,0], verts_here[:,1], mesh.elements[:, 1:], color ='black', linewidth =0.3, alpha = 0.8)
+#    for i in range(len(mesh.omega)):
+#        plt.gca().add_patch(plt.Polygon(verts_here[mesh.omega[i,1:]].tolist(), closed=True, fill = False, color = 'black', linewidth = 0.08))
+#    colormap = matplotlib.cm.rainbow
+
+    norm.autoscale(U_nor)
+
+    sm.set_array([])
+    if scale:
+        plt.quiver(X, Y, U[:,0], U[:,1],  color=cm(norm(U_nor)), angles='xy', scale_units='xy', scale=1)  #scale=5*np.max(U), scale_units='inches')
+    else:
+        plt.quiver(X, Y, U[:,0], U[:,1],  color=cm(norm(U_nor)))  #scale=5*np.max(U), scale_units='inches')
+    plt.colorbar(sm)
+    plt.axis('equal')
+
+def plot_newmesh(mesh, U):
+    U = U.reshape(len(mesh.nodes), 2 , order = 'F')
+    U_new = np.zeros((len(mesh.vertices), 2))
+    U_new[mesh.nodes, :] = U
+    verts_new = copy(mesh.vertices)
+    verts_new += U_new
+    U_nor = np.linalg.norm(U_new, axis=1)
+
+    plt.figure('Deformed Mesh')
+    for i in range(len(mesh.omega)):
+        plt.gca().add_patch(plt.Polygon(verts_new[mesh.omega[i,1:]].tolist(), closed=True, fill = False, color = 'black', linewidth = 0.15))
+    plt.tricontourf(verts_new[:,0],verts_new[:,1], mesh.elements[:, 1:], U_nor, 150, interpolation='gaussian', cmap =plt.cm.get_cmap('rainbow'))
+    plt.colorbar()
+
+
+
+
+"""
+*******************************************************************************
+*******************************************************************************
+
+      S H A P E   S P E C I F I C
+     
+*******************************************************************************
+*******************************************************************************
+"""
+
+
+def interpolate(u1, mesh1, mesh2, **kwargs):
+    """
+    linearly interpolate u1 (based on mesh1) onto mesh2
+    """
+    deform = kwargs.get('deform', 0)
+
+    u1[mesh1.boundary] = np.zeros(len(mesh1.boundary))
+    verts2 = mesh2.vertices + deform
+
+    u2 = si.griddata(mesh1.vertices[mesh1.nodes], u1, verts2[mesh2.nodes])
+    u2[mesh2.boundary] = np.zeros(len(mesh2.boundary))
+
+    return u2
+
+
+def plot_shape(mesh, **kwargs):
+    color = kwargs.get('color', 'grey')
+    fill = kwargs.get('fill', True)
+    alpha = kwargs.get('alpha', 0.4)
+    omega_1 = mesh.elements[np.where(mesh.elements[:, 0] == 1)[0]]
+
+    for k in range(len(omega_1)):
+        plt.gca().add_patch(plt.Polygon(mesh.vertices[omega_1[k, 1:]], closed=True, fill = fill, color = color, alpha = alpha))
+        plt.gca().add_patch(plt.Polygon(mesh.vertices[omega_1[k, 1:]], closed=True, fill = False, color ='black', linewidth = 0.3))
+
+
+
+
+def target_function(mesh, source, u_bar, mesh_bar, eps, Norm, gam, num_cores, retriangulate,local,approx, diff_coeff, **kwargs):
+
+    lap_reg = kwargs.get('lap_reg', 0)
+    deform = kwargs.get('deform', 0)
+
+    nu = kwargs.get('nu', 0)
+
+    M = mass_matrix2(mesh, deform = deform)
+
+    # compute u
+    if local:
+        A = Laplace_para(mesh,diff_coeff, num_cores, deform = deform)
+    else:
+        if approx:
+            A = assembly_coupling_approx(mesh, gam,  retriangulate, Norm, num_cores, deform = deform)
+        else:
+            A = assembly_coupling(mesh, gam,  retriangulate, Norm, num_cores, deform = deform)
+
+        if lap_reg > 0:
+            A += lap_reg * Laplace_para(mesh, [1,1], num_cores, deform = deform)
+
+#    if local:
+#        A = Laplace_para(mesh,diff_coeff, num_cores, deform = deform)
+#    else:
+#        if approx:
+#            A = assembly_coupling_approx(mesh, gam,  retriangulate, Norm, num_cores, deform = deform) + lap_reg * Laplace_para(mesh,[1,1], 1, deform = deform)
+#        else:
+#            A = assembly_coupling(mesh, gam, retriangulate, Norm, num_cores, deform = deform) + lap_reg * Laplace_para(mesh, [1,1], 1, deform = deform)
+
+    b = source_term_discon(mesh, source, deform = deform)
+    u = solve(mesh,A,b)
+
+    # interpolate u_bar
+    u_bar = interpolate(u_bar, mesh_bar, mesh, deform = deform)
+
+    return 0.5 * np.dot(u-u_bar, M.dot(u-u_bar)) + nu * j_reg(mesh, deform = deform)
+
+
+def target_function_adj(mesh, source, u_bar, mesh_bar, eps, Norm, gam, num_cores, retriangulate,local,approx, diff_coeff, **kwargs):
+
+    lap_reg = kwargs.get('lap_reg', 0)
+    deform = kwargs.get('deform', 0)
+
+    nu = kwargs.get('nu', 0)
+
+    M = mass_matrix2(mesh, deform = deform)
+
+    # compute u
+    if local:
+        A = Laplace_para(mesh,diff_coeff, num_cores, deform = deform)
+    else:
+        if approx:
+            A = assembly_coupling_approx(mesh, gam,  retriangulate, Norm, num_cores, deform = deform).transpose()
+        else:
+            A = assembly_coupling(mesh, gam,  retriangulate, Norm, num_cores, deform = deform).transpose()
+
+        if lap_reg > 0:
+            A += lap_reg * Laplace_para(mesh, [1,1], num_cores, deform = deform)
+
+    b = source_term_discon(mesh, source, deform = deform)
+    u = solve(mesh,A,b)
+
+    # interpolate u_bar
+    u_bar = interpolate(u_bar, mesh_bar, mesh, deform = deform)
+
+    return 0.5 * np.dot(u-u_bar, M.dot(u-u_bar)) + nu * j_reg(mesh, deform = deform)
+
+
+def target_function_klarified(mesh, source, u_bar, mesh_bar, eps, Norm, gam, num_cores, retriangulate,local,approx, diff_coeff, **kwargs):
+
+    lap_reg = kwargs.get('lap_reg', 0)
+    deform = kwargs.get('deform', 0)
+
+    nu = kwargs.get('nu', 0)
+
+    M = mass_matrix2(mesh, deform = deform)
+
+    # compute u
+    if local:
+        A = Laplace_para(mesh,diff_coeff, num_cores, deform = deform)
+    else:
+
+        A = assemble(mesh, Px, weightsxy, weightsxy, eps , deltaVertices = deform)[0][:,0:mesh.nV_Omega]
+        A = ss.csr_matrix(A)
+        if lap_reg > 0:
+            A += lap_reg * Laplace_para(mesh, [1,1], num_cores, deform = deform)
+
+    b = source_term_discon(mesh, source, deform = deform)
+    u = solve(mesh,A,b)
+
+    # interpolate u_bar
+    u_bar = interpolate(u_bar, mesh_bar, mesh, deform = deform)
+
+    return 0.5 * np.dot(u-u_bar, M.dot(u-u_bar)) + nu * j_reg(mesh, deform = deform)
+
+
+def is_self_intersecting(mesh, **kwargs):
+    """
+    tests if polygon which determines interface is simple closed or not
+    brute-force approach
+
+    0: simple closed
+    1: self-intersecting
+    """
+
+    deform = kwargs.get('deform', 0)
+    verts = mesh.vertices + deform
+    decide = 0
+
+    interface_omega = []
+    for l in range(len(mesh.omega)):
+        T_num = mesh.omega[l,1:].tolist()
+        if bool(set(mesh.shape_interface) & set(T_num)) and len(list(set(mesh.shape_interface) & set(T_num))) ==2 and mesh.omega[l,0]==1:
+            interface_omega += [l]
+
+    for l in interface_omega:
+
+        T_num = mesh.omega[l,1:].tolist()
+        T_interface = list(set(T_num)&set(mesh.shape_interface))
+        xk, xj = verts[T_interface[0]], verts[T_interface[1]]
+        line_1 = [xk, xj]
+
+        for k in interface_omega:
+            if k != l:
+                T_num = mesh.omega[k,1:].tolist()
+                T_interface = list(set(T_num)&set(mesh.shape_interface))
+                xk, xj = verts[T_interface[0]], verts[T_interface[1]]
+                line_2 = [xk, xj]
+
+                if are_intersecting_lines(line_1, line_2):
+                    """ plot """
+    #                plt.figure()
+    #                plt.gca().add_patch(plt.Polygon(line_1, color = 'red'))
+    #                plt.gca().add_patch(plt.Polygon(line_2))
+                    decide = 1
+                    break
+        if decide:
+            break
+
+    return decide
+
+def is_out_of_omega(mesh, **kwargs):
+    """
+
+    """
+
+    deform = kwargs.get('deform', 0)
+    verts = mesh.vertices + deform
+    decide = 0
+
+    tol = 0.01
+
+    for l in range(len(mesh.shape_interface)):
+        point = verts[mesh.shape_interface[l]]
+        if np.max(np.abs(point - 0.5 * np.ones(2))) > 0.5-tol:
+            decide = 1
+            break
+
+    return decide
+
+
+def j_reg(mesh, **kwargs):
+
+    deform = kwargs.get('deform', 0)
+    Length = 0
+    verts = mesh.vertices + deform
+
+    interface_omega = []
+    for l in range(len(mesh.omega)):
+        T_num = mesh.omega[l,1:].tolist()
+        if bool(set(mesh.shape_interface) & set(T_num)) and len(list(set(mesh.shape_interface) & set(T_num))) ==2 and mesh.omega[l,0]==1:
+            interface_omega += [l]
+
+    for l in interface_omega:
+
+        T_num = mesh.omega[l,1:].tolist()
+
+        T_interface = list(set(T_num)&set(mesh.shape_interface))
+
+        xk, xj = verts[T_interface[0]], verts[T_interface[1]]
+
+        """ plot """
+#        plt.gca().add_patch(plt.Polygon([xk,xj]))
+
+        Length += np.linalg.norm(xk - xj)
+
+    return Length
+
+
+def shape_derivative_peri_reg(mesh):
+
+    num_nodes = len(mesh.nodes)
+
+    gradient = np.array([[-1, -1], [1, 0], [0, 1]])
+
+    # find all elements in omega_1 which connect to the interface
+    interface_omega_1 = []
+    for l in range(len(mesh.omega)):
+        T_num = mesh.omega[l,1:].tolist()
+        if bool(set(mesh.shape_interface) & set(T_num)) and len(list(set(mesh.shape_interface) & set(T_num))) ==2 and mesh.omega[l,0]==1:
+            interface_omega_1 += [l]
+
+    # find all elements in omega_1 which connect to the interface
+    interface_omega_2 = []
+    for l in range(len(mesh.omega)):
+        T_num = mesh.omega[l,1:].tolist()
+        if bool(set(mesh.shape_interface) & set(T_num)) and len(list(set(mesh.shape_interface) & set(T_num))) ==2 and mesh.omega[l,0]==2:
+            interface_omega_2 += [l]
+
+
+    dV = np.zeros(2*len(mesh.nodes))
+
+    for counter in range(len(interface_omega_1)):
+
+        l = interface_omega_1[counter]
+
+        T_num = mesh.omega[l,1:].tolist()
+
+        T_interface = list(set(T_num)&set(mesh.shape_interface))
+
+        xk, xj = mesh.vertices[T_interface[0]], mesh.vertices[T_interface[1]]
+        length = np.linalg.norm(xk - xj)
+
+        T = mesh.vertices[T_num]
+
+        Mat = np.array([ T[1] - T[0],T[2] - T[0] ]).transpose()
+        det = float((T[1] - T[0])[0] * (T[2] - T[0])[1] - (T[1] - T[0])[1] * (T[2] - T[0])[0] )
+        iMat = 1./det * np.array([ [Mat[1,1], -Mat[0,1]], [-Mat[1,0], Mat[0,0]]  ])
+
+        grad_trans = iMat.transpose().dot(gradient.transpose()).transpose()
+
+        midpoint = 0.5 * (xk+xj)
+        n1 = np.array([-(xk-xj)[1], (xk-xj)[0]])
+        n2 = -n1
+        bary = 1./3. * (T[0]+T[1]+T[2])
+        if np.linalg.norm(midpoint+n1-bary) > np.linalg.norm(midpoint+n2-bary):
+            normal_vec = n1
+        else:
+            normal_vec = n2
+
+        """ for plot """
+#        plt.plot(bary[0], bary[1], 'bo')
+#        plt.gca().add_patch(plt.Polygon(T, closed=True,  color = 'grey', alpha = 0.2, fill = True, linewidth = 2))
+#        plt.gca().add_patch(plt.Polygon([midpoint, midpoint+normal_vec], closed=True, fill = False, color = 'red', alpha = 1, linewidth = 2))
+
+        for a in [T_num.index(T_interface[aa]) for aa in range(2)]:
+
+            a_nodes = np.where(mesh.nodes == T_num[a])[0][0]
+
+            div_V_x = gradient[a,:].dot(iMat[:,0])#Div_V[a, 0] # = div(psi_a, 0)
+            div_V_y = gradient[a,:].dot(iMat[:,1])#Div_V[a, 1] # = div(0, psi_a)
+
+            # Jacobian of already transformed vector fields
+            jac_V_x = np.vstack((grad_trans[a], np.zeros(2)))  # = Jac(psi_a, 0)
+            jac_V_y = np.vstack((np.zeros(2)  , grad_trans[a]))# = Jac(0, psi_a)
+
+            dV[a_nodes] += length * (div_V_x - normal_vec.dot(jac_V_x.dot(normal_vec)))
+            dV[num_nodes + a_nodes] += length * (div_V_y - normal_vec.dot(jac_V_y.dot(normal_vec)))
+
+    return dV
+
+
+def a_loc(mesh, u, v):
+
+    gradient = np.array([[-1, -1], [1, 0], [0, 1]])
+
+    a_loc = 0
+
+    for l in range(len(mesh.omega)):
+        T_num = mesh.omega[l,1:].tolist()
+        T = mesh.vertices[T_num]
+
+        Mat = np.array([ T[1] - T[0],T[2] - T[0] ]).transpose()
+        det = float((T[1] - T[0])[0] * (T[2] - T[0])[1] - (T[1] - T[0])[1] * (T[2] - T[0])[0] )
+        iMat = 1./det * np.array([ [Mat[1,1], -Mat[0,1]], [-Mat[1,0], Mat[0,0]]  ])
+
+        det = abs(det)
+
+        idx = [np.where(mesh.nodes == j)[0][0] for j in T_num]
+
+        u_vals = u[idx]
+        v_vals = v[idx]
+
+        grad_trans     = iMat.transpose().dot(gradient.transpose()).transpose()
+        gradient_u     = grad_trans.transpose().dot(u_vals)
+        gradient_v     = grad_trans.transpose().dot(v_vals)
+
+        a_loc += 0.5 * det * gradient_u.dot(gradient_v)
+
+    return a_loc
+
+def shape_derivative_laplace(mesh, u, v, u_bar, source, diff_coeff):
+
+    num_nodes = len(mesh.nodes)
+
+    weights = weights2
+    PSI = PSI_2
+
+    gradient = np.array([[-1, -1], [1, 0], [0, 1]])
+
+    dV = np.zeros(2*len(mesh.nodes))
+
+    for l in range(len(mesh.omega)):
+        label_l = mesh.omega[l, 0]
+        T_num = mesh.omega[l,1:].tolist()
+        T = mesh.vertices[T_num]
+
+#        interface = [mesh.nodes.index(mesh.shape_interface)]
+
+        # theoretically only vector fields with support intersecting the interface
+        # have contribution to the shape derivative
+        # in order to reduce numerical noise we only assemble for precisely those
+
+        if 1:#bool(set(mesh.shape_interface) & set(T_num)):#
+
+#            plt.gca().add_patch(plt.Polygon(T, fill = False, closed = True ) )
+
+            Mat = np.array([ T[1] - T[0],T[2] - T[0] ]).transpose()
+            det = float((T[1] - T[0])[0] * (T[2] - T[0])[1] - (T[1] - T[0])[1] * (T[2] - T[0])[0] )
+            iMat = 1./det * np.array([ [Mat[1,1], -Mat[0,1]], [-Mat[1,0], Mat[0,0]]  ])
+#            print mesh.omega[l,0], det
+            det = abs(det)
+
+#            def Phi_T(y):
+#                return np.repeat(T[0][:,np.newaxis], len_P**2, axis=1) +  Mat.dot(y)
+
+            idx = [np.where(mesh.nodes == j)[0][0] for j in T_num]
+
+            # u and u_bar values on three vertices of the current triangle
+            u_vals = u[idx]
+            v_vals = v[idx]
+            u_bar_vals = u_bar[idx]
+
+            # u and u_bar evaluated at the quadrature points P, X_P and Y_P
+            u_vals_P = PSI.transpose().dot(u_vals)     # for single integral
+            v_vals_P   = PSI.transpose().dot(v_vals)   # for single integral
+            u_bar_vals_P = PSI.transpose().dot(u_bar_vals)
+
+            """plot for test if interpolation works"""
+            """interpolated function values > should look like the other plots"""
+    #        P_trans = np.repeat(T[0][:,np.newaxis], len_P, axis=1) +  Mat.dot(P)
+    #        plt.tricontourf(P_trans[0,], P_trans[1,],u_bar_vals_P,100,interpolation='gaussian',cmap =plt.cm.get_cmap('rainbow'), vmin = min(u_bar), vmax = max(u_bar) )
+
+            # note these need to be already transformed gradients M^-T * grad
+            grad_trans     = iMat.transpose().dot(gradient.transpose()).transpose()
+            gradient_u_bar = grad_trans.transpose().dot(u_bar_vals)
+            gradient_u     = grad_trans.transpose().dot(u_vals)
+            gradient_v     = grad_trans.transpose().dot(v_vals)
+
+            # 3x2 array containing transformed divergence values of all basis funcs
+            # for example Div_V[1,2] = div((0, psi_1)), Div_V[2,0] = div((psi_2, 0))
+#            Div_V = div(iMat)
+
+            # constant value of part 1b (constant in V)
+            # note that source f is constant
+            # it is f1 = source[0] on shape which is labeled 1
+            # it is f2 = source[1] on shape which is labeled 2
+            part_1b_const = ((0.5 * (u_vals_P - u_bar_vals_P)**2 - source[mesh.omega[l,0]-1] * v_vals_P) * weights ).sum()
+
+            # per element we have 6 basis functions (3 in each dimension)
+            for a in range(3):
+
+                # given the element and the basis function, a_nodes gives the
+                # component of dV to which element basis function psi contributes to
+                # a_nodes = index for basis function in x-coordinate, i.e., (psi_a, 0)
+                # num_nodes + a_nodes = index for basis function in  y-coordinate, i.e., (0, psi_a)
+                a_nodes = np.where(mesh.nodes == T_num[a])[0][0]
+
+                # contribution of each term coming from basisfunction in each dimension
+                # (x-axis and y-axis)
+                # will be added together and form dV[a_nodes] (=X) and dV[num_nodes + a_nodes] (=Y)
+                X, Y = 0,0
+
+                # divergence from already transformed vector fields
+                div_V_x = gradient[a,:].dot(iMat[:,0])#Div_V[a, 0] # = div(psi_a, 0)
+                div_V_y = gradient[a,:].dot(iMat[:,1])#Div_V[a, 1] # = div(0, psi_a)
+
+                # Jacobian of already transformed vector fields
+                jac_V_x = np.vstack((grad_trans[a], np.zeros(2)))  # = Jac(psi_a, 0)
+                jac_V_y = np.vstack((np.zeros(2)  , grad_trans[a]))# = Jac(0, psi_a)
+
+                # vaules of: (transformed gradient \nabla u_bar)^T (V)
+                # it is a linear combination
+                grad_u_bar_x = gradient_u_bar[0] * PSI[a] # if V = (psi_a, 0)
+                grad_u_bar_y = gradient_u_bar[1] * PSI[a] # if V = (0, psi_a)
+
+                # 1a
+                X += - det * ( ( (u_vals_P - u_bar_vals_P) * grad_u_bar_x ) * weights ).sum()
+                Y += - det * ( ( (u_vals_P - u_bar_vals_P) * grad_u_bar_y ) * weights ).sum()
+
+                # 1b
+                X +=   det * div_V_x * part_1b_const
+                Y +=   det * div_V_y * part_1b_const
+
+                # 2a
+                X += - diff_coeff[label_l-1] * 0.5 * det * gradient_u.dot((jac_V_x + jac_V_x.transpose()).dot(gradient_v))
+                Y += - diff_coeff[label_l-1] * 0.5 * det * gradient_u.dot((jac_V_y + jac_V_y.transpose()).dot(gradient_v))
+
+                # 2b
+                X += diff_coeff[label_l-1] * div_V_x * 0.5 * det * gradient_u.dot(gradient_v)
+                Y += diff_coeff[label_l-1] * div_V_y * 0.5 * det * gradient_u.dot(gradient_v)
+
+#                if T_num[a] in mesh.shape_interface:
+#                    print a_nodes, T_num[a],X,Y
+#                    plt.plot(mesh.verts[a_nodes][0], mesh.verts[a_nodes][1], 'ro')
+                dV[a_nodes] += X
+                dV[num_nodes + a_nodes] += Y
+
+    # incorporate Dirichlet-data
+    # (actually not necessary since we only consider those intersecting with interface)
+    for k in mesh.boundary:
+        dV[k] = 0
+        dV[num_nodes + k] = 0
+
+
+    return dV
+
+
+
+def div_V(mesh):
+
+    num_nodes = len(mesh.nodes)
+    gradient = np.array([[-1, -1], [1, 0], [0, 1]])
+    dV = np.zeros(2*len(mesh.nodes))
+
+    for l in range(len(mesh.omega)):
+
+        T_num = mesh.omega[l,1:].tolist()
+        T = mesh.vertices[T_num]
+        Mat = np.array([ T[1] - T[0],T[2] - T[0] ]).transpose()
+        det = float((T[1] - T[0])[0] * (T[2] - T[0])[1] - (T[1] - T[0])[1] * (T[2] - T[0])[0] )
+        iMat = 1./det * np.array([ [Mat[1,1], -Mat[0,1]], [-Mat[1,0], Mat[0,0]]  ])
+
+        for a in range(3):
+            a_nodes = np.where(mesh.nodes == T_num[a])[0][0]
+            dV[a_nodes] += gradient[a,:].dot(iMat[:,0])
+            dV[num_nodes + a_nodes] +=  gradient[a,:].dot(iMat[:,1])
+
+    return dV
+
+def shape_derivative_laplace_partly_a(mesh, u, v, u_bar, source, diff_coeff):
+    num_nodes = len(mesh.nodes)
+
+    gradient = np.array([[-1, -1], [1, 0], [0, 1]])
+
+    dV = np.zeros(2*len(mesh.nodes))
+
+    for l in range(len(mesh.omega)):
+        label_l = mesh.omega[l, 0]
+
+        T_num = mesh.omega[l,1:].tolist()
+        T = mesh.vertices[T_num]
+
+        Mat = np.array([ T[1] - T[0],T[2] - T[0] ]).transpose()
+        det = float((T[1] - T[0])[0] * (T[2] - T[0])[1] - (T[1] - T[0])[1] * (T[2] - T[0])[0] )
+        iMat = 1./det * np.array([ [Mat[1,1], -Mat[0,1]], [-Mat[1,0], Mat[0,0]]  ])
+        det = abs(det)
+
+        idx = [np.where(mesh.nodes == j)[0][0] for j in T_num]
+
+        u_vals = u[idx]
+        v_vals = v[idx]
+
+        grad_trans     = iMat.transpose().dot(gradient.transpose()).transpose()
+        gradient_u     = grad_trans.transpose().dot(u_vals)
+        gradient_v     = grad_trans.transpose().dot(v_vals)
+
+
+        for a in range(3):
+
+            a_nodes = np.where(mesh.nodes == T_num[a])[0][0]
+
+            X, Y = 0,0
+
+            div_V_x = gradient[a,:].dot(iMat[:,0])#Div_V[a, 0] # = div(psi_a, 0)
+            div_V_y = gradient[a,:].dot(iMat[:,1])#Div_V[a, 1] # = div(0, psi_a)
+
+            X += diff_coeff[label_l-1] * div_V_x * 0.5 * det * gradient_u.dot(gradient_v)
+            Y += diff_coeff[label_l-1] * div_V_y * 0.5 * det * gradient_u.dot(gradient_v)
+
+            dV[a_nodes] += X
+            dV[num_nodes + a_nodes] += Y
+
+
+    for k in mesh.boundary:
+        dV[k] = 0
+        dV[num_nodes + k] = 0
+
+
+    return dV
+
+def shape_derivative_laplace_partly_b(mesh, u, v, u_bar, source, diff_coeff):
+
+    num_nodes = len(mesh.nodes)
+
+    gradient = np.array([[-1, -1], [1, 0], [0, 1]])
+
+    dV = np.zeros(2*len(mesh.nodes))
+
+    for l in range(len(mesh.omega)):
+        label_l = mesh.omega[l, 0]
+        T_num = mesh.omega[l,1:].tolist()
+        T = mesh.vertices[T_num]
+
+        Mat = np.array([ T[1] - T[0],T[2] - T[0] ]).transpose()
+        det = float((T[1] - T[0])[0] * (T[2] - T[0])[1] - (T[1] - T[0])[1] * (T[2] - T[0])[0] )
+        iMat = 1./det * np.array([ [Mat[1,1], -Mat[0,1]], [-Mat[1,0], Mat[0,0]]  ])
+        det = abs(det)
+
+        idx = [np.where(mesh.nodes == j)[0][0] for j in T_num]
+
+        u_vals = u[idx]
+        v_vals = v[idx]
+
+        grad_trans     = iMat.transpose().dot(gradient.transpose()).transpose()
+        gradient_u     = grad_trans.transpose().dot(u_vals)
+        gradient_v     = grad_trans.transpose().dot(v_vals)
+
+        for a in range(3):
+
+            a_nodes = np.where(mesh.nodes == T_num[a])[0][0]
+
+            X, Y = 0,0
+
+            jac_V_x = np.vstack((grad_trans[a], np.zeros(2)))  # = Jac(psi_a, 0)
+            jac_V_y = np.vstack((np.zeros(2)  , grad_trans[a]))# = Jac(0, psi_a)
+
+            X += - diff_coeff[label_l-1] * 0.5 * det * gradient_u.dot((jac_V_x + jac_V_x.transpose()).dot(gradient_v))
+            Y += - diff_coeff[label_l-1] * 0.5 * det * gradient_u.dot((jac_V_y + jac_V_y.transpose()).dot(gradient_v))
+
+            dV[a_nodes] += X
+            dV[num_nodes + a_nodes] += Y
+
+    for k in mesh.boundary:
+        dV[k] = 0
+        dV[num_nodes + k] = 0
+
+    return dV
+
+
+
+def shape_derivative_intersection(mesh, u, v, u_bar, source):
+
+    num_nodes = len(mesh.nodes)
+
+    # for quadrature
+    weights = weights2
+    PSI = PSI_2
+
+    gradient = np.array([[-1, -1], [1, 0], [0, 1]])
+
+    dV = np.zeros(2*len(mesh.nodes))
+
+    for l in range(len(mesh.omega)):
+        T_num = mesh.omega[l,1:].tolist()
+        T = mesh.vertices[T_num]
+
+        if True:#bool(set(interface) & set(T_num)):
+
+            Mat = np.array([ T[1] - T[0],T[2] - T[0] ]).transpose()
+            det = float((T[1] - T[0])[0] * (T[2] - T[0])[1] - (T[1] - T[0])[1] * (T[2] - T[0])[0] )
+            iMat = 1./det * np.array([ [Mat[1,1], -Mat[0,1]], [-Mat[1,0], Mat[0,0]]  ])
+            det = abs(det)
+
+            idx = [np.where(mesh.nodes == j)[0][0] for j in T_num]
+
+            u_vals = u[idx]
+            v_vals = v[idx]
+            u_bar_vals = u_bar[idx]
+
+            u_vals_P = PSI.transpose().dot(u_vals)     # for single integral
+            v_vals_P = PSI.transpose().dot(v_vals)
+            u_bar_vals_P = PSI.transpose().dot(u_bar_vals)
+
+            grad_trans     = iMat.transpose().dot(gradient.transpose()).transpose()
+            gradient_u_bar = grad_trans.transpose().dot(u_bar_vals)
+
+            objective = ((0.5 * (u_vals_P - u_bar_vals_P)**2 ) * weights ).sum()
+
+            for a in range(3):
+
+                a_nodes = np.where(mesh.nodes == T_num[a])[0][0]
+
+                X, Y = 0,0
+
+                div_V_x = gradient[a,:].dot(iMat[:,0])
+                div_V_y = gradient[a,:].dot(iMat[:,1])
+
+                grad_u_bar_x = gradient_u_bar[0] * PSI[a] # if V = (psi_a, 0)
+                grad_u_bar_y = gradient_u_bar[1] * PSI[a] # if V = (0, psi_a)
+
+                # 1
+                X += - det * ( ( (u_vals_P - u_bar_vals_P) * grad_u_bar_x ) * weights ).sum()
+                Y += - det * ( ( (u_vals_P - u_bar_vals_P) * grad_u_bar_y ) * weights ).sum()
+
+#                # 2
+#                X += det * div_V_x * objective
+#                Y += det * div_V_y * objective
+
+                # 3
+                """annihilated???"""
+                X += - det * div_V_x * ((source[mesh.omega[l,0]-1] * v_vals_P) * weights ).sum()
+                Y += - det * div_V_y * ((source[mesh.omega[l,0]-1] * v_vals_P) * weights ).sum()
+
+                dV[a_nodes]             += X
+                dV[num_nodes + a_nodes] += Y
+
+    for k in mesh.boundary:
+        dV[k] = 0
+        dV[num_nodes + k] = 0
+
+    return dV
+
+def shape_derivative_nonlocal_divV_bilin(mesh, retriangulate, Norm, gam, u, v, num_cores):
+
+    num_nodes = len(mesh.nodes)
+    gradient = np.array([[-1, -1], [1, 0], [0, 1]])
+
+    liste = range(len(mesh.omega)) #interface_omega
+    random.shuffle(list(liste))
+    pieces = np.array_split(liste, num_cores)
+
+    # For every pieces compute the whole thing
+    def aux(m):
+        dV = np.zeros(2*len(mesh.nodes))
+        for i in pieces[m]:
+
+            T_i = mesh.omega[i, 1:].tolist()
+            T_i_v = mesh.vertices[T_i]
+
+            label_i = mesh.omega[i, 0]
+            eps_i = gam['eps'+str(label_i)]
+
+            T_i = mesh.omega[i, 1:].tolist()
+            T_i_v = mesh.vertices[T_i]
+            Mat_i = np.array( [T_i_v[1] - T_i_v[0],T_i_v[2] - T_i_v[0] ]).transpose()
+            det_T_i = Mat_i[0,0] * Mat_i[1,1] - Mat_i[1,0] * Mat_i[0,1]
+            iMat_i = 1./det_T_i * np.array([ [Mat_i[1,1], -Mat_i[0,1]], [-Mat_i[1,0], Mat_i[0,0]]  ])
+            det_T_i = abs(det_T_i)
+
+            i_triangles = np.where(np.all(mesh.elements == mesh.omega[i], axis=1))[0][0]
+            hash_i = np.where(norm_dict[Norm]((mesh.bary-np.repeat(mesh.bary[i][:,np.newaxis], len(mesh.bary), axis = 1).transpose()).transpose())<=(eps_i + mesh.diam))[0].tolist()
+
+            idx = [np.where(mesh.nodes == j)[0][0] for j in T_i]
+
+            u_vals = u[idx]
+            v_vals = v[idx]
+
+            u_vals_P = PSI.transpose().dot(u_vals)     # for single integral
+            v_vals_P = PSI.transpose().dot(v_vals)     # for single integral
+
+            for a in range(3):
+                a_nodes = np.where(mesh.nodes == T_i[a])[0][0]
+
+                X_val, Y_val = 0,0
+
+                div_V_x = gradient[a,:].dot(iMat_i[:,0])
+                div_V_y = gradient[a,:].dot(iMat_i[:,1])
+
+                for j in hash_i:
+                    label_j = mesh.elements[j, 0]
+                    gam_ij = gam[str(label_i)+str(label_j)]
+
+                    T_j = mesh.elements[j, 1:].tolist()
+                    T_j_v = mesh.vertices[T_j]
+                    Mat_j = np.array( [T_j_v[1] - T_j_v[0],T_j_v[2] - T_j_v[0] ]).transpose()
+                    det_T_j = Mat_j[0,0] * Mat_j[1,1] - Mat_j[1,0] * Mat_j[0,1]
+
+                    iMat_j = 1./det_T_j * np.array([ [Mat_j[1,1], -Mat_j[0,1]], [-Mat_j[1,0], Mat_j[0,0]]  ])
+                    def iPhi_j(y):
+                        return iMat_j.dot( y - np.repeat(T_j_v[0][:,np.newaxis], n2, axis=1))
+
+
+                    if label_j != 3:
+                        idx_j = [np.where(mesh.nodes == j)[0][0] for j in T_j]
+                        # u values on three vertices of T_j
+                        u_vals_j = u[idx_j]
+
+                    def u_j(x):
+                        return BASIS(x).transpose().dot(u_vals_j)#u_vals_j[0] * basis[0](x) + u_vals_j[1] * basis[1](x) + u_vals_j[1] * basis[1](x)
+
+
+                    def I1(x):
+                        x_trans = (T_i_v[0]+Mat_i.dot(x))
+                        integral_L2, integral_convu = 0., 0.
+
+                        aux = np.repeat(x_trans[:,np.newaxis], n2, axis=1)
+
+                        def inner(tri, gam_ij):
+                            tri = np.array(tri)
+                            Mat_l = np.array( [tri[1] - tri[0],tri[2] - tri[0] ]).transpose()
+                            det_l = abs((tri[1] - tri[0])[0] * (tri[2] - tri[0])[1] - (tri[1] - tri[0])[1] * (tri[2] - tri[0])[0] )
+                            def Phi_l(y):
+                                return np.repeat(tri[0][:,np.newaxis], n2, axis=1) +  Mat_l.dot(y)
+
+                            GAM = det_l * gam_ij(aux, Phi_l(P2)) * weights2
+
+                            if label_j != 3:
+                                return  GAM.sum(), (u_j(iPhi_j(Phi_l(P2))) * GAM ).sum()
+                            else:
+                                return  GAM.sum(), 0.
+
+                        tris = retriangulate(x_trans, T_j_v, Norm, eps_i )
+                        if len(tris) != 0:
+                            for tri in tris:
+                                val_L2, val_convu = inner(tri, gam_ij)
+                                integral_L2    += val_L2
+                                integral_convu += val_convu
+
+                        return np.array([integral_L2, integral_convu])
+
+                    I = np.array(list(map(I1, P.transpose()))).transpose()
+
+                    ### weighted L2 product part ###
+                    L2 = det_T_i * (u_vals_P * v_vals_P * I[0] * weights).sum()
+                    X_val += div_V_x * L2
+                    Y_val += div_V_y * L2
+
+                    ### convolution part ###
+                    if label_j != 3:
+                        convu = det_T_i * (v_vals_P * I[1] * weights).sum()
+                        X_val += - div_V_x * convu
+                        Y_val += - div_V_y * convu
+
+                dV[a_nodes] += 2 *  X_val
+                dV[num_nodes + a_nodes] += 2 * Y_val
+
+        return dV
+
+    p = Pool(num_cores)
+    dVs = p.map(aux, range(num_cores))
+
+    dV = np.zeros(2*len(mesh.nodes))
+    for i in range(num_cores):
+        dV += dVs[i]
+
+    del dVs
+    p.close()
+    p.join()
+    p.clear()
+
+    for k in mesh.boundary:
+        dV[k] = 0
+        dV[num_nodes + k] = 0
+
+    return dV
+
+def shape_derivative_nonlocal_divV_bilin_approx(mesh, gam, u, v, num_cores):
+    gradient = np.array([[-1, -1], [1, 0], [0, 1]])
+    num_nodes = len(mesh.nodes)
+
+    liste = range(len(mesh.omega))#mesh.omega#interface_omega
+    random.shuffle(list(liste))
+    pieces = np.array_split(liste, num_cores)
+
+    # For every pieces compute the whole matrix
+    def aux(m):
+        dV = np.zeros(2*len(mesh.nodes))
+
+        for i in pieces[m]:
+            T_i = mesh.omega[i, 1:].tolist()
+            T_i_v = mesh.vertices[T_i]
+            label_i = mesh.omega[i, 0]
+
+            T_i = mesh.omega[i, 1:].tolist()
+            T_i_v = mesh.vertices[T_i]
+            Mat_i = np.array( [T_i_v[1] - T_i_v[0],T_i_v[2] - T_i_v[0] ]).transpose()
+            det_T_i = Mat_i[0,0] * Mat_i[1,1] - Mat_i[1,0] * Mat_i[0,1]
+            iMat_i = 1./det_T_i * np.array([ [Mat_i[1,1], -Mat_i[0,1]], [-Mat_i[1,0], Mat_i[0,0]]  ])
+            det_T_i = abs(det_T_i)
+
+            def Phi_i(y):
+                return  Mat_i.dot(y)  + np.repeat(T_i_v[0][:,np.newaxis], n**2, axis=1)
+
+            i_triangles = np.where(np.all(mesh.elements == mesh.omega[i], axis=1))[0][0]
+            hash_i = np.where(norm_dict[Norm]((mesh.bary-np.repeat(mesh.bary[i][:,np.newaxis], len(mesh.bary), axis = 1).transpose()).transpose())<=(eps_i + mesh.diam))[0].tolist()
+
+            idx = [np.where(mesh.nodes == j)[0][0] for j in T_i]
+
+            # u and u_bar values on three vertices of the current triangle
+            u_vals = u[idx]
+            v_vals = v[idx]
+
+            for a in range(3):
+                a_nodes = np.where(mesh.nodes == T_i[a])[0][0]
+
+                X_val, Y_val = 0,0
+
+                div_V_x = gradient[a,:].dot(iMat_i[:,0])
+                div_V_y = gradient[a,:].dot(iMat_i[:,1])
+
+                for j in hash_i:
+                    label_j = mesh.elements[j, 0]
+                    gam_ij = gam[str(label_i)+str(label_j)]
+
+                    T_j = mesh.elements[j, 1:].tolist()
+                    T_j_v = mesh.vertices[T_j]
+                    Mat_j = np.array( [T_j_v[1] - T_j_v[0],T_j_v[2] - T_j_v[0] ]).transpose()
+                    det_T_j = abs(Mat_j[0,0] * Mat_j[1,1] - Mat_j[1,0] * Mat_j[0,1])
+                    def Phi_j(y):
+                        return Mat_j.dot(y) + np.repeat(T_j_v[0][:,np.newaxis], n**2, axis=1)
+
+                    if label_j != 3:
+                        idx_j = [np.where(mesh.nodes == j)[0][0] for j in T_j]
+
+                        # u values at the vertices of T_j
+                        u_vals_j = u[idx_j]
+
+                    u_vals_X_P   = PSI_X.transpose().dot(u_vals) # for double integral
+                    v_vals_X_P   = PSI_X.transpose().dot(v_vals) # for double integral
+                    u_vals_Y_P_j = PSI_Y.transpose().dot(u_vals_j) # for double integral
+
+                    ### weighted L2 product part ###
+                    L2 = det_T_i * det_T_j * ( u_vals_X_P *  v_vals_X_P  * W * gam_ij(Phi_i(X),Phi_j(Y))).sum()
+                    X_val += div_V_x * L2
+                    Y_val += div_V_y * L2
+
+                    ### convolution part ###
+                    if label_j != 3:
+                        convu = det_T_i * det_T_j * ( v_vals_X_P *  u_vals_Y_P_j  * W * gam_ij(Phi_i(X),Phi_j(Y))).sum()
+                        X_val += - div_V_x * convu
+                        Y_val += - div_V_y * convu
+
+                dV[a_nodes] += X_val
+                dV[num_nodes + a_nodes] += Y_val
+
+        return 2 * dV
+
+    p = Pool(num_cores)
+    dVs = p.map(aux, range(num_cores))
+
+    dV = np.zeros(2*len(mesh.nodes))
+    for i in range(num_cores):
+        dV += dVs[i]
+
+    del dVs
+    p.close()
+    p.join()
+    p.clear()
+
+    for k in mesh.boundary:
+        dV[k] = 0
+        dV[num_nodes + k] = 0
+
+    return dV
+
+
+def shape_derivative_nonlocal_divV_bilin_approx_2(mesh, gam, u, v, num_cores):
+    """
+    bilinear form + (div V(x) + div V(y))
+    """
+    gradient = np.array([[-1, -1], [1, 0], [0, 1]])
+    num_nodes = len(mesh.nodes)
+
+    liste = range(len(mesh.omega))#mesh.omega#interface_omega
+    random.shuffle(list(liste))
+    pieces = np.array_split(liste, num_cores)
+
+    # For every pieces compute the whole matrix
+    def aux(m):
+        dV = np.zeros(2*len(mesh.nodes))
+        
+        for i in pieces[m]:
+            T_i = mesh.omega[i, 1:].tolist()
+            T_i_v = mesh.vertices[T_i]
+            label_i = mesh.omega[i, 0]
+    
+            T_i = mesh.omega[i, 1:].tolist()
+            T_i_v = mesh.vertices[T_i]
+            Mat_i = np.array( [T_i_v[1] - T_i_v[0],T_i_v[2] - T_i_v[0] ]).transpose()
+            det_T_i = Mat_i[0,0] * Mat_i[1,1] - Mat_i[1,0] * Mat_i[0,1] 
+            iMat_i = 1./det_T_i * np.array([ [Mat_i[1,1], -Mat_i[0,1]], [-Mat_i[1,0], Mat_i[0,0]]  ])
+            det_T_i = abs(det_T_i)            
+    
+            def Phi_i(y):
+                return  Mat_i.dot(y)  + np.repeat(T_i_v[0][:,np.newaxis], n**2, axis=1)
+    
+            i_triangles = np.where(np.all(mesh.elements == mesh.omega[i], axis=1))[0][0]
+            hash_i = np.where(norm_dict[Norm]((mesh.bary-np.repeat(mesh.bary[i][:,np.newaxis], len(mesh.bary), axis = 1).transpose()).transpose())<=(eps_i + mesh.diam))[0].tolist()
+    
+            idx = [np.where(mesh.nodes == j)[0][0] for j in T_i]
+            
+            # u and u_bar values on three vertices of the current triangle
+            u_vals = u[idx]
+            v_vals = v[idx]
+
+            for a in range(3):
+                a_nodes = np.where(mesh.nodes == T_i[a])[0][0] 
+
+                X_val, Y_val = 0,0
+
+                div_V_x = gradient[a,:].dot(iMat_i[:,0])
+                div_V_y = gradient[a,:].dot(iMat_i[:,1])
+
+                for j in hash_i:
+                    label_j = mesh.elements[j, 0]
+                    gam_ij = gam[str(label_i)+str(label_j)]
+                    
+                    T_j = mesh.elements[j, 1:].tolist()
+                    T_j_v = mesh.vertices[T_j]
+                    Mat_j = np.array( [T_j_v[1] - T_j_v[0],T_j_v[2] - T_j_v[0] ]).transpose()    
+                    det_T_j = Mat_j[0,0] * Mat_j[1,1] - Mat_j[1,0] * Mat_j[0,1]
+                    iMat_j = 1./det_T_j * np.array([ [Mat_j[1,1], -Mat_j[0,1]], [-Mat_j[1,0], Mat_j[0,0]]  ])
+                    det_T_j = abs(det_T_j)
+                    def Phi_j(y):
+                        return Mat_j.dot(y) + np.repeat(T_j_v[0][:,np.newaxis], n**2, axis=1) 
+    
+                    if label_j != 3:
+                        idx_j = [np.where(mesh.nodes == j)[0][0] for j in T_j]
+                        
+                        # u values at the vertices of T_j
+                        u_vals_j = u[idx_j]
+                    
+                    u_vals_X_P   = PSI_X.transpose().dot(u_vals) # for double integral                    
+                    v_vals_X_P   = PSI_X.transpose().dot(v_vals) # for double integral
+                    u_vals_Y_P_j = PSI_Y.transpose().dot(u_vals_j) # for double integral
+                    
+                    # add div V(y) if \neq 0
+                    if T_i[a] in T_j:
+                        b = T_j.index(T_i[a])
+                        div_V_x += gradient[b,:].dot(iMat_j[:,0])
+                        div_V_y += gradient[b,:].dot(iMat_j[:,1])
+
+                    ### weighted L2 product part ###
+                    L2 = det_T_i * det_T_j * ( u_vals_X_P *  v_vals_X_P  * W * gam_ij(Phi_i(X),Phi_j(Y))).sum()
+                    X_val += div_V_x * L2
+                    Y_val += div_V_y * L2
+        
+                    ### convolution part ###
+                    if label_j != 3:
+                        convu = det_T_i * det_T_j * ( v_vals_X_P *  u_vals_Y_P_j  * W * gam_ij(Phi_i(X),Phi_j(Y))).sum()
+                        X_val += - div_V_x * convu
+                        Y_val += - div_V_y * convu
+
+                dV[a_nodes] += X_val
+                dV[num_nodes + a_nodes] += Y_val
+         
+        return 2 * dV
+     
+    p = Pool(num_cores)           
+    dVs = p.map(aux, range(num_cores))
+    
+    dV = np.zeros(2*len(mesh.nodes))
+    for i in range(num_cores):
+        dV += dVs[i]
+        
+    del dVs
+    p.close()
+    p.join()
+    p.clear()
+
+    for k in mesh.boundary:
+        dV[k] = 0
+        dV[num_nodes + k] = 0
+
+    return dV   
+
+
+
+
+
+
+
+
+
+
+
+
+            
+#=============================================================================#
+#=============================================================================#
+"""-------------------------------------------------------------------------"""
+"""                   TEST ASSEMBLY                           """
+"""-------------------------------------------------------------------------"""
+test_ball_volume =0
+if test_ball_volume:
+
+    h, delta, Norm, num_cores = 0.025, 0.2, 'L2', 8
+    mesh, mesh_data = prepare_mesh_reg(h, delta, Norm, num_cores)
+
+    ##### GMSH FILE adaption with correct interaction horizon for outer boundary
+    # import os
+    # fil_target = 'circle'
+    # textfile = open('' + fil_target + '.geo', 'r')
+    # data = textfile.readlines()
+    #
+    # tmpfile = open('test.txt', 'w+')
+    # tmpfile.write('delta = ' + str(delta) + ';\n')
+    #
+    # for line in data[1:]:
+    #     tmpfile.write(line)
+    #
+    # tmpfile.close()
+    #
+    # os.system('rm ' + fil_target + '.geo')
+    # current_path = os.path.dirname(os.path.abspath(__file__))
+    # os.system('mv ' + current_path + '/test.txt ' + current_path + '/' + fil_target + '.geo')
+    # ##### GMSH FILE adation END #####
+    #
+    # os.system('gmsh ' + fil_target + '.geo -2 -clscale ' + str(h) + ' -o ' + fil_target + '.msh')
+    # verts, lines, triangles =  read_mesh('' + fil_target + '.msh')
+    # mesh, mesh_data_target = prepare_mesh(verts, lines, triangles, delta, Norm)
+    ##### GMSH FILE
+
+    i = int(len(mesh.verts) * 1.5) // 2
+    # a, b = 0, 2
+    # print(mesh.triangles)
+    T_i = mesh.triangles[i, 1:].tolist()
+    T_i = mesh.verts[T_i]
+    x_i = T_i[0]#0.5*(T_i[0]+T_i[1])
+    plt.plot(x_i[0], x_i[1], 'ro')
+
+    hash_i = np.where(norm_dict['L2']((mesh.bary-np.repeat(mesh.bary[i][:,np.newaxis], len(mesh.bary), axis = 1).transpose()).transpose()) < delta+mesh.diam)[0].tolist()
+    ball_vol = 0
+    for j in hash_i:
+        T_j = mesh.triangles[j, 1:].tolist()
+        T_j = mesh.verts[T_j]
+        plt.gca().add_patch(plt.Polygon(T_j, closed=True, fill=False, color='black'))
+
+        # tris = retriangulate_dict[ball](x_i, T_j,'', delta)
+        # caps = intersection_exactl2_capsonly(x_i, T_j, delta)
+        tris, caps = intersection_l2_exactcaps(x_i, T_j, delta)
+        for T_i_v in tris:
+            T_i_v = np.array(T_i_v)
+            Mat_i = np.array([T_i_v[1] - T_i_v[0], T_i_v[2] - T_i_v[0]]).transpose()
+            det_T_i = Mat_i[0, 0] * Mat_i[1, 1] - Mat_i[1, 0] * Mat_i[0, 1]
+            plt.gca().add_patch(plt.Polygon(T_i_v , closed=True, fill=True, color='red', alpha =0.5))
+            plt.gca().add_patch(plt.Polygon(T_i_v, closed=True, fill=False, color='black'))
+            ball_vol += 0.5 * abs(det_T_i)
+        if len(caps)!=0:
+            for cap in caps:
+                centroid = cap[0]
+                plt.plot(centroid[0], centroid[1], 'bo')
+                ball_vol += cap[1]
+    plt.gca().add_patch(plt.Polygon(T_i, closed=True, fill=True, color='yellow', alpha = 0.3))
+    print(ball_vol, np.pi*delta**2)
+    plt.axis('equal')
+    plt.show()
+
+test_assembly=0
+if test_assembly:
+    plot = 1
+    
+    h, delta, Norm, num_cores = 0.0125, 0.1, 'L2', 1
+    mesh, mesh_data = prepare_mesh_reg(h, delta, Norm, num_cores)
+    ball = 'exact_L2'
+
+    i, j = int(len(mesh.verts)*1.5 )/2, 71
+    a, b = 0,2
+      
+    label_i = mesh.triangles[i, 0]
+    eps_i = delta
+    
+    T_i = mesh.triangles[i, 1:].tolist()
+    T_i_v = mesh.verts[T_i]
+    if plot:
+        fig, ax = plt.subplots()
+        plt.gca().add_patch(plt.Polygon(T_i_v , closed=True, fill = True, color = 'yellow'))
+    
+    #for cc in range(3):
+    #    circle1 = plt.Circle(tuple(T_i_v[cc]), delta, color='r', fill = False, linewidth = 3)
+    #    ax.add_artist(circle1)
+    #circle1 = plt.Circle(tuple(mesh.bary[i]), delta, color='b', fill = False, linewidth = 3)
+    #ax.add_artist(circle1)
+    #plt.plot(mesh.bary[i][0], mesh.bary[i][1], 'bo')
+    
+    Mat_i = np.array( [T_i_v[1] - T_i_v[0],T_i_v[2] - T_i_v[0] ]).transpose()
+    det_T_i = Mat_i[0,0] * Mat_i[1,1] - Mat_i[1,0] * Mat_i[0,1] 
+    def Phi_i(y):
+        return np.repeat(T_i_v[0][:,np.newaxis], n**2, axis=1) +  Mat_i.dot(y)
+    iMat_i = 1./det_T_i * np.array([ [Mat_i[1,1], -Mat_i[0,1]], [-Mat_i[1,0], Mat_i[0,0]]  ])
+    def iPhi_i(y):
+        return iMat_i.dot( y - np.repeat(T_i_v[0][:,np.newaxis], n**2, axis=1))
+    def iPhi_i2(y):
+        return iMat_i.dot( y - np.repeat(T_i_v[0][:,np.newaxis], n, axis=1))
+    def iPhi_i0(y):
+        return iMat_i.dot( y - T_i_v[0] )
+    i_triangles = i
+    hash_i = mesh.hash_table_bary[i_triangles]
+
+    overall =0
+    hash_i = np.where(norm_dict['L2']((mesh.bary-np.repeat(mesh.bary[i][:,np.newaxis], len(mesh.bary), axis = 1).transpose()).transpose()) < eps_i)[0].tolist()     
+
+    for j in hash_i:
+        
+        
+        
+        label_j = mesh.triangles[j, 0]
+        T_j = mesh.triangles[j, 1:].tolist()
+        T_j_v = mesh.verts[T_j]
+        
+
+        
+        if plot:
+            plt.gca().add_patch(plt.Polygon(T_j_v , closed=True, fill = True, color = 'orange', alpha = 0.25))
+#            ax.annotate(str(j),mesh.bary[j], size = 7)
+        
+        """plot barycenter of inner triangle"""
+#        plt.plot(mesh.bary[j][0], mesh.bary[j][1], 'go')
+#        circle1 = plt.Circle(tuple(mesh.bary[j]), delta, color='g', fill = False, linewidth = 3)
+#        ax.add_artist(circle1)
+
+        Mat_j = np.array( [T_j_v[1] - T_j_v[0],T_j_v[2] - T_j_v[0] ]).transpose()        
+        det_T_j = Mat_j[0,0] * Mat_j[1,1] - Mat_j[1,0] * Mat_j[0,1] 
+                            
+#        if np.linalg.norm(mesh.bary[i_triangles]-mesh.bary[j]) < eps_i - mesh.diam:
+#            # no subdivision or outer integral treatment needed
+#            def Phi_j(y):
+#                return np.repeat(T_j_v[0][:,np.newaxis], n**2, axis=1) +  Mat_j.dot(y)
+#                
+#            if plot:
+#                plt.gca().add_patch(plt.Polygon(T_j_v , closed=True, fill = True, alpha = 0.7))
+#                plt.gca().add_patch(plt.Polygon(T_j_v , closed=True, fill = False)) 
+#            
+#            overall += det_T_j  
+#
+#
+#        else:
+#            tris = retriangulate_dict[ball](mesh.bary[j], T_i_v, norm_dict[Norm], eps_i )
+#            
+#            for tri in tris:
+#                tri = np.array(tri)
+#                
+#                plt.gca().add_patch(plt.Polygon(tri , closed=True, fill = True, alpha = 0.3))
+#                plt.gca().add_patch(plt.Polygon(tri , closed=True, fill = False))                 
+#                
+#                Mat_l = np.array( [tri[1] - tri[0],tri[2] - tri[0] ]).transpose()
+#                det_l = abs((tri[1] - tri[0])[0] * (tri[2] - tri[0])[1] - (tri[1] - tri[0])[1] * (tri[2] - tri[0])[0])
+#                def Phi_l(y):
+#                    return np.repeat(tri[0][:,np.newaxis], n, axis=1) +  Mat_l.dot(y)
+#                def Phi_l0(y):
+#                    return tri[0] +  Mat_l.dot(y)
+
+#                print iPhi_i2(Phi_l(P))
+#                print 
+#                print P
+#                plt.gca().add_patch(plt.Polygon(T_ref , closed=True, fill = True, alpha = 0.3))
+#                plt.gca().add_patch(plt.Polygon(T_ref , closed=True, fill = False))   
+#                plt.gca().add_patch(plt.Polygon([iPhi_i0(tri[i]) for i in range(3)] , closed=True, fill = True, alpha = 0.3))
+#                plt.gca().add_patch(plt.Polygon([iPhi_i0(tri[i]) for i in range(3)] , closed=True, fill = False))                   
+#                for i in range(n):
+#                    x = iPhi_i2(Phi_l(P))[:,i]
+#                    plt.plot(x[0], x[1], 'ro')
+#                           if label_j != labels_domains[-1]:
+#                       L[kk, T_j[b]] += -abs(det_l) * abs(det_T_j) * ( basis[a](iPhi_i(Phi_l(X))) *  PSI_Y[b]  * W * gam_j(Phi_l(X),Phi_j(Y))).sum()
+#                       L[kk, T_i[b]] += abs(det_l) * abs(det_T_j) * ( basis[a](iPhi_i(Phi_l(X))) *  basis[b](iPhi_i(Phi_l(X)))  * W * gam_j(Phi_l(X),Phi_j(Y))).sum()#det_T_i * (PSI_P[a] * PSI_P[b] * I[3] * weights).sum()
+
+
+#            iMat_j = 1./det_T_j * np.array([ [Mat_j[1,1], -Mat_j[0,1]], [-Mat_j[1,0], Mat_j[0,0]]  ])
+#            def iPhi_j(y):
+#                return iMat_j.dot( y - np.repeat(T_j_v[0][:,np.newaxis], n2, axis=1))
+#            #--------------------------------------------------------------------------
+#        
+#            def I1(x):
+#                x_trans = (T_i_v[0]+Mat_i.dot(x))
+#                integral = 0
+#                aux = np.repeat(x_trans[:,np.newaxis], n2, axis=1)
+#                aux2 = np.repeat(x[:,np.newaxis], n2, axis=1)
+#                
+#                if plot:
+#                    plt.plot(x_trans[0], x_trans[1], 'ro')
+#                    circle1 = plt.Circle(tuple(x_trans), delta, color='b', fill = False, linewidth = 1)
+#                    ax.add_artist(circle1)
+#    
+#                def inner(tri, gam_j):
+#                    tri = np.array(tri)
+#                    Mat_l = np.array( [tri[1] - tri[0],tri[2] - tri[0] ]).transpose()
+#                    det_l = abs((tri[1] - tri[0])[0] * (tri[2] - tri[0])[1] - (tri[1] - tri[0])[1] * (tri[2] - tri[0])[0] )
+#                    def Phi_l(y):
+#                        return np.repeat(tri[0][:,np.newaxis], n2, axis=1) +  Mat_l.dot(y)
+#                        
+#                    
+#                    
+#                    return det_l #* (  weights2).sum() #det_l * ((basis[b](aux2) -  basis[b](iPhi_j(Phi_l(P2))) )* weights2).sum() 
+#    
+#                tris = retriangulate_dict[ball](x_trans, T_j_v, norm_dict[Norm], eps_i )
+#                if len(tris) != 0:
+#                    for tri in tris:     
+#                        
+#                        integral += inner(tri,1)
+#                        """plot for testing below"""
+#                        if plot:
+#                            plt.gca().add_patch(plt.Polygon(tri , closed=True, fill = True, alpha = 0.3))
+#                            plt.gca().add_patch(plt.Polygon(tri , closed=True, fill = False)) 
+#            
+#                return integral
+#        
+#        
+#            I = np.array(map(I1, P.transpose())).transpose()
+#
+#            overall +=  I[0]
+#    
+#    print np.abs(0.5*overall-np.pi*delta**2)
+
+
+#            print 'standard', det_T_i * (PSI_P[a] * I * weights).sum()
+            
+    #--------------------------------------------------------------------------
+    #        def I1(x):
+    #            x_trans = (T_i_v[0]+Mat_i.dot(x))
+    #            integral  = 0.
+    #            aux = np.repeat(x_trans[:,np.newaxis], n2, axis=1)
+    #            aux2 = np.repeat(x[:,np.newaxis], n2, axis=1)
+    ##            plt.plot(x_trans[0], x_trans[1], 'rx')
+    #                    
+    #            def inner(tri, gam_j):
+    #                tri = np.array(tri)
+    #                Mat_l = np.array( [tri[1] - tri[0],tri[2] - tri[0] ]).transpose()
+    #                det_l = abs((tri[1] - tri[0])[0] * (tri[2] - tri[0])[1] - (tri[1] - tri[0])[1] * (tri[2] - tri[0])[0] )
+    #                def Phi_l(y):
+    #                    return np.repeat(tri[0][:,np.newaxis], n2, axis=1) +  Mat_l.dot(y)
+    #    
+    #                return det_l * (basis[a](aux2) * (basis[b](aux2) -  basis[b](iPhi_j(Phi_l(P2))) )* weights2).sum() 
+    #    
+    #    
+    #            tris = retriangulate_dict[ball](x_trans, T_j_v, norm_dict[Norm], eps_i )
+    #    
+    #            
+    #            if len(tris) != 0:
+    #                for tri in tris:     
+    #                    integral += inner(tri, 1)
+    #                    
+    #    
+    #                    """plot for testing below"""
+    ##                    plt.gca().add_patch(plt.Polygon(tri , closed=True, fill = True))
+    ##                    plt.gca().add_patch(plt.Polygon(tri , closed=True, fill = False)) 
+    #    
+    #    
+    #    
+    #            return integral
+    #    
+    #        I = map(I1, P.transpose())
+    #        
+    #        val = det_T_i * tri_adapt(I1, T_ref, tol2_Radon_get =0.01, plot = 1)
+    #        
+    #        print np.abs(val- det_T_i *(I*weights).sum())/np.abs(val)
+    #        print 'adapt', val
+    #        print 'nonadapt', det_T_i *(I*weights).sum()
+            
+    #        def I1(x):
+    #            x_trans = (T_i_v[0]+Mat_i.dot(x))
+    #            integral, integral0, integral1, integral2 = 0., 0., 0., 0.
+    #            aux = np.repeat(x_trans[:,np.newaxis], n2, axis=1)
+    #                    
+    #            def inner(tri, gam_j):
+    #                tri = np.array(tri)
+    #                Mat_l = np.array( [tri[1] - tri[0],tri[2] - tri[0] ]).transpose()
+    #                det_l = abs((tri[1] - tri[0])[0] * (tri[2] - tri[0])[1] - (tri[1] - tri[0])[1] * (tri[2] - tri[0])[0] )
+    #                def Phi_l(y):
+    #                    return np.repeat(tri[0][:,np.newaxis], n2, axis=1) +  Mat_l.dot(y)
+    #                    
+    #                GAM = det_l   * weights2   
+    #
+    #                return  GAM.sum(), (basis[0](iPhi_j(Phi_l(P2))) * GAM ).sum(), (basis[1](iPhi_j(Phi_l(P2))) * GAM ).sum()  , (basis[2](iPhi_j(Phi_l(P2))) * GAM ).sum()  
+    #
+    #
+    #            tris = retriangulate_dict[ball](x_trans, T_j_v, norm_dict[Norm], eps_i )
+    #
+    #            if len(tris) != 0:
+    #                for tri in tris:     
+    #                    v, v0, v1, v2 = inner(tri, 1)
+    #                    integral  += v
+    #                    integral0 += v0
+    #                    integral1 += v1
+    #                    integral2 += v2
+    #                    
+    #                    """plot for testing below"""
+    ##                    plt.gca().add_patch(plt.Polygon(tri , closed=True, fill = True))
+    ##                    plt.gca().add_patch(plt.Polygon(tri , closed=True, fill = False)) 
+    #        
+    #            return np.array([integral0, integral1, integral2, integral])
+    #
+    #        I = np.array(map(I1, P.transpose())).transpose()
+    #
+    #        print 'standard old', det_T_i * (PSI_P[a] * ( PSI_P[b]* I[3] - I[b] )* weights).sum()
+    #
+    #-------------------------------
+    if plot:
+                
+        for ii in mesh.triangles[:,1:]:
+            plt.gca().add_patch(plt.Polygon(mesh.verts[ii], closed=True, fill = False , alpha  = 0.25)) 
+    #        for ii in mesh.omega[:,1:]:
+    #            plt.gca().add_patch(plt.Polygon(mesh.verts[ii], closed=True, fill = True , color = 'gray',alpha  = 0.05)) 
+        ax.axis('equal')     
+           
+        #
+        #plt.figure('I')
+        #plt.gca().add_patch(plt.Polygon(T_ref , closed=True, fill = False))  
+        #for p in P.transpose():
+        #    plt.plot(p[0], p[1], 'rx')
+        #plt.tricontourf(P[0,:],P[1,:],I,100,interpolation='nearest',cmap =plt.cm.get_cmap('rainbow')) # choose 20 contour levels, just to show how good its interpolation is
+        #plt.colorbar()
+        #plt.axis('equal')
+           
+#    plt.gca().add_patch(plt.Polygon(T_i_v , closed=True, fill = True, color = 'yellow'))
+    
Index: .idea/.gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/.gitignore	(date 1595918134562)
+++ .idea/.gitignore	(date 1595918134562)
@@ -0,0 +1,3 @@
+# Default ignored files
+/shelf/
+/workspace.xml
Index: .idea/inspectionProfiles/profiles_settings.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/inspectionProfiles/profiles_settings.xml	(date 1595918134482)
+++ .idea/inspectionProfiles/profiles_settings.xml	(date 1595918134482)
@@ -0,0 +1,6 @@
+<component name="InspectionProjectProfileManager">
+  <settings>
+    <option name="USE_PROJECT_PROFILE" value="false" />
+    <version value="1.0" />
+  </settings>
+</component>
\ No newline at end of file
Index: .idea/modules.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/modules.xml	(date 1595932287810)
+++ .idea/modules.xml	(date 1595932287810)
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="ProjectModuleManager">
+    <modules>
+      <module fileurl="file://$PROJECT_DIR$/.idea/DomainDecomposition.iml" filepath="$PROJECT_DIR$/.idea/DomainDecomposition.iml" />
+    </modules>
+  </component>
+</project>
\ No newline at end of file
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/misc.xml	(date 1595918134458)
+++ .idea/misc.xml	(date 1595918134458)
@@ -0,0 +1,4 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="ProjectRootManager" version="2" project-jdk-name="Python 3.6" project-jdk-type="Python SDK" />
+</project>
\ No newline at end of file
Index: .idea/vcs.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/vcs.xml	(date 1595918134454)
+++ .idea/vcs.xml	(date 1595918134454)
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="VcsDirectoryMappings">
+    <mapping directory="$PROJECT_DIR$/../.." vcs="Git" />
+  </component>
+</project>
\ No newline at end of file
Index: .idea/DomainDecomposition.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/DomainDecomposition.iml	(date 1595932287802)
+++ .idea/DomainDecomposition.iml	(date 1595932287802)
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<module type="PYTHON_MODULE" version="4">
+  <component name="NewModuleRootManager">
+    <content url="file://$MODULE_DIR$" />
+    <orderEntry type="inheritedJdk" />
+    <orderEntry type="sourceFolder" forTests="false" />
+  </component>
+</module>
\ No newline at end of file
Index: test_gmsh_DD.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- test_gmsh_DD.py	(date 1595918295803)
+++ test_gmsh_DD.py	(date 1595918295803)
@@ -0,0 +1,185 @@
+import numpy as np
+import os
+import bib3 as bib
+import matplotlib.pyplot as plt
+# import MESH_nonreg
+
+geofile = "DD_simple"
+
+element_size = 0.05
+delta = 0.1
+
+# ##### GMSH FILE adaption with correct interaction horizon for outer boundary
+textfile = open('mesh/'+geofile+'.geo', 'r')
+data = textfile.readlines()
+
+tmpfile = open('mesh/test.txt', 'w+')
+tmpfile.write('delta = ' + str(delta) + ';\n')
+
+for line in data[1:]:
+    tmpfile.write(line)
+
+tmpfile.close()
+
+os.system('rm mesh/'+geofile+'.geo')
+current_path = os.path.dirname(os.path.abspath(__file__))
+os.system('mv '+current_path+'/mesh/test.txt ' + current_path +'/mesh/'+geofile+'.geo')
+# ##### GMSH FILE adation END #####
+
+
+os.system('gmsh -v 0 mesh/'+geofile+'.geo -2 -clscale '+str(element_size)+' -o mesh/'+geofile+'.msh' )
+verts, lines, triangles = bib.read_mesh('mesh/'+geofile+'.msh')
+triangles = triangles[triangles[:,0].argsort()]
+
+labels_domains = np.sort(np.unique(triangles[:,0]))
+
+verts = verts[:,0:2]
+
+
+
+
+# sort verts so that vertices in Omega_I are at the end
+aux = np.linalg.norm(verts - np.ones(2) * 0.5, axis=1, ord=np.inf)
+sort_indices = np.argsort(aux)
+verts = verts[sort_indices]
+sort_indices_inv = np.arange(len(sort_indices))[np.argsort(sort_indices)]
+def f(n):
+    return sort_indices_inv[n]
+triangles[:,1:] = f(triangles[:,1:])
+lines[:,1:] = f(lines[:,1:])
+#------------------------------------------------------------------------
+
+
+
+# extract subdomains and interfaces
+# omega1 = triangles[np.where(triangles[:, 0] == labels_domains[0])]
+# nodes1 = list(np.unique(omega1[:, 1:4]))
+# omega2 = triangles[np.where(triangles[:, 0] == labels_domains[1])]
+# nodes2 = list(np.unique(omega2[:, 1:4]))
+# omega_I = triangles[np.where(triangles[:, 0] == labels_domains[2])]
+# nodes_I = list(np.unique(omega_I[:, 1:4]))
+# interface = np.unique(lines[np.where(lines[:,0]==12)][:,1:]).tolist()
+# boundary1 = np.unique(lines[np.where(lines[:,0]==11)][:,1:]).tolist()
+# boundary2 = np.unique(lines[np.where(lines[:,0]==22)][:,1:]).tolist()
+# for i in omega1:
+#     plt.gca().add_patch(plt.Polygon(verts[i[1:]], closed=True, fill=False, color='r', alpha=1))
+# for i in omega2:
+#     plt.gca().add_patch(plt.Polygon(verts[i[1:]], closed=True, fill=False, color='b', alpha=1))
+# for i in omega_I:
+#     plt.gca().add_patch(plt.Polygon(verts[i[1:]], closed=True, fill=False, color='black', alpha=1))
+# plt.plot(verts[interface][:,0], verts[interface][:,1], 'bo')
+# plt.plot(verts[boundary1][:,0], verts[boundary1][:,1], 'rx')
+# plt.plot(verts[boundary2][:,0], verts[boundary2][:,1], 'gx')
+# plt.show()
+# plt.axis('equal')
+
+
+
+# BARYCENTERS
+bary = (verts[triangles[:, 1]] + verts[triangles[:, 2]] + verts[triangles[:, 3]]) / 3.
+#------------------------------------------------------------------------
+
+
+# DIAMETER
+def diam(T):
+    length_of_edges = np.array(
+        [np.linalg.norm(T[0] - T[1]), np.linalg.norm(T[0] - T[2]), np.linalg.norm(T[1] - T[2])])
+    return np.max(length_of_edges)
+diameter = [diam(np.array([verts[triangles[i,][1]], verts[triangles[i,][2]], verts[triangles[i,][3]]])) for i in
+            range(len(triangles))]
+diam = np.max(diameter)
+#------------------------------------------------------------------------
+
+
+# Nonlocal Interface
+Gamma_hat = []
+interface = np.unique(lines[np.where(lines[:,0]==12)][:,1:]).tolist()
+for i in interface:
+    Gamma_hat += np.where(np.linalg.norm(bary - np.tile(verts[i], (len(bary),1)) , axis =1) <= delta/2.+diam)[0].tolist()
+for i in Gamma_hat:
+    plt.gca().add_patch(plt.Polygon(verts[triangles[i,1:]], closed=True, fill=False, color='olive', alpha=1))
+plt.show()
+plt.axis('equal')
+#------------------------------------------------------------------------
+
+
+# GENERATE MESH 1
+def submesh_gen(k):
+    boundary1 = np.unique(lines[np.where(lines[:, 0] == 11*(k+1))][:, 1:]).tolist()
+    Gamma_1 = []
+    for i in interface:
+        Gamma_1 += np.where(np.linalg.norm(bary - np.tile(verts[i], (len(bary),1)) , axis =1) <= delta/2. + diam)[0].tolist()
+    for i in boundary1:
+        Gamma_1 += np.where(np.linalg.norm(bary - np.tile(verts[i], (len(bary),1)) , axis =1) <= delta + diam)[0].tolist()
+    Gamma_1 = list(np.unique(np.array(Gamma_1)))
+    triangles_1_bool = np.zeros(len(triangles), dtype = bool)
+    triangles_1_bool[np.where(triangles[:, 0] == labels_domains[k])] = True
+    triangles_1_bool[Gamma_1] = True
+    nE_1 = len(triangles[triangles_1_bool])
+    triangles_1 = triangles[triangles_1_bool]
+
+    element_labels_1 = np.zeros(nE_1, dtype = bool)
+    element_labels_1[np.where(triangles_1[:, 0] != labels_domains[2])] = True
+    triangles_1 = triangles_1[:,1:]
+
+    vertices_1_bool = np.zeros(len(verts), dtype = bool)
+    aux = np.unique(triangles_1.reshape(3*len(triangles_1)))
+    vertices_1_bool[aux] = True
+    vertices_1 = verts[vertices_1_bool]
+    nV_1 = len(vertices_1)
+
+    # embedding elements
+    aux_elements = -np.ones(len(triangles), dtype=int)
+    aux_elements[np.where(triangles_1_bool)[0]] = np.arange(nE_1)
+    embedding_elements_1 = np.array([list(aux_elements).index(i) for i in range(len(triangles_1))])
+
+    # nummern in triangles_1 anpassen, damit sie zu vertices_1 passen
+    aux_vertices = -np.ones(len(verts), dtype=int)
+    aux_vertices[np.where(vertices_1_bool)[0]] = np.arange(nV_1)
+    embedding_vertices_1 = np.array([list(aux_vertices).index(i) for i in range(len(vertices_1))])
+
+    def large_to_small_1(i):
+        return aux_vertices[i]
+    triangles_1 = large_to_small_1(triangles_1)
+
+    return vertices_1, triangles_1, embedding_vertices_1, embedding_elements_1, element_labels_1
+#------------------------------------------------------------------------
+
+
+# PLOT FOR TESTING
+vertices_1, triangles_1, embedding_vertices_1, embedding_elements_1, element_labels_1 = submesh_gen(1)
+
+plt.figure()
+for i in range(len(triangles_1)):
+    if element_labels_1[i]:
+        if np.any(triangles[embedding_elements_1[i]][1:] != embedding_vertices_1[triangles_1[i]]):
+            print(i, triangles[embedding_elements_1[i]][1:], embedding_vertices_1[triangles_1[i]])
+        plt.gca().add_patch(plt.Polygon(verts[triangles[embedding_elements_1[i]][1:]], closed=True, fill=True, color='magenta',alpha=1))
+    else:
+        plt.gca().add_patch(plt.Polygon(verts[triangles[embedding_elements_1[i]][1:]], closed=True, fill=False, color='black', alpha=1))
+    bary_i = verts[triangles[embedding_elements_1[i]][1:]].sum(axis=0)/3.
+    plt.annotate(str(i), (bary_i[0], bary_i[1]))
+plt.show()
+plt.axis('equal')
+
+plt.figure()
+for i in range(len(triangles_1)):
+    if element_labels_1[i]:
+        plt.gca().add_patch(plt.Polygon(verts[embedding_vertices_1[triangles_1[i]]], closed=True, fill=True, color='blue',alpha=1))
+    else:
+        plt.gca().add_patch(plt.Polygon(verts[embedding_vertices_1[triangles_1[i]]], closed=True, fill=False, color='black', alpha=1))
+plt.show()
+plt.axis('equal')
+
+plt.figure()
+for i in range(len(triangles_1)):
+    if element_labels_1[i]:
+        plt.gca().add_patch(plt.Polygon(vertices_1[triangles_1[i]], closed=True, fill=True, color='red', alpha=1))
+    else:
+        plt.gca().add_patch(plt.Polygon(vertices_1[triangles_1[i]], closed=True, fill=False, color='black', alpha=1))
+    bary_i = vertices_1[triangles_1[i]].sum(axis=0) / 3.
+    plt.annotate(str(i), (bary_i[0], bary_i[1]))
+plt.show()
+plt.axis('equal')
+
+
Index: ../Rates2D/MESH_nonreg.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import scipy.sparse as ss\nimport numpy as np\nimport matplotlib\nimport matplotlib.pyplot as plt\nfrom copy import copy\nimport math\nimport scipy.optimize as sc\nfrom pathos.multiprocessing import ProcessingPool as Pool\nimport scipy.interpolate as si\nimport random\nimport scipy.sparse.linalg as ssl\nfrom scipy.integrate import quad#quadrature as\nfrom scipy.optimize import minimize\nfrom scipy.spatial import Delaunay\nimport os\nimport bib3 as bib\n\"\"\"-------------------------------------------------------------------------\"\"\"\n\"\"\"                 PREPARE MESH                                            \"\"\"\n\"\"\"-------------------------------------------------------------------------\"\"\"\nclass Mesh:\n\n    # object with all processed mesh data\n    def __init__(self, proc_mesh_data):\n\n        self.triangles = proc_mesh_data[0]\n        self.omega = proc_mesh_data[1]\n        self.verts = proc_mesh_data[2]\n        self.hash_table = proc_mesh_data[3]\n        self.boundary_verts = proc_mesh_data[4]\n        self.nodes = proc_mesh_data[5]\n        self.nhd = proc_mesh_data[6]\n        self.diam = proc_mesh_data[7]\n        self.support = proc_mesh_data[8]\n        self.hash_table_approx = proc_mesh_data[9]\n        self.bary = proc_mesh_data[10]\n        self.boundary = proc_mesh_data[11]\n        self.hash_table_bary = proc_mesh_data[12]\n        self.shape_interface = proc_mesh_data[13]\n        self.lines = proc_mesh_data[14]\n        self.nV = proc_mesh_data[15]\n        self.nE = proc_mesh_data[16]\n        self.nE_Omega = proc_mesh_data[17]\n        self.nV_Omega = proc_mesh_data[18]\n        self.vertices = proc_mesh_data[2]\n\nclass Mesh_slim:\n    # object with all processed mesh data\n    def __init__(self, proc_mesh_data):\n\n        self.triangles = proc_mesh_data[0]\n        self.omega = proc_mesh_data[1]\n        self.verts = proc_mesh_data[2]\n        self.boundary_verts = proc_mesh_data[3]\n        self.nodes = proc_mesh_data[4]\n        self.boundary = proc_mesh_data[5]\n        self.shape_interface = proc_mesh_data[6]\n\n\ndef prepare_mesh_gmsh(h, geofile = \"unit_square\"):\n\n    os.system('gmsh mesh/' + geofile + '.geo -v 0 -2 -clscale ' + str(h) + ' -o mesh/' + geofile + '.msh')\n    verts, lines, triangles = bib.read_mesh('mesh/' + geofile + '.msh')\n    verts = verts[:, 0:2]\n    sort_indices = np.argsort(np.linalg.norm(verts - np.ones(2) * 0.5, axis=1, ord=np.inf))\n    verts = verts[sort_indices]\n    sort_indices_inv = np.arange(len(sort_indices))[np.argsort(sort_indices)]\n    def f(n):\n        return sort_indices_inv[n]\n    triangles[:, 1:] = f(triangles[:, 1:])\n    boundary = np.where(np.linalg.norm(verts - np.ones(2) * 0.5, axis=1, ord=np.inf) == 0.5)[0]\n    nodes = np.where(np.linalg.norm(verts - np.ones(2) * 0.5, axis=1, ord=np.inf) <= 0.5)[0]\n    bary = (verts[triangles[:, 1]] + verts[triangles[:, 2]] + verts[triangles[:, 3]]) / 3.\n    new_omega = list(np.where(np.linalg.norm(bary - np.ones(1) * 0.5, axis=1, ord=np.inf) < 0.5)[0])\n    new_omega_i = list(set(range(len(triangles))) - set(new_omega))\n    triangles[new_omega, 0] = 1\n    triangles[new_omega_i, 0] = 2\n    omega = triangles[new_omega]\n    def diam(T):\n        length_of_edges = np.array(\n            [np.linalg.norm(T[0] - T[1]), np.linalg.norm(T[0] - T[2]), np.linalg.norm(T[1] - T[2])])\n        return np.max(length_of_edges)\n\n    diameter = [diam(np.array([verts[triangles[i,][1]], verts[triangles[i,][2]], verts[triangles[i,][3]]])) for i in\n                range(len(triangles))]\n    diam = np.max(diameter)\n    proc_mesh_data = [triangles, omega, verts, [], boundary, nodes, [], diameter, [], [], bary,\n                      boundary, [], [], [], len(verts), len(triangles), len(omega), len(nodes)]\n    mesh = Mesh(proc_mesh_data)\n    return mesh, proc_mesh_data\n\ndef prepare_mesh_nonreg(h1,h2, delta, transform_switch, transform):\n    n1, n2 = int(np.ceil((1. + 2. * delta) / h1)) + 1, int(np.ceil((1. + 2. * delta) / h2)) + 1  # int(1./h)+1\n\n    x, ret = np.linspace(-delta, 1. + delta, n1, endpoint=True, retstep=1)\n    y = np.linspace(-delta, 1. + delta, n2, endpoint=True)\n    # xv, yv = np.meshgrid(x, y, indexing='ij')\n\n    verts = np.around(np.array(np.meshgrid(x, y, indexing='ij')).T.reshape(-1, 2), decimals=12)\n\n    omega = np.where(np.linalg.norm(verts - np.ones(2) * 0.5, axis=1, ord=np.inf) < 0.5)\n    boundary = np.where(np.linalg.norm(verts - np.ones(2) * 0.5, axis=1, ord=np.inf) == 0.5)\n    omega_i = np.where(np.linalg.norm(verts - np.ones(2) * 0.5, axis=1, ord=np.inf) > 0.5)\n\n    verts = np.concatenate((verts[omega], verts[boundary], verts[omega_i]))\n\n    omega = list(range(len(verts[omega])))  # np.where(np.linalg.norm(verts - np.ones(1) * 0.5, axis=1, ord=np.inf) < 0.5)\n    boundary = list(range(len(verts[omega]), len(verts[omega]) + len(verts[boundary])))  # np.where(np.linalg.norm(verts - np.ones(1) * 0.5, axis=1, ord=np.inf) == 0.5)\n    omega_i = list(range(len(verts[omega]) + len(verts[boundary]),len(verts)))  # np.where(np.linalg.norm(verts - np.ones(1) * 0.5, axis=1, ord=np.inf) > 0.5)\n    nodes = omega+boundary\n\n    index_to_transform = omega# np.where(np.linalg.norm(verts - np.ones(2) * 0.5, axis=1, ord=np.inf) < 0.5 - max(h1, h2))[0].tolist()\n\n    if transform_switch:\n        \"\"\"\n        problem: index_to_transform inner-inner points --> might then overlap and interpolation does not work anymore\n        \"\"\"\n        for i in index_to_transform:\n            verts[i] = transform(verts[i])\n\n    triangles = Delaunay(verts).simplices\n    bary = (verts[triangles[:, 0]] + verts[triangles[:, 1]] + verts[\n        triangles[:, 2]]) / 3.\n\n    triangles = np.concatenate((np.zeros((len(triangles), 1), dtype=np.int), triangles), axis=1)\n\n    new_omega = list(np.where(np.linalg.norm(bary - np.ones(1) * 0.5, axis=1, ord=np.inf) < 0.5)[0])\n\n    new_omega_i = list(set(range(len(triangles))) - set(new_omega))\n\n    triangles[new_omega, 0] = 1\n    triangles[new_omega_i, 0] = 2\n\n    omega = triangles[new_omega]\n\n    def diam(T):\n        length_of_edges = np.array(\n            [np.linalg.norm(T[0] - T[1]), np.linalg.norm(T[0] - T[2]), np.linalg.norm(T[1] - T[2])])\n        return np.max(length_of_edges)\n\n    diameter = [diam(np.array([verts[triangles[i,][1]], verts[triangles[i,][2]], verts[triangles[i,][3]]])) for i in\n                range(len(triangles))]\n    diam = np.max(diameter)\n\n\n    proc_mesh_data = [triangles, omega, verts, [], boundary, nodes, [], diameter, [], [], bary,\n                      boundary, [], [], [], len(verts), len(triangles), len(omega), len(nodes)]\n    mesh = Mesh(proc_mesh_data)\n\n    return mesh, proc_mesh_data\n\n\n\n\ndef prepare_mesh_nonreg_depricated(H, eps, norm, num_cores, transform_switch, transform):\n    # if not (1 / h).is_integer() or not (eps / h).is_integer():\n    #     print('(1/h and delta/h have to be an integer !!!')\n    #     eps_i = h\n    #\n    # if eps < h:\n    #     eps_i = h\n    # else:\n    #     eps_i = eps\n\n    eps_i = eps\n\n    # norm = norm_dict[Norm]\n    a = [0., 0.]\n    b = [1., 1.]\n    gridsize = np.array([H[0], H[1]])\n\n    diam = np.sqrt(gridsize[0] ** 2 + gridsize[1] ** 2)  # = longest edge of the triangle\n\n    dim = 2\n\n    def E(z, L):\n        p = [np.prod([L[k] for k in range(j + 1, dim)]) for j in range(dim)] + [np.prod(L)]\n        summe = 0\n        for i in range(dim):\n            summe = summe + z[i] * p[i]\n        return int(summe)\n\n    def iE(k, L):\n        p = [np.prod([L[l] for l in range(j + 1, dim)]) for j in range(dim)] + [np.prod(L)]\n        x = np.zeros(dim)\n        for i in range(dim):\n            x[i] = k // (p[i]) - (k // (p[i - 1])) * L[i]\n        return x\n\n    # ==============================================================================\n    #                    COMPUTE ARRAYS\n    # ==============================================================================\n    roundof = 6  # verts will not give precisely the value but rather 0.1000009 (in order to make\n    # np.where () work we have to round of, roughly in the dimension of the gridsize)\n    N = [int((b[i] - a[i]) / gridsize[i]) for i in range(dim)]\n\n    #    L = [N[i]-1   for i in range(dim)]\n    def ha(x):\n        return np.array([gridsize[0] * x[0], gridsize[1] * x[1]])\n\n    a_i = [a[0] - eps_i, a[1] - eps_i]\n    b_i = np.around([b[0] + eps_i, b[1] + eps_i], decimals=roundof)\n    N_i = [int(np.around((b_i[i] - a_i[i]) / gridsize[i])) + 1 for i in range(dim)]\n\n    # -----------------------------------------------------------------------------#\n    \"\"\" VERTS \"\"\"\n\n    def fun(k):\n        return np.around(np.array(a_i) + ha(iE(k, N_i)), decimals=roundof)\n\n    pool = Pool(processes=num_cores)\n    verts = np.array(list(pool.map(fun, range(np.prod(N_i)))))  # np.array([  for k in range(np.prod(N_i))])\n    pool.close()\n    pool.join()\n    pool.clear()\n    #    print verts\n    # -----------------------------------------------------------------------------#\n    \"\"\" OMEGA \"\"\"  # +  ha(iE(0,N)\n    k_0 = np.where(np.all(verts[:, 0:2] == np.around(np.array(a), decimals=roundof).tolist(), axis=1))[0][0]\n    omega = [k_0 + k + j * N_i[1] for k in range(N[1]) for j in range(N[0])]  # pool.map(om, range(num_omega))\n    ####-----------------------------------------------------------------------------#\n    \"\"\" OMEGA_I \"\"\"\n    omega_i = list(set(range(len(verts))) - set(omega) - set(np.where(verts[:, 0] == b_i[0])[0]) - set(\n        np.where(verts[:, 1] == b_i[1])[0]))\n    ###-----------------------------------------------------------------------------#\n    # \"\"\" NODES \"\"\"\n    nodes = omega\n    ##-----------------------------------------------------------------------------#\n    \"\"\" OMEGA \"\"\"\n    omega = np.zeros((2 * len(nodes), 3), dtype=int)\n\n    for j in range(len(nodes)):\n        k = nodes[j]\n        omega[2 * j,] = np.array([k, k + N_i[1] + 1, k + 1])  # clockwise\n        omega[2 * j + 1,] = np.array([k, k + N_i[1], k + N_i[1] + 1])  # clockwise\n\n    \"\"\" OMEGA_i \"\"\"\n    Omega_i = np.zeros((2 * len(omega_i), 3), dtype=int)\n\n    for j in range(len(omega_i)):\n        k = omega_i[j]\n        Omega_i[2 * j,] = np.array([k, k + N_i[1] + 1, k + 1])  # clockwise\n        Omega_i[2 * j + 1,] = np.array([k, k + N_i[1], k + N_i[1] + 1])  # clockwise\n\n    omega_i = Omega_i\n\n    ##-----------------------------------------------------------------------------#\n    \"\"\" BOUNDARY \"\"\"\n    boundary1 = [k_0 + kk for kk in range(N[1])]\n    boundary2 = [k_0 + N[1] + N_i[1] * kkk for kkk in range(N[0])]\n    boundary3 = [k_0 + j * N_i[1] for j in range(N[0])]\n    boundary4 = [k_0 + N[0] * N_i[1] + j for j in range(N[1] + 1)]\n\n    boundary = np.unique(boundary1 + boundary2 + boundary3 + boundary4)\n\n    ##-----------------------------------------------------------------------------#\n    aux = np.zeros((len(omega), 4), dtype=int)\n    aux[:, 1:] = omega\n    aux[:, 0] = 1 * np.ones(len(omega), dtype=int)\n    omega = aux\n\n    aux = np.zeros((len(omega_i), 4), dtype=int)\n    aux[:, 1:] = omega_i\n    aux[:, 0] = 2 * np.ones(len(omega_i), dtype=int)\n    omega_i = aux\n\n    ##-----------------------------------------------------------------------------#\n    \"\"\" TRIANGLES \"\"\"\n    triangles = np.vstack((omega, omega_i))\n\n    \"\"\" NODES \"\"\"\n    num_omega = np.shape(omega)[0]\n    nodes = np.unique(omega[:, 1:4].reshape(3 * num_omega))\n\n    ##-----------------------------------------------------------------------------#\n    \"\"\" PERMUTE VERTS TO SORT OMEGA_I TO THE END and ADAPT TRIANGLES etc \"\"\"\n    nodes_inner = list(set(nodes) - set(boundary))\n    nodes_rest = list(set(range(len(verts))) - set(nodes_inner) - set(boundary))\n    verts = np.vstack((verts[nodes_inner], verts[boundary], verts[nodes_rest]))\n\n    new_order = nodes_inner + list(boundary) + nodes_rest\n\n    def permutation(i):\n        return new_order.index(i)\n\n    triangles_old = triangles\n\n    triangles = np.zeros(np.shape(triangles_old), dtype=int)\n    triangles[:, 0] = triangles_old[:, 0]\n\n    for i in range(np.shape(triangles_old)[0]):\n        for j in range(1, 4):\n            triangles[i, j] = int(permutation(triangles_old[i, j]))\n\n    omega = triangles[np.where(triangles[:, 0] != 2)[0]]\n    # plot omega\n    #    for i in range(len(omega)):\n    #        plt.gca().add_patch(plt.Polygon(verts[omega[i,1:]], closed=True, fill = True, color = 'blue', alpha = 0.2))\n\n    boundary = list(range(len(nodes_inner), len(nodes_inner) + len(boundary)))\n    nodes = list(range(len(nodes_inner))) + list(boundary)\n\n    # PLOT verts\n    #    plt.plot(verts[nodes][:,0], verts[nodes][:,1], 'bo')\n    #    plt.plot(verts[len(nodes):][:,0], verts[len(nodes):][:,1], 'rx')\n\n    \"\"\" SUPPORT (subset omega)\"\"\"\n    support = []  # [list(np.where(omega[:,1:4] == aa)[0]) for aa in nodes]\n\n    # --------------------------------------------------------------------------\n    \"\"\" Neighboring nodes x_j of x_k for which j<=k (subset of nodes)\"\"\"\n    NHD = []\n    # for k in range(len(nodes)):\n    #     nhd = list(set(np.unique(triangles[support[k]][:,1:])) & set(omega[:,1:].reshape(3*len(omega)))) # subset of verts, intersect with omega, since nodes only are in omega\n    #     #convert nhd from subset of verts into subset of nodes and take only those<=k\n    #     aux = np.array([np.where(np.all(verts[nodes] == verts[j],axis=1))[0][0] for j in nhd]  )\n    #     NHD += [aux[aux<=k].tolist()]\n    # --------------------------------------------------------------------------\n    \"\"\" HASH TABLE (subset triangles)\"\"\"\n    bary = (verts[triangles[:, 1]] + verts[triangles[:, 2]] + verts[triangles[:, 3]]) / 3.\n    hash_table = []  # [np.where(norm((bary-np.repeat(verts[nodes[i]][:,np.newaxis], len(bary), axis = 1).transpose()).transpose())<=(eps+diam))[0].tolist() for i in range(len(nodes))]\n\n    # --------------------------------------------------------------------------\n    \"\"\" HASH TABLE_nodes (subset nodes)\"\"\"\n    #    hash_table_nodes = [list(set(np.where(norm((verts[nodes]-np.repeat(verts[nodes[i]][:,np.newaxis], len(nodes), axis = 1).transpose()).transpose())<=(eps+diam))[0].tolist())&set(range(i+1))) for i in range(len(nodes))]\n\n    \"\"\" HASH TABLE_approx (= hash table bary without puffer)\"\"\"\n    hash_table_approx = []  # [np.where(norm((bary-np.repeat(bary[i][:,np.newaxis], len(bary), axis = 1).transpose()).transpose())<=(eps))[0].tolist() for i in range(len(bary))]\n    # --------------------------------------------------------------------------\n    \"\"\" HASH TABLE (subset 0:len(bary))\"\"\"\n    hash_table_bary = []  # [np.where(norm((bary-np.repeat(bary[i][:,np.newaxis], len(bary), axis = 1).transpose()).transpose())<=(eps+ diam))[0].tolist() for i in range(len(bary))]\n\n    # --------------------------------------------------------------------------\n    \"\"\" BOUNDARY_nodes (subset 0:len(nodes) )\"\"\"\n    bdry_nodes = [nodes.index(i) for i in boundary]\n\n    # --------------------------------------------------------------------------\n    \"\"\" SHAPE INTERFACE (subset 0:len(verts) )\"\"\"\n    interface = []  # np.unique(lines[np.where(lines[:,0]==12)][:,1:]).tolist()\n\n    # ------------------------------------------------------------------------------\n    \"\"\" BUILDING MESH CLASS \"\"\"\n    proc_mesh_data = [triangles, omega, verts, hash_table, boundary, nodes, NHD, diam, support, hash_table_approx, bary,\n                      bdry_nodes, hash_table_bary, interface, [], len(verts), len(triangles), len(omega), len(nodes)]\n    mesh = Mesh(proc_mesh_data)\n    # ------------------------------------------------------------------------------\n    if transform_switch:\n\n        for i in range(len(mesh.verts[mesh.nodes])):\n            mesh.verts[i] = transform(mesh.verts[i])\n\n        ## REMESH\n        \"\"\" ACHTUNG: LABELING interaction domain und domain passen nicht mehr !!!\"\"\"\n\n\n        new_triangles = Delaunay(mesh.verts).simplices\n        mesh.triangles[:, 1:] = new_triangles\n\n        mesh.bary = (mesh.verts[mesh.triangles[:, 1]] + mesh.verts[mesh.triangles[:, 2]] + mesh.verts[\n            mesh.triangles[:, 3]]) / 3.\n        new_omega = list(np.where(np.linalg.norm(mesh.bary - np.ones(1) * 0.5, axis=1, ord=np.inf) < 0.5)[0])\n        new_omega_i = list(set(range(len(mesh.triangles))) - set(new_omega))\n        mesh.triangles[new_omega, 0] = 1\n        mesh.triangles[new_omega_i, 0] = 2\n        mesh.omega = mesh.triangles[new_omega]\n\n        def diam(T):\n            length_of_edges = np.array(\n                [np.linalg.norm(T[0] - T[1]), np.linalg.norm(T[0] - T[2]), np.linalg.norm(T[1] - T[2])])\n            return np.max(length_of_edges)\n\n        diameter = [diam(np.array(\n            [mesh.verts[mesh.triangles[i,][1]], mesh.verts[mesh.triangles[i,][2]], mesh.verts[mesh.triangles[i,][3]]]))\n                    for i in range(len(mesh.triangles))]\n        mesh.diam = np.max(diameter)\n        print('new grid size: ', mesh.diam)\n\n\n\n    return mesh, proc_mesh_data\n\n\n\n\ndef prepare_mesh(verts, lines, triangles, eps, Norm):\n    verts = verts[: ,0:2]\n    # note that eps is determined already in the mesh, however: for\n    # homogeneous dirichtlet constraints it simply has to be smaller than\n    # the pre-determined epsilon\n    labels_domains = np.sort(np.unique(triangles[: ,0]))\n\n    \"\"\" sort triangles \"\"\"\n    # we sort by labels\n    # this is important such that omega[k,] = triangle[k,]\n    # As a consequence we can use omega for the list 'support'\n    triangles = triangles[triangles[: ,0].argsort()]\n\n    norm = norm_dict[Norm]\n    #    def norm(x):\n    #        return np.max(np.abs(x), axis= 0)\n    # --------------------------------------------------------------------------\n    \"\"\" OMEGA \"\"\"\n    omega = triangles[np.where(triangles[: ,0] != labels_domains[-1])[0]]\n\n    # --------------------------------------------------------------------------\n    \"\"\" SHAPE INTERFACE (subset 0:len(verts) )\"\"\"\n    interface = np.unique(lines[np.where(lines[: ,0 ]==12)][: ,1:]).tolist()\n\n    # --------------------------------------------------------------------------\n    \"\"\" NODES (subset of verts)\"\"\"\n\n    omega1 = triangles[np.where(triangles[: ,0] == labels_domains[0])]\n    nodes1 = list(np.unique(omega1[: ,1:4]))\n\n    if len(labels_domains) > 2:\n        omega2 = triangles[np.where(triangles[: ,0] == labels_domains[1])]\n        nodes2 = list(np.unique(omega2[: ,1:4]))\n    else:\n        omega2 = []\n        nodes2 = []\n\n    G_N = []\n    for i in interface:\n        G_N += np.where(norm((verts -np.repeat(verts[i][: ,np.newaxis], len(verts), axis = 1).transpose()).transpose() )<=eps)[0].tolist()\n\n    G_N1 = list( (set(nodes1 ) &set(G_N)) )\n    G_N2 = list(  (set(nodes2 ) &set(G_N)) )\n\n    nodes1 = list(set(nodes1) - set(G_N1) )\n    nodes2 = list(set(nodes2) - set(G_N2) )\n    G_N1 = list( (set(G_N1 ) -set(interface)) )\n    G_N2 = list(  (set(G_N2 ) -set(interface)) )\n    nodes = list(nodes1)  + list(G_N1 )+ interface + list(G_N2) + list(nodes2)\n    nodes = np.array(nodes)\n\n    #    print len(nodes1), len(G_N1), len(interface), len(G_N2), len(nodes2)\n\n    #    nodes =  np.unique(omega[:,1:4])\n\n    # test nodes\n    #    plt.plot(verts[nodes1][:,0], verts[nodes1][:,1], 'bo')\n    #    plt.plot(verts[nodes2][:,0], verts[nodes2][:,1], 'ro')\n    #    plt.plot(verts[G_N1][:,0], verts[G_N1][:,1], 'gx')\n    #    plt.plot(verts[G_N2][:,0], verts[G_N2][:,1], 'bx')\n    #    plt.plot(verts[interface][:,0], verts[interface][:,1], 'yd')\n\n    # --------------------------------------------------------------------------\n    \"\"\" BOUNDARY_verts (subset of verts); label = 9\"\"\"\n    boundary = np.unique(lines[lines[: ,0] == 9][: ,1:3])\n    # test nodes\n    #    plt.plot(verts[boundary][:,0], verts[boundary][:,1], 'ro')\n\n\n    ##-----------------------------------------------------------------------------#\n    \"\"\" PERMUTE VERTS TO SORT OMEGA_I TO THE END and ADAPT TRIANGLES etc \"\"\"\n    if True:\n        nodes_inner = list(set(nodes) - set(boundary))\n        nodes_rest = list(set(range(len(verts))) - set(nodes_inner) - set(boundary))\n\n        verts = np.vstack((verts[nodes_inner], verts[boundary], verts[nodes_rest]))\n\n        new_order = nodes_inner + list(boundary) + nodes_rest\n\n        def permutation(i):\n            return new_order.index(i)\n\n        triangles_old = triangles\n\n        triangles = np.zeros(np.shape(triangles_old), dtype = int)\n        triangles[: ,0] = triangles_old[: ,0]\n\n        for i in range(np.shape(triangles_old)[0]):\n            for j in range(1 ,4):\n                triangles[i ,j] = int(permutation(triangles_old[i ,j] ))\n\n        lines_old = lines\n\n        lines = np.zeros(np.shape(lines_old), dtype = int)\n        lines[: ,0] = lines_old[: ,0]\n\n        for i in range(np.shape(lines_old)[0]):\n            for j in range(1 ,3):\n                lines[i ,j] = int(permutation(lines_old[i ,j] ))\n\n        interface_old= interface\n        interface = np.zeros(len(interface_old), dtype = int)\n        for i in range(len(interface_old)):\n            interface[i] = permutation(interface_old[i])\n\n\n\n        omega = triangles[np.where(triangles[: ,0] != labels_domains[-1])[0]]\n\n        # plot omega\n        #    for i in range(len(omega)):\n        #        plt.gca().add_patch(plt.Polygon(verts[omega[i,1:]], closed=True, fill = True, color = 'blue', alpha = 0.2))\n\n        boundary = np.array(range(len(nodes_inner), len(nodes_inner ) +len(boundary)))\n\n        nodes = np.array(range(len(nodes_inner ) +len(boundary))  )  # +list(boundary)\n\n    #     PLOT verts\n    #    plt.plot(verts[nodes][:,0], verts[nodes][:,1], 'bx')\n    #    plt.plot(verts[interface][:,0], verts[interface][:,1], 'yd')\n    #    plt.plot(verts[len(nodes):][:,0], verts[len(nodes):][:,1], 'ro')\n\n    # --------------------------------------------------------------------------\n    \"\"\" SUPPORT (subset omega)\"\"\"\n    support = [  ]  # [list(np.where(omega[:,1:4] == a)[0]) for a in nodes]\n    ##test support\n    #    idx = 44#len(nodes)/2\n    #    plt.plot(verts[nodes[idx]][0], verts[nodes[idx]][1], 'go')\n    #    for i in support[idx]:\n    #        plt.gca().add_patch(plt.Polygon([verts[triangles[i,1]], verts[triangles[i,2]],verts[triangles[i,3]]], closed=True, fill = True, color = 'blue'))\n\n    # --------------------------------------------------------------------------\n    \"\"\" Neighboring nodes x_j of x_k for which j<=k (subset of nodes)\"\"\"\n    NHD = []\n    # for k in range(len(nodes)):\n    #     nhd = list(set(np.unique(triangles[support[k]][:,1:]))&set(omega[:,1:].reshape(3*len(omega)))) # subset of verts, intersect with omega, since nodes only are in omega\n    #     #convert nhd from subset of verts into subset of nodes and take only those<=k\n    #     aux = np.array([np.where(np.all(verts[nodes] == verts[j],axis=1))[0][0] for j in nhd]  )\n    #     NHD += [aux[aux<=k].tolist()]\n    ##test nhd\n    #    idx = 44\n    #    print verts[nodes[NHD[idx]]]\n    #    for j in range(len(NHD[idx])):\n    #        plt.plot(verts[nodes[NHD[idx]]][j][0], verts[nodes[NHD[idx]]][j][1], 'yo')\n    #    plt.plot(verts[nodes[idx]][0], verts[nodes[idx]][1], 'ro')\n    # --------------------------------------------------------------------------\n    \"\"\"Determine maximum diameter for hash_table \"\"\"\n    def diam(T):\n        length_of_edges = np.array \\\n            ([np.linalg.norm(T[0 ] -T[1]) ,np.linalg.norm(T[0 ] -T[2]), np.linalg.norm(T[1 ] -T[2])] )\n        return np.max(length_of_edges)\n    diameter = [diam(np.array([verts[triangles[i,][1]] , verts[triangles[i,][2]] , verts[triangles[i,][3]] ])) for i in range(len(triangles))]\n    diam = np.max(diameter)\n    # --------------------------------------------------------------------------\n    \"\"\" HASH TABLE (subset triangles)\"\"\"\n    bary = (verts[triangles[: ,1]] + verts[triangles[: ,2]] + verts[triangles[: ,3]]) / 3.\n    hash_table = [  ]  # [np.where(norm((bary-np.repeat(verts[nodes[i]][:,np.newaxis], len(bary), axis = 1).transpose()).transpose())<=(eps+diam))[0].tolist() for i in range(len(nodes))]\n    #    idx = 38#int(num_nodes/2 * 1.5)\n    #    plt.plot(verts[nodes[idx]][0], verts[nodes[idx]][1], 'ro')\n    #    for i in hash_table[idx]:\n    #        T_i = triangles[i,]\n    #        barycenter_i = (verts[T_i[1]] + verts[T_i[2]] + verts[T_i[3]]) / 3.\n    #        plt.plot(barycenter_i[0],barycenter_i[1], 'yo')\n    #\n    #        plt.gca().add_patch(plt.Polygon([verts[triangles[i,1]], verts[triangles[i,2]],verts[triangles[i,3]]], closed=True, fill = True))\n    #\n    #    neighboring_nodes = list(np.unique(triangles[support[idx]][:,1:]))\n    #    ngh_verts = verts[neighboring_nodes]\n    #    for i in range(len(ngh_verts)):\n    #        square = plt.Rectangle(tuple(ngh_verts[i]-(eps)*np.ones(2)), 2*(eps), 2*(eps), color='grey', fill= True)\n    #        ax.add_artist(square)\n    # --------------------------------------------------------------------------\n    \"\"\" HASH TABLE_nodes (subset nodes)\"\"\"\n    #    hash_table_nodes = [list(set(np.where(norm((verts[nodes]-np.repeat(verts[nodes[i]][:,np.newaxis], len(nodes), axis = 1).transpose()).transpose())<=(eps+diam))[0].tolist())&set(range(i+1))) for i in range(len(nodes))]\n\n    \"\"\" HASH TABLE_approx (= hash table bary without puffer)\"\"\"\n    hash_table_approx = [  ]# [np.where(norm((bary-np.repeat(bary[i][:,np.newaxis], len(bary), axis = 1).transpose()).transpose())<=(eps))[0].tolist() for i in range(len(bary))]\n    # --------------------------------------------------------------------------\n    \"\"\" HASH TABLE (subset 0:len(bary))\"\"\"\n    hash_table_bary = [  ]  # [np.where(norm((bary-np.repeat(bary[i][:,np.newaxis], len(bary), axis = 1).transpose()).transpose())<=(eps+ diam))[0].tolist() for i in range(len(bary))]\n\n    # --------------------------------------------------------------------------\n    \"\"\" BOUNDARY_nodes (subset 0:len(nodes) )\"\"\"\n    bdry_nodes = [nodes.tolist().index(i) for i in boundary]\n\n    # ------------------------------------------------------------------------------\n    \"\"\" BUILDING MESH CLASS \"\"\"\n    proc_mesh_data = [triangles, omega, verts, hash_table, boundary, nodes, NHD, max(diameter), support, hash_table_approx, bary, bdry_nodes, hash_table_bary, interface, lines, len(verts), len(triangles), len(omega), len(nodes)]\n    mesh = Mesh(proc_mesh_data)\n    # ------------------------------------------------------------------------------\n    return mesh, proc_mesh_data\ndef prepare_mesh_reg_slim(h, eps, Norm, num_cores):\n    if not (1 / h).is_integer() or not (eps / h).is_integer():\n        print('(1/h and delta/h have to be an integer !!!')\n\n    if eps < h:\n        eps_i = h\n    else:\n        eps_i = eps\n\n    a = [0., 0.]\n    b = [1., 1.]\n    gridsize = np.array([h, h])\n\n    dim = 2\n\n    def E(z, L):\n        p = [np.prod([L[k] for k in range(j + 1, dim)]) for j in range(dim)] + [np.prod(L)]\n        summe = 0\n        for i in range(dim):\n            summe = summe + z[i] * p[i]\n        return int(summe)\n\n    def iE(k, L):\n        p = [np.prod([L[l] for l in range(j + 1, dim)]) for j in range(dim)] + [np.prod(L)]\n        x = np.zeros(dim)\n        for i in range(dim):\n            x[i] = k // (int(p[i])) - (k // (int(p[i - 1]))) * L[i]\n        return x\n\n    # ==============================================================================\n    #                    COMPUTE ARRAYS\n    # ==============================================================================\n    roundof = 6  # verts will not give precisely the value but rather 0.1000009 (in order to make\n    # np.where () work we have to ceil roughly in the dimension of the gridsize)\n    N = [int((b[i] - a[i]) / gridsize[i]) for i in range(dim)]\n\n    #    L = [N[i]-1   for i in range(dim)]\n    def ha(x):\n        return np.array([gridsize[0] * x[0], gridsize[1] * x[1]])\n\n    a_i = [a[0] - eps_i, a[1] - eps_i]\n    b_i = np.around([b[0] + eps_i, b[1] + eps_i], decimals=roundof)\n    N_i = [int(np.around((b_i[i] - a_i[i]) / gridsize[i])) + 1 for i in range(dim)]\n\n    # -----------------------------------------------------------------------------#\n    \"\"\" VERTS \"\"\"\n\n    def fun(k):\n        return np.around(np.array(a_i) + ha(iE(k, N_i)), decimals=roundof)\n\n    pool = Pool(processes=num_cores)\n    verts = np.array(pool.map(fun, range(np.prod(N_i))))  # np.array([  for k in range(np.prod(N_i))])\n    pool.close()\n    pool.join()\n    pool.clear()\n    #    print verts\n    # -----------------------------------------------------------------------------#\n    \"\"\" OMEGA \"\"\"  # +  ha(iE(0,N)\n    k_0 = np.where(np.all(verts[:, 0:2] == np.around(np.array(a), decimals=roundof).tolist(), axis=1))[0][0]\n    omega = [k_0 + k + j * N_i[1] for k in range(N[1]) for j in range(N[0])]  # pool.map(om, range(num_omega))\n    ####-----------------------------------------------------------------------------#\n    \"\"\" OMEGA_I \"\"\"\n    omega_i = list(set(range(len(verts))) - set(omega) - set(np.where(verts[:, 0] == b_i[0])[0]) - set(\n        np.where(verts[:, 1] == b_i[1])[0]))\n    ###-----------------------------------------------------------------------------#\n    # \"\"\" NODES \"\"\"\n    nodes = omega\n    ##-----------------------------------------------------------------------------#\n    \"\"\" OMEGA \"\"\"\n    omega = np.zeros((2 * len(nodes), 3), dtype=int)\n\n    for j in range(len(nodes)):\n        k = nodes[j]\n        omega[2 * j,] = np.array([k, k + N_i[1] + 1, k + 1])  # clockwise\n        omega[2 * j + 1,] = np.array([k, k + N_i[1], k + N_i[1] + 1])  # clockwise\n\n    \"\"\" OMEGA_i \"\"\"\n    Omega_i = np.zeros((2 * len(omega_i), 3), dtype=int)\n\n    for j in range(len(omega_i)):\n        k = omega_i[j]\n        Omega_i[2 * j,] = np.array([k, k + N_i[1] + 1, k + 1])  # clockwise\n        Omega_i[2 * j + 1,] = np.array([k, k + N_i[1], k + N_i[1] + 1])  # clockwise\n\n    omega_i = Omega_i\n\n    ##-----------------------------------------------------------------------------#\n    \"\"\" BOUNDARY \"\"\"\n    boundary1 = [k_0 + kk for kk in range(N[0])]\n    boundary2 = [k_0 + N[1] * N_i[0] + kkk for kkk in range(N[0] + 1)]\n    boundary3 = [k_0 + j * N_i[0] for j in range(N[1])]\n    boundary4 = [k_0 + N[0] + j * N_i[0] for j in range(N[1])]\n\n    boundary = np.unique(boundary1 + boundary2 + boundary3 + boundary4)\n\n    ##-----------------------------------------------------------------------------#\n\n    aux = np.zeros((len(omega), 4), dtype=int)\n    aux[:, 1:] = omega\n    aux[:, 0] = 1 * np.ones(len(omega), dtype=int)\n    omega = aux\n\n    aux = np.zeros((len(omega_i), 4), dtype=int)\n    aux[:, 1:] = omega_i\n    aux[:, 0] = 2 * np.ones(len(omega_i), dtype=int)\n    omega_i = aux\n\n    ##-----------------------------------------------------------------------------#\n    \"\"\" TRIANGLES \"\"\"\n    triangles = np.vstack((omega, omega_i))\n\n    \"\"\" NODES \"\"\"\n    num_omega = np.shape(omega)[0]\n    nodes = np.unique(omega[:, 1:4].reshape(3 * num_omega))\n\n    ##-----------------------------------------------------------------------------#\n    \"\"\" PERMUTE VERTS TO SORT OMEGA_I TO THE END and ADAPT TRIANGLES etc \"\"\"\n    nodes_inner = list(set(nodes) - set(boundary))\n    nodes_rest = list(set(range(len(verts))) - set(nodes_inner) - set(boundary))\n    verts = np.vstack((verts[nodes_inner], verts[boundary], verts[nodes_rest]))\n\n    new_order = nodes_inner + list(boundary) + nodes_rest\n\n    def permutation(i):\n        return new_order.index(i)\n\n    triangles_old = triangles\n    triangles = np.zeros(np.shape(triangles_old), dtype=int)\n    triangles[:, 0] = triangles_old[:, 0]\n\n    for i in range(np.shape(triangles_old)[0]):\n        for j in range(1, 4):\n            triangles[i, j] = int(permutation(triangles_old[i, j]))\n\n    omega = triangles[np.where(triangles[:, 0] != 2)[0]]\n    boundary = range(len(nodes_inner), len(nodes_inner) + len(boundary))\n    nodes = list(range(len(nodes_inner))) + list(boundary)\n\n    # --------------------------------------------------------------------------\n    \"\"\" BOUNDARY_nodes (subset 0:len(nodes) )\"\"\"\n    bdry_nodes = [nodes.index(i) for i in boundary]\n\n    # --------------------------------------------------------------------------\n    \"\"\" SHAPE INTERFACE (subset 0:len(verts) )\"\"\"\n    interface = []  # np.unique(lines[np.where(lines[:,0]==12)][:,1:]).tolist()\n\n    # ------------------------------------------------------------------------------\n    \"\"\" BUILDING MESH CLASS \"\"\"\n    proc_mesh_data = [triangles, omega, verts, boundary, nodes, bdry_nodes, interface]\n    mesh = Mesh_slim(proc_mesh_data)\n    # ------------------------------------------------------------------------------\n    return mesh, proc_mesh_data\ndef prepare_mesh_slim(verts, lines, triangles, eps):\n    verts = verts[:, 0:2]\n    # note that eps is determined already in the mesh, however: for\n    # homogeneous dirichtlet constraints it simply has to be smaller than\n    # the pre-determined epsilon\n\n    \"\"\" sort triangles \"\"\"\n    # we sort by labels\n    # this is important such that omega[k,] = triangle[k,]\n    # As a consequence we can use omega for the list 'support'\n    triangles = triangles[triangles[:, 0].argsort()]\n\n    def norm(x):\n        return np.max(np.abs(x), axis=0)\n\n    # --------------------------------------------------------------------------\n    \"\"\" DECRYPTING LABELS: 1 = shape; 2 = omega\\shape; 3 = omega_i \"\"\"\n    omega = triangles[np.where(triangles[:, 0] != 3)[0]]\n\n    # --------------------------------------------------------------------------\n    \"\"\" SHAPE INTERFACE (subset 0:len(verts) )\"\"\"\n    interface = np.unique(lines[np.where(lines[:, 0] == 12)][:, 1:]).tolist()\n\n    # --------------------------------------------------------------------------\n    \"\"\" NODES (subset of verts)\"\"\"\n\n    omega1 = triangles[np.where(triangles[:, 0] == 1)]\n    omega2 = triangles[np.where(triangles[:, 0] == 2)]\n    nodes1 = list(np.unique(omega1[:, 1:4]))\n    nodes2 = list(np.unique(omega2[:, 1:4]))\n\n    G_N = []\n    for i in interface:\n        G_N += \\\n        np.where(norm((verts - np.repeat(verts[i][:, np.newaxis], len(verts), axis=1).transpose()).transpose()) <= eps)[\n            0].tolist()\n\n    G_N1 = list((set(nodes1) & set(G_N)))\n    G_N2 = list((set(nodes2) & set(G_N)))\n\n    nodes1 = list(set(nodes1) - set(G_N1))\n    nodes2 = list(set(nodes2) - set(G_N2))\n    G_N1 = list((set(G_N1) - set(interface)))\n    G_N2 = list((set(G_N2) - set(interface)))\n    nodes = list(nodes1) + list(G_N1) + interface + list(G_N2) + list(nodes2)\n    nodes = np.array(nodes)\n\n    # --------------------------------------------------------------------------\n    \"\"\" BOUNDARY_verts (subset of verts); label = 9\"\"\"\n    boundary = np.unique(lines[lines[:, 0] == 9][:, 1:3])\n    # test nodes\n    #    plt.plot(verts[boundary][:,0], verts[boundary][:,1], 'ro')\n    ##-----------------------------------------------------------------------------#\n    \"\"\" PERMUTE VERTS TO SORT OMEGA_I TO THE END and ADAPT TRIANGLES etc \"\"\"\n    if True:\n        nodes_inner = list(set(nodes) - set(boundary))\n        nodes_rest = list(set(range(len(verts))) - set(nodes_inner) - set(boundary))\n\n        verts = np.vstack((verts[nodes_inner], verts[boundary], verts[nodes_rest]))\n\n        new_order = nodes_inner + list(boundary) + nodes_rest\n\n        def permutation(i):\n            return new_order.index(i)\n\n        triangles_old = triangles\n        triangles = np.zeros(np.shape(triangles_old), dtype=int)\n        triangles[:, 0] = triangles_old[:, 0]\n\n        for i in range(np.shape(triangles_old)[0]):\n            for j in range(1, 4):\n                triangles[i, j] = int(permutation(triangles_old[i, j]))\n\n        interface_old = interface\n        interface = np.zeros(len(interface_old), dtype=int)\n        for i in range(len(interface_old)):\n            interface[i] = permutation(interface_old[i])\n\n        omega = triangles[np.where(triangles[:, 0] != 3)[0]]\n        # plot omega\n        #    for i in range(len(omega)):\n        #        plt.gca().add_patch(plt.Polygon(verts[omega[i,1:]], closed=True, fill = True, color = 'blue', alpha = 0.2))\n\n        boundary = np.array(range(len(nodes_inner), len(nodes_inner) + len(boundary)))\n        nodes = np.array(range(len(nodes_inner) + len(boundary)))  # +list(boundary)\n    #     PLOT verts\n    #    plt.plot(verts[nodes][:,0], verts[nodes][:,1], 'bx')\n    #    plt.plot(verts[interface][:,0], verts[interface][:,1], 'yd')\n    #    plt.plot(verts[len(nodes):][:,0], verts[len(nodes):][:,1], 'ro')\n    # --------------------------------------------------------------------------\n    \"\"\" BOUNDARY_nodes (subset 0:len(nodes) )\"\"\"\n    bdry_nodes = [nodes.tolist().index(i) for i in boundary]\n\n    \"\"\" BUILDING MESH CLASS \"\"\"\n    proc_mesh_data = [triangles, omega, verts, boundary, nodes, bdry_nodes, interface]\n    mesh = Mesh_slim(proc_mesh_data)\n    # ------------------------------------------------------------------------------\n    return mesh, proc_mesh_data\ndef prepare_mesh_reg(h, eps, norm, num_cores):\n    if not ( 1 /h).is_integer() or not (eps /h).is_integer():\n        print('(1/h and delta/h have to be an integer !!!')\n        eps_i = h\n\n    if eps < h:\n        eps_i = h\n    else:\n        eps_i = eps\n\n\n\n    a = [0. ,0.]\n    b = [1. ,1.]\n    gridsize = np.array([h ,h])\n\n    diam = np.sqrt( h**2 + h** 2)  # = longest edge of the triangle\n\n    dim = 2\n\n    def E(z, L):\n        p = [np.prod([L[k] for k in range(j + 1, dim)]) for j in range(dim)] + [np.prod(L)]\n        summe = 0\n        for i in range(dim):\n            summe = summe + z[i] * p[i]\n        return int(summe)\n\n    def iE(k, L):\n        p = [np.prod([L[l] for l in range(j + 1, dim)]) for j in range(dim)] + [np.prod(L)]\n        x = np.zeros(dim)\n        for i in range(dim):\n            x[i] = k // (p[i]) - (k // (p[i - 1])) * L[i]\n        return x\n\n    # ==============================================================================\n    #                    COMPUTE ARRAYS\n    # ==============================================================================\n    roundof = 6  # verts will not give precisely the value but rather 0.1000009 (in order to make\n    # np.where () work we have to round of, roughly in the dimension of the gridsize)\n    N = [int((b[i] - a[i]) / gridsize[i]) for i in range(dim)]\n\n    #    L = [N[i]-1   for i in range(dim)]\n    def ha(x):\n        return np.array([gridsize[0] * x[0], gridsize[1] * x[1]])\n\n    a_i = [a[0] - eps_i, a[1] - eps_i]\n    b_i = np.around([b[0] + eps_i, b[1] + eps_i], decimals=roundof)\n    N_i = [int(np.around((b_i[i] - a_i[i]) / gridsize[i])) + 1 for i in range(dim)]\n\n    # -----------------------------------------------------------------------------#\n    \"\"\" VERTS \"\"\"\n\n    def fun(k):\n        return np.around(np.array(a_i) + ha(iE(k, N_i)), decimals=roundof)\n\n    pool = Pool(processes=num_cores)\n    verts = np.array(list(pool.map(fun, range(np.prod(N_i)))))  # np.array([  for k in range(np.prod(N_i))])\n    pool.close()\n    pool.join()\n    pool.clear()\n    #    print verts\n    # -----------------------------------------------------------------------------#\n    \"\"\" OMEGA \"\"\"  # +  ha(iE(0,N)\n    k_0 = np.where(np.all(verts[:, 0:2] == np.around(np.array(a), decimals=roundof).tolist(), axis=1))[0][0]\n    omega = [k_0 + k + j * N_i[1] for k in range(N[1]) for j in range(N[0])]  # pool.map(om, range(num_omega))\n    ####-----------------------------------------------------------------------------#\n    \"\"\" OMEGA_I \"\"\"\n    omega_i = list(set(range(len(verts))) - set(omega) - set(np.where(verts[:, 0] == b_i[0])[0]) - set(\n        np.where(verts[:, 1] == b_i[1])[0]))\n    ###-----------------------------------------------------------------------------#\n    # \"\"\" NODES \"\"\"\n    nodes = omega\n    ##-----------------------------------------------------------------------------#\n    \"\"\" OMEGA \"\"\"\n    omega = np.zeros((2 * len(nodes), 3), dtype=int)\n\n    for j in range(len(nodes)):\n        k = nodes[j]\n        omega[2 * j,] = np.array([k, k + N_i[1] + 1, k + 1])  # clockwise\n        omega[2 * j + 1,] = np.array([k, k + N_i[1], k + N_i[1] + 1])  # clockwise\n\n    \"\"\" OMEGA_i \"\"\"\n    Omega_i = np.zeros((2 * len(omega_i), 3), dtype=int)\n\n    for j in range(len(omega_i)):\n        k = omega_i[j]\n        Omega_i[2 * j,] = np.array([k, k + N_i[1] + 1, k + 1])  # clockwise\n        Omega_i[2 * j + 1,] = np.array([k, k + N_i[1], k + N_i[1] + 1])  # clockwise\n\n    omega_i = Omega_i\n\n    ##-----------------------------------------------------------------------------#\n    \"\"\" BOUNDARY \"\"\"\n    boundary1 = [k_0 + kk for kk in range(N[0])]\n    boundary2 = [k_0 + N[1] * N_i[0] + kkk for kkk in range(N[0] + 1)]\n    boundary3 = [k_0 + j * N_i[0] for j in range(N[1])]\n    boundary4 = [k_0 + N[0] + j * N_i[0] for j in range(N[1])]\n\n    boundary = np.unique(boundary1 + boundary2 + boundary3 + boundary4)\n\n    ##-----------------------------------------------------------------------------#\n    aux = np.zeros((len(omega), 4), dtype=int)\n    aux[:, 1:] = omega\n    aux[:, 0] = 1 * np.ones(len(omega), dtype=int)\n    omega = aux\n\n    aux = np.zeros((len(omega_i), 4), dtype=int)\n    aux[:, 1:] = omega_i\n    aux[:, 0] = 2 * np.ones(len(omega_i), dtype=int)\n    omega_i = aux\n\n    ##-----------------------------------------------------------------------------#\n    \"\"\" TRIANGLES \"\"\"\n    triangles = np.vstack((omega, omega_i))\n\n    \"\"\" NODES \"\"\"\n    num_omega = np.shape(omega)[0]\n    nodes = np.unique(omega[:, 1:4].reshape(3 * num_omega))\n\n    ##-----------------------------------------------------------------------------#\n    \"\"\" PERMUTE VERTS TO SORT OMEGA_I TO THE END and ADAPT TRIANGLES etc \"\"\"\n    nodes_inner = list(set(nodes) - set(boundary))\n    nodes_rest = list(set(range(len(verts))) - set(nodes_inner) - set(boundary))\n    verts = np.vstack((verts[nodes_inner], verts[boundary], verts[nodes_rest]))\n\n    new_order = nodes_inner + list(boundary) + nodes_rest\n\n    def permutation(i):\n        return new_order.index(i)\n\n    triangles_old = triangles\n\n    triangles = np.zeros(np.shape(triangles_old), dtype=int)\n    triangles[:, 0] = triangles_old[:, 0]\n\n    for i in range(np.shape(triangles_old)[0]):\n        for j in range(1, 4):\n            triangles[i, j] = int(permutation(triangles_old[i, j]))\n\n    omega = triangles[np.where(triangles[:, 0] != 2)[0]]\n    # plot omega\n    #    for i in range(len(omega)):\n    #        plt.gca().add_patch(plt.Polygon(verts[omega[i,1:]], closed=True, fill = True, color = 'blue', alpha = 0.2))\n\n    boundary = list(range(len(nodes_inner), len(nodes_inner) + len(boundary)))\n    nodes = list(range(len(nodes_inner))) + list(boundary)\n\n    # PLOT verts\n    #    plt.plot(verts[nodes][:,0], verts[nodes][:,1], 'bo')\n    #    plt.plot(verts[len(nodes):][:,0], verts[len(nodes):][:,1], 'rx')\n\n    \"\"\" SUPPORT (subset omega)\"\"\"\n    support = []  # [list(np.where(omega[:,1:4] == aa)[0]) for aa in nodes]\n\n    # --------------------------------------------------------------------------\n    \"\"\" Neighboring nodes x_j of x_k for which j<=k (subset of nodes)\"\"\"\n    NHD = []\n    # for k in range(len(nodes)):\n    #     nhd = list(set(np.unique(triangles[support[k]][:,1:])) & set(omega[:,1:].reshape(3*len(omega)))) # subset of verts, intersect with omega, since nodes only are in omega\n    #     #convert nhd from subset of verts into subset of nodes and take only those<=k\n    #     aux = np.array([np.where(np.all(verts[nodes] == verts[j],axis=1))[0][0] for j in nhd]  )\n    #     NHD += [aux[aux<=k].tolist()]\n    # --------------------------------------------------------------------------\n    \"\"\" HASH TABLE (subset triangles)\"\"\"\n    bary = (verts[triangles[:, 1]] + verts[triangles[:, 2]] + verts[triangles[:, 3]]) / 3.\n    hash_table = []  # [np.where(norm((bary-np.repeat(verts[nodes[i]][:,np.newaxis], len(bary), axis = 1).transpose()).transpose())<=(eps+diam))[0].tolist() for i in range(len(nodes))]\n\n    # --------------------------------------------------------------------------\n    \"\"\" HASH TABLE_nodes (subset nodes)\"\"\"\n    #    hash_table_nodes = [list(set(np.where(norm((verts[nodes]-np.repeat(verts[nodes[i]][:,np.newaxis], len(nodes), axis = 1).transpose()).transpose())<=(eps+diam))[0].tolist())&set(range(i+1))) for i in range(len(nodes))]\n\n    \"\"\" HASH TABLE_approx (= hash table bary without puffer)\"\"\"\n    hash_table_approx = []  # [np.where(norm((bary-np.repeat(bary[i][:,np.newaxis], len(bary), axis = 1).transpose()).transpose())<=(eps))[0].tolist() for i in range(len(bary))]\n    # --------------------------------------------------------------------------\n    \"\"\" HASH TABLE (subset 0:len(bary))\"\"\"\n    hash_table_bary = []  # [np.where(norm((bary-np.repeat(bary[i][:,np.newaxis], len(bary), axis = 1).transpose()).transpose())<=(eps+ diam))[0].tolist() for i in range(len(bary))]\n\n    # --------------------------------------------------------------------------\n    \"\"\" BOUNDARY_nodes (subset 0:len(nodes) )\"\"\"\n    bdry_nodes = [nodes.index(i) for i in boundary]\n\n    # --------------------------------------------------------------------------\n    \"\"\" SHAPE INTERFACE (subset 0:len(verts) )\"\"\"\n    interface = []  # np.unique(lines[np.where(lines[:,0]==12)][:,1:]).tolist()\n\n    # ------------------------------------------------------------------------------\n    \"\"\" BUILDING MESH CLASS \"\"\"\n    proc_mesh_data = [triangles, omega, verts, hash_table, boundary, nodes, NHD, diam, support, hash_table_approx, bary,\n                      bdry_nodes, hash_table_bary, interface, [], len(verts), len(triangles), len(omega), len(nodes)]\n    mesh = Mesh(proc_mesh_data)\n    # ------------------------------------------------------------------------------\n    return mesh, proc_mesh_data
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- ../Rates2D/MESH_nonreg.py	(revision b58f426ba4ba71178accbbade003703e84c118d6)
+++ ../Rates2D/MESH_nonreg.py	(date 1595854993986)
@@ -56,6 +56,40 @@
         self.shape_interface = proc_mesh_data[6]
 
 
+def prepare_mesh_DD_gmsh(h, geofile = "unit_square"):
+
+    os.system('gmsh mesh/' + geofile + '.geo -v 0 -2 -clscale ' + str(h) + ' -o mesh/' + geofile + '.msh')
+    verts, lines, triangles = bib.read_mesh('mesh/' + geofile + '.msh')
+    verts = verts[:, 0:2]
+    sort_indices = np.argsort(np.linalg.norm(verts - np.ones(2) * 0.5, axis=1, ord=np.inf))
+    verts = verts[sort_indices]
+    sort_indices_inv = np.arange(len(sort_indices))[np.argsort(sort_indices)]
+    def f(n):
+        return sort_indices_inv[n]
+    triangles[:, 1:] = f(triangles[:, 1:])
+    boundary = np.where(np.linalg.norm(verts - np.ones(2) * 0.5, axis=1, ord=np.inf) == 0.5)[0]
+    nodes = np.where(np.linalg.norm(verts - np.ones(2) * 0.5, axis=1, ord=np.inf) <= 0.5)[0]
+    bary = (verts[triangles[:, 1]] + verts[triangles[:, 2]] + verts[triangles[:, 3]]) / 3.
+    new_omega = list(np.where(np.linalg.norm(bary - np.ones(1) * 0.5, axis=1, ord=np.inf) < 0.5)[0])
+    new_omega_i = list(set(range(len(triangles))) - set(new_omega))
+    triangles[new_omega, 0] = 1
+    triangles[new_omega_i, 0] = 2
+    omega = triangles[new_omega]
+    def diam(T):
+        length_of_edges = np.array(
+            [np.linalg.norm(T[0] - T[1]), np.linalg.norm(T[0] - T[2]), np.linalg.norm(T[1] - T[2])])
+        return np.max(length_of_edges)
+
+    diameter = [diam(np.array([verts[triangles[i,][1]], verts[triangles[i,][2]], verts[triangles[i,][3]]])) for i in
+                range(len(triangles))]
+    diam = np.max(diameter)
+    proc_mesh_data = [triangles, omega, verts, [], boundary, nodes, [], diameter, [], [], bary,
+                      boundary, [], [], [], len(verts), len(triangles), len(omega), len(nodes)]
+    mesh = Mesh(proc_mesh_data)
+    return mesh, proc_mesh_data
+
+
+
 def prepare_mesh_gmsh(h, geofile = "unit_square"):
 
     os.system('gmsh mesh/' + geofile + '.geo -v 0 -2 -clscale ' + str(h) + ' -o mesh/' + geofile + '.msh')
Index: ../Rates2D/MAIN_2d.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import examples.Rates2D.ASSEMBLY_nonreg as assembly\nimport examples.Rates2D.MassMatrix as massmat\nimport examples.Rates2D.SOLVE_nonreg as solve\nimport examples.Rates2D.L2_rates_nonreg_scipyinterp as l2rates\n\n\nif __name__ == \"__main__\":\n\n    assembly.main()\n    massmat.main()\n    solve.main()\n    l2rates.main()
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- ../Rates2D/MAIN_2d.py	(revision b58f426ba4ba71178accbbade003703e84c118d6)
+++ ../Rates2D/MAIN_2d.py	(date 1587714388160)
@@ -1,12 +1,12 @@
 import examples.Rates2D.ASSEMBLY_nonreg as assembly
 import examples.Rates2D.MassMatrix as massmat
 import examples.Rates2D.SOLVE_nonreg as solve
-import examples.Rates2D.L2_rates_nonreg_scipyinterp as l2rates
+import examples.Rates2D.L2_rates_nonreg_NEW as l2rates
 
 
 if __name__ == "__main__":
 
     assembly.main()
-    massmat.main()
+    # massmat.main()
     solve.main()
     l2rates.main()
\ No newline at end of file
